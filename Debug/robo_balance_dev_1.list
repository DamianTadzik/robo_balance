
robo_balance_dev_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  0800a630  0800a630  0001a630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abd8  0800abd8  00020274  2**0
                  CONTENTS
  4 .ARM          00000000  0800abd8  0800abd8  00020274  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800abd8  0800abd8  00020274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abd8  0800abd8  0001abd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abdc  0800abdc  0001abdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  0800abe0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  20000278  0800ae54  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005fc  0800ae54  000205fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011fb7  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029b0  00000000  00000000  0003225b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  00034c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd8  00000000  00000000  00035d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000041f7  00000000  00000000  00036d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000145bd  00000000  00000000  0003af0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca07c  00000000  00000000  0004f4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00119548  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059f0  00000000  00000000  00119598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000278 	.word	0x20000278
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a618 	.word	0x0800a618

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000027c 	.word	0x2000027c
 80001cc:	0800a618 	.word	0x0800a618

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfe:	4b3e      	ldr	r3, [pc, #248]	; (8000cf8 <MX_GPIO_Init+0x110>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	4a3d      	ldr	r2, [pc, #244]	; (8000cf8 <MX_GPIO_Init+0x110>)
 8000c04:	f043 0304 	orr.w	r3, r3, #4
 8000c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0a:	4b3b      	ldr	r3, [pc, #236]	; (8000cf8 <MX_GPIO_Init+0x110>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	4b38      	ldr	r3, [pc, #224]	; (8000cf8 <MX_GPIO_Init+0x110>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1a:	4a37      	ldr	r2, [pc, #220]	; (8000cf8 <MX_GPIO_Init+0x110>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c22:	4b35      	ldr	r3, [pc, #212]	; (8000cf8 <MX_GPIO_Init+0x110>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	4b32      	ldr	r3, [pc, #200]	; (8000cf8 <MX_GPIO_Init+0x110>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c32:	4a31      	ldr	r2, [pc, #196]	; (8000cf8 <MX_GPIO_Init+0x110>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3a:	4b2f      	ldr	r3, [pc, #188]	; (8000cf8 <MX_GPIO_Init+0x110>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_L_2_Pin|EN_R_2_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2190      	movs	r1, #144	; 0x90
 8000c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4e:	f002 ff0f 	bl	8003a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_R_1_Pin|EN_L_1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	210b      	movs	r1, #11
 8000c56:	4829      	ldr	r0, [pc, #164]	; (8000cfc <MX_GPIO_Init+0x114>)
 8000c58:	f002 ff0a 	bl	8003a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = EN_L_2_Pin|EN_R_2_Pin;
 8000c5c:	2390      	movs	r3, #144	; 0x90
 8000c5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	f107 030c 	add.w	r3, r7, #12
 8000c70:	4619      	mov	r1, r3
 8000c72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c76:	f002 fd91 	bl	800379c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = EN_R_1_Pin|EN_L_1_Pin|LD3_Pin;
 8000c7a:	230b      	movs	r3, #11
 8000c7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	4619      	mov	r1, r3
 8000c90:	481a      	ldr	r0, [pc, #104]	; (8000cfc <MX_GPIO_Init+0x114>)
 8000c92:	f002 fd83 	bl	800379c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BTN_OK_Pin|BTN_NO_Pin|BTN_LE_Pin;
 8000c96:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c9c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ca0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca6:	f107 030c 	add.w	r3, r7, #12
 8000caa:	4619      	mov	r1, r3
 8000cac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb0:	f002 fd74 	bl	800379c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_RI_Pin;
 8000cb4:	2320      	movs	r3, #32
 8000cb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cb8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_RI_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 030c 	add.w	r3, r7, #12
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	480c      	ldr	r0, [pc, #48]	; (8000cfc <MX_GPIO_Init+0x114>)
 8000cca:	f002 fd67 	bl	800379c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 12, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	210c      	movs	r1, #12
 8000cd2:	2017      	movs	r0, #23
 8000cd4:	f002 fd2b 	bl	800372e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cd8:	2017      	movs	r0, #23
 8000cda:	f002 fd44 	bl	8003766 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 12, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	210c      	movs	r1, #12
 8000ce2:	2028      	movs	r0, #40	; 0x28
 8000ce4:	f002 fd23 	bl	800372e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ce8:	2028      	movs	r0, #40	; 0x28
 8000cea:	f002 fd3c 	bl	8003766 <HAL_NVIC_EnableIRQ>

}
 8000cee:	bf00      	nop
 8000cf0:	3720      	adds	r7, #32
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	48000400 	.word	0x48000400

08000d00 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af02      	add	r7, sp, #8
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	f023 030f 	bic.w	r3, r3, #15
 8000d10:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	011b      	lsls	r3, r3, #4
 8000d16:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
 8000d1a:	f043 030c 	orr.w	r3, r3, #12
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
 8000d24:	f043 0308 	orr.w	r3, r3, #8
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000d2c:	7bbb      	ldrb	r3, [r7, #14]
 8000d2e:	f043 030c 	orr.w	r3, r3, #12
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000d36:	7bbb      	ldrb	r3, [r7, #14]
 8000d38:	f043 0308 	orr.w	r3, r3, #8
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000d40:	f107 0208 	add.w	r2, r7, #8
 8000d44:	2364      	movs	r3, #100	; 0x64
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	2304      	movs	r3, #4
 8000d4a:	214e      	movs	r1, #78	; 0x4e
 8000d4c:	4803      	ldr	r0, [pc, #12]	; (8000d5c <lcd_send_cmd+0x5c>)
 8000d4e:	f002 ff69 	bl	8003c24 <HAL_I2C_Master_Transmit>
}
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000294 	.word	0x20000294

08000d60 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af02      	add	r7, sp, #8
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	f023 030f 	bic.w	r3, r3, #15
 8000d70:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	011b      	lsls	r3, r3, #4
 8000d76:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	f043 030d 	orr.w	r3, r3, #13
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	f043 0309 	orr.w	r3, r3, #9
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000d8c:	7bbb      	ldrb	r3, [r7, #14]
 8000d8e:	f043 030d 	orr.w	r3, r3, #13
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000d96:	7bbb      	ldrb	r3, [r7, #14]
 8000d98:	f043 0309 	orr.w	r3, r3, #9
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000da0:	f107 0208 	add.w	r2, r7, #8
 8000da4:	2364      	movs	r3, #100	; 0x64
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	2304      	movs	r3, #4
 8000daa:	214e      	movs	r1, #78	; 0x4e
 8000dac:	4803      	ldr	r0, [pc, #12]	; (8000dbc <lcd_send_data+0x5c>)
 8000dae:	f002 ff39 	bl	8003c24 <HAL_I2C_Master_Transmit>
}
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000294 	.word	0x20000294

08000dc0 <lcd_clear>:

void lcd_clear (void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000dc6:	2080      	movs	r0, #128	; 0x80
 8000dc8:	f7ff ff9a 	bl	8000d00 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	e005      	b.n	8000dde <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000dd2:	2020      	movs	r0, #32
 8000dd4:	f7ff ffc4 	bl	8000d60 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b45      	cmp	r3, #69	; 0x45
 8000de2:	ddf6      	ble.n	8000dd2 <lcd_clear+0x12>
	}
}
 8000de4:	bf00      	nop
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	6039      	str	r1, [r7, #0]
    switch (row)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d003      	beq.n	8000e06 <lcd_put_cur+0x18>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d005      	beq.n	8000e10 <lcd_put_cur+0x22>
 8000e04:	e009      	b.n	8000e1a <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e0c:	603b      	str	r3, [r7, #0]
            break;
 8000e0e:	e004      	b.n	8000e1a <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000e16:	603b      	str	r3, [r7, #0]
            break;
 8000e18:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff6e 	bl	8000d00 <lcd_send_cmd>
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <lcd_init>:


void lcd_init (void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000e30:	2032      	movs	r0, #50	; 0x32
 8000e32:	f002 fb7d 	bl	8003530 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000e36:	2030      	movs	r0, #48	; 0x30
 8000e38:	f7ff ff62 	bl	8000d00 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000e3c:	2005      	movs	r0, #5
 8000e3e:	f002 fb77 	bl	8003530 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000e42:	2030      	movs	r0, #48	; 0x30
 8000e44:	f7ff ff5c 	bl	8000d00 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f002 fb71 	bl	8003530 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000e4e:	2030      	movs	r0, #48	; 0x30
 8000e50:	f7ff ff56 	bl	8000d00 <lcd_send_cmd>
	HAL_Delay(10);
 8000e54:	200a      	movs	r0, #10
 8000e56:	f002 fb6b 	bl	8003530 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000e5a:	2020      	movs	r0, #32
 8000e5c:	f7ff ff50 	bl	8000d00 <lcd_send_cmd>
	HAL_Delay(10);
 8000e60:	200a      	movs	r0, #10
 8000e62:	f002 fb65 	bl	8003530 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000e66:	2028      	movs	r0, #40	; 0x28
 8000e68:	f7ff ff4a 	bl	8000d00 <lcd_send_cmd>
	HAL_Delay(1);
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	f002 fb5f 	bl	8003530 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000e72:	2008      	movs	r0, #8
 8000e74:	f7ff ff44 	bl	8000d00 <lcd_send_cmd>
	HAL_Delay(1);
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f002 fb59 	bl	8003530 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f7ff ff3e 	bl	8000d00 <lcd_send_cmd>
	HAL_Delay(1);
 8000e84:	2001      	movs	r0, #1
 8000e86:	f002 fb53 	bl	8003530 <HAL_Delay>
	HAL_Delay(1);
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f002 fb50 	bl	8003530 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000e90:	2006      	movs	r0, #6
 8000e92:	f7ff ff35 	bl	8000d00 <lcd_send_cmd>
	HAL_Delay(1);
 8000e96:	2001      	movs	r0, #1
 8000e98:	f002 fb4a 	bl	8003530 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000e9c:	200c      	movs	r0, #12
 8000e9e:	f7ff ff2f 	bl	8000d00 <lcd_send_cmd>
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000eae:	e006      	b.n	8000ebe <lcd_send_string+0x18>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	1c5a      	adds	r2, r3, #1
 8000eb4:	607a      	str	r2, [r7, #4]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff51 	bl	8000d60 <lcd_send_data>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1f4      	bne.n	8000eb0 <lcd_send_string+0xa>
}
 8000ec6:	bf00      	nop
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000ed6:	4a1c      	ldr	r2, [pc, #112]	; (8000f48 <MX_I2C1_Init+0x78>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000eda:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000edc:	4a1b      	ldr	r2, [pc, #108]	; (8000f4c <MX_I2C1_Init+0x7c>)
 8000ede:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ee0:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eec:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f0a:	480e      	ldr	r0, [pc, #56]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000f0c:	f002 fdfa 	bl	8003b04 <HAL_I2C_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f16:	f001 fb1b 	bl	8002550 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4809      	ldr	r0, [pc, #36]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000f1e:	f003 fc49 	bl	80047b4 <HAL_I2CEx_ConfigAnalogFilter>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f28:	f001 fb12 	bl	8002550 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4805      	ldr	r0, [pc, #20]	; (8000f44 <MX_I2C1_Init+0x74>)
 8000f30:	f003 fc8b 	bl	800484a <HAL_I2CEx_ConfigDigitalFilter>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f3a:	f001 fb09 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000294 	.word	0x20000294
 8000f48:	40005400 	.word	0x40005400
 8000f4c:	10707dbc 	.word	0x10707dbc

08000f50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b09e      	sub	sp, #120	; 0x78
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f68:	f107 0310 	add.w	r3, r7, #16
 8000f6c:	2254      	movs	r2, #84	; 0x54
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f006 f8ff 	bl	8007174 <memset>
  if(i2cHandle->Instance==I2C1)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a1e      	ldr	r2, [pc, #120]	; (8000ff4 <HAL_I2C_MspInit+0xa4>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d135      	bne.n	8000fec <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f80:	2340      	movs	r3, #64	; 0x40
 8000f82:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f88:	f107 0310 	add.w	r3, r7, #16
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f004 fb0d 	bl	80055ac <HAL_RCCEx_PeriphCLKConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f98:	f001 fada 	bl	8002550 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9c:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <HAL_I2C_MspInit+0xa8>)
 8000f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa0:	4a15      	ldr	r2, [pc, #84]	; (8000ff8 <HAL_I2C_MspInit+0xa8>)
 8000fa2:	f043 0302 	orr.w	r3, r3, #2
 8000fa6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa8:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <HAL_I2C_MspInit+0xa8>)
 8000faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fb4:	23c0      	movs	r3, #192	; 0xc0
 8000fb6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb8:	2312      	movs	r3, #18
 8000fba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fcc:	4619      	mov	r1, r3
 8000fce:	480b      	ldr	r0, [pc, #44]	; (8000ffc <HAL_I2C_MspInit+0xac>)
 8000fd0:	f002 fbe4 	bl	800379c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <HAL_I2C_MspInit+0xa8>)
 8000fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd8:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <HAL_I2C_MspInit+0xa8>)
 8000fda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fde:	6593      	str	r3, [r2, #88]	; 0x58
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <HAL_I2C_MspInit+0xa8>)
 8000fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000fec:	bf00      	nop
 8000fee:	3778      	adds	r7, #120	; 0x78
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40005400 	.word	0x40005400
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	48000400 	.word	0x48000400

08001000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001004:	f002 fa1f 	bl	8003446 <HAL_Init>

  /* USER CODE BEGIN Init */
  current_PID = &angle_PID;
 8001008:	4b5f      	ldr	r3, [pc, #380]	; (8001188 <main+0x188>)
 800100a:	4a60      	ldr	r2, [pc, #384]	; (800118c <main+0x18c>)
 800100c:	601a      	str	r2, [r3, #0]
  angle_PID.id = 1;
 800100e:	4b5f      	ldr	r3, [pc, #380]	; (800118c <main+0x18c>)
 8001010:	2201      	movs	r2, #1
 8001012:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  position_PID.id = 2;
 8001016:	4b5e      	ldr	r3, [pc, #376]	; (8001190 <main+0x190>)
 8001018:	2202      	movs	r2, #2
 800101a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  direction_PID.id = 3;
 800101e:	4b5d      	ldr	r3, [pc, #372]	; (8001194 <main+0x194>)
 8001020:	2203      	movs	r2, #3
 8001022:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  strncpy(angle_PID.name, "angle    \0", 16);
 8001026:	2210      	movs	r2, #16
 8001028:	495b      	ldr	r1, [pc, #364]	; (8001198 <main+0x198>)
 800102a:	485c      	ldr	r0, [pc, #368]	; (800119c <main+0x19c>)
 800102c:	f006 fd34 	bl	8007a98 <strncpy>
  strncpy(position_PID.name, "position \0", 16);
 8001030:	2210      	movs	r2, #16
 8001032:	495b      	ldr	r1, [pc, #364]	; (80011a0 <main+0x1a0>)
 8001034:	485b      	ldr	r0, [pc, #364]	; (80011a4 <main+0x1a4>)
 8001036:	f006 fd2f 	bl	8007a98 <strncpy>
  strncpy(direction_PID.name, "direction\0", 16);
 800103a:	2210      	movs	r2, #16
 800103c:	495a      	ldr	r1, [pc, #360]	; (80011a8 <main+0x1a8>)
 800103e:	485b      	ldr	r0, [pc, #364]	; (80011ac <main+0x1ac>)
 8001040:	f006 fd2a 	bl	8007a98 <strncpy>

  BTN.ok = BTN_not_pressed;
 8001044:	4b5a      	ldr	r3, [pc, #360]	; (80011b0 <main+0x1b0>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
  BTN.no = BTN_not_pressed;
 800104a:	4b59      	ldr	r3, [pc, #356]	; (80011b0 <main+0x1b0>)
 800104c:	2200      	movs	r2, #0
 800104e:	705a      	strb	r2, [r3, #1]
  BTN.left = BTN_not_pressed;
 8001050:	4b57      	ldr	r3, [pc, #348]	; (80011b0 <main+0x1b0>)
 8001052:	2200      	movs	r2, #0
 8001054:	709a      	strb	r2, [r3, #2]
  BTN.right = BTN_not_pressed;
 8001056:	4b56      	ldr	r3, [pc, #344]	; (80011b0 <main+0x1b0>)
 8001058:	2200      	movs	r2, #0
 800105a:	70da      	strb	r2, [r3, #3]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105c:	f000 f8b2 	bl	80011c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001060:	f7ff fdc2 	bl	8000be8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001064:	f7ff ff34 	bl	8000ed0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001068:	f001 ff60 	bl	8002f2c <MX_TIM1_Init>
  MX_TIM2_Init();
 800106c:	f001 ffb8 	bl	8002fe0 <MX_TIM2_Init>
  MX_TIM15_Init();
 8001070:	f002 f842 	bl	80030f8 <MX_TIM15_Init>
  MX_TIM7_Init();
 8001074:	f002 f808 	bl	8003088 <MX_TIM7_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_init();
 8001078:	f7ff fed8 	bl	8000e2c <lcd_init>
  lcd_put_cur(0, 0);
 800107c:	2100      	movs	r1, #0
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff feb5 	bl	8000dee <lcd_put_cur>
  lcd_send_string("Hello, world!");
 8001084:	484b      	ldr	r0, [pc, #300]	; (80011b4 <main+0x1b4>)
 8001086:	f7ff ff0e 	bl	8000ea6 <lcd_send_string>

  MPU6050_Init(&hi2c1);
 800108a:	484b      	ldr	r0, [pc, #300]	; (80011b8 <main+0x1b8>)
 800108c:	f001 fa6c 	bl	8002568 <MPU6050_Init>
  HAL_Delay(1000);
 8001090:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001094:	f002 fa4c 	bl	8003530 <HAL_Delay>
  while (1)
  {
	  switch (current_state)
 8001098:	4b48      	ldr	r3, [pc, #288]	; (80011bc <main+0x1bc>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	3b01      	subs	r3, #1
 800109e:	2b0a      	cmp	r3, #10
 80010a0:	d86d      	bhi.n	800117e <main+0x17e>
 80010a2:	a201      	add	r2, pc, #4	; (adr r2, 80010a8 <main+0xa8>)
 80010a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a8:	08001179 	.word	0x08001179
 80010ac:	080010d5 	.word	0x080010d5
 80010b0:	080010db 	.word	0x080010db
 80010b4:	080010e1 	.word	0x080010e1
 80010b8:	080010e7 	.word	0x080010e7
 80010bc:	080010ed 	.word	0x080010ed
 80010c0:	0800113d 	.word	0x0800113d
 80010c4:	08001149 	.word	0x08001149
 80010c8:	08001155 	.word	0x08001155
 80010cc:	08001161 	.word	0x08001161
 80010d0:	0800116d 	.word	0x0800116d
	  {
		case ENCODER_DISPLAY_state:
			stateENCODER();
 80010d4:	f000 fa4c 	bl	8001570 <stateENCODER>
			break;
 80010d8:	e054      	b.n	8001184 <main+0x184>
		case IMU_DISPLAY_state:
			stateIMU();
 80010da:	f000 fc09 	bl	80018f0 <stateIMU>
			break;
 80010de:	e051      	b.n	8001184 <main+0x184>
		case EEPROM_RW_state:
			stateEEPROM();
 80010e0:	f000 fc8a 	bl	80019f8 <stateEEPROM>
			break;
 80010e4:	e04e      	b.n	8001184 <main+0x184>
		case HOME_state:
			stateHOME();
 80010e6:	f000 fccf 	bl	8001a88 <stateHOME>
			break;
 80010ea:	e04b      	b.n	8001184 <main+0x184>
		case REG_state:
			switch (current_choice)
 80010ec:	4b34      	ldr	r3, [pc, #208]	; (80011c0 <main+0x1c0>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b03      	cmp	r3, #3
 80010f2:	d018      	beq.n	8001126 <main+0x126>
 80010f4:	2b03      	cmp	r3, #3
 80010f6:	dc1f      	bgt.n	8001138 <main+0x138>
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d002      	beq.n	8001102 <main+0x102>
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d009      	beq.n	8001114 <main+0x114>
			case DIRECTION_choice:
				current_PID = &direction_PID;
				stateREG(current_PID);
				break;
			default:
				break;
 8001100:	e01a      	b.n	8001138 <main+0x138>
				current_PID = &angle_PID;
 8001102:	4b21      	ldr	r3, [pc, #132]	; (8001188 <main+0x188>)
 8001104:	4a21      	ldr	r2, [pc, #132]	; (800118c <main+0x18c>)
 8001106:	601a      	str	r2, [r3, #0]
				stateREG(current_PID);
 8001108:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <main+0x188>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f000 fd07 	bl	8001b20 <stateREG>
				break;
 8001112:	e012      	b.n	800113a <main+0x13a>
				current_PID = &position_PID;
 8001114:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <main+0x188>)
 8001116:	4a1e      	ldr	r2, [pc, #120]	; (8001190 <main+0x190>)
 8001118:	601a      	str	r2, [r3, #0]
				stateREG(current_PID);
 800111a:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <main+0x188>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f000 fcfe 	bl	8001b20 <stateREG>
				break;
 8001124:	e009      	b.n	800113a <main+0x13a>
				current_PID = &direction_PID;
 8001126:	4b18      	ldr	r3, [pc, #96]	; (8001188 <main+0x188>)
 8001128:	4a1a      	ldr	r2, [pc, #104]	; (8001194 <main+0x194>)
 800112a:	601a      	str	r2, [r3, #0]
				stateREG(current_PID);
 800112c:	4b16      	ldr	r3, [pc, #88]	; (8001188 <main+0x188>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f000 fcf5 	bl	8001b20 <stateREG>
				break;
 8001136:	e000      	b.n	800113a <main+0x13a>
				break;
 8001138:	bf00      	nop
			}
			break;
 800113a:	e023      	b.n	8001184 <main+0x184>
		case KP_state:
			stateKP(current_PID);
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <main+0x188>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f000 fd99 	bl	8001c78 <stateKP>
			break;
 8001146:	e01d      	b.n	8001184 <main+0x184>
		case KI_state:
			stateKI(current_PID);
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <main+0x188>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f000 fe1f 	bl	8001d90 <stateKI>
			break;
 8001152:	e017      	b.n	8001184 <main+0x184>
		case KD_state:
			stateKD(current_PID);
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <main+0x188>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f000 fea5 	bl	8001ea8 <stateKD>
			break;
 800115e:	e011      	b.n	8001184 <main+0x184>
		case INT_state:
			stateINT(current_PID);
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <main+0x188>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f000 ff2b 	bl	8001fc0 <stateINT>
			break;
 800116a:	e00b      	b.n	8001184 <main+0x184>
		case TRG_state:
			stateTRG(current_PID);
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <main+0x188>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f000 ffb1 	bl	80020d8 <stateTRG>
			break;
 8001176:	e005      	b.n	8001184 <main+0x184>
		case BALANCE_state:
			stateBALANCE();
 8001178:	f000 f8da 	bl	8001330 <stateBALANCE>
			break;
 800117c:	e002      	b.n	8001184 <main+0x184>
		default:
			stateNULL();
 800117e:	f000 f873 	bl	8001268 <stateNULL>
			break;
 8001182:	bf00      	nop
	  switch (current_state)
 8001184:	e788      	b.n	8001098 <main+0x98>
 8001186:	bf00      	nop
 8001188:	20000498 	.word	0x20000498
 800118c:	20000360 	.word	0x20000360
 8001190:	200003c8 	.word	0x200003c8
 8001194:	20000430 	.word	0x20000430
 8001198:	0800a630 	.word	0x0800a630
 800119c:	200003b0 	.word	0x200003b0
 80011a0:	0800a63c 	.word	0x0800a63c
 80011a4:	20000418 	.word	0x20000418
 80011a8:	0800a648 	.word	0x0800a648
 80011ac:	20000480 	.word	0x20000480
 80011b0:	200002ec 	.word	0x200002ec
 80011b4:	0800a654 	.word	0x0800a654
 80011b8:	20000294 	.word	0x20000294
 80011bc:	20000000 	.word	0x20000000
 80011c0:	20000001 	.word	0x20000001

080011c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b096      	sub	sp, #88	; 0x58
 80011c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	2244      	movs	r2, #68	; 0x44
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f005 ffce 	bl	8007174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d8:	463b      	mov	r3, r7
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
 80011e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011ea:	f003 fb89 	bl	8004900 <HAL_PWREx_ControlVoltageScaling>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011f4:	f001 f9ac 	bl	8002550 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011f8:	2302      	movs	r3, #2
 80011fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001200:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001202:	2310      	movs	r3, #16
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001206:	2302      	movs	r3, #2
 8001208:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800120a:	2302      	movs	r3, #2
 800120c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800120e:	2301      	movs	r3, #1
 8001210:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001212:	2310      	movs	r3, #16
 8001214:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001216:	2307      	movs	r3, #7
 8001218:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800121a:	2302      	movs	r3, #2
 800121c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800121e:	2304      	movs	r3, #4
 8001220:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4618      	mov	r0, r3
 8001228:	f003 fbc0 	bl	80049ac <HAL_RCC_OscConfig>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001232:	f001 f98d 	bl	8002550 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001236:	230f      	movs	r3, #15
 8001238:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800123a:	2303      	movs	r3, #3
 800123c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800124a:	463b      	mov	r3, r7
 800124c:	2103      	movs	r1, #3
 800124e:	4618      	mov	r0, r3
 8001250:	f003 ffc0 	bl	80051d4 <HAL_RCC_ClockConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800125a:	f001 f979 	bl	8002550 <Error_Handler>
  }
}
 800125e:	bf00      	nop
 8001260:	3758      	adds	r7, #88	; 0x58
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <stateNULL>:

/* USER CODE BEGIN 4 */
void stateNULL(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 800126c:	4b28      	ldr	r3, [pc, #160]	; (8001310 <stateNULL+0xa8>)
 800126e:	781a      	ldrb	r2, [r3, #0]
 8001270:	4b28      	ldr	r3, [pc, #160]	; (8001314 <stateNULL+0xac>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	429a      	cmp	r2, r3
 8001276:	d016      	beq.n	80012a6 <stateNULL+0x3e>
	{
		previous_state = current_state;
 8001278:	4b25      	ldr	r3, [pc, #148]	; (8001310 <stateNULL+0xa8>)
 800127a:	781a      	ldrb	r2, [r3, #0]
 800127c:	4b25      	ldr	r3, [pc, #148]	; (8001314 <stateNULL+0xac>)
 800127e:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001280:	f7ff fd9e 	bl	8000dc0 <lcd_clear>
		lcd_put_cur(0, 0);
 8001284:	2100      	movs	r1, #0
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff fdb1 	bl	8000dee <lcd_put_cur>
		lcd_send_string("oops NULL state?");
 800128c:	4822      	ldr	r0, [pc, #136]	; (8001318 <stateNULL+0xb0>)
 800128e:	f7ff fe0a 	bl	8000ea6 <lcd_send_string>
		lcd_put_cur(1, 3);
 8001292:	2103      	movs	r1, #3
 8001294:	2001      	movs	r0, #1
 8001296:	f7ff fdaa 	bl	8000dee <lcd_put_cur>
		lcd_send_string("press ok");
 800129a:	4820      	ldr	r0, [pc, #128]	; (800131c <stateNULL+0xb4>)
 800129c:	f7ff fe03 	bl	8000ea6 <lcd_send_string>
		HAL_TIM_Base_Start_IT(&htim7);		//TIMER7
 80012a0:	481f      	ldr	r0, [pc, #124]	; (8001320 <stateNULL+0xb8>)
 80012a2:	f004 fcc3 	bl	8005c2c <HAL_TIM_Base_Start_IT>
	}
	if (tim7_20ms_flag)						//TIMER7
 80012a6:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <stateNULL+0xbc>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d006      	beq.n	80012be <stateNULL+0x56>
	{
		tim7_20ms_flag = TIM_no_interrupt; 	//TIMER7
 80012b0:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <stateNULL+0xbc>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80012b6:	2108      	movs	r1, #8
 80012b8:	481b      	ldr	r0, [pc, #108]	; (8001328 <stateNULL+0xc0>)
 80012ba:	f002 fbf1 	bl	8003aa0 <HAL_GPIO_TogglePin>
	}
	if (BTN.ok == BTN_pressed)
 80012be:	4b1b      	ldr	r3, [pc, #108]	; (800132c <stateNULL+0xc4>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d108      	bne.n	80012da <stateNULL+0x72>
	{
		BTN.ok = BTN_not_pressed;
 80012c8:	4b18      	ldr	r3, [pc, #96]	; (800132c <stateNULL+0xc4>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim7);		//TIMER7
 80012ce:	4814      	ldr	r0, [pc, #80]	; (8001320 <stateNULL+0xb8>)
 80012d0:	f004 fd00 	bl	8005cd4 <HAL_TIM_Base_Stop_IT>
		current_state = HOME_state;
 80012d4:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <stateNULL+0xa8>)
 80012d6:	2205      	movs	r2, #5
 80012d8:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.no == BTN_pressed) BTN.no = BTN_not_pressed;
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <stateNULL+0xc4>)
 80012dc:	785b      	ldrb	r3, [r3, #1]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d102      	bne.n	80012ea <stateNULL+0x82>
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <stateNULL+0xc4>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	705a      	strb	r2, [r3, #1]
	if (BTN.left == BTN_pressed) BTN.left = BTN_not_pressed;
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <stateNULL+0xc4>)
 80012ec:	789b      	ldrb	r3, [r3, #2]
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d102      	bne.n	80012fa <stateNULL+0x92>
 80012f4:	4b0d      	ldr	r3, [pc, #52]	; (800132c <stateNULL+0xc4>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	709a      	strb	r2, [r3, #2]
	if (BTN.right == BTN_pressed) BTN.right = BTN_not_pressed;
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <stateNULL+0xc4>)
 80012fc:	78db      	ldrb	r3, [r3, #3]
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b01      	cmp	r3, #1
 8001302:	d102      	bne.n	800130a <stateNULL+0xa2>
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <stateNULL+0xc4>)
 8001306:	2200      	movs	r2, #0
 8001308:	70da      	strb	r2, [r3, #3]
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000000 	.word	0x20000000
 8001314:	200002e8 	.word	0x200002e8
 8001318:	0800a664 	.word	0x0800a664
 800131c:	0800a678 	.word	0x0800a678
 8001320:	20000550 	.word	0x20000550
 8001324:	200002ea 	.word	0x200002ea
 8001328:	48000400 	.word	0x48000400
 800132c:	200002ec 	.word	0x200002ec

08001330 <stateBALANCE>:
void stateBALANCE(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 8001336:	4b7c      	ldr	r3, [pc, #496]	; (8001528 <stateBALANCE+0x1f8>)
 8001338:	781a      	ldrb	r2, [r3, #0]
 800133a:	4b7c      	ldr	r3, [pc, #496]	; (800152c <stateBALANCE+0x1fc>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d02c      	beq.n	800139c <stateBALANCE+0x6c>
	{
		previous_state = current_state;
 8001342:	4b79      	ldr	r3, [pc, #484]	; (8001528 <stateBALANCE+0x1f8>)
 8001344:	781a      	ldrb	r2, [r3, #0]
 8001346:	4b79      	ldr	r3, [pc, #484]	; (800152c <stateBALANCE+0x1fc>)
 8001348:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 800134a:	f7ff fd39 	bl	8000dc0 <lcd_clear>
		lcd_put_cur(0, 0);
 800134e:	2100      	movs	r1, #0
 8001350:	2000      	movs	r0, #0
 8001352:	f7ff fd4c 	bl	8000dee <lcd_put_cur>
		lcd_send_string("Balancing");
 8001356:	4876      	ldr	r0, [pc, #472]	; (8001530 <stateBALANCE+0x200>)
 8001358:	f7ff fda5 	bl	8000ea6 <lcd_send_string>
		lcd_put_cur(1, 0);
 800135c:	2100      	movs	r1, #0
 800135e:	2001      	movs	r0, #1
 8001360:	f7ff fd45 	bl	8000dee <lcd_put_cur>
		lcd_send_string("press no to exit");
 8001364:	4873      	ldr	r0, [pc, #460]	; (8001534 <stateBALANCE+0x204>)
 8001366:	f7ff fd9e 	bl	8000ea6 <lcd_send_string>
		HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);	// ENC TIMER1 START
 800136a:	213c      	movs	r1, #60	; 0x3c
 800136c:	4872      	ldr	r0, [pc, #456]	; (8001538 <stateBALANCE+0x208>)
 800136e:	f004 ff43 	bl	80061f8 <HAL_TIM_Encoder_Start>
		HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);	// ENC TIMER2 START
 8001372:	213c      	movs	r1, #60	; 0x3c
 8001374:	4871      	ldr	r0, [pc, #452]	; (800153c <stateBALANCE+0x20c>)
 8001376:	f004 ff3f 	bl	80061f8 <HAL_TIM_Encoder_Start>
		HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);	// PWM TIMER15 START
 800137a:	2100      	movs	r1, #0
 800137c:	4870      	ldr	r0, [pc, #448]	; (8001540 <stateBALANCE+0x210>)
 800137e:	f004 fd2f 	bl	8005de0 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);	// PWM TIMER15 START
 8001382:	2104      	movs	r1, #4
 8001384:	486e      	ldr	r0, [pc, #440]	; (8001540 <stateBALANCE+0x210>)
 8001386:	f004 fd2b 	bl	8005de0 <HAL_TIM_PWM_Start>
		setMotors(0, 0, 0, 0);	// STOP MOTORS
 800138a:	2300      	movs	r3, #0
 800138c:	2200      	movs	r2, #0
 800138e:	2100      	movs	r1, #0
 8001390:	2000      	movs	r0, #0
 8001392:	f000 ff43 	bl	800221c <setMotors>
		HAL_TIM_Base_Start_IT(&htim7);		// TIMER7 START
 8001396:	486b      	ldr	r0, [pc, #428]	; (8001544 <stateBALANCE+0x214>)
 8001398:	f004 fc48 	bl	8005c2c <HAL_TIM_Base_Start_IT>
	}
	if (tim7_20ms_flag)						// TIMER7 IF FLAG
 800139c:	4b6a      	ldr	r3, [pc, #424]	; (8001548 <stateBALANCE+0x218>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d07b      	beq.n	800149e <stateBALANCE+0x16e>
	{
		tim7_20ms_flag = TIM_no_interrupt; 		// TIMER7 FLAG ERASE
 80013a6:	4b68      	ldr	r3, [pc, #416]	; (8001548 <stateBALANCE+0x218>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]

		encd_left = (TIM2->CNT) - encd_reset;	// encoders read step diff
 80013ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	23ff      	movs	r3, #255	; 0xff
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	b21a      	sxth	r2, r3
 80013be:	4b63      	ldr	r3, [pc, #396]	; (800154c <stateBALANCE+0x21c>)
 80013c0:	801a      	strh	r2, [r3, #0]
		encd_right = (TIM1->CNT) - encd_reset;
 80013c2:	4b63      	ldr	r3, [pc, #396]	; (8001550 <stateBALANCE+0x220>)
 80013c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	23ff      	movs	r3, #255	; 0xff
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	b21a      	sxth	r2, r3
 80013d2:	4b60      	ldr	r3, [pc, #384]	; (8001554 <stateBALANCE+0x224>)
 80013d4:	801a      	strh	r2, [r3, #0]
		TIM2->CNT = encd_reset;
 80013d6:	22ff      	movs	r2, #255	; 0xff
 80013d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013dc:	625a      	str	r2, [r3, #36]	; 0x24
		TIM1->CNT = encd_reset;
 80013de:	22ff      	movs	r2, #255	; 0xff
 80013e0:	4b5b      	ldr	r3, [pc, #364]	; (8001550 <stateBALANCE+0x220>)
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24

		MPU6050_Read_All(&hi2c1, &MPU6050);		// MPU READ ANGLE KALMAN
 80013e4:	495c      	ldr	r1, [pc, #368]	; (8001558 <stateBALANCE+0x228>)
 80013e6:	485d      	ldr	r0, [pc, #372]	; (800155c <stateBALANCE+0x22c>)
 80013e8:	f001 f916 	bl	8002618 <MPU6050_Read_All>
		double ret = PID(MPU6050.KalmanAngleX, angle_PID.target_value, &angle_PID);	// PID
 80013ec:	4b5a      	ldr	r3, [pc, #360]	; (8001558 <stateBALANCE+0x228>)
 80013ee:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 80013f2:	4b5b      	ldr	r3, [pc, #364]	; (8001560 <stateBALANCE+0x230>)
 80013f4:	ed93 6b00 	vldr	d6, [r3]
 80013f8:	4859      	ldr	r0, [pc, #356]	; (8001560 <stateBALANCE+0x230>)
 80013fa:	eeb0 1a46 	vmov.f32	s2, s12
 80013fe:	eef0 1a66 	vmov.f32	s3, s13
 8001402:	eeb0 0a47 	vmov.f32	s0, s14
 8001406:	eef0 0a67 	vmov.f32	s1, s15
 800140a:	f000 ffbb 	bl	8002384 <PID>
 800140e:	ed87 0b00 	vstr	d0, [r7]

		duty_left = constrain((int16_t)ret, -999, 999);		// duty constraining
 8001412:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001416:	f7ff fb9f 	bl	8000b58 <__aeabi_d2iz>
 800141a:	4603      	mov	r3, r0
 800141c:	b21b      	sxth	r3, r3
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f880 	bl	8000524 <__aeabi_i2d>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	ed9f 2b3b 	vldr	d2, [pc, #236]	; 8001518 <stateBALANCE+0x1e8>
 800142c:	ed9f 1b3c 	vldr	d1, [pc, #240]	; 8001520 <stateBALANCE+0x1f0>
 8001430:	ec43 2b10 	vmov	d0, r2, r3
 8001434:	f000 ff7a 	bl	800232c <constrain>
 8001438:	ec53 2b10 	vmov	r2, r3, d0
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	f7ff fb8a 	bl	8000b58 <__aeabi_d2iz>
 8001444:	4603      	mov	r3, r0
 8001446:	b21a      	sxth	r2, r3
 8001448:	4b46      	ldr	r3, [pc, #280]	; (8001564 <stateBALANCE+0x234>)
 800144a:	801a      	strh	r2, [r3, #0]
		duty_right = constrain((int16_t)ret, -999, 999);	// duty constraining
 800144c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001450:	f7ff fb82 	bl	8000b58 <__aeabi_d2iz>
 8001454:	4603      	mov	r3, r0
 8001456:	b21b      	sxth	r3, r3
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff f863 	bl	8000524 <__aeabi_i2d>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	ed9f 2b2d 	vldr	d2, [pc, #180]	; 8001518 <stateBALANCE+0x1e8>
 8001466:	ed9f 1b2e 	vldr	d1, [pc, #184]	; 8001520 <stateBALANCE+0x1f0>
 800146a:	ec43 2b10 	vmov	d0, r2, r3
 800146e:	f000 ff5d 	bl	800232c <constrain>
 8001472:	ec53 2b10 	vmov	r2, r3, d0
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	f7ff fb6d 	bl	8000b58 <__aeabi_d2iz>
 800147e:	4603      	mov	r3, r0
 8001480:	b21a      	sxth	r2, r3
 8001482:	4b39      	ldr	r3, [pc, #228]	; (8001568 <stateBALANCE+0x238>)
 8001484:	801a      	strh	r2, [r3, #0]
		setMotors(duty_left, duty_right, 0, 0);
 8001486:	4b37      	ldr	r3, [pc, #220]	; (8001564 <stateBALANCE+0x234>)
 8001488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148c:	4618      	mov	r0, r3
 800148e:	4b36      	ldr	r3, [pc, #216]	; (8001568 <stateBALANCE+0x238>)
 8001490:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001494:	4619      	mov	r1, r3
 8001496:	2300      	movs	r3, #0
 8001498:	2200      	movs	r2, #0
 800149a:	f000 febf 	bl	800221c <setMotors>
	}
	if (BTN.ok == BTN_pressed) BTN.ok = BTN_not_pressed;
 800149e:	4b33      	ldr	r3, [pc, #204]	; (800156c <stateBALANCE+0x23c>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d102      	bne.n	80014ae <stateBALANCE+0x17e>
 80014a8:	4b30      	ldr	r3, [pc, #192]	; (800156c <stateBALANCE+0x23c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	701a      	strb	r2, [r3, #0]
	if (BTN.no == BTN_pressed)
 80014ae:	4b2f      	ldr	r3, [pc, #188]	; (800156c <stateBALANCE+0x23c>)
 80014b0:	785b      	ldrb	r3, [r3, #1]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d118      	bne.n	80014ea <stateBALANCE+0x1ba>
	{
		BTN.no = BTN_not_pressed;
 80014b8:	4b2c      	ldr	r3, [pc, #176]	; (800156c <stateBALANCE+0x23c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	705a      	strb	r2, [r3, #1]
		HAL_TIM_Base_Stop_IT(&htim7);		// TIMER7 STOP
 80014be:	4821      	ldr	r0, [pc, #132]	; (8001544 <stateBALANCE+0x214>)
 80014c0:	f004 fc08 	bl	8005cd4 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);	// PWM TIMER15 STOP
 80014c4:	2100      	movs	r1, #0
 80014c6:	481e      	ldr	r0, [pc, #120]	; (8001540 <stateBALANCE+0x210>)
 80014c8:	f004 fc8a 	bl	8005de0 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);	// PWM TIMER15 STOP
 80014cc:	2104      	movs	r1, #4
 80014ce:	481c      	ldr	r0, [pc, #112]	; (8001540 <stateBALANCE+0x210>)
 80014d0:	f004 fc86 	bl	8005de0 <HAL_TIM_PWM_Start>
		HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);	// ENC TIMER1 STOP
 80014d4:	213c      	movs	r1, #60	; 0x3c
 80014d6:	4818      	ldr	r0, [pc, #96]	; (8001538 <stateBALANCE+0x208>)
 80014d8:	f004 ff1c 	bl	8006314 <HAL_TIM_Encoder_Stop>
		HAL_TIM_Encoder_Stop(&htim2, TIM_CHANNEL_ALL);	// ENC TIMER2 STOP
 80014dc:	213c      	movs	r1, #60	; 0x3c
 80014de:	4817      	ldr	r0, [pc, #92]	; (800153c <stateBALANCE+0x20c>)
 80014e0:	f004 ff18 	bl	8006314 <HAL_TIM_Encoder_Stop>
		current_state = HOME_state;
 80014e4:	4b10      	ldr	r3, [pc, #64]	; (8001528 <stateBALANCE+0x1f8>)
 80014e6:	2205      	movs	r2, #5
 80014e8:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.left == BTN_pressed) BTN.left = BTN_not_pressed;
 80014ea:	4b20      	ldr	r3, [pc, #128]	; (800156c <stateBALANCE+0x23c>)
 80014ec:	789b      	ldrb	r3, [r3, #2]
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d102      	bne.n	80014fa <stateBALANCE+0x1ca>
 80014f4:	4b1d      	ldr	r3, [pc, #116]	; (800156c <stateBALANCE+0x23c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	709a      	strb	r2, [r3, #2]
	if (BTN.right == BTN_pressed) BTN.right = BTN_not_pressed;
 80014fa:	4b1c      	ldr	r3, [pc, #112]	; (800156c <stateBALANCE+0x23c>)
 80014fc:	78db      	ldrb	r3, [r3, #3]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b01      	cmp	r3, #1
 8001502:	d102      	bne.n	800150a <stateBALANCE+0x1da>
 8001504:	4b19      	ldr	r3, [pc, #100]	; (800156c <stateBALANCE+0x23c>)
 8001506:	2200      	movs	r2, #0
 8001508:	70da      	strb	r2, [r3, #3]
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	f3af 8000 	nop.w
 8001518:	00000000 	.word	0x00000000
 800151c:	408f3800 	.word	0x408f3800
 8001520:	00000000 	.word	0x00000000
 8001524:	c08f3800 	.word	0xc08f3800
 8001528:	20000000 	.word	0x20000000
 800152c:	200002e8 	.word	0x200002e8
 8001530:	0800a684 	.word	0x0800a684
 8001534:	0800a690 	.word	0x0800a690
 8001538:	200004b8 	.word	0x200004b8
 800153c:	20000504 	.word	0x20000504
 8001540:	2000059c 	.word	0x2000059c
 8001544:	20000550 	.word	0x20000550
 8001548:	200002ea 	.word	0x200002ea
 800154c:	2000049e 	.word	0x2000049e
 8001550:	40012c00 	.word	0x40012c00
 8001554:	200004a2 	.word	0x200004a2
 8001558:	20000308 	.word	0x20000308
 800155c:	20000294 	.word	0x20000294
 8001560:	20000360 	.word	0x20000360
 8001564:	200004a4 	.word	0x200004a4
 8001568:	200004a6 	.word	0x200004a6
 800156c:	200002ec 	.word	0x200002ec

08001570 <stateENCODER>:
void stateENCODER(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 8001574:	4bc2      	ldr	r3, [pc, #776]	; (8001880 <stateENCODER+0x310>)
 8001576:	781a      	ldrb	r2, [r3, #0]
 8001578:	4bc2      	ldr	r3, [pc, #776]	; (8001884 <stateENCODER+0x314>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	429a      	cmp	r2, r3
 800157e:	d034      	beq.n	80015ea <stateENCODER+0x7a>
	{
		previous_state = current_state;
 8001580:	4bbf      	ldr	r3, [pc, #764]	; (8001880 <stateENCODER+0x310>)
 8001582:	781a      	ldrb	r2, [r3, #0]
 8001584:	4bbf      	ldr	r3, [pc, #764]	; (8001884 <stateENCODER+0x314>)
 8001586:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001588:	f7ff fc1a 	bl	8000dc0 <lcd_clear>
		lcd_put_cur(0, 0);
 800158c:	2100      	movs	r1, #0
 800158e:	2000      	movs	r0, #0
 8001590:	f7ff fc2d 	bl	8000dee <lcd_put_cur>
		lcd_send_string("ENCODER");
 8001594:	48bc      	ldr	r0, [pc, #752]	; (8001888 <stateENCODER+0x318>)
 8001596:	f7ff fc86 	bl	8000ea6 <lcd_send_string>
		lcd_put_cur(1, 15);
 800159a:	210f      	movs	r1, #15
 800159c:	2001      	movs	r0, #1
 800159e:	f7ff fc26 	bl	8000dee <lcd_put_cur>
		lcd_send_data(LCD_RIGHT_ARROW);
 80015a2:	207e      	movs	r0, #126	; 0x7e
 80015a4:	f7ff fbdc 	bl	8000d60 <lcd_send_data>

		HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);	// ENC TIMER1 START
 80015a8:	213c      	movs	r1, #60	; 0x3c
 80015aa:	48b8      	ldr	r0, [pc, #736]	; (800188c <stateENCODER+0x31c>)
 80015ac:	f004 fe24 	bl	80061f8 <HAL_TIM_Encoder_Start>
		HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);	// ENC TIMER2 START
 80015b0:	213c      	movs	r1, #60	; 0x3c
 80015b2:	48b7      	ldr	r0, [pc, #732]	; (8001890 <stateENCODER+0x320>)
 80015b4:	f004 fe20 	bl	80061f8 <HAL_TIM_Encoder_Start>
		TIM2->CNT = encd_reset;
 80015b8:	22ff      	movs	r2, #255	; 0xff
 80015ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015be:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->CNT = encd_reset;
 80015c0:	22ff      	movs	r2, #255	; 0xff
 80015c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015c6:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);	// PWM TIMER15 START
 80015c8:	2100      	movs	r1, #0
 80015ca:	48b2      	ldr	r0, [pc, #712]	; (8001894 <stateENCODER+0x324>)
 80015cc:	f004 fc08 	bl	8005de0 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);	// PWM TIMER15 START
 80015d0:	2104      	movs	r1, #4
 80015d2:	48b0      	ldr	r0, [pc, #704]	; (8001894 <stateENCODER+0x324>)
 80015d4:	f004 fc04 	bl	8005de0 <HAL_TIM_PWM_Start>
		setMotors(0, 0, 0, 0);
 80015d8:	2300      	movs	r3, #0
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	2000      	movs	r0, #0
 80015e0:	f000 fe1c 	bl	800221c <setMotors>
		HAL_TIM_Base_Start_IT(&htim7);		// TIMER7 START
 80015e4:	48ac      	ldr	r0, [pc, #688]	; (8001898 <stateENCODER+0x328>)
 80015e6:	f004 fb21 	bl	8005c2c <HAL_TIM_Base_Start_IT>
	}
	if (tim7_20ms_flag)					// TIMER7 IF FLAG
 80015ea:	4bac      	ldr	r3, [pc, #688]	; (800189c <stateENCODER+0x32c>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d062      	beq.n	80016ba <stateENCODER+0x14a>
	{
		tim7_20ms_flag = TIM_no_interrupt; 	// TIMER7 FLAG ERASE
 80015f4:	4ba9      	ldr	r3, [pc, #676]	; (800189c <stateENCODER+0x32c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
		encd_left = (TIM2->CNT) - encd_reset;
 80015fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	b29a      	uxth	r2, r3
 8001602:	23ff      	movs	r3, #255	; 0xff
 8001604:	b29b      	uxth	r3, r3
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	b29b      	uxth	r3, r3
 800160a:	b21a      	sxth	r2, r3
 800160c:	4ba4      	ldr	r3, [pc, #656]	; (80018a0 <stateENCODER+0x330>)
 800160e:	801a      	strh	r2, [r3, #0]
		encd_right = (TIM1->CNT) - encd_reset;
 8001610:	4ba4      	ldr	r3, [pc, #656]	; (80018a4 <stateENCODER+0x334>)
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001614:	b29a      	uxth	r2, r3
 8001616:	23ff      	movs	r3, #255	; 0xff
 8001618:	b29b      	uxth	r3, r3
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	b29b      	uxth	r3, r3
 800161e:	b21a      	sxth	r2, r3
 8001620:	4ba1      	ldr	r3, [pc, #644]	; (80018a8 <stateENCODER+0x338>)
 8001622:	801a      	strh	r2, [r3, #0]
		TIM2->CNT = encd_reset;
 8001624:	22ff      	movs	r2, #255	; 0xff
 8001626:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800162a:	625a      	str	r2, [r3, #36]	; 0x24
		TIM1->CNT = encd_reset;
 800162c:	22ff      	movs	r2, #255	; 0xff
 800162e:	4b9d      	ldr	r3, [pc, #628]	; (80018a4 <stateENCODER+0x334>)
 8001630:	625a      	str	r2, [r3, #36]	; 0x24

		if (encd_left != old_encd_left || encd_right != old_encd_right)
 8001632:	4b9b      	ldr	r3, [pc, #620]	; (80018a0 <stateENCODER+0x330>)
 8001634:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001638:	4b9c      	ldr	r3, [pc, #624]	; (80018ac <stateENCODER+0x33c>)
 800163a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800163e:	429a      	cmp	r2, r3
 8001640:	d107      	bne.n	8001652 <stateENCODER+0xe2>
 8001642:	4b99      	ldr	r3, [pc, #612]	; (80018a8 <stateENCODER+0x338>)
 8001644:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001648:	4b99      	ldr	r3, [pc, #612]	; (80018b0 <stateENCODER+0x340>)
 800164a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164e:	429a      	cmp	r2, r3
 8001650:	d027      	beq.n	80016a2 <stateENCODER+0x132>
		{
			old_encd_left = encd_left;
 8001652:	4b93      	ldr	r3, [pc, #588]	; (80018a0 <stateENCODER+0x330>)
 8001654:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001658:	4b94      	ldr	r3, [pc, #592]	; (80018ac <stateENCODER+0x33c>)
 800165a:	801a      	strh	r2, [r3, #0]
			old_encd_right = encd_right;
 800165c:	4b92      	ldr	r3, [pc, #584]	; (80018a8 <stateENCODER+0x338>)
 800165e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001662:	4b93      	ldr	r3, [pc, #588]	; (80018b0 <stateENCODER+0x340>)
 8001664:	801a      	strh	r2, [r3, #0]
			lcd_put_cur(0, 8);
 8001666:	2108      	movs	r1, #8
 8001668:	2000      	movs	r0, #0
 800166a:	f7ff fbc0 	bl	8000dee <lcd_put_cur>
			sprintf(MSG, "%+03d", encd_left);
 800166e:	4b8c      	ldr	r3, [pc, #560]	; (80018a0 <stateENCODER+0x330>)
 8001670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001674:	461a      	mov	r2, r3
 8001676:	498f      	ldr	r1, [pc, #572]	; (80018b4 <stateENCODER+0x344>)
 8001678:	488f      	ldr	r0, [pc, #572]	; (80018b8 <stateENCODER+0x348>)
 800167a:	f006 f9ed 	bl	8007a58 <siprintf>
			lcd_send_string(MSG);
 800167e:	488e      	ldr	r0, [pc, #568]	; (80018b8 <stateENCODER+0x348>)
 8001680:	f7ff fc11 	bl	8000ea6 <lcd_send_string>
			lcd_put_cur(0, 12);
 8001684:	210c      	movs	r1, #12
 8001686:	2000      	movs	r0, #0
 8001688:	f7ff fbb1 	bl	8000dee <lcd_put_cur>
			sprintf(MSG, "%+03d", encd_right);
 800168c:	4b86      	ldr	r3, [pc, #536]	; (80018a8 <stateENCODER+0x338>)
 800168e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001692:	461a      	mov	r2, r3
 8001694:	4987      	ldr	r1, [pc, #540]	; (80018b4 <stateENCODER+0x344>)
 8001696:	4888      	ldr	r0, [pc, #544]	; (80018b8 <stateENCODER+0x348>)
 8001698:	f006 f9de 	bl	8007a58 <siprintf>
			lcd_send_string(MSG);
 800169c:	4886      	ldr	r0, [pc, #536]	; (80018b8 <stateENCODER+0x348>)
 800169e:	f7ff fc02 	bl	8000ea6 <lcd_send_string>
		}

		setMotors(duty_left, duty_right, 0, 0);
 80016a2:	4b86      	ldr	r3, [pc, #536]	; (80018bc <stateENCODER+0x34c>)
 80016a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a8:	4618      	mov	r0, r3
 80016aa:	4b85      	ldr	r3, [pc, #532]	; (80018c0 <stateENCODER+0x350>)
 80016ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b0:	4619      	mov	r1, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2200      	movs	r2, #0
 80016b6:	f000 fdb1 	bl	800221c <setMotors>
	}
	if (BTN.ok == BTN_pressed)
 80016ba:	4b82      	ldr	r3, [pc, #520]	; (80018c4 <stateENCODER+0x354>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d158      	bne.n	8001776 <stateENCODER+0x206>
	{
		BTN.ok = BTN_not_pressed;
 80016c4:	4b7f      	ldr	r3, [pc, #508]	; (80018c4 <stateENCODER+0x354>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]
		duty_left = constrain(duty_left + 333, -999, 999);
 80016ca:	4b7c      	ldr	r3, [pc, #496]	; (80018bc <stateENCODER+0x34c>)
 80016cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d0:	f203 134d 	addw	r3, r3, #333	; 0x14d
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe ff25 	bl	8000524 <__aeabi_i2d>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	ed9f 2b64 	vldr	d2, [pc, #400]	; 8001870 <stateENCODER+0x300>
 80016e2:	ed9f 1b65 	vldr	d1, [pc, #404]	; 8001878 <stateENCODER+0x308>
 80016e6:	ec43 2b10 	vmov	d0, r2, r3
 80016ea:	f000 fe1f 	bl	800232c <constrain>
 80016ee:	ec53 2b10 	vmov	r2, r3, d0
 80016f2:	4610      	mov	r0, r2
 80016f4:	4619      	mov	r1, r3
 80016f6:	f7ff fa2f 	bl	8000b58 <__aeabi_d2iz>
 80016fa:	4603      	mov	r3, r0
 80016fc:	b21a      	sxth	r2, r3
 80016fe:	4b6f      	ldr	r3, [pc, #444]	; (80018bc <stateENCODER+0x34c>)
 8001700:	801a      	strh	r2, [r3, #0]
		duty_right = constrain(duty_right + 333, -999, 999);
 8001702:	4b6f      	ldr	r3, [pc, #444]	; (80018c0 <stateENCODER+0x350>)
 8001704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001708:	f203 134d 	addw	r3, r3, #333	; 0x14d
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe ff09 	bl	8000524 <__aeabi_i2d>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	ed9f 2b56 	vldr	d2, [pc, #344]	; 8001870 <stateENCODER+0x300>
 800171a:	ed9f 1b57 	vldr	d1, [pc, #348]	; 8001878 <stateENCODER+0x308>
 800171e:	ec43 2b10 	vmov	d0, r2, r3
 8001722:	f000 fe03 	bl	800232c <constrain>
 8001726:	ec53 2b10 	vmov	r2, r3, d0
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	f7ff fa13 	bl	8000b58 <__aeabi_d2iz>
 8001732:	4603      	mov	r3, r0
 8001734:	b21a      	sxth	r2, r3
 8001736:	4b62      	ldr	r3, [pc, #392]	; (80018c0 <stateENCODER+0x350>)
 8001738:	801a      	strh	r2, [r3, #0]
		lcd_put_cur(1, 2);
 800173a:	2102      	movs	r1, #2
 800173c:	2001      	movs	r0, #1
 800173e:	f7ff fb56 	bl	8000dee <lcd_put_cur>
		sprintf(MSG, "%+04d", duty_left);
 8001742:	4b5e      	ldr	r3, [pc, #376]	; (80018bc <stateENCODER+0x34c>)
 8001744:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001748:	461a      	mov	r2, r3
 800174a:	495f      	ldr	r1, [pc, #380]	; (80018c8 <stateENCODER+0x358>)
 800174c:	485a      	ldr	r0, [pc, #360]	; (80018b8 <stateENCODER+0x348>)
 800174e:	f006 f983 	bl	8007a58 <siprintf>
		lcd_send_string(MSG);
 8001752:	4859      	ldr	r0, [pc, #356]	; (80018b8 <stateENCODER+0x348>)
 8001754:	f7ff fba7 	bl	8000ea6 <lcd_send_string>
		lcd_put_cur(1, 8);
 8001758:	2108      	movs	r1, #8
 800175a:	2001      	movs	r0, #1
 800175c:	f7ff fb47 	bl	8000dee <lcd_put_cur>
		sprintf(MSG, "%+04d", duty_right);
 8001760:	4b57      	ldr	r3, [pc, #348]	; (80018c0 <stateENCODER+0x350>)
 8001762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001766:	461a      	mov	r2, r3
 8001768:	4957      	ldr	r1, [pc, #348]	; (80018c8 <stateENCODER+0x358>)
 800176a:	4853      	ldr	r0, [pc, #332]	; (80018b8 <stateENCODER+0x348>)
 800176c:	f006 f974 	bl	8007a58 <siprintf>
		lcd_send_string(MSG);
 8001770:	4851      	ldr	r0, [pc, #324]	; (80018b8 <stateENCODER+0x348>)
 8001772:	f7ff fb98 	bl	8000ea6 <lcd_send_string>
	}
	if (BTN.no == BTN_pressed)
 8001776:	4b53      	ldr	r3, [pc, #332]	; (80018c4 <stateENCODER+0x354>)
 8001778:	785b      	ldrb	r3, [r3, #1]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b01      	cmp	r3, #1
 800177e:	d158      	bne.n	8001832 <stateENCODER+0x2c2>
	{
		BTN.no = BTN_not_pressed;
 8001780:	4b50      	ldr	r3, [pc, #320]	; (80018c4 <stateENCODER+0x354>)
 8001782:	2200      	movs	r2, #0
 8001784:	705a      	strb	r2, [r3, #1]
		duty_left = constrain(duty_left - 333, -999, 999);
 8001786:	4b4d      	ldr	r3, [pc, #308]	; (80018bc <stateENCODER+0x34c>)
 8001788:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178c:	f2a3 134d 	subw	r3, r3, #333	; 0x14d
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe fec7 	bl	8000524 <__aeabi_i2d>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	ed9f 2b35 	vldr	d2, [pc, #212]	; 8001870 <stateENCODER+0x300>
 800179e:	ed9f 1b36 	vldr	d1, [pc, #216]	; 8001878 <stateENCODER+0x308>
 80017a2:	ec43 2b10 	vmov	d0, r2, r3
 80017a6:	f000 fdc1 	bl	800232c <constrain>
 80017aa:	ec53 2b10 	vmov	r2, r3, d0
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	f7ff f9d1 	bl	8000b58 <__aeabi_d2iz>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b21a      	sxth	r2, r3
 80017ba:	4b40      	ldr	r3, [pc, #256]	; (80018bc <stateENCODER+0x34c>)
 80017bc:	801a      	strh	r2, [r3, #0]
		duty_right = constrain(duty_right - 333, -999, 999);
 80017be:	4b40      	ldr	r3, [pc, #256]	; (80018c0 <stateENCODER+0x350>)
 80017c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c4:	f2a3 134d 	subw	r3, r3, #333	; 0x14d
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7fe feab 	bl	8000524 <__aeabi_i2d>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	ed9f 2b27 	vldr	d2, [pc, #156]	; 8001870 <stateENCODER+0x300>
 80017d6:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8001878 <stateENCODER+0x308>
 80017da:	ec43 2b10 	vmov	d0, r2, r3
 80017de:	f000 fda5 	bl	800232c <constrain>
 80017e2:	ec53 2b10 	vmov	r2, r3, d0
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	f7ff f9b5 	bl	8000b58 <__aeabi_d2iz>
 80017ee:	4603      	mov	r3, r0
 80017f0:	b21a      	sxth	r2, r3
 80017f2:	4b33      	ldr	r3, [pc, #204]	; (80018c0 <stateENCODER+0x350>)
 80017f4:	801a      	strh	r2, [r3, #0]
		lcd_put_cur(1, 2);
 80017f6:	2102      	movs	r1, #2
 80017f8:	2001      	movs	r0, #1
 80017fa:	f7ff faf8 	bl	8000dee <lcd_put_cur>
		sprintf(MSG, "%+04d", duty_left);
 80017fe:	4b2f      	ldr	r3, [pc, #188]	; (80018bc <stateENCODER+0x34c>)
 8001800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001804:	461a      	mov	r2, r3
 8001806:	4930      	ldr	r1, [pc, #192]	; (80018c8 <stateENCODER+0x358>)
 8001808:	482b      	ldr	r0, [pc, #172]	; (80018b8 <stateENCODER+0x348>)
 800180a:	f006 f925 	bl	8007a58 <siprintf>
		lcd_send_string(MSG);
 800180e:	482a      	ldr	r0, [pc, #168]	; (80018b8 <stateENCODER+0x348>)
 8001810:	f7ff fb49 	bl	8000ea6 <lcd_send_string>
		lcd_put_cur(1, 8);
 8001814:	2108      	movs	r1, #8
 8001816:	2001      	movs	r0, #1
 8001818:	f7ff fae9 	bl	8000dee <lcd_put_cur>
		sprintf(MSG, "%+04d", duty_right);
 800181c:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <stateENCODER+0x350>)
 800181e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001822:	461a      	mov	r2, r3
 8001824:	4928      	ldr	r1, [pc, #160]	; (80018c8 <stateENCODER+0x358>)
 8001826:	4824      	ldr	r0, [pc, #144]	; (80018b8 <stateENCODER+0x348>)
 8001828:	f006 f916 	bl	8007a58 <siprintf>
		lcd_send_string(MSG);
 800182c:	4822      	ldr	r0, [pc, #136]	; (80018b8 <stateENCODER+0x348>)
 800182e:	f7ff fb3a 	bl	8000ea6 <lcd_send_string>
	}
	if (BTN.left == BTN_pressed)
 8001832:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <stateENCODER+0x354>)
 8001834:	789b      	ldrb	r3, [r3, #2]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b01      	cmp	r3, #1
 800183a:	d102      	bne.n	8001842 <stateENCODER+0x2d2>
	{
		BTN.left = BTN_not_pressed;
 800183c:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <stateENCODER+0x354>)
 800183e:	2200      	movs	r2, #0
 8001840:	709a      	strb	r2, [r3, #2]
	}
	if (BTN.right == BTN_pressed)
 8001842:	4b20      	ldr	r3, [pc, #128]	; (80018c4 <stateENCODER+0x354>)
 8001844:	78db      	ldrb	r3, [r3, #3]
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b01      	cmp	r3, #1
 800184a:	d149      	bne.n	80018e0 <stateENCODER+0x370>
	{
		BTN.right = BTN_not_pressed;
 800184c:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <stateENCODER+0x354>)
 800184e:	2200      	movs	r2, #0
 8001850:	70da      	strb	r2, [r3, #3]
		HAL_TIM_Base_Stop_IT(&htim7);		// TIMER7 STOP
 8001852:	4811      	ldr	r0, [pc, #68]	; (8001898 <stateENCODER+0x328>)
 8001854:	f004 fa3e 	bl	8005cd4 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);	// PWM TIMER15 STOP
 8001858:	2100      	movs	r1, #0
 800185a:	480e      	ldr	r0, [pc, #56]	; (8001894 <stateENCODER+0x324>)
 800185c:	f004 fb9e 	bl	8005f9c <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	// PWM TIMER15 STOP
 8001860:	2104      	movs	r1, #4
 8001862:	480c      	ldr	r0, [pc, #48]	; (8001894 <stateENCODER+0x324>)
 8001864:	f004 fb9a 	bl	8005f9c <HAL_TIM_PWM_Stop>
		HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);	// ENC TIMER1 STOP
 8001868:	213c      	movs	r1, #60	; 0x3c
 800186a:	e02f      	b.n	80018cc <stateENCODER+0x35c>
 800186c:	f3af 8000 	nop.w
 8001870:	00000000 	.word	0x00000000
 8001874:	408f3800 	.word	0x408f3800
 8001878:	00000000 	.word	0x00000000
 800187c:	c08f3800 	.word	0xc08f3800
 8001880:	20000000 	.word	0x20000000
 8001884:	200002e8 	.word	0x200002e8
 8001888:	0800a6a4 	.word	0x0800a6a4
 800188c:	200004b8 	.word	0x200004b8
 8001890:	20000504 	.word	0x20000504
 8001894:	2000059c 	.word	0x2000059c
 8001898:	20000550 	.word	0x20000550
 800189c:	200002ea 	.word	0x200002ea
 80018a0:	2000049e 	.word	0x2000049e
 80018a4:	40012c00 	.word	0x40012c00
 80018a8:	200004a2 	.word	0x200004a2
 80018ac:	2000049c 	.word	0x2000049c
 80018b0:	200004a0 	.word	0x200004a0
 80018b4:	0800a6ac 	.word	0x0800a6ac
 80018b8:	200002f0 	.word	0x200002f0
 80018bc:	200004a4 	.word	0x200004a4
 80018c0:	200004a6 	.word	0x200004a6
 80018c4:	200002ec 	.word	0x200002ec
 80018c8:	0800a6b4 	.word	0x0800a6b4
 80018cc:	4805      	ldr	r0, [pc, #20]	; (80018e4 <stateENCODER+0x374>)
 80018ce:	f004 fd21 	bl	8006314 <HAL_TIM_Encoder_Stop>
		HAL_TIM_Encoder_Stop(&htim2, TIM_CHANNEL_ALL);	// ENC TIMER2 STOP
 80018d2:	213c      	movs	r1, #60	; 0x3c
 80018d4:	4804      	ldr	r0, [pc, #16]	; (80018e8 <stateENCODER+0x378>)
 80018d6:	f004 fd1d 	bl	8006314 <HAL_TIM_Encoder_Stop>
		current_state = IMU_DISPLAY_state;
 80018da:	4b04      	ldr	r3, [pc, #16]	; (80018ec <stateENCODER+0x37c>)
 80018dc:	2203      	movs	r2, #3
 80018de:	701a      	strb	r2, [r3, #0]
	}
}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	200004b8 	.word	0x200004b8
 80018e8:	20000504 	.word	0x20000504
 80018ec:	20000000 	.word	0x20000000

080018f0 <stateIMU>:
void stateIMU(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 80018f6:	4b36      	ldr	r3, [pc, #216]	; (80019d0 <stateIMU+0xe0>)
 80018f8:	781a      	ldrb	r2, [r3, #0]
 80018fa:	4b36      	ldr	r3, [pc, #216]	; (80019d4 <stateIMU+0xe4>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d018      	beq.n	8001934 <stateIMU+0x44>
	{
		previous_state = current_state;
 8001902:	4b33      	ldr	r3, [pc, #204]	; (80019d0 <stateIMU+0xe0>)
 8001904:	781a      	ldrb	r2, [r3, #0]
 8001906:	4b33      	ldr	r3, [pc, #204]	; (80019d4 <stateIMU+0xe4>)
 8001908:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 800190a:	f7ff fa59 	bl	8000dc0 <lcd_clear>
		lcd_put_cur(0, 0);
 800190e:	2100      	movs	r1, #0
 8001910:	2000      	movs	r0, #0
 8001912:	f7ff fa6c 	bl	8000dee <lcd_put_cur>
		lcd_send_string("IMU");
 8001916:	4830      	ldr	r0, [pc, #192]	; (80019d8 <stateIMU+0xe8>)
 8001918:	f7ff fac5 	bl	8000ea6 <lcd_send_string>
		lcd_send_arrows_to_sides();
 800191c:	f000 fc6c 	bl	80021f8 <lcd_send_arrows_to_sides>
		lcd_put_cur(0, 10);
 8001920:	210a      	movs	r1, #10
 8001922:	2000      	movs	r0, #0
 8001924:	f7ff fa63 	bl	8000dee <lcd_put_cur>
		lcd_send_data(LCD_DEGREE_SYMBOL);
 8001928:	20df      	movs	r0, #223	; 0xdf
 800192a:	f7ff fa19 	bl	8000d60 <lcd_send_data>
		HAL_TIM_Base_Start_IT(&htim7);		// TIMER7 START
 800192e:	482b      	ldr	r0, [pc, #172]	; (80019dc <stateIMU+0xec>)
 8001930:	f004 f97c 	bl	8005c2c <HAL_TIM_Base_Start_IT>
	}
	if (tim7_20ms_flag)						// TIMER7 IF FLAG
 8001934:	4b2a      	ldr	r3, [pc, #168]	; (80019e0 <stateIMU+0xf0>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d018      	beq.n	8001970 <stateIMU+0x80>
	{
		tim7_20ms_flag = TIM_no_interrupt; 		// TIMER7 FLAG ERASE
 800193e:	4b28      	ldr	r3, [pc, #160]	; (80019e0 <stateIMU+0xf0>)
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
		MPU6050_Read_All(&hi2c1, &MPU6050);		// MPU READ ANGLE
 8001944:	4927      	ldr	r1, [pc, #156]	; (80019e4 <stateIMU+0xf4>)
 8001946:	4828      	ldr	r0, [pc, #160]	; (80019e8 <stateIMU+0xf8>)
 8001948:	f000 fe66 	bl	8002618 <MPU6050_Read_All>
		double angle = MPU6050.KalmanAngleX;
 800194c:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <stateIMU+0xf4>)
 800194e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001952:	e9c7 2300 	strd	r2, r3, [r7]
		lcd_put_cur(0, 4);						// MPU DISPLAY ANGLE
 8001956:	2104      	movs	r1, #4
 8001958:	2000      	movs	r0, #0
 800195a:	f7ff fa48 	bl	8000dee <lcd_put_cur>
		sprintf(MSG, "%+06.2f", angle);
 800195e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001962:	4922      	ldr	r1, [pc, #136]	; (80019ec <stateIMU+0xfc>)
 8001964:	4822      	ldr	r0, [pc, #136]	; (80019f0 <stateIMU+0x100>)
 8001966:	f006 f877 	bl	8007a58 <siprintf>
		lcd_send_string(MSG);
 800196a:	4821      	ldr	r0, [pc, #132]	; (80019f0 <stateIMU+0x100>)
 800196c:	f7ff fa9b 	bl	8000ea6 <lcd_send_string>
	}
	if (BTN.ok == BTN_pressed)
 8001970:	4b20      	ldr	r3, [pc, #128]	; (80019f4 <stateIMU+0x104>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b01      	cmp	r3, #1
 8001978:	d102      	bne.n	8001980 <stateIMU+0x90>
	{
		BTN.ok = BTN_not_pressed;
 800197a:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <stateIMU+0x104>)
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.no == BTN_pressed)
 8001980:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <stateIMU+0x104>)
 8001982:	785b      	ldrb	r3, [r3, #1]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b01      	cmp	r3, #1
 8001988:	d102      	bne.n	8001990 <stateIMU+0xa0>
	{
		BTN.no = BTN_not_pressed;
 800198a:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <stateIMU+0x104>)
 800198c:	2200      	movs	r2, #0
 800198e:	705a      	strb	r2, [r3, #1]
	}
	if (BTN.left == BTN_pressed)
 8001990:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <stateIMU+0x104>)
 8001992:	789b      	ldrb	r3, [r3, #2]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b01      	cmp	r3, #1
 8001998:	d108      	bne.n	80019ac <stateIMU+0xbc>
	{
		BTN.left = BTN_not_pressed;
 800199a:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <stateIMU+0x104>)
 800199c:	2200      	movs	r2, #0
 800199e:	709a      	strb	r2, [r3, #2]
		HAL_TIM_Base_Stop_IT(&htim7);		// TIMER7 STOP
 80019a0:	480e      	ldr	r0, [pc, #56]	; (80019dc <stateIMU+0xec>)
 80019a2:	f004 f997 	bl	8005cd4 <HAL_TIM_Base_Stop_IT>
		current_state = ENCODER_DISPLAY_state;
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <stateIMU+0xe0>)
 80019a8:	2202      	movs	r2, #2
 80019aa:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.right == BTN_pressed)
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <stateIMU+0x104>)
 80019ae:	78db      	ldrb	r3, [r3, #3]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d108      	bne.n	80019c8 <stateIMU+0xd8>
	{
		BTN.right = BTN_not_pressed;
 80019b6:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <stateIMU+0x104>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	70da      	strb	r2, [r3, #3]
		HAL_TIM_Base_Stop_IT(&htim7);		// TIMER7 STOP
 80019bc:	4807      	ldr	r0, [pc, #28]	; (80019dc <stateIMU+0xec>)
 80019be:	f004 f989 	bl	8005cd4 <HAL_TIM_Base_Stop_IT>
		current_state = EEPROM_RW_state;
 80019c2:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <stateIMU+0xe0>)
 80019c4:	2204      	movs	r2, #4
 80019c6:	701a      	strb	r2, [r3, #0]
	}
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000000 	.word	0x20000000
 80019d4:	200002e8 	.word	0x200002e8
 80019d8:	0800a6bc 	.word	0x0800a6bc
 80019dc:	20000550 	.word	0x20000550
 80019e0:	200002ea 	.word	0x200002ea
 80019e4:	20000308 	.word	0x20000308
 80019e8:	20000294 	.word	0x20000294
 80019ec:	0800a6c0 	.word	0x0800a6c0
 80019f0:	200002f0 	.word	0x200002f0
 80019f4:	200002ec 	.word	0x200002ec

080019f8 <stateEEPROM>:
void stateEEPROM(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 80019fc:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <stateEEPROM+0x80>)
 80019fe:	781a      	ldrb	r2, [r3, #0]
 8001a00:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <stateEEPROM+0x84>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d00e      	beq.n	8001a26 <stateEEPROM+0x2e>
	{
		previous_state = current_state;
 8001a08:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <stateEEPROM+0x80>)
 8001a0a:	781a      	ldrb	r2, [r3, #0]
 8001a0c:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <stateEEPROM+0x84>)
 8001a0e:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001a10:	f7ff f9d6 	bl	8000dc0 <lcd_clear>
		lcd_put_cur(0, 0);
 8001a14:	2100      	movs	r1, #0
 8001a16:	2000      	movs	r0, #0
 8001a18:	f7ff f9e9 	bl	8000dee <lcd_put_cur>
		lcd_send_string("EEPROM");
 8001a1c:	4818      	ldr	r0, [pc, #96]	; (8001a80 <stateEEPROM+0x88>)
 8001a1e:	f7ff fa42 	bl	8000ea6 <lcd_send_string>
		lcd_send_arrows_to_sides();
 8001a22:	f000 fbe9 	bl	80021f8 <lcd_send_arrows_to_sides>
	}
	// todo finish this state and its functions
	if (BTN.ok == BTN_pressed)
 8001a26:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <stateEEPROM+0x8c>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d102      	bne.n	8001a36 <stateEEPROM+0x3e>
	{
		BTN.ok = BTN_not_pressed;
 8001a30:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <stateEEPROM+0x8c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.no == BTN_pressed)
 8001a36:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <stateEEPROM+0x8c>)
 8001a38:	785b      	ldrb	r3, [r3, #1]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d102      	bne.n	8001a46 <stateEEPROM+0x4e>
	{
		BTN.no = BTN_not_pressed;
 8001a40:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <stateEEPROM+0x8c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	705a      	strb	r2, [r3, #1]
	}
	if (BTN.left == BTN_pressed)
 8001a46:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <stateEEPROM+0x8c>)
 8001a48:	789b      	ldrb	r3, [r3, #2]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d105      	bne.n	8001a5c <stateEEPROM+0x64>
	{
		BTN.left = BTN_not_pressed;
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <stateEEPROM+0x8c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	709a      	strb	r2, [r3, #2]
		current_state = IMU_DISPLAY_state;
 8001a56:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <stateEEPROM+0x80>)
 8001a58:	2203      	movs	r2, #3
 8001a5a:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.right == BTN_pressed)
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <stateEEPROM+0x8c>)
 8001a5e:	78db      	ldrb	r3, [r3, #3]
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d105      	bne.n	8001a72 <stateEEPROM+0x7a>
	{
		BTN.right = BTN_not_pressed;
 8001a66:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <stateEEPROM+0x8c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	70da      	strb	r2, [r3, #3]
		current_state = HOME_state;
 8001a6c:	4b02      	ldr	r3, [pc, #8]	; (8001a78 <stateEEPROM+0x80>)
 8001a6e:	2205      	movs	r2, #5
 8001a70:	701a      	strb	r2, [r3, #0]
	}
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	200002e8 	.word	0x200002e8
 8001a80:	0800a6c8 	.word	0x0800a6c8
 8001a84:	200002ec 	.word	0x200002ec

08001a88 <stateHOME>:
void stateHOME(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 8001a8c:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <stateHOME+0x84>)
 8001a8e:	781a      	ldrb	r2, [r3, #0]
 8001a90:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <stateHOME+0x88>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d00e      	beq.n	8001ab6 <stateHOME+0x2e>
	{
		previous_state = current_state;
 8001a98:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <stateHOME+0x84>)
 8001a9a:	781a      	ldrb	r2, [r3, #0]
 8001a9c:	4b1c      	ldr	r3, [pc, #112]	; (8001b10 <stateHOME+0x88>)
 8001a9e:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001aa0:	f7ff f98e 	bl	8000dc0 <lcd_clear>
		lcd_put_cur(0, 0);
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f7ff f9a1 	bl	8000dee <lcd_put_cur>
		lcd_send_string("Home");
 8001aac:	4819      	ldr	r0, [pc, #100]	; (8001b14 <stateHOME+0x8c>)
 8001aae:	f7ff f9fa 	bl	8000ea6 <lcd_send_string>
		lcd_send_arrows_to_sides();
 8001ab2:	f000 fba1 	bl	80021f8 <lcd_send_arrows_to_sides>
//	if (tim7_10ms_flag)						// TIMER7 IF FLAG
//	{
//		tim7_10ms_flag = TIM_no_interrupt; 		// TIMER7 FLAG ERASE
//		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
//	}
	if (BTN.ok == BTN_pressed)
 8001ab6:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <stateHOME+0x90>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d105      	bne.n	8001acc <stateHOME+0x44>
	{
		BTN.ok = BTN_not_pressed;
 8001ac0:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <stateHOME+0x90>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	701a      	strb	r2, [r3, #0]
		current_state = BALANCE_state;
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <stateHOME+0x84>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.no == BTN_pressed)
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <stateHOME+0x90>)
 8001ace:	785b      	ldrb	r3, [r3, #1]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d102      	bne.n	8001adc <stateHOME+0x54>
	{
		BTN.no = BTN_not_pressed;
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <stateHOME+0x90>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	705a      	strb	r2, [r3, #1]
	}
	if (BTN.left == BTN_pressed)
 8001adc:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <stateHOME+0x90>)
 8001ade:	789b      	ldrb	r3, [r3, #2]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d105      	bne.n	8001af2 <stateHOME+0x6a>
	{
		BTN.left = BTN_not_pressed;
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <stateHOME+0x90>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	709a      	strb	r2, [r3, #2]
		current_state = EEPROM_RW_state;
 8001aec:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <stateHOME+0x84>)
 8001aee:	2204      	movs	r2, #4
 8001af0:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.right == BTN_pressed)
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <stateHOME+0x90>)
 8001af4:	78db      	ldrb	r3, [r3, #3]
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d105      	bne.n	8001b08 <stateHOME+0x80>
	{
		BTN.right = BTN_not_pressed;
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <stateHOME+0x90>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	70da      	strb	r2, [r3, #3]
		current_state = REG_state;
 8001b02:	4b02      	ldr	r3, [pc, #8]	; (8001b0c <stateHOME+0x84>)
 8001b04:	2206      	movs	r2, #6
 8001b06:	701a      	strb	r2, [r3, #0]
	}
}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	200002e8 	.word	0x200002e8
 8001b14:	0800a6d0 	.word	0x0800a6d0
 8001b18:	200002ec 	.word	0x200002ec
 8001b1c:	00000000 	.word	0x00000000

08001b20 <stateREG>:
void stateREG(PID_variables_t *hvar)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	if (current_state != previous_state || current_choice != previous_choice)
 8001b28:	4b4b      	ldr	r3, [pc, #300]	; (8001c58 <stateREG+0x138>)
 8001b2a:	781a      	ldrb	r2, [r3, #0]
 8001b2c:	4b4b      	ldr	r3, [pc, #300]	; (8001c5c <stateREG+0x13c>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d105      	bne.n	8001b40 <stateREG+0x20>
 8001b34:	4b4a      	ldr	r3, [pc, #296]	; (8001c60 <stateREG+0x140>)
 8001b36:	781a      	ldrb	r2, [r3, #0]
 8001b38:	4b4a      	ldr	r3, [pc, #296]	; (8001c64 <stateREG+0x144>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d023      	beq.n	8001b88 <stateREG+0x68>
	{
		previous_state = current_state;
 8001b40:	4b45      	ldr	r3, [pc, #276]	; (8001c58 <stateREG+0x138>)
 8001b42:	781a      	ldrb	r2, [r3, #0]
 8001b44:	4b45      	ldr	r3, [pc, #276]	; (8001c5c <stateREG+0x13c>)
 8001b46:	701a      	strb	r2, [r3, #0]
		previous_choice = current_choice;
 8001b48:	4b45      	ldr	r3, [pc, #276]	; (8001c60 <stateREG+0x140>)
 8001b4a:	781a      	ldrb	r2, [r3, #0]
 8001b4c:	4b45      	ldr	r3, [pc, #276]	; (8001c64 <stateREG+0x144>)
 8001b4e:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001b50:	f7ff f936 	bl	8000dc0 <lcd_clear>
		lcd_send_arrows_to_sides();
 8001b54:	f000 fb50 	bl	80021f8 <lcd_send_arrows_to_sides>
		sprintf(MSG, "Regulator  %1d/3", hvar->id);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001b5e:	461a      	mov	r2, r3
 8001b60:	4941      	ldr	r1, [pc, #260]	; (8001c68 <stateREG+0x148>)
 8001b62:	4842      	ldr	r0, [pc, #264]	; (8001c6c <stateREG+0x14c>)
 8001b64:	f005 ff78 	bl	8007a58 <siprintf>
		lcd_put_cur(0, 0);
 8001b68:	2100      	movs	r1, #0
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f7ff f93f 	bl	8000dee <lcd_put_cur>
		lcd_send_string(MSG);
 8001b70:	483e      	ldr	r0, [pc, #248]	; (8001c6c <stateREG+0x14c>)
 8001b72:	f7ff f998 	bl	8000ea6 <lcd_send_string>
		lcd_put_cur(1, 2);
 8001b76:	2102      	movs	r1, #2
 8001b78:	2001      	movs	r0, #1
 8001b7a:	f7ff f938 	bl	8000dee <lcd_put_cur>
		lcd_send_string(hvar->name);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	3350      	adds	r3, #80	; 0x50
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff f98f 	bl	8000ea6 <lcd_send_string>
	}
	if (BTN.ok == BTN_pressed)
 8001b88:	4b39      	ldr	r3, [pc, #228]	; (8001c70 <stateREG+0x150>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d11c      	bne.n	8001bcc <stateREG+0xac>
	{
		BTN.ok = BTN_not_pressed;
 8001b92:	4b37      	ldr	r3, [pc, #220]	; (8001c70 <stateREG+0x150>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	701a      	strb	r2, [r3, #0]
		current_choice = constrain(current_choice + 1, 1, 3);
 8001b98:	4b31      	ldr	r3, [pc, #196]	; (8001c60 <stateREG+0x140>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fcc0 	bl	8000524 <__aeabi_i2d>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	ed9f 2b27 	vldr	d2, [pc, #156]	; 8001c48 <stateREG+0x128>
 8001bac:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8001c50 <stateREG+0x130>
 8001bb0:	ec43 2b10 	vmov	d0, r2, r3
 8001bb4:	f000 fbba 	bl	800232c <constrain>
 8001bb8:	ec53 2b10 	vmov	r2, r3, d0
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f7fe fff2 	bl	8000ba8 <__aeabi_d2uiz>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	4b25      	ldr	r3, [pc, #148]	; (8001c60 <stateREG+0x140>)
 8001bca:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.no == BTN_pressed)
 8001bcc:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <stateREG+0x150>)
 8001bce:	785b      	ldrb	r3, [r3, #1]
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d11c      	bne.n	8001c10 <stateREG+0xf0>
	{
		BTN.no = BTN_not_pressed;
 8001bd6:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <stateREG+0x150>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	705a      	strb	r2, [r3, #1]
		current_choice = constrain(current_choice - 1, 1, 3);
 8001bdc:	4b20      	ldr	r3, [pc, #128]	; (8001c60 <stateREG+0x140>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fc9e 	bl	8000524 <__aeabi_i2d>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	ed9f 2b16 	vldr	d2, [pc, #88]	; 8001c48 <stateREG+0x128>
 8001bf0:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8001c50 <stateREG+0x130>
 8001bf4:	ec43 2b10 	vmov	d0, r2, r3
 8001bf8:	f000 fb98 	bl	800232c <constrain>
 8001bfc:	ec53 2b10 	vmov	r2, r3, d0
 8001c00:	4610      	mov	r0, r2
 8001c02:	4619      	mov	r1, r3
 8001c04:	f7fe ffd0 	bl	8000ba8 <__aeabi_d2uiz>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <stateREG+0x140>)
 8001c0e:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.left == BTN_pressed)
 8001c10:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <stateREG+0x150>)
 8001c12:	789b      	ldrb	r3, [r3, #2]
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d105      	bne.n	8001c26 <stateREG+0x106>
	{
		BTN.left = BTN_not_pressed;
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <stateREG+0x150>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	709a      	strb	r2, [r3, #2]
		current_state = HOME_state;
 8001c20:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <stateREG+0x138>)
 8001c22:	2205      	movs	r2, #5
 8001c24:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.right == BTN_pressed)
 8001c26:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <stateREG+0x150>)
 8001c28:	78db      	ldrb	r3, [r3, #3]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d105      	bne.n	8001c3c <stateREG+0x11c>
	{
		BTN.right = BTN_not_pressed;
 8001c30:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <stateREG+0x150>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	70da      	strb	r2, [r3, #3]
		current_state = KP_state;
 8001c36:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <stateREG+0x138>)
 8001c38:	2207      	movs	r2, #7
 8001c3a:	701a      	strb	r2, [r3, #0]
	}
}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	f3af 8000 	nop.w
 8001c48:	00000000 	.word	0x00000000
 8001c4c:	40080000 	.word	0x40080000
 8001c50:	00000000 	.word	0x00000000
 8001c54:	3ff00000 	.word	0x3ff00000
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	200002e8 	.word	0x200002e8
 8001c60:	20000001 	.word	0x20000001
 8001c64:	200002e9 	.word	0x200002e9
 8001c68:	0800a6d8 	.word	0x0800a6d8
 8001c6c:	200002f0 	.word	0x200002f0
 8001c70:	200002ec 	.word	0x200002ec
 8001c74:	00000000 	.word	0x00000000

08001c78 <stateKP>:
void stateKP(PID_variables_t *hvar)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	if (current_state != previous_state || hvar->kp != old_value)
 8001c80:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <stateKP+0x100>)
 8001c82:	781a      	ldrb	r2, [r3, #0]
 8001c84:	4b3d      	ldr	r3, [pc, #244]	; (8001d7c <stateKP+0x104>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d10a      	bne.n	8001ca2 <stateKP+0x2a>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001c92:	4b3b      	ldr	r3, [pc, #236]	; (8001d80 <stateKP+0x108>)
 8001c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c98:	f7fe ff16 	bl	8000ac8 <__aeabi_dcmpeq>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d121      	bne.n	8001ce6 <stateKP+0x6e>
	{
		if (current_state != previous_state)
 8001ca2:	4b35      	ldr	r3, [pc, #212]	; (8001d78 <stateKP+0x100>)
 8001ca4:	781a      	ldrb	r2, [r3, #0]
 8001ca6:	4b35      	ldr	r3, [pc, #212]	; (8001d7c <stateKP+0x104>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d003      	beq.n	8001cb6 <stateKP+0x3e>
		{
			lcd_clear();
 8001cae:	f7ff f887 	bl	8000dc0 <lcd_clear>
			lcd_send_arrows_to_sides();
 8001cb2:	f000 faa1 	bl	80021f8 <lcd_send_arrows_to_sides>
		}
		previous_state = current_state;
 8001cb6:	4b30      	ldr	r3, [pc, #192]	; (8001d78 <stateKP+0x100>)
 8001cb8:	781a      	ldrb	r2, [r3, #0]
 8001cba:	4b30      	ldr	r3, [pc, #192]	; (8001d7c <stateKP+0x104>)
 8001cbc:	701a      	strb	r2, [r3, #0]
		old_value = hvar->kp;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001cc4:	492e      	ldr	r1, [pc, #184]	; (8001d80 <stateKP+0x108>)
 8001cc6:	e9c1 2300 	strd	r2, r3, [r1]

		lcd_put_cur(0, 0);
 8001cca:	2100      	movs	r1, #0
 8001ccc:	2000      	movs	r0, #0
 8001cce:	f7ff f88e 	bl	8000dee <lcd_put_cur>
		sprintf(MSG,"kp = %+06.2f", hvar->kp);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001cd8:	492a      	ldr	r1, [pc, #168]	; (8001d84 <stateKP+0x10c>)
 8001cda:	482b      	ldr	r0, [pc, #172]	; (8001d88 <stateKP+0x110>)
 8001cdc:	f005 febc 	bl	8007a58 <siprintf>
		lcd_send_string(MSG);
 8001ce0:	4829      	ldr	r0, [pc, #164]	; (8001d88 <stateKP+0x110>)
 8001ce2:	f7ff f8e0 	bl	8000ea6 <lcd_send_string>
	}
	if (BTN.ok == BTN_pressed)
 8001ce6:	4b29      	ldr	r3, [pc, #164]	; (8001d8c <stateKP+0x114>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d10f      	bne.n	8001d10 <stateKP+0x98>
	{
		BTN.ok = BTN_not_pressed;
 8001cf0:	4b26      	ldr	r3, [pc, #152]	; (8001d8c <stateKP+0x114>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
		hvar->kp += 0.1;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001cfc:	a31c      	add	r3, pc, #112	; (adr r3, 8001d70 <stateKP+0xf8>)
 8001cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d02:	f7fe fac3 	bl	800028c <__adddf3>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	}
	if (BTN.no == BTN_pressed)
 8001d10:	4b1e      	ldr	r3, [pc, #120]	; (8001d8c <stateKP+0x114>)
 8001d12:	785b      	ldrb	r3, [r3, #1]
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d10f      	bne.n	8001d3a <stateKP+0xc2>
	{
		BTN.no = BTN_not_pressed;
 8001d1a:	4b1c      	ldr	r3, [pc, #112]	; (8001d8c <stateKP+0x114>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	705a      	strb	r2, [r3, #1]
		hvar->kp -= 0.1;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001d26:	a312      	add	r3, pc, #72	; (adr r3, 8001d70 <stateKP+0xf8>)
 8001d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2c:	f7fe faac 	bl	8000288 <__aeabi_dsub>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	}
	if (BTN.left == BTN_pressed)
 8001d3a:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <stateKP+0x114>)
 8001d3c:	789b      	ldrb	r3, [r3, #2]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d105      	bne.n	8001d50 <stateKP+0xd8>
	{
		BTN.left = BTN_not_pressed;
 8001d44:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <stateKP+0x114>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	709a      	strb	r2, [r3, #2]
		current_state = REG_state;
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <stateKP+0x100>)
 8001d4c:	2206      	movs	r2, #6
 8001d4e:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.right == BTN_pressed)
 8001d50:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <stateKP+0x114>)
 8001d52:	78db      	ldrb	r3, [r3, #3]
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d105      	bne.n	8001d66 <stateKP+0xee>
	{
		BTN.right = BTN_not_pressed;
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <stateKP+0x114>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	70da      	strb	r2, [r3, #3]
		current_state = KI_state;
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <stateKP+0x100>)
 8001d62:	2208      	movs	r2, #8
 8001d64:	701a      	strb	r2, [r3, #0]
	}
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	9999999a 	.word	0x9999999a
 8001d74:	3fb99999 	.word	0x3fb99999
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	200002e8 	.word	0x200002e8
 8001d80:	200004a8 	.word	0x200004a8
 8001d84:	0800a6ec 	.word	0x0800a6ec
 8001d88:	200002f0 	.word	0x200002f0
 8001d8c:	200002ec 	.word	0x200002ec

08001d90 <stateKI>:
void stateKI(PID_variables_t *hvar)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	if (current_state != previous_state || hvar->ki != old_value)
 8001d98:	4b3d      	ldr	r3, [pc, #244]	; (8001e90 <stateKI+0x100>)
 8001d9a:	781a      	ldrb	r2, [r3, #0]
 8001d9c:	4b3d      	ldr	r3, [pc, #244]	; (8001e94 <stateKI+0x104>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d10a      	bne.n	8001dba <stateKI+0x2a>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001daa:	4b3b      	ldr	r3, [pc, #236]	; (8001e98 <stateKI+0x108>)
 8001dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db0:	f7fe fe8a 	bl	8000ac8 <__aeabi_dcmpeq>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d121      	bne.n	8001dfe <stateKI+0x6e>
	{
		if (current_state != previous_state)
 8001dba:	4b35      	ldr	r3, [pc, #212]	; (8001e90 <stateKI+0x100>)
 8001dbc:	781a      	ldrb	r2, [r3, #0]
 8001dbe:	4b35      	ldr	r3, [pc, #212]	; (8001e94 <stateKI+0x104>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d003      	beq.n	8001dce <stateKI+0x3e>
		{
			lcd_clear();
 8001dc6:	f7fe fffb 	bl	8000dc0 <lcd_clear>
			lcd_send_arrows_to_sides();
 8001dca:	f000 fa15 	bl	80021f8 <lcd_send_arrows_to_sides>
		}
		previous_state = current_state;
 8001dce:	4b30      	ldr	r3, [pc, #192]	; (8001e90 <stateKI+0x100>)
 8001dd0:	781a      	ldrb	r2, [r3, #0]
 8001dd2:	4b30      	ldr	r3, [pc, #192]	; (8001e94 <stateKI+0x104>)
 8001dd4:	701a      	strb	r2, [r3, #0]
		old_value = hvar->ki;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001ddc:	492e      	ldr	r1, [pc, #184]	; (8001e98 <stateKI+0x108>)
 8001dde:	e9c1 2300 	strd	r2, r3, [r1]

		lcd_put_cur(0, 0);
 8001de2:	2100      	movs	r1, #0
 8001de4:	2000      	movs	r0, #0
 8001de6:	f7ff f802 	bl	8000dee <lcd_put_cur>
		sprintf(MSG,"ki = %+06.2f", hvar->ki);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001df0:	492a      	ldr	r1, [pc, #168]	; (8001e9c <stateKI+0x10c>)
 8001df2:	482b      	ldr	r0, [pc, #172]	; (8001ea0 <stateKI+0x110>)
 8001df4:	f005 fe30 	bl	8007a58 <siprintf>
		lcd_send_string(MSG);
 8001df8:	4829      	ldr	r0, [pc, #164]	; (8001ea0 <stateKI+0x110>)
 8001dfa:	f7ff f854 	bl	8000ea6 <lcd_send_string>
	}

	if (BTN.ok == BTN_pressed)
 8001dfe:	4b29      	ldr	r3, [pc, #164]	; (8001ea4 <stateKI+0x114>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d10f      	bne.n	8001e28 <stateKI+0x98>
	{
		BTN.ok = BTN_not_pressed;
 8001e08:	4b26      	ldr	r3, [pc, #152]	; (8001ea4 <stateKI+0x114>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	701a      	strb	r2, [r3, #0]
		hvar->ki += 0.1;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001e14:	a31c      	add	r3, pc, #112	; (adr r3, 8001e88 <stateKI+0xf8>)
 8001e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1a:	f7fe fa37 	bl	800028c <__adddf3>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	}
	if (BTN.no == BTN_pressed)
 8001e28:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <stateKI+0x114>)
 8001e2a:	785b      	ldrb	r3, [r3, #1]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d10f      	bne.n	8001e52 <stateKI+0xc2>
	{
		BTN.no = BTN_not_pressed;
 8001e32:	4b1c      	ldr	r3, [pc, #112]	; (8001ea4 <stateKI+0x114>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	705a      	strb	r2, [r3, #1]
		hvar->ki -= 0.1;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001e3e:	a312      	add	r3, pc, #72	; (adr r3, 8001e88 <stateKI+0xf8>)
 8001e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e44:	f7fe fa20 	bl	8000288 <__aeabi_dsub>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	}
	if (BTN.left == BTN_pressed)
 8001e52:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <stateKI+0x114>)
 8001e54:	789b      	ldrb	r3, [r3, #2]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d105      	bne.n	8001e68 <stateKI+0xd8>
	{
		BTN.left = BTN_not_pressed;
 8001e5c:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <stateKI+0x114>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	709a      	strb	r2, [r3, #2]
		current_state = KP_state;
 8001e62:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <stateKI+0x100>)
 8001e64:	2207      	movs	r2, #7
 8001e66:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.right == BTN_pressed)
 8001e68:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <stateKI+0x114>)
 8001e6a:	78db      	ldrb	r3, [r3, #3]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d105      	bne.n	8001e7e <stateKI+0xee>
	{
		BTN.right = BTN_not_pressed;
 8001e72:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <stateKI+0x114>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	70da      	strb	r2, [r3, #3]
		current_state = KD_state;
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <stateKI+0x100>)
 8001e7a:	2209      	movs	r2, #9
 8001e7c:	701a      	strb	r2, [r3, #0]
	}
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	9999999a 	.word	0x9999999a
 8001e8c:	3fb99999 	.word	0x3fb99999
 8001e90:	20000000 	.word	0x20000000
 8001e94:	200002e8 	.word	0x200002e8
 8001e98:	200004a8 	.word	0x200004a8
 8001e9c:	0800a6fc 	.word	0x0800a6fc
 8001ea0:	200002f0 	.word	0x200002f0
 8001ea4:	200002ec 	.word	0x200002ec

08001ea8 <stateKD>:
void stateKD(PID_variables_t *hvar)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
	if (current_state != previous_state || hvar->kd != old_value)
 8001eb0:	4b3d      	ldr	r3, [pc, #244]	; (8001fa8 <stateKD+0x100>)
 8001eb2:	781a      	ldrb	r2, [r3, #0]
 8001eb4:	4b3d      	ldr	r3, [pc, #244]	; (8001fac <stateKD+0x104>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d10a      	bne.n	8001ed2 <stateKD+0x2a>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001ec2:	4b3b      	ldr	r3, [pc, #236]	; (8001fb0 <stateKD+0x108>)
 8001ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec8:	f7fe fdfe 	bl	8000ac8 <__aeabi_dcmpeq>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d121      	bne.n	8001f16 <stateKD+0x6e>
	{
		if (current_state != previous_state)
 8001ed2:	4b35      	ldr	r3, [pc, #212]	; (8001fa8 <stateKD+0x100>)
 8001ed4:	781a      	ldrb	r2, [r3, #0]
 8001ed6:	4b35      	ldr	r3, [pc, #212]	; (8001fac <stateKD+0x104>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d003      	beq.n	8001ee6 <stateKD+0x3e>
		{
			lcd_clear();
 8001ede:	f7fe ff6f 	bl	8000dc0 <lcd_clear>
			lcd_send_arrows_to_sides();
 8001ee2:	f000 f989 	bl	80021f8 <lcd_send_arrows_to_sides>
		}
		previous_state = current_state;
 8001ee6:	4b30      	ldr	r3, [pc, #192]	; (8001fa8 <stateKD+0x100>)
 8001ee8:	781a      	ldrb	r2, [r3, #0]
 8001eea:	4b30      	ldr	r3, [pc, #192]	; (8001fac <stateKD+0x104>)
 8001eec:	701a      	strb	r2, [r3, #0]
		old_value = hvar->kd;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001ef4:	492e      	ldr	r1, [pc, #184]	; (8001fb0 <stateKD+0x108>)
 8001ef6:	e9c1 2300 	strd	r2, r3, [r1]

		lcd_put_cur(0, 0);
 8001efa:	2100      	movs	r1, #0
 8001efc:	2000      	movs	r0, #0
 8001efe:	f7fe ff76 	bl	8000dee <lcd_put_cur>
		sprintf(MSG,"kd = %+06.2f", hvar->kd);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001f08:	492a      	ldr	r1, [pc, #168]	; (8001fb4 <stateKD+0x10c>)
 8001f0a:	482b      	ldr	r0, [pc, #172]	; (8001fb8 <stateKD+0x110>)
 8001f0c:	f005 fda4 	bl	8007a58 <siprintf>
		lcd_send_string(MSG);
 8001f10:	4829      	ldr	r0, [pc, #164]	; (8001fb8 <stateKD+0x110>)
 8001f12:	f7fe ffc8 	bl	8000ea6 <lcd_send_string>
	}

	if (BTN.ok == BTN_pressed)
 8001f16:	4b29      	ldr	r3, [pc, #164]	; (8001fbc <stateKD+0x114>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d10f      	bne.n	8001f40 <stateKD+0x98>
	{
		BTN.ok = BTN_not_pressed;
 8001f20:	4b26      	ldr	r3, [pc, #152]	; (8001fbc <stateKD+0x114>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	701a      	strb	r2, [r3, #0]
		hvar->kd += 0.1;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001f2c:	a31c      	add	r3, pc, #112	; (adr r3, 8001fa0 <stateKD+0xf8>)
 8001f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f32:	f7fe f9ab 	bl	800028c <__adddf3>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	}
	if (BTN.no == BTN_pressed)
 8001f40:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <stateKD+0x114>)
 8001f42:	785b      	ldrb	r3, [r3, #1]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d10f      	bne.n	8001f6a <stateKD+0xc2>
	{
		BTN.no = BTN_not_pressed;
 8001f4a:	4b1c      	ldr	r3, [pc, #112]	; (8001fbc <stateKD+0x114>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	705a      	strb	r2, [r3, #1]
		hvar->kd -= 0.1;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001f56:	a312      	add	r3, pc, #72	; (adr r3, 8001fa0 <stateKD+0xf8>)
 8001f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5c:	f7fe f994 	bl	8000288 <__aeabi_dsub>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	}
	if (BTN.left == BTN_pressed)
 8001f6a:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <stateKD+0x114>)
 8001f6c:	789b      	ldrb	r3, [r3, #2]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d105      	bne.n	8001f80 <stateKD+0xd8>
	{
		BTN.left = BTN_not_pressed;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <stateKD+0x114>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	709a      	strb	r2, [r3, #2]
		current_state = KI_state;
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <stateKD+0x100>)
 8001f7c:	2208      	movs	r2, #8
 8001f7e:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.right == BTN_pressed)
 8001f80:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <stateKD+0x114>)
 8001f82:	78db      	ldrb	r3, [r3, #3]
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d105      	bne.n	8001f96 <stateKD+0xee>
	{
		BTN.right = BTN_not_pressed;
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <stateKD+0x114>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	70da      	strb	r2, [r3, #3]
		current_state = INT_state;
 8001f90:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <stateKD+0x100>)
 8001f92:	220a      	movs	r2, #10
 8001f94:	701a      	strb	r2, [r3, #0]
	}
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	9999999a 	.word	0x9999999a
 8001fa4:	3fb99999 	.word	0x3fb99999
 8001fa8:	20000000 	.word	0x20000000
 8001fac:	200002e8 	.word	0x200002e8
 8001fb0:	200004a8 	.word	0x200004a8
 8001fb4:	0800a70c 	.word	0x0800a70c
 8001fb8:	200002f0 	.word	0x200002f0
 8001fbc:	200002ec 	.word	0x200002ec

08001fc0 <stateINT>:
void stateINT(PID_variables_t *hvar)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
	if (current_state != previous_state || hvar->int_limit != old_value)
 8001fc8:	4b3d      	ldr	r3, [pc, #244]	; (80020c0 <stateINT+0x100>)
 8001fca:	781a      	ldrb	r2, [r3, #0]
 8001fcc:	4b3d      	ldr	r3, [pc, #244]	; (80020c4 <stateINT+0x104>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d10a      	bne.n	8001fea <stateINT+0x2a>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001fda:	4b3b      	ldr	r3, [pc, #236]	; (80020c8 <stateINT+0x108>)
 8001fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe0:	f7fe fd72 	bl	8000ac8 <__aeabi_dcmpeq>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d121      	bne.n	800202e <stateINT+0x6e>
	{
		if (current_state != previous_state)
 8001fea:	4b35      	ldr	r3, [pc, #212]	; (80020c0 <stateINT+0x100>)
 8001fec:	781a      	ldrb	r2, [r3, #0]
 8001fee:	4b35      	ldr	r3, [pc, #212]	; (80020c4 <stateINT+0x104>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d003      	beq.n	8001ffe <stateINT+0x3e>
		{
			lcd_clear();
 8001ff6:	f7fe fee3 	bl	8000dc0 <lcd_clear>
			lcd_send_arrows_to_sides();
 8001ffa:	f000 f8fd 	bl	80021f8 <lcd_send_arrows_to_sides>
		}
		previous_state = current_state;
 8001ffe:	4b30      	ldr	r3, [pc, #192]	; (80020c0 <stateINT+0x100>)
 8002000:	781a      	ldrb	r2, [r3, #0]
 8002002:	4b30      	ldr	r3, [pc, #192]	; (80020c4 <stateINT+0x104>)
 8002004:	701a      	strb	r2, [r3, #0]
		old_value = hvar->int_limit;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800200c:	492e      	ldr	r1, [pc, #184]	; (80020c8 <stateINT+0x108>)
 800200e:	e9c1 2300 	strd	r2, r3, [r1]

		lcd_put_cur(0, 0);
 8002012:	2100      	movs	r1, #0
 8002014:	2000      	movs	r0, #0
 8002016:	f7fe feea 	bl	8000dee <lcd_put_cur>
		sprintf(MSG,"int_lim = %+06.2f", hvar->int_limit);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002020:	492a      	ldr	r1, [pc, #168]	; (80020cc <stateINT+0x10c>)
 8002022:	482b      	ldr	r0, [pc, #172]	; (80020d0 <stateINT+0x110>)
 8002024:	f005 fd18 	bl	8007a58 <siprintf>
		lcd_send_string(MSG);
 8002028:	4829      	ldr	r0, [pc, #164]	; (80020d0 <stateINT+0x110>)
 800202a:	f7fe ff3c 	bl	8000ea6 <lcd_send_string>
	}
	if (BTN.ok == BTN_pressed)
 800202e:	4b29      	ldr	r3, [pc, #164]	; (80020d4 <stateINT+0x114>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b01      	cmp	r3, #1
 8002036:	d10f      	bne.n	8002058 <stateINT+0x98>
	{
		BTN.ok = BTN_not_pressed;
 8002038:	4b26      	ldr	r3, [pc, #152]	; (80020d4 <stateINT+0x114>)
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
		hvar->int_limit += 0.1;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002044:	a31c      	add	r3, pc, #112	; (adr r3, 80020b8 <stateINT+0xf8>)
 8002046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204a:	f7fe f91f 	bl	800028c <__adddf3>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	}
	if (BTN.no == BTN_pressed)
 8002058:	4b1e      	ldr	r3, [pc, #120]	; (80020d4 <stateINT+0x114>)
 800205a:	785b      	ldrb	r3, [r3, #1]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b01      	cmp	r3, #1
 8002060:	d10f      	bne.n	8002082 <stateINT+0xc2>
	{
		BTN.no = BTN_not_pressed;
 8002062:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <stateINT+0x114>)
 8002064:	2200      	movs	r2, #0
 8002066:	705a      	strb	r2, [r3, #1]
		hvar->int_limit -= 0.1;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800206e:	a312      	add	r3, pc, #72	; (adr r3, 80020b8 <stateINT+0xf8>)
 8002070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002074:	f7fe f908 	bl	8000288 <__aeabi_dsub>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	}
	if (BTN.left == BTN_pressed)
 8002082:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <stateINT+0x114>)
 8002084:	789b      	ldrb	r3, [r3, #2]
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b01      	cmp	r3, #1
 800208a:	d105      	bne.n	8002098 <stateINT+0xd8>
	{
		BTN.left = BTN_not_pressed;
 800208c:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <stateINT+0x114>)
 800208e:	2200      	movs	r2, #0
 8002090:	709a      	strb	r2, [r3, #2]
		current_state = KD_state;
 8002092:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <stateINT+0x100>)
 8002094:	2209      	movs	r2, #9
 8002096:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.right == BTN_pressed)
 8002098:	4b0e      	ldr	r3, [pc, #56]	; (80020d4 <stateINT+0x114>)
 800209a:	78db      	ldrb	r3, [r3, #3]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d105      	bne.n	80020ae <stateINT+0xee>
	{
		BTN.right = BTN_not_pressed;
 80020a2:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <stateINT+0x114>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	70da      	strb	r2, [r3, #3]
		current_state = TRG_state;
 80020a8:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <stateINT+0x100>)
 80020aa:	220b      	movs	r2, #11
 80020ac:	701a      	strb	r2, [r3, #0]
	}
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	9999999a 	.word	0x9999999a
 80020bc:	3fb99999 	.word	0x3fb99999
 80020c0:	20000000 	.word	0x20000000
 80020c4:	200002e8 	.word	0x200002e8
 80020c8:	200004a8 	.word	0x200004a8
 80020cc:	0800a71c 	.word	0x0800a71c
 80020d0:	200002f0 	.word	0x200002f0
 80020d4:	200002ec 	.word	0x200002ec

080020d8 <stateTRG>:
void stateTRG(PID_variables_t *hvar)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
	if (current_state != previous_state || hvar->target_value != old_value)
 80020e0:	4b3f      	ldr	r3, [pc, #252]	; (80021e0 <stateTRG+0x108>)
 80020e2:	781a      	ldrb	r2, [r3, #0]
 80020e4:	4b3f      	ldr	r3, [pc, #252]	; (80021e4 <stateTRG+0x10c>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d10a      	bne.n	8002102 <stateTRG+0x2a>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020f2:	4b3d      	ldr	r3, [pc, #244]	; (80021e8 <stateTRG+0x110>)
 80020f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f8:	f7fe fce6 	bl	8000ac8 <__aeabi_dcmpeq>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d126      	bne.n	8002150 <stateTRG+0x78>
	{
		if (current_state != previous_state)
 8002102:	4b37      	ldr	r3, [pc, #220]	; (80021e0 <stateTRG+0x108>)
 8002104:	781a      	ldrb	r2, [r3, #0]
 8002106:	4b37      	ldr	r3, [pc, #220]	; (80021e4 <stateTRG+0x10c>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d008      	beq.n	8002120 <stateTRG+0x48>
		{
			lcd_clear();
 800210e:	f7fe fe57 	bl	8000dc0 <lcd_clear>
			lcd_put_cur(1, 0);
 8002112:	2100      	movs	r1, #0
 8002114:	2001      	movs	r0, #1
 8002116:	f7fe fe6a 	bl	8000dee <lcd_put_cur>
			lcd_send_data(LCD_LEFT_ARROW);
 800211a:	207f      	movs	r0, #127	; 0x7f
 800211c:	f7fe fe20 	bl	8000d60 <lcd_send_data>
		}
		previous_state = current_state;
 8002120:	4b2f      	ldr	r3, [pc, #188]	; (80021e0 <stateTRG+0x108>)
 8002122:	781a      	ldrb	r2, [r3, #0]
 8002124:	4b2f      	ldr	r3, [pc, #188]	; (80021e4 <stateTRG+0x10c>)
 8002126:	701a      	strb	r2, [r3, #0]
		old_value = hvar->target_value;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212e:	492e      	ldr	r1, [pc, #184]	; (80021e8 <stateTRG+0x110>)
 8002130:	e9c1 2300 	strd	r2, r3, [r1]

		lcd_put_cur(0, 0);
 8002134:	2100      	movs	r1, #0
 8002136:	2000      	movs	r0, #0
 8002138:	f7fe fe59 	bl	8000dee <lcd_put_cur>
		sprintf(MSG,"target = %+06.2f", hvar->target_value);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002142:	492a      	ldr	r1, [pc, #168]	; (80021ec <stateTRG+0x114>)
 8002144:	482a      	ldr	r0, [pc, #168]	; (80021f0 <stateTRG+0x118>)
 8002146:	f005 fc87 	bl	8007a58 <siprintf>
		lcd_send_string(MSG);
 800214a:	4829      	ldr	r0, [pc, #164]	; (80021f0 <stateTRG+0x118>)
 800214c:	f7fe feab 	bl	8000ea6 <lcd_send_string>
	}
	if (BTN.ok == BTN_pressed)
 8002150:	4b28      	ldr	r3, [pc, #160]	; (80021f4 <stateTRG+0x11c>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b01      	cmp	r3, #1
 8002158:	d10f      	bne.n	800217a <stateTRG+0xa2>
	{
		BTN.ok = BTN_not_pressed;
 800215a:	4b26      	ldr	r3, [pc, #152]	; (80021f4 <stateTRG+0x11c>)
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]
		hvar->target_value += 0.1;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002166:	a31c      	add	r3, pc, #112	; (adr r3, 80021d8 <stateTRG+0x100>)
 8002168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216c:	f7fe f88e 	bl	800028c <__adddf3>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	e9c1 2300 	strd	r2, r3, [r1]
	}
	if (BTN.no == BTN_pressed)
 800217a:	4b1e      	ldr	r3, [pc, #120]	; (80021f4 <stateTRG+0x11c>)
 800217c:	785b      	ldrb	r3, [r3, #1]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b01      	cmp	r3, #1
 8002182:	d10f      	bne.n	80021a4 <stateTRG+0xcc>
	{
		BTN.no = BTN_not_pressed;
 8002184:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <stateTRG+0x11c>)
 8002186:	2200      	movs	r2, #0
 8002188:	705a      	strb	r2, [r3, #1]
		hvar->target_value -= 0.1;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002190:	a311      	add	r3, pc, #68	; (adr r3, 80021d8 <stateTRG+0x100>)
 8002192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002196:	f7fe f877 	bl	8000288 <__aeabi_dsub>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	e9c1 2300 	strd	r2, r3, [r1]
	}
	if (BTN.left == BTN_pressed)
 80021a4:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <stateTRG+0x11c>)
 80021a6:	789b      	ldrb	r3, [r3, #2]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d105      	bne.n	80021ba <stateTRG+0xe2>
	{
		BTN.left = BTN_not_pressed;
 80021ae:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <stateTRG+0x11c>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	709a      	strb	r2, [r3, #2]
		current_state = INT_state;
 80021b4:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <stateTRG+0x108>)
 80021b6:	220a      	movs	r2, #10
 80021b8:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.right == BTN_pressed)
 80021ba:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <stateTRG+0x11c>)
 80021bc:	78db      	ldrb	r3, [r3, #3]
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d102      	bne.n	80021ca <stateTRG+0xf2>
	{
		BTN.right = BTN_not_pressed;
 80021c4:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <stateTRG+0x11c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	70da      	strb	r2, [r3, #3]
	}
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	f3af 8000 	nop.w
 80021d8:	9999999a 	.word	0x9999999a
 80021dc:	3fb99999 	.word	0x3fb99999
 80021e0:	20000000 	.word	0x20000000
 80021e4:	200002e8 	.word	0x200002e8
 80021e8:	200004a8 	.word	0x200004a8
 80021ec:	0800a730 	.word	0x0800a730
 80021f0:	200002f0 	.word	0x200002f0
 80021f4:	200002ec 	.word	0x200002ec

080021f8 <lcd_send_arrows_to_sides>:

/*
 * Function for displaying both arrows on LCD xd
 */
void lcd_send_arrows_to_sides(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
	lcd_put_cur(1, 0);
 80021fc:	2100      	movs	r1, #0
 80021fe:	2001      	movs	r0, #1
 8002200:	f7fe fdf5 	bl	8000dee <lcd_put_cur>
	lcd_send_data(LCD_LEFT_ARROW);
 8002204:	207f      	movs	r0, #127	; 0x7f
 8002206:	f7fe fdab 	bl	8000d60 <lcd_send_data>
	lcd_put_cur(1, 15);
 800220a:	210f      	movs	r1, #15
 800220c:	2001      	movs	r0, #1
 800220e:	f7fe fdee 	bl	8000dee <lcd_put_cur>
	lcd_send_data(LCD_RIGHT_ARROW);
 8002212:	207e      	movs	r0, #126	; 0x7e
 8002214:	f7fe fda4 	bl	8000d60 <lcd_send_data>
}
 8002218:	bf00      	nop
 800221a:	bd80      	pop	{r7, pc}

0800221c <setMotors>:
 * @parameter right_motor_speed
 * @parameter
 * @parameter
 */
void setMotors(int left_motor_speed, int right_motor_speed, int zero_speed, int offset_zero_speed)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
 8002228:	603b      	str	r3, [r7, #0]
	// -------- min -------------- -offset --- zero --- +offset --------------- max ------->
	// ------ zero+offset_pwm -------------- max_pwm ------>
	//	long left_motor_duty = map(abs(left_motor_speed), 0, 100, 0, 999);
	//	long right_motor_duty = map(abs(right_motor_speed), 0, 100, 0, 999); for testing purposes
	long left_motor_duty = abs(left_motor_speed);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	bfb8      	it	lt
 8002230:	425b      	neglt	r3, r3
 8002232:	617b      	str	r3, [r7, #20]
	long right_motor_duty = abs(right_motor_speed);
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	bfb8      	it	lt
 800223a:	425b      	neglt	r3, r3
 800223c:	613b      	str	r3, [r7, #16]
	if (left_motor_speed > zero_speed + offset_zero_speed) 	// LEFT MOTOR
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	4413      	add	r3, r2
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	429a      	cmp	r2, r3
 8002248:	dd0f      	ble.n	800226a <setMotors+0x4e>
	{
		HAL_GPIO_WritePin(GPIOB, EN_L_1_Pin, GPIO_PIN_SET); 	// HIGH
 800224a:	2201      	movs	r2, #1
 800224c:	2102      	movs	r1, #2
 800224e:	4835      	ldr	r0, [pc, #212]	; (8002324 <setMotors+0x108>)
 8002250:	f001 fc0e 	bl	8003a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN_L_2_Pin, GPIO_PIN_RESET); 	// LOW
 8002254:	2200      	movs	r2, #0
 8002256:	2110      	movs	r1, #16
 8002258:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800225c:	f001 fc08 	bl	8003a70 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, left_motor_duty);	// Timer
 8002260:	4b31      	ldr	r3, [pc, #196]	; (8002328 <setMotors+0x10c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	639a      	str	r2, [r3, #56]	; 0x38
 8002268:	e020      	b.n	80022ac <setMotors+0x90>
	}
	else if (left_motor_speed < zero_speed - offset_zero_speed)
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	429a      	cmp	r2, r3
 8002274:	da0f      	bge.n	8002296 <setMotors+0x7a>
	{
		HAL_GPIO_WritePin(GPIOB, EN_L_1_Pin, GPIO_PIN_RESET); 	// LOW
 8002276:	2200      	movs	r2, #0
 8002278:	2102      	movs	r1, #2
 800227a:	482a      	ldr	r0, [pc, #168]	; (8002324 <setMotors+0x108>)
 800227c:	f001 fbf8 	bl	8003a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN_L_2_Pin, GPIO_PIN_SET); 	// HIGH
 8002280:	2201      	movs	r2, #1
 8002282:	2110      	movs	r1, #16
 8002284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002288:	f001 fbf2 	bl	8003a70 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, left_motor_duty); // Timer
 800228c:	4b26      	ldr	r3, [pc, #152]	; (8002328 <setMotors+0x10c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	639a      	str	r2, [r3, #56]	; 0x38
 8002294:	e00a      	b.n	80022ac <setMotors+0x90>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, EN_L_1_Pin, GPIO_PIN_RESET); 	// LOW
 8002296:	2200      	movs	r2, #0
 8002298:	2102      	movs	r1, #2
 800229a:	4822      	ldr	r0, [pc, #136]	; (8002324 <setMotors+0x108>)
 800229c:	f001 fbe8 	bl	8003a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN_L_2_Pin, GPIO_PIN_RESET); 	// LOW
 80022a0:	2200      	movs	r2, #0
 80022a2:	2110      	movs	r1, #16
 80022a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022a8:	f001 fbe2 	bl	8003a70 <HAL_GPIO_WritePin>
	}
	if (right_motor_speed > zero_speed + offset_zero_speed)	// RIGHT MOTOR
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	4413      	add	r3, r2
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	dd0f      	ble.n	80022d8 <setMotors+0xbc>
	{
		HAL_GPIO_WritePin(GPIOB, EN_R_1_Pin, GPIO_PIN_SET); 	// HIGH
 80022b8:	2201      	movs	r2, #1
 80022ba:	2101      	movs	r1, #1
 80022bc:	4819      	ldr	r0, [pc, #100]	; (8002324 <setMotors+0x108>)
 80022be:	f001 fbd7 	bl	8003a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN_R_2_Pin, GPIO_PIN_RESET); 	// LOW
 80022c2:	2200      	movs	r2, #0
 80022c4:	2180      	movs	r1, #128	; 0x80
 80022c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ca:	f001 fbd1 	bl	8003a70 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, right_motor_duty); // Timer
 80022ce:	4b16      	ldr	r3, [pc, #88]	; (8002328 <setMotors+0x10c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	635a      	str	r2, [r3, #52]	; 0x34
	else
	{
		HAL_GPIO_WritePin(GPIOB, EN_R_1_Pin, GPIO_PIN_RESET); 	// LOW
		HAL_GPIO_WritePin(GPIOA, EN_R_2_Pin, GPIO_PIN_RESET); 	// LOW
	}
}
 80022d6:	e020      	b.n	800231a <setMotors+0xfe>
	else if (right_motor_speed < zero_speed - offset_zero_speed)
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	da0f      	bge.n	8002304 <setMotors+0xe8>
		HAL_GPIO_WritePin(GPIOB, EN_R_1_Pin, GPIO_PIN_RESET); 	// LOW
 80022e4:	2200      	movs	r2, #0
 80022e6:	2101      	movs	r1, #1
 80022e8:	480e      	ldr	r0, [pc, #56]	; (8002324 <setMotors+0x108>)
 80022ea:	f001 fbc1 	bl	8003a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN_R_2_Pin, GPIO_PIN_SET); 	// HIGH
 80022ee:	2201      	movs	r2, #1
 80022f0:	2180      	movs	r1, #128	; 0x80
 80022f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022f6:	f001 fbbb 	bl	8003a70 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, right_motor_duty); // Timer
 80022fa:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <setMotors+0x10c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002302:	e00a      	b.n	800231a <setMotors+0xfe>
		HAL_GPIO_WritePin(GPIOB, EN_R_1_Pin, GPIO_PIN_RESET); 	// LOW
 8002304:	2200      	movs	r2, #0
 8002306:	2101      	movs	r1, #1
 8002308:	4806      	ldr	r0, [pc, #24]	; (8002324 <setMotors+0x108>)
 800230a:	f001 fbb1 	bl	8003a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN_R_2_Pin, GPIO_PIN_RESET); 	// LOW
 800230e:	2200      	movs	r2, #0
 8002310:	2180      	movs	r1, #128	; 0x80
 8002312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002316:	f001 fbab 	bl	8003a70 <HAL_GPIO_WritePin>
}
 800231a:	bf00      	nop
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	48000400 	.word	0x48000400
 8002328:	2000059c 	.word	0x2000059c

0800232c <constrain>:
 * @parameter upper_bound
 *
 * @returns constrained x
 */
double constrain(double x, double lower_bound, double upper_bound)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	ed87 0b04 	vstr	d0, [r7, #16]
 8002336:	ed87 1b02 	vstr	d1, [r7, #8]
 800233a:	ed87 2b00 	vstr	d2, [r7]
	if (x > upper_bound)
 800233e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002342:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002346:	f7fe fbe7 	bl	8000b18 <__aeabi_dcmpgt>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d002      	beq.n	8002356 <constrain+0x2a>
	{
		return upper_bound;
 8002350:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002354:	e00d      	b.n	8002372 <constrain+0x46>
	}
	else if (x < lower_bound)
 8002356:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800235a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800235e:	f7fe fbbd 	bl	8000adc <__aeabi_dcmplt>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <constrain+0x42>
	{
		return lower_bound;
 8002368:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800236c:	e001      	b.n	8002372 <constrain+0x46>
	}
	else
	{
		return x;
 800236e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
	}
}
 8002372:	ec43 2b17 	vmov	d7, r2, r3
 8002376:	eeb0 0a47 	vmov.f32	s0, s14
 800237a:	eef0 0a67 	vmov.f32	s1, s15
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <PID>:
 * @parameter *hvar
 *
 * @returns PID
 */
double PID(double current_value, double target_value, PID_variables_t *hvar)
{
 8002384:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002388:	b086      	sub	sp, #24
 800238a:	af00      	add	r7, sp, #0
 800238c:	ed87 0b04 	vstr	d0, [r7, #16]
 8002390:	ed87 1b02 	vstr	d1, [r7, #8]
 8002394:	6078      	str	r0, [r7, #4]
	hvar->error = (target_value - current_value);	// error calc
 8002396:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800239a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800239e:	f7fd ff73 	bl	8000288 <__aeabi_dsub>
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	hvar->integral = hvar->integral + hvar->error * hvar->delta_time; 	// Euler quadrature integral
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80023be:	f7fe f91b 	bl	80005f8 <__aeabi_dmul>
 80023c2:	4602      	mov	r2, r0
 80023c4:	460b      	mov	r3, r1
 80023c6:	4620      	mov	r0, r4
 80023c8:	4629      	mov	r1, r5
 80023ca:	f7fd ff5f 	bl	800028c <__adddf3>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	hvar->integral = constrain(hvar->integral, -hvar->int_limit, hvar->int_limit);	// Anti windup
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	ed93 7b06 	vldr	d7, [r3, #24]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80023e4:	4690      	mov	r8, r2
 80023e6:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 80023f0:	eeb0 2a46 	vmov.f32	s4, s12
 80023f4:	eef0 2a66 	vmov.f32	s5, s13
 80023f8:	ec49 8b11 	vmov	d1, r8, r9
 80023fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002400:	eef0 0a67 	vmov.f32	s1, s15
 8002404:	f7ff ff92 	bl	800232c <constrain>
 8002408:	eeb0 7a40 	vmov.f32	s14, s0
 800240c:	eef0 7a60 	vmov.f32	s15, s1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	ed83 7b06 	vstr	d7, [r3, #24]
	hvar->derivative = (hvar->error - hvar->previous_error) / hvar->delta_time;	// derivative
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002422:	f7fd ff31 	bl	8000288 <__aeabi_dsub>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	4610      	mov	r0, r2
 800242c:	4619      	mov	r1, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002434:	f7fe fa0a 	bl	800084c <__aeabi_ddiv>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	hvar->previous_error = hvar->error;		// save last error for further calculation
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	return (hvar->ki * hvar->error) + (hvar->ki * hvar->integral) + (hvar->kd * hvar->derivative);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800245a:	f7fe f8cd 	bl	80005f8 <__aeabi_dmul>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	4614      	mov	r4, r2
 8002464:	461d      	mov	r5, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002472:	f7fe f8c1 	bl	80005f8 <__aeabi_dmul>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4620      	mov	r0, r4
 800247c:	4629      	mov	r1, r5
 800247e:	f7fd ff05 	bl	800028c <__adddf3>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4614      	mov	r4, r2
 8002488:	461d      	mov	r5, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002496:	f7fe f8af 	bl	80005f8 <__aeabi_dmul>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4620      	mov	r0, r4
 80024a0:	4629      	mov	r1, r5
 80024a2:	f7fd fef3 	bl	800028c <__adddf3>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	ec43 2b17 	vmov	d7, r2, r3
}
 80024ae:	eeb0 0a47 	vmov.f32	s0, s14
 80024b2:	eef0 0a67 	vmov.f32	s1, s15
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080024c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  if (htim == &htim7)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a06      	ldr	r2, [pc, #24]	; (80024e4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d102      	bne.n	80024d6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
	  tim7_20ms_flag = TIM_interrupted;
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	701a      	strb	r2, [r3, #0]
  }
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20000550 	.word	0x20000550
 80024e8:	200002ea 	.word	0x200002ea

080024ec <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BTN_OK_Pin)
 80024f6:	88fb      	ldrh	r3, [r7, #6]
 80024f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024fc:	d105      	bne.n	800250a <HAL_GPIO_EXTI_Callback+0x1e>
	{
		BTN.ok = BTN_pressed;
 80024fe:	4b13      	ldr	r3, [pc, #76]	; (800254c <HAL_GPIO_EXTI_Callback+0x60>)
 8002500:	2201      	movs	r2, #1
 8002502:	701a      	strb	r2, [r3, #0]
		HAL_Delay(5); // XDDDD INTERRUPTS ALE CALLED TWICE WITHOUT THIS DUDE RIGHT HERE XD FIXME
 8002504:	2005      	movs	r0, #5
 8002506:	f001 f813 	bl	8003530 <HAL_Delay>
	}
	if (GPIO_Pin == BTN_NO_Pin)
 800250a:	88fb      	ldrh	r3, [r7, #6]
 800250c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002510:	d105      	bne.n	800251e <HAL_GPIO_EXTI_Callback+0x32>
	{
		BTN.no = BTN_pressed;
 8002512:	4b0e      	ldr	r3, [pc, #56]	; (800254c <HAL_GPIO_EXTI_Callback+0x60>)
 8002514:	2201      	movs	r2, #1
 8002516:	705a      	strb	r2, [r3, #1]
		HAL_Delay(5); // XDDDD INTERRUPTS ALE CALLED TWICE WITHOUT THIS DUDE RIGHT HERE XD FIXME
 8002518:	2005      	movs	r0, #5
 800251a:	f001 f809 	bl	8003530 <HAL_Delay>
	}
	if (GPIO_Pin == BTN_LE_Pin)
 800251e:	88fb      	ldrh	r3, [r7, #6]
 8002520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002524:	d105      	bne.n	8002532 <HAL_GPIO_EXTI_Callback+0x46>
	{
		BTN.left = BTN_pressed;
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <HAL_GPIO_EXTI_Callback+0x60>)
 8002528:	2201      	movs	r2, #1
 800252a:	709a      	strb	r2, [r3, #2]
		HAL_Delay(5); // XDDDD INTERRUPTS ALE CALLED TWICE WITHOUT THIS DUDE RIGHT HERE XD FIXME
 800252c:	2005      	movs	r0, #5
 800252e:	f000 ffff 	bl	8003530 <HAL_Delay>
	}
	if (GPIO_Pin == BTN_RI_Pin)
 8002532:	88fb      	ldrh	r3, [r7, #6]
 8002534:	2b20      	cmp	r3, #32
 8002536:	d105      	bne.n	8002544 <HAL_GPIO_EXTI_Callback+0x58>
	{
		BTN.right = BTN_pressed;
 8002538:	4b04      	ldr	r3, [pc, #16]	; (800254c <HAL_GPIO_EXTI_Callback+0x60>)
 800253a:	2201      	movs	r2, #1
 800253c:	70da      	strb	r2, [r3, #3]
		HAL_Delay(5); // XDDDD INTERRUPTS ALE CALLED TWICE WITHOUT THIS DUDE RIGHT HERE XD FIXME
 800253e:	2005      	movs	r0, #5
 8002540:	f000 fff6 	bl	8003530 <HAL_Delay>
	}
}
 8002544:	bf00      	nop
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	200002ec 	.word	0x200002ec

08002550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	lcd_clear();
 8002554:	f7fe fc34 	bl	8000dc0 <lcd_clear>
	lcd_send_string("ERROR");	// RISKY XD
 8002558:	4802      	ldr	r0, [pc, #8]	; (8002564 <Error_Handler+0x14>)
 800255a:	f7fe fca4 	bl	8000ea6 <lcd_send_string>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800255e:	b672      	cpsid	i
}
 8002560:	bf00      	nop

  __disable_irq();
  while (1)
 8002562:	e7fe      	b.n	8002562 <Error_Handler+0x12>
 8002564:	0800a744 	.word	0x0800a744

08002568 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b088      	sub	sp, #32
 800256c:	af04      	add	r7, sp, #16
 800256e:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002570:	2364      	movs	r3, #100	; 0x64
 8002572:	9302      	str	r3, [sp, #8]
 8002574:	2301      	movs	r3, #1
 8002576:	9301      	str	r3, [sp, #4]
 8002578:	f107 030f 	add.w	r3, r7, #15
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	2301      	movs	r3, #1
 8002580:	2275      	movs	r2, #117	; 0x75
 8002582:	21d0      	movs	r1, #208	; 0xd0
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f001 fd55 	bl	8004034 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	2b68      	cmp	r3, #104	; 0x68
 800258e:	d13d      	bne.n	800260c <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8002590:	2300      	movs	r3, #0
 8002592:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002594:	2364      	movs	r3, #100	; 0x64
 8002596:	9302      	str	r3, [sp, #8]
 8002598:	2301      	movs	r3, #1
 800259a:	9301      	str	r3, [sp, #4]
 800259c:	f107 030e 	add.w	r3, r7, #14
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	2301      	movs	r3, #1
 80025a4:	226b      	movs	r2, #107	; 0x6b
 80025a6:	21d0      	movs	r1, #208	; 0xd0
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f001 fc2f 	bl	8003e0c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80025ae:	2307      	movs	r3, #7
 80025b0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80025b2:	2364      	movs	r3, #100	; 0x64
 80025b4:	9302      	str	r3, [sp, #8]
 80025b6:	2301      	movs	r3, #1
 80025b8:	9301      	str	r3, [sp, #4]
 80025ba:	f107 030e 	add.w	r3, r7, #14
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	2301      	movs	r3, #1
 80025c2:	2219      	movs	r2, #25
 80025c4:	21d0      	movs	r1, #208	; 0xd0
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f001 fc20 	bl	8003e0c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80025cc:	2300      	movs	r3, #0
 80025ce:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80025d0:	2364      	movs	r3, #100	; 0x64
 80025d2:	9302      	str	r3, [sp, #8]
 80025d4:	2301      	movs	r3, #1
 80025d6:	9301      	str	r3, [sp, #4]
 80025d8:	f107 030e 	add.w	r3, r7, #14
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	2301      	movs	r3, #1
 80025e0:	221c      	movs	r2, #28
 80025e2:	21d0      	movs	r1, #208	; 0xd0
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f001 fc11 	bl	8003e0c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80025ea:	2300      	movs	r3, #0
 80025ec:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80025ee:	2364      	movs	r3, #100	; 0x64
 80025f0:	9302      	str	r3, [sp, #8]
 80025f2:	2301      	movs	r3, #1
 80025f4:	9301      	str	r3, [sp, #4]
 80025f6:	f107 030e 	add.w	r3, r7, #14
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	2301      	movs	r3, #1
 80025fe:	221b      	movs	r2, #27
 8002600:	21d0      	movs	r1, #208	; 0xd0
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f001 fc02 	bl	8003e0c <HAL_I2C_Mem_Write>
        return 0;
 8002608:	2300      	movs	r3, #0
 800260a:	e000      	b.n	800260e <MPU6050_Init+0xa6>
    }
    return 1;
 800260c:	2301      	movs	r3, #1
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8002618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800261c:	b094      	sub	sp, #80	; 0x50
 800261e:	af04      	add	r7, sp, #16
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8002624:	2364      	movs	r3, #100	; 0x64
 8002626:	9302      	str	r3, [sp, #8]
 8002628:	230e      	movs	r3, #14
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	f107 0308 	add.w	r3, r7, #8
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	2301      	movs	r3, #1
 8002634:	223b      	movs	r2, #59	; 0x3b
 8002636:	21d0      	movs	r1, #208	; 0xd0
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f001 fcfb 	bl	8004034 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800263e:	7a3b      	ldrb	r3, [r7, #8]
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	b21a      	sxth	r2, r3
 8002644:	7a7b      	ldrb	r3, [r7, #9]
 8002646:	b21b      	sxth	r3, r3
 8002648:	4313      	orrs	r3, r2
 800264a:	b21a      	sxth	r2, r3
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8002650:	7abb      	ldrb	r3, [r7, #10]
 8002652:	021b      	lsls	r3, r3, #8
 8002654:	b21a      	sxth	r2, r3
 8002656:	7afb      	ldrb	r3, [r7, #11]
 8002658:	b21b      	sxth	r3, r3
 800265a:	4313      	orrs	r3, r2
 800265c:	b21a      	sxth	r2, r3
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8002662:	7b3b      	ldrb	r3, [r7, #12]
 8002664:	021b      	lsls	r3, r3, #8
 8002666:	b21a      	sxth	r2, r3
 8002668:	7b7b      	ldrb	r3, [r7, #13]
 800266a:	b21b      	sxth	r3, r3
 800266c:	4313      	orrs	r3, r2
 800266e:	b21a      	sxth	r2, r3
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8002674:	7bbb      	ldrb	r3, [r7, #14]
 8002676:	021b      	lsls	r3, r3, #8
 8002678:	b21a      	sxth	r2, r3
 800267a:	7bfb      	ldrb	r3, [r7, #15]
 800267c:	b21b      	sxth	r3, r3
 800267e:	4313      	orrs	r3, r2
 8002680:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8002682:	7c3b      	ldrb	r3, [r7, #16]
 8002684:	021b      	lsls	r3, r3, #8
 8002686:	b21a      	sxth	r2, r3
 8002688:	7c7b      	ldrb	r3, [r7, #17]
 800268a:	b21b      	sxth	r3, r3
 800268c:	4313      	orrs	r3, r2
 800268e:	b21a      	sxth	r2, r3
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8002694:	7cbb      	ldrb	r3, [r7, #18]
 8002696:	021b      	lsls	r3, r3, #8
 8002698:	b21a      	sxth	r2, r3
 800269a:	7cfb      	ldrb	r3, [r7, #19]
 800269c:	b21b      	sxth	r3, r3
 800269e:	4313      	orrs	r3, r2
 80026a0:	b21a      	sxth	r2, r3
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80026a6:	7d3b      	ldrb	r3, [r7, #20]
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	b21a      	sxth	r2, r3
 80026ac:	7d7b      	ldrb	r3, [r7, #21]
 80026ae:	b21b      	sxth	r3, r3
 80026b0:	4313      	orrs	r3, r2
 80026b2:	b21a      	sxth	r2, r3
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fd ff30 	bl	8000524 <__aeabi_i2d>
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	4bbd      	ldr	r3, [pc, #756]	; (80029c0 <MPU6050_Read_All+0x3a8>)
 80026ca:	f7fe f8bf 	bl	800084c <__aeabi_ddiv>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	6839      	ldr	r1, [r7, #0]
 80026d4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fd ff20 	bl	8000524 <__aeabi_i2d>
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	4bb5      	ldr	r3, [pc, #724]	; (80029c0 <MPU6050_Read_All+0x3a8>)
 80026ea:	f7fe f8af 	bl	800084c <__aeabi_ddiv>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	6839      	ldr	r1, [r7, #0]
 80026f4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fd ff10 	bl	8000524 <__aeabi_i2d>
 8002704:	a3a8      	add	r3, pc, #672	; (adr r3, 80029a8 <MPU6050_Read_All+0x390>)
 8002706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270a:	f7fe f89f 	bl	800084c <__aeabi_ddiv>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	6839      	ldr	r1, [r7, #0]
 8002714:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8002718:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800271c:	ee07 3a90 	vmov	s15, r3
 8002720:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002724:	eddf 6aa7 	vldr	s13, [pc, #668]	; 80029c4 <MPU6050_Read_All+0x3ac>
 8002728:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800272c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80029c8 <MPU6050_Read_All+0x3b0>
 8002730:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002740:	4618      	mov	r0, r3
 8002742:	f7fd feef 	bl	8000524 <__aeabi_i2d>
 8002746:	a39a      	add	r3, pc, #616	; (adr r3, 80029b0 <MPU6050_Read_All+0x398>)
 8002748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274c:	f7fe f87e 	bl	800084c <__aeabi_ddiv>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	6839      	ldr	r1, [r7, #0]
 8002756:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002760:	4618      	mov	r0, r3
 8002762:	f7fd fedf 	bl	8000524 <__aeabi_i2d>
 8002766:	a392      	add	r3, pc, #584	; (adr r3, 80029b0 <MPU6050_Read_All+0x398>)
 8002768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276c:	f7fe f86e 	bl	800084c <__aeabi_ddiv>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	6839      	ldr	r1, [r7, #0]
 8002776:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002780:	4618      	mov	r0, r3
 8002782:	f7fd fecf 	bl	8000524 <__aeabi_i2d>
 8002786:	a38a      	add	r3, pc, #552	; (adr r3, 80029b0 <MPU6050_Read_All+0x398>)
 8002788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278c:	f7fe f85e 	bl	800084c <__aeabi_ddiv>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	6839      	ldr	r1, [r7, #0]
 8002796:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 800279a:	f000 febd 	bl	8003518 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	4b8a      	ldr	r3, [pc, #552]	; (80029cc <MPU6050_Read_All+0x3b4>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fd feac 	bl	8000504 <__aeabi_ui2d>
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	4b87      	ldr	r3, [pc, #540]	; (80029d0 <MPU6050_Read_All+0x3b8>)
 80027b2:	f7fe f84b 	bl	800084c <__aeabi_ddiv>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80027be:	f000 feab 	bl	8003518 <HAL_GetTick>
 80027c2:	4603      	mov	r3, r0
 80027c4:	4a81      	ldr	r2, [pc, #516]	; (80029cc <MPU6050_Read_All+0x3b4>)
 80027c6:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027ce:	461a      	mov	r2, r3
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027d6:	fb03 f202 	mul.w	r2, r3, r2
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027e0:	4619      	mov	r1, r3
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fd fe98 	bl	8000524 <__aeabi_i2d>
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	ec43 2b10 	vmov	d0, r2, r3
 80027fc:	f007 fd63 	bl	800a2c6 <sqrt>
 8002800:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002810:	f7fe f95a 	bl	8000ac8 <__aeabi_dcmpeq>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d11f      	bne.n	800285a <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002820:	4618      	mov	r0, r3
 8002822:	f7fd fe7f 	bl	8000524 <__aeabi_i2d>
 8002826:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800282a:	f7fe f80f 	bl	800084c <__aeabi_ddiv>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	ec43 2b17 	vmov	d7, r2, r3
 8002836:	eeb0 0a47 	vmov.f32	s0, s14
 800283a:	eef0 0a67 	vmov.f32	s1, s15
 800283e:	f007 fb97 	bl	8009f70 <atan>
 8002842:	ec51 0b10 	vmov	r0, r1, d0
 8002846:	a35c      	add	r3, pc, #368	; (adr r3, 80029b8 <MPU6050_Read_All+0x3a0>)
 8002848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284c:	f7fd fed4 	bl	80005f8 <__aeabi_dmul>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002858:	e005      	b.n	8002866 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	f9b3 3000 	ldrsh.w	r3, [r3]
 800286c:	425b      	negs	r3, r3
 800286e:	4618      	mov	r0, r3
 8002870:	f7fd fe58 	bl	8000524 <__aeabi_i2d>
 8002874:	4682      	mov	sl, r0
 8002876:	468b      	mov	fp, r1
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800287e:	4618      	mov	r0, r3
 8002880:	f7fd fe50 	bl	8000524 <__aeabi_i2d>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	ec43 2b11 	vmov	d1, r2, r3
 800288c:	ec4b ab10 	vmov	d0, sl, fp
 8002890:	f007 fd17 	bl	800a2c2 <atan2>
 8002894:	ec51 0b10 	vmov	r0, r1, d0
 8002898:	a347      	add	r3, pc, #284	; (adr r3, 80029b8 <MPU6050_Read_All+0x3a0>)
 800289a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289e:	f7fd feab 	bl	80005f8 <__aeabi_dmul>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	4b49      	ldr	r3, [pc, #292]	; (80029d4 <MPU6050_Read_All+0x3bc>)
 80028b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028b4:	f7fe f912 	bl	8000adc <__aeabi_dcmplt>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <MPU6050_Read_All+0x2bc>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	4b43      	ldr	r3, [pc, #268]	; (80029d8 <MPU6050_Read_All+0x3c0>)
 80028ca:	f7fe f925 	bl	8000b18 <__aeabi_dcmpgt>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d114      	bne.n	80028fe <MPU6050_Read_All+0x2e6>
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	4b3f      	ldr	r3, [pc, #252]	; (80029d8 <MPU6050_Read_All+0x3c0>)
 80028da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028de:	f7fe f91b 	bl	8000b18 <__aeabi_dcmpgt>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d015      	beq.n	8002914 <MPU6050_Read_All+0x2fc>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	4b38      	ldr	r3, [pc, #224]	; (80029d4 <MPU6050_Read_All+0x3bc>)
 80028f4:	f7fe f8f2 	bl	8000adc <__aeabi_dcmplt>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 80028fe:	4937      	ldr	r1, [pc, #220]	; (80029dc <MPU6050_Read_All+0x3c4>)
 8002900:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002904:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002908:	6839      	ldr	r1, [r7, #0]
 800290a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800290e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002912:	e014      	b.n	800293e <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800291a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800291e:	eeb0 1a47 	vmov.f32	s2, s14
 8002922:	eef0 1a67 	vmov.f32	s3, s15
 8002926:	ed97 0b06 	vldr	d0, [r7, #24]
 800292a:	482c      	ldr	r0, [pc, #176]	; (80029dc <MPU6050_Read_All+0x3c4>)
 800292c:	f000 f85a 	bl	80029e4 <Kalman_getAngle>
 8002930:	eeb0 7a40 	vmov.f32	s14, s0
 8002934:	eef0 7a60 	vmov.f32	s15, s1
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002944:	4690      	mov	r8, r2
 8002946:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	4b22      	ldr	r3, [pc, #136]	; (80029d8 <MPU6050_Read_All+0x3c0>)
 8002950:	4640      	mov	r0, r8
 8002952:	4649      	mov	r1, r9
 8002954:	f7fe f8e0 	bl	8000b18 <__aeabi_dcmpgt>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d008      	beq.n	8002970 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002964:	4614      	mov	r4, r2
 8002966:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002976:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800297a:	eeb0 1a47 	vmov.f32	s2, s14
 800297e:	eef0 1a67 	vmov.f32	s3, s15
 8002982:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8002986:	4816      	ldr	r0, [pc, #88]	; (80029e0 <MPU6050_Read_All+0x3c8>)
 8002988:	f000 f82c 	bl	80029e4 <Kalman_getAngle>
 800298c:	eeb0 7a40 	vmov.f32	s14, s0
 8002990:	eef0 7a60 	vmov.f32	s15, s1
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 800299a:	bf00      	nop
 800299c:	3740      	adds	r7, #64	; 0x40
 800299e:	46bd      	mov	sp, r7
 80029a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029a4:	f3af 8000 	nop.w
 80029a8:	00000000 	.word	0x00000000
 80029ac:	40cc2900 	.word	0x40cc2900
 80029b0:	00000000 	.word	0x00000000
 80029b4:	40606000 	.word	0x40606000
 80029b8:	1a63c1f8 	.word	0x1a63c1f8
 80029bc:	404ca5dc 	.word	0x404ca5dc
 80029c0:	40d00000 	.word	0x40d00000
 80029c4:	43aa0000 	.word	0x43aa0000
 80029c8:	42121eb8 	.word	0x42121eb8
 80029cc:	200004b0 	.word	0x200004b0
 80029d0:	408f4000 	.word	0x408f4000
 80029d4:	c0568000 	.word	0xc0568000
 80029d8:	40568000 	.word	0x40568000
 80029dc:	20000050 	.word	0x20000050
 80029e0:	20000008 	.word	0x20000008

080029e4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80029e4:	b5b0      	push	{r4, r5, r7, lr}
 80029e6:	b096      	sub	sp, #88	; 0x58
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	61f8      	str	r0, [r7, #28]
 80029ec:	ed87 0b04 	vstr	d0, [r7, #16]
 80029f0:	ed87 1b02 	vstr	d1, [r7, #8]
 80029f4:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80029fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a02:	f7fd fc41 	bl	8000288 <__aeabi_dsub>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002a14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a1c:	f7fd fdec 	bl	80005f8 <__aeabi_dmul>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4620      	mov	r0, r4
 8002a26:	4629      	mov	r1, r5
 8002a28:	f7fd fc30 	bl	800028c <__adddf3>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	69f9      	ldr	r1, [r7, #28]
 8002a32:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002a42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a46:	f7fd fdd7 	bl	80005f8 <__aeabi_dmul>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	4610      	mov	r0, r2
 8002a50:	4619      	mov	r1, r3
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002a58:	f7fd fc16 	bl	8000288 <__aeabi_dsub>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4610      	mov	r0, r2
 8002a62:	4619      	mov	r1, r3
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002a6a:	f7fd fc0d 	bl	8000288 <__aeabi_dsub>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	4610      	mov	r0, r2
 8002a74:	4619      	mov	r1, r3
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7c:	f7fd fc06 	bl	800028c <__adddf3>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4610      	mov	r0, r2
 8002a86:	4619      	mov	r1, r3
 8002a88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a8c:	f7fd fdb4 	bl	80005f8 <__aeabi_dmul>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4620      	mov	r0, r4
 8002a96:	4629      	mov	r1, r5
 8002a98:	f7fd fbf8 	bl	800028c <__adddf3>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	69f9      	ldr	r1, [r7, #28]
 8002aa2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002ab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ab6:	f7fd fd9f 	bl	80005f8 <__aeabi_dmul>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4620      	mov	r0, r4
 8002ac0:	4629      	mov	r1, r5
 8002ac2:	f7fd fbe1 	bl	8000288 <__aeabi_dsub>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	69f9      	ldr	r1, [r7, #28]
 8002acc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002adc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ae0:	f7fd fd8a 	bl	80005f8 <__aeabi_dmul>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4620      	mov	r0, r4
 8002aea:	4629      	mov	r1, r5
 8002aec:	f7fd fbcc 	bl	8000288 <__aeabi_dsub>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	69f9      	ldr	r1, [r7, #28]
 8002af6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002b06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b0a:	f7fd fd75 	bl	80005f8 <__aeabi_dmul>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4620      	mov	r0, r4
 8002b14:	4629      	mov	r1, r5
 8002b16:	f7fd fbb9 	bl	800028c <__adddf3>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	69f9      	ldr	r1, [r7, #28]
 8002b20:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002b30:	f7fd fbac 	bl	800028c <__adddf3>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002b42:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b46:	f7fd fe81 	bl	800084c <__aeabi_ddiv>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002b58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b5c:	f7fd fe76 	bl	800084c <__aeabi_ddiv>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002b6e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b72:	f7fd fb89 	bl	8000288 <__aeabi_dsub>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002b84:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b88:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b8c:	f7fd fd34 	bl	80005f8 <__aeabi_dmul>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4620      	mov	r0, r4
 8002b96:	4629      	mov	r1, r5
 8002b98:	f7fd fb78 	bl	800028c <__adddf3>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	69f9      	ldr	r1, [r7, #28]
 8002ba2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002bac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bb0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bb4:	f7fd fd20 	bl	80005f8 <__aeabi_dmul>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	4629      	mov	r1, r5
 8002bc0:	f7fd fb64 	bl	800028c <__adddf3>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	69f9      	ldr	r1, [r7, #28]
 8002bca:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002bd4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002bde:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002be8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002bec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002bf0:	f7fd fd02 	bl	80005f8 <__aeabi_dmul>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4620      	mov	r0, r4
 8002bfa:	4629      	mov	r1, r5
 8002bfc:	f7fd fb44 	bl	8000288 <__aeabi_dsub>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	69f9      	ldr	r1, [r7, #28]
 8002c06:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002c10:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002c14:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002c18:	f7fd fcee 	bl	80005f8 <__aeabi_dmul>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4620      	mov	r0, r4
 8002c22:	4629      	mov	r1, r5
 8002c24:	f7fd fb30 	bl	8000288 <__aeabi_dsub>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	69f9      	ldr	r1, [r7, #28]
 8002c2e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002c38:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c40:	f7fd fcda 	bl	80005f8 <__aeabi_dmul>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4620      	mov	r0, r4
 8002c4a:	4629      	mov	r1, r5
 8002c4c:	f7fd fb1c 	bl	8000288 <__aeabi_dsub>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	69f9      	ldr	r1, [r7, #28]
 8002c56:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002c60:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c64:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002c68:	f7fd fcc6 	bl	80005f8 <__aeabi_dmul>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4620      	mov	r0, r4
 8002c72:	4629      	mov	r1, r5
 8002c74:	f7fd fb08 	bl	8000288 <__aeabi_dsub>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	69f9      	ldr	r1, [r7, #28]
 8002c7e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002c88:	ec43 2b17 	vmov	d7, r2, r3
};
 8002c8c:	eeb0 0a47 	vmov.f32	s0, s14
 8002c90:	eef0 0a67 	vmov.f32	s1, s15
 8002c94:	3758      	adds	r7, #88	; 0x58
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ca2:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <HAL_MspInit+0x44>)
 8002ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca6:	4a0e      	ldr	r2, [pc, #56]	; (8002ce0 <HAL_MspInit+0x44>)
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	6613      	str	r3, [r2, #96]	; 0x60
 8002cae:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <HAL_MspInit+0x44>)
 8002cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	607b      	str	r3, [r7, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cba:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <HAL_MspInit+0x44>)
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbe:	4a08      	ldr	r2, [pc, #32]	; (8002ce0 <HAL_MspInit+0x44>)
 8002cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8002cc6:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <HAL_MspInit+0x44>)
 8002cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cce:	603b      	str	r3, [r7, #0]
 8002cd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40021000 	.word	0x40021000

08002ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ce8:	e7fe      	b.n	8002ce8 <NMI_Handler+0x4>

08002cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cea:	b480      	push	{r7}
 8002cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cee:	e7fe      	b.n	8002cee <HardFault_Handler+0x4>

08002cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cf4:	e7fe      	b.n	8002cf4 <MemManage_Handler+0x4>

08002cf6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cfa:	e7fe      	b.n	8002cfa <BusFault_Handler+0x4>

08002cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d00:	e7fe      	b.n	8002d00 <UsageFault_Handler+0x4>

08002d02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d30:	f000 fbde 	bl	80034f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d34:	bf00      	nop
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_RI_Pin);
 8002d3c:	2020      	movs	r0, #32
 8002d3e:	f000 fec9 	bl	8003ad4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002d42:	bf00      	nop
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_OK_Pin);
 8002d4a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002d4e:	f000 fec1 	bl	8003ad4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_NO_Pin);
 8002d52:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002d56:	f000 febd 	bl	8003ad4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_LE_Pin);
 8002d5a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002d5e:	f000 feb9 	bl	8003ad4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d62:	bf00      	nop
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002d6c:	4802      	ldr	r0, [pc, #8]	; (8002d78 <TIM7_IRQHandler+0x10>)
 8002d6e:	f003 fb78 	bl	8006462 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000550 	.word	0x20000550

08002d7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
	return 1;
 8002d80:	2301      	movs	r3, #1
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <_kill>:

int _kill(int pid, int sig)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d96:	f004 f9c3 	bl	8007120 <__errno>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2216      	movs	r2, #22
 8002d9e:	601a      	str	r2, [r3, #0]
	return -1;
 8002da0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <_exit>:

void _exit (int status)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002db4:	f04f 31ff 	mov.w	r1, #4294967295
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f7ff ffe7 	bl	8002d8c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002dbe:	e7fe      	b.n	8002dbe <_exit+0x12>

08002dc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	e00a      	b.n	8002de8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002dd2:	f3af 8000 	nop.w
 8002dd6:	4601      	mov	r1, r0
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	60ba      	str	r2, [r7, #8]
 8002dde:	b2ca      	uxtb	r2, r1
 8002de0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	3301      	adds	r3, #1
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	dbf0      	blt.n	8002dd2 <_read+0x12>
	}

return len;
 8002df0:	687b      	ldr	r3, [r7, #4]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b086      	sub	sp, #24
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	e009      	b.n	8002e20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	1c5a      	adds	r2, r3, #1
 8002e10:	60ba      	str	r2, [r7, #8]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	dbf1      	blt.n	8002e0c <_write+0x12>
	}
	return len;
 8002e28:	687b      	ldr	r3, [r7, #4]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <_close>:

int _close(int file)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
	return -1;
 8002e3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
 8002e52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e5a:	605a      	str	r2, [r3, #4]
	return 0;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <_isatty>:

int _isatty(int file)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
	return 1;
 8002e72:	2301      	movs	r3, #1
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
	return 0;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
	...

08002e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ea4:	4a14      	ldr	r2, [pc, #80]	; (8002ef8 <_sbrk+0x5c>)
 8002ea6:	4b15      	ldr	r3, [pc, #84]	; (8002efc <_sbrk+0x60>)
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002eb0:	4b13      	ldr	r3, [pc, #76]	; (8002f00 <_sbrk+0x64>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d102      	bne.n	8002ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002eb8:	4b11      	ldr	r3, [pc, #68]	; (8002f00 <_sbrk+0x64>)
 8002eba:	4a12      	ldr	r2, [pc, #72]	; (8002f04 <_sbrk+0x68>)
 8002ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ebe:	4b10      	ldr	r3, [pc, #64]	; (8002f00 <_sbrk+0x64>)
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d207      	bcs.n	8002edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ecc:	f004 f928 	bl	8007120 <__errno>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	220c      	movs	r2, #12
 8002ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eda:	e009      	b.n	8002ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002edc:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <_sbrk+0x64>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ee2:	4b07      	ldr	r3, [pc, #28]	; (8002f00 <_sbrk+0x64>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4413      	add	r3, r2
 8002eea:	4a05      	ldr	r2, [pc, #20]	; (8002f00 <_sbrk+0x64>)
 8002eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002eee:	68fb      	ldr	r3, [r7, #12]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	20010000 	.word	0x20010000
 8002efc:	00000400 	.word	0x00000400
 8002f00:	200004b4 	.word	0x200004b4
 8002f04:	20000600 	.word	0x20000600

08002f08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002f0c:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <SystemInit+0x20>)
 8002f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f12:	4a05      	ldr	r2, [pc, #20]	; (8002f28 <SystemInit+0x20>)
 8002f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002f1c:	bf00      	nop
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08c      	sub	sp, #48	; 0x30
 8002f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002f32:	f107 030c 	add.w	r3, r7, #12
 8002f36:	2224      	movs	r2, #36	; 0x24
 8002f38:	2100      	movs	r1, #0
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f004 f91a 	bl	8007174 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f40:	463b      	mov	r3, r7
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	605a      	str	r2, [r3, #4]
 8002f48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f4a:	4b23      	ldr	r3, [pc, #140]	; (8002fd8 <MX_TIM1_Init+0xac>)
 8002f4c:	4a23      	ldr	r2, [pc, #140]	; (8002fdc <MX_TIM1_Init+0xb0>)
 8002f4e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002f50:	4b21      	ldr	r3, [pc, #132]	; (8002fd8 <MX_TIM1_Init+0xac>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f56:	4b20      	ldr	r3, [pc, #128]	; (8002fd8 <MX_TIM1_Init+0xac>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002f5c:	4b1e      	ldr	r3, [pc, #120]	; (8002fd8 <MX_TIM1_Init+0xac>)
 8002f5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f62:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f64:	4b1c      	ldr	r3, [pc, #112]	; (8002fd8 <MX_TIM1_Init+0xac>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f6a:	4b1b      	ldr	r3, [pc, #108]	; (8002fd8 <MX_TIM1_Init+0xac>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f70:	4b19      	ldr	r3, [pc, #100]	; (8002fd8 <MX_TIM1_Init+0xac>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002f76:	2301      	movs	r3, #1
 8002f78:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f92:	2300      	movs	r3, #0
 8002f94:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002f9a:	f107 030c 	add.w	r3, r7, #12
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	480d      	ldr	r0, [pc, #52]	; (8002fd8 <MX_TIM1_Init+0xac>)
 8002fa2:	f003 f883 	bl	80060ac <HAL_TIM_Encoder_Init>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002fac:	f7ff fad0 	bl	8002550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002fbc:	463b      	mov	r3, r7
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4805      	ldr	r0, [pc, #20]	; (8002fd8 <MX_TIM1_Init+0xac>)
 8002fc2:	f003 ffb1 	bl	8006f28 <HAL_TIMEx_MasterConfigSynchronization>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002fcc:	f7ff fac0 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002fd0:	bf00      	nop
 8002fd2:	3730      	adds	r7, #48	; 0x30
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	200004b8 	.word	0x200004b8
 8002fdc:	40012c00 	.word	0x40012c00

08002fe0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08c      	sub	sp, #48	; 0x30
 8002fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002fe6:	f107 030c 	add.w	r3, r7, #12
 8002fea:	2224      	movs	r2, #36	; 0x24
 8002fec:	2100      	movs	r1, #0
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f004 f8c0 	bl	8007174 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ff4:	463b      	mov	r3, r7
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	605a      	str	r2, [r3, #4]
 8002ffc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ffe:	4b21      	ldr	r3, [pc, #132]	; (8003084 <MX_TIM2_Init+0xa4>)
 8003000:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003004:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003006:	4b1f      	ldr	r3, [pc, #124]	; (8003084 <MX_TIM2_Init+0xa4>)
 8003008:	2200      	movs	r2, #0
 800300a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800300c:	4b1d      	ldr	r3, [pc, #116]	; (8003084 <MX_TIM2_Init+0xa4>)
 800300e:	2200      	movs	r2, #0
 8003010:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535 - 1;
 8003012:	4b1c      	ldr	r3, [pc, #112]	; (8003084 <MX_TIM2_Init+0xa4>)
 8003014:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003018:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800301a:	4b1a      	ldr	r3, [pc, #104]	; (8003084 <MX_TIM2_Init+0xa4>)
 800301c:	2200      	movs	r2, #0
 800301e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003020:	4b18      	ldr	r3, [pc, #96]	; (8003084 <MX_TIM2_Init+0xa4>)
 8003022:	2200      	movs	r2, #0
 8003024:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003026:	2301      	movs	r3, #1
 8003028:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800302a:	2300      	movs	r3, #0
 800302c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800302e:	2301      	movs	r3, #1
 8003030:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003032:	2300      	movs	r3, #0
 8003034:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003036:	2300      	movs	r3, #0
 8003038:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800303a:	2300      	movs	r3, #0
 800303c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800303e:	2301      	movs	r3, #1
 8003040:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003042:	2300      	movs	r3, #0
 8003044:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003046:	2300      	movs	r3, #0
 8003048:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800304a:	f107 030c 	add.w	r3, r7, #12
 800304e:	4619      	mov	r1, r3
 8003050:	480c      	ldr	r0, [pc, #48]	; (8003084 <MX_TIM2_Init+0xa4>)
 8003052:	f003 f82b 	bl	80060ac <HAL_TIM_Encoder_Init>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800305c:	f7ff fa78 	bl	8002550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003060:	2300      	movs	r3, #0
 8003062:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003064:	2300      	movs	r3, #0
 8003066:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003068:	463b      	mov	r3, r7
 800306a:	4619      	mov	r1, r3
 800306c:	4805      	ldr	r0, [pc, #20]	; (8003084 <MX_TIM2_Init+0xa4>)
 800306e:	f003 ff5b 	bl	8006f28 <HAL_TIMEx_MasterConfigSynchronization>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003078:	f7ff fa6a 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800307c:	bf00      	nop
 800307e:	3730      	adds	r7, #48	; 0x30
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	20000504 	.word	0x20000504

08003088 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800308e:	1d3b      	adds	r3, r7, #4
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	605a      	str	r2, [r3, #4]
 8003096:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003098:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <MX_TIM7_Init+0x68>)
 800309a:	4a16      	ldr	r2, [pc, #88]	; (80030f4 <MX_TIM7_Init+0x6c>)
 800309c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 640 - 1;
 800309e:	4b14      	ldr	r3, [pc, #80]	; (80030f0 <MX_TIM7_Init+0x68>)
 80030a0:	f240 227f 	movw	r2, #639	; 0x27f
 80030a4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030a6:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <MX_TIM7_Init+0x68>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2000 - 1;
 80030ac:	4b10      	ldr	r3, [pc, #64]	; (80030f0 <MX_TIM7_Init+0x68>)
 80030ae:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80030b2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030b4:	4b0e      	ldr	r3, [pc, #56]	; (80030f0 <MX_TIM7_Init+0x68>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80030ba:	480d      	ldr	r0, [pc, #52]	; (80030f0 <MX_TIM7_Init+0x68>)
 80030bc:	f002 fd5e 	bl	8005b7c <HAL_TIM_Base_Init>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80030c6:	f7ff fa43 	bl	8002550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030ca:	2300      	movs	r3, #0
 80030cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80030d2:	1d3b      	adds	r3, r7, #4
 80030d4:	4619      	mov	r1, r3
 80030d6:	4806      	ldr	r0, [pc, #24]	; (80030f0 <MX_TIM7_Init+0x68>)
 80030d8:	f003 ff26 	bl	8006f28 <HAL_TIMEx_MasterConfigSynchronization>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80030e2:	f7ff fa35 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80030e6:	bf00      	nop
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20000550 	.word	0x20000550
 80030f4:	40001400 	.word	0x40001400

080030f8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b096      	sub	sp, #88	; 0x58
 80030fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	605a      	str	r2, [r3, #4]
 8003108:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800310a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	605a      	str	r2, [r3, #4]
 8003114:	609a      	str	r2, [r3, #8]
 8003116:	60da      	str	r2, [r3, #12]
 8003118:	611a      	str	r2, [r3, #16]
 800311a:	615a      	str	r2, [r3, #20]
 800311c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800311e:	1d3b      	adds	r3, r7, #4
 8003120:	222c      	movs	r2, #44	; 0x2c
 8003122:	2100      	movs	r1, #0
 8003124:	4618      	mov	r0, r3
 8003126:	f004 f825 	bl	8007174 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800312a:	4b39      	ldr	r3, [pc, #228]	; (8003210 <MX_TIM15_Init+0x118>)
 800312c:	4a39      	ldr	r2, [pc, #228]	; (8003214 <MX_TIM15_Init+0x11c>)
 800312e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 64 - 1;
 8003130:	4b37      	ldr	r3, [pc, #220]	; (8003210 <MX_TIM15_Init+0x118>)
 8003132:	223f      	movs	r2, #63	; 0x3f
 8003134:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003136:	4b36      	ldr	r3, [pc, #216]	; (8003210 <MX_TIM15_Init+0x118>)
 8003138:	2200      	movs	r2, #0
 800313a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000 - 1;
 800313c:	4b34      	ldr	r3, [pc, #208]	; (8003210 <MX_TIM15_Init+0x118>)
 800313e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003142:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003144:	4b32      	ldr	r3, [pc, #200]	; (8003210 <MX_TIM15_Init+0x118>)
 8003146:	2200      	movs	r2, #0
 8003148:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800314a:	4b31      	ldr	r3, [pc, #196]	; (8003210 <MX_TIM15_Init+0x118>)
 800314c:	2200      	movs	r2, #0
 800314e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003150:	4b2f      	ldr	r3, [pc, #188]	; (8003210 <MX_TIM15_Init+0x118>)
 8003152:	2200      	movs	r2, #0
 8003154:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8003156:	482e      	ldr	r0, [pc, #184]	; (8003210 <MX_TIM15_Init+0x118>)
 8003158:	f002 fdeb 	bl	8005d32 <HAL_TIM_PWM_Init>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8003162:	f7ff f9f5 	bl	8002550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003166:	2300      	movs	r3, #0
 8003168:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800316a:	2300      	movs	r3, #0
 800316c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800316e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003172:	4619      	mov	r1, r3
 8003174:	4826      	ldr	r0, [pc, #152]	; (8003210 <MX_TIM15_Init+0x118>)
 8003176:	f003 fed7 	bl	8006f28 <HAL_TIMEx_MasterConfigSynchronization>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8003180:	f7ff f9e6 	bl	8002550 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003184:	2360      	movs	r3, #96	; 0x60
 8003186:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800318c:	2300      	movs	r3, #0
 800318e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003190:	2300      	movs	r3, #0
 8003192:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003194:	2300      	movs	r3, #0
 8003196:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003198:	2300      	movs	r3, #0
 800319a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800319c:	2300      	movs	r3, #0
 800319e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031a4:	2200      	movs	r2, #0
 80031a6:	4619      	mov	r1, r3
 80031a8:	4819      	ldr	r0, [pc, #100]	; (8003210 <MX_TIM15_Init+0x118>)
 80031aa:	f003 fa79 	bl	80066a0 <HAL_TIM_PWM_ConfigChannel>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80031b4:	f7ff f9cc 	bl	8002550 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80031b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031bc:	2204      	movs	r2, #4
 80031be:	4619      	mov	r1, r3
 80031c0:	4813      	ldr	r0, [pc, #76]	; (8003210 <MX_TIM15_Init+0x118>)
 80031c2:	f003 fa6d 	bl	80066a0 <HAL_TIM_PWM_ConfigChannel>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 80031cc:	f7ff f9c0 	bl	8002550 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80031d0:	2300      	movs	r3, #0
 80031d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80031d8:	2300      	movs	r3, #0
 80031da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80031dc:	2300      	movs	r3, #0
 80031de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80031e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80031ea:	2300      	movs	r3, #0
 80031ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80031ee:	1d3b      	adds	r3, r7, #4
 80031f0:	4619      	mov	r1, r3
 80031f2:	4807      	ldr	r0, [pc, #28]	; (8003210 <MX_TIM15_Init+0x118>)
 80031f4:	f003 fefe 	bl	8006ff4 <HAL_TIMEx_ConfigBreakDeadTime>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <MX_TIM15_Init+0x10a>
  {
    Error_Handler();
 80031fe:	f7ff f9a7 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8003202:	4803      	ldr	r0, [pc, #12]	; (8003210 <MX_TIM15_Init+0x118>)
 8003204:	f000 f8c0 	bl	8003388 <HAL_TIM_MspPostInit>

}
 8003208:	bf00      	nop
 800320a:	3758      	adds	r7, #88	; 0x58
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	2000059c 	.word	0x2000059c
 8003214:	40014000 	.word	0x40014000

08003218 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08c      	sub	sp, #48	; 0x30
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003220:	f107 031c 	add.w	r3, r7, #28
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	609a      	str	r2, [r3, #8]
 800322c:	60da      	str	r2, [r3, #12]
 800322e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a2f      	ldr	r2, [pc, #188]	; (80032f4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d12a      	bne.n	8003290 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800323a:	4b2f      	ldr	r3, [pc, #188]	; (80032f8 <HAL_TIM_Encoder_MspInit+0xe0>)
 800323c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800323e:	4a2e      	ldr	r2, [pc, #184]	; (80032f8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003240:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003244:	6613      	str	r3, [r2, #96]	; 0x60
 8003246:	4b2c      	ldr	r3, [pc, #176]	; (80032f8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800324a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800324e:	61bb      	str	r3, [r7, #24]
 8003250:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003252:	4b29      	ldr	r3, [pc, #164]	; (80032f8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003256:	4a28      	ldr	r2, [pc, #160]	; (80032f8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800325e:	4b26      	ldr	r3, [pc, #152]	; (80032f8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800326a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800326e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003270:	2302      	movs	r3, #2
 8003272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003274:	2300      	movs	r3, #0
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003278:	2300      	movs	r3, #0
 800327a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800327c:	2301      	movs	r3, #1
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003280:	f107 031c 	add.w	r3, r7, #28
 8003284:	4619      	mov	r1, r3
 8003286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800328a:	f000 fa87 	bl	800379c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800328e:	e02d      	b.n	80032ec <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM2)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003298:	d128      	bne.n	80032ec <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800329a:	4b17      	ldr	r3, [pc, #92]	; (80032f8 <HAL_TIM_Encoder_MspInit+0xe0>)
 800329c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329e:	4a16      	ldr	r2, [pc, #88]	; (80032f8 <HAL_TIM_Encoder_MspInit+0xe0>)
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	6593      	str	r3, [r2, #88]	; 0x58
 80032a6:	4b14      	ldr	r3, [pc, #80]	; (80032f8 <HAL_TIM_Encoder_MspInit+0xe0>)
 80032a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032b2:	4b11      	ldr	r3, [pc, #68]	; (80032f8 <HAL_TIM_Encoder_MspInit+0xe0>)
 80032b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b6:	4a10      	ldr	r2, [pc, #64]	; (80032f8 <HAL_TIM_Encoder_MspInit+0xe0>)
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032be:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <HAL_TIM_Encoder_MspInit+0xe0>)
 80032c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80032ca:	2303      	movs	r3, #3
 80032cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ce:	2302      	movs	r3, #2
 80032d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d6:	2300      	movs	r3, #0
 80032d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032da:	2301      	movs	r3, #1
 80032dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032de:	f107 031c 	add.w	r3, r7, #28
 80032e2:	4619      	mov	r1, r3
 80032e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032e8:	f000 fa58 	bl	800379c <HAL_GPIO_Init>
}
 80032ec:	bf00      	nop
 80032ee:	3730      	adds	r7, #48	; 0x30
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40012c00 	.word	0x40012c00
 80032f8:	40021000 	.word	0x40021000

080032fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a0d      	ldr	r2, [pc, #52]	; (8003340 <HAL_TIM_Base_MspInit+0x44>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d113      	bne.n	8003336 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800330e:	4b0d      	ldr	r3, [pc, #52]	; (8003344 <HAL_TIM_Base_MspInit+0x48>)
 8003310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003312:	4a0c      	ldr	r2, [pc, #48]	; (8003344 <HAL_TIM_Base_MspInit+0x48>)
 8003314:	f043 0320 	orr.w	r3, r3, #32
 8003318:	6593      	str	r3, [r2, #88]	; 0x58
 800331a:	4b0a      	ldr	r3, [pc, #40]	; (8003344 <HAL_TIM_Base_MspInit+0x48>)
 800331c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331e:	f003 0320 	and.w	r3, r3, #32
 8003322:	60fb      	str	r3, [r7, #12]
 8003324:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 8, 0);
 8003326:	2200      	movs	r2, #0
 8003328:	2108      	movs	r1, #8
 800332a:	2037      	movs	r0, #55	; 0x37
 800332c:	f000 f9ff 	bl	800372e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003330:	2037      	movs	r0, #55	; 0x37
 8003332:	f000 fa18 	bl	8003766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003336:	bf00      	nop
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40001400 	.word	0x40001400
 8003344:	40021000 	.word	0x40021000

08003348 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a0a      	ldr	r2, [pc, #40]	; (8003380 <HAL_TIM_PWM_MspInit+0x38>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d10b      	bne.n	8003372 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800335a:	4b0a      	ldr	r3, [pc, #40]	; (8003384 <HAL_TIM_PWM_MspInit+0x3c>)
 800335c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800335e:	4a09      	ldr	r2, [pc, #36]	; (8003384 <HAL_TIM_PWM_MspInit+0x3c>)
 8003360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003364:	6613      	str	r3, [r2, #96]	; 0x60
 8003366:	4b07      	ldr	r3, [pc, #28]	; (8003384 <HAL_TIM_PWM_MspInit+0x3c>)
 8003368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800336a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8003372:	bf00      	nop
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	40014000 	.word	0x40014000
 8003384:	40021000 	.word	0x40021000

08003388 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b088      	sub	sp, #32
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003390:	f107 030c 	add.w	r3, r7, #12
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	605a      	str	r2, [r3, #4]
 800339a:	609a      	str	r2, [r3, #8]
 800339c:	60da      	str	r2, [r3, #12]
 800339e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a11      	ldr	r2, [pc, #68]	; (80033ec <HAL_TIM_MspPostInit+0x64>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d11c      	bne.n	80033e4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033aa:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <HAL_TIM_MspPostInit+0x68>)
 80033ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ae:	4a10      	ldr	r2, [pc, #64]	; (80033f0 <HAL_TIM_MspPostInit+0x68>)
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033b6:	4b0e      	ldr	r3, [pc, #56]	; (80033f0 <HAL_TIM_MspPostInit+0x68>)
 80033b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	60bb      	str	r3, [r7, #8]
 80033c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    PA3     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80033c2:	230c      	movs	r3, #12
 80033c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c6:	2302      	movs	r3, #2
 80033c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ce:	2300      	movs	r3, #0
 80033d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80033d2:	230e      	movs	r3, #14
 80033d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d6:	f107 030c 	add.w	r3, r7, #12
 80033da:	4619      	mov	r1, r3
 80033dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033e0:	f000 f9dc 	bl	800379c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80033e4:	bf00      	nop
 80033e6:	3720      	adds	r7, #32
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40014000 	.word	0x40014000
 80033f0:	40021000 	.word	0x40021000

080033f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80033f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800342c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80033f8:	f7ff fd86 	bl	8002f08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033fc:	480c      	ldr	r0, [pc, #48]	; (8003430 <LoopForever+0x6>)
  ldr r1, =_edata
 80033fe:	490d      	ldr	r1, [pc, #52]	; (8003434 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003400:	4a0d      	ldr	r2, [pc, #52]	; (8003438 <LoopForever+0xe>)
  movs r3, #0
 8003402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003404:	e002      	b.n	800340c <LoopCopyDataInit>

08003406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800340a:	3304      	adds	r3, #4

0800340c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800340c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800340e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003410:	d3f9      	bcc.n	8003406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003412:	4a0a      	ldr	r2, [pc, #40]	; (800343c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003414:	4c0a      	ldr	r4, [pc, #40]	; (8003440 <LoopForever+0x16>)
  movs r3, #0
 8003416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003418:	e001      	b.n	800341e <LoopFillZerobss>

0800341a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800341a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800341c:	3204      	adds	r2, #4

0800341e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800341e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003420:	d3fb      	bcc.n	800341a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003422:	f003 fe83 	bl	800712c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003426:	f7fd fdeb 	bl	8001000 <main>

0800342a <LoopForever>:

LoopForever:
    b LoopForever
 800342a:	e7fe      	b.n	800342a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800342c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003434:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 8003438:	0800abe0 	.word	0x0800abe0
  ldr r2, =_sbss
 800343c:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8003440:	200005fc 	.word	0x200005fc

08003444 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003444:	e7fe      	b.n	8003444 <ADC1_IRQHandler>

08003446 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800344c:	2300      	movs	r3, #0
 800344e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003450:	2003      	movs	r0, #3
 8003452:	f000 f961 	bl	8003718 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003456:	2000      	movs	r0, #0
 8003458:	f000 f80e 	bl	8003478 <HAL_InitTick>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	71fb      	strb	r3, [r7, #7]
 8003466:	e001      	b.n	800346c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003468:	f7ff fc18 	bl	8002c9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800346c:	79fb      	ldrb	r3, [r7, #7]
}
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003480:	2300      	movs	r3, #0
 8003482:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003484:	4b17      	ldr	r3, [pc, #92]	; (80034e4 <HAL_InitTick+0x6c>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d023      	beq.n	80034d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800348c:	4b16      	ldr	r3, [pc, #88]	; (80034e8 <HAL_InitTick+0x70>)
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	4b14      	ldr	r3, [pc, #80]	; (80034e4 <HAL_InitTick+0x6c>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	4619      	mov	r1, r3
 8003496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800349a:	fbb3 f3f1 	udiv	r3, r3, r1
 800349e:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 f96d 	bl	8003782 <HAL_SYSTICK_Config>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10f      	bne.n	80034ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b0f      	cmp	r3, #15
 80034b2:	d809      	bhi.n	80034c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034b4:	2200      	movs	r2, #0
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	f04f 30ff 	mov.w	r0, #4294967295
 80034bc:	f000 f937 	bl	800372e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034c0:	4a0a      	ldr	r2, [pc, #40]	; (80034ec <HAL_InitTick+0x74>)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	e007      	b.n	80034d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	73fb      	strb	r3, [r7, #15]
 80034cc:	e004      	b.n	80034d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	73fb      	strb	r3, [r7, #15]
 80034d2:	e001      	b.n	80034d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	200000a0 	.word	0x200000a0
 80034e8:	20000098 	.word	0x20000098
 80034ec:	2000009c 	.word	0x2000009c

080034f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80034f4:	4b06      	ldr	r3, [pc, #24]	; (8003510 <HAL_IncTick+0x20>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	461a      	mov	r2, r3
 80034fa:	4b06      	ldr	r3, [pc, #24]	; (8003514 <HAL_IncTick+0x24>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4413      	add	r3, r2
 8003500:	4a04      	ldr	r2, [pc, #16]	; (8003514 <HAL_IncTick+0x24>)
 8003502:	6013      	str	r3, [r2, #0]
}
 8003504:	bf00      	nop
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	200000a0 	.word	0x200000a0
 8003514:	200005e8 	.word	0x200005e8

08003518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  return uwTick;
 800351c:	4b03      	ldr	r3, [pc, #12]	; (800352c <HAL_GetTick+0x14>)
 800351e:	681b      	ldr	r3, [r3, #0]
}
 8003520:	4618      	mov	r0, r3
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	200005e8 	.word	0x200005e8

08003530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003538:	f7ff ffee 	bl	8003518 <HAL_GetTick>
 800353c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003548:	d005      	beq.n	8003556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800354a:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <HAL_Delay+0x44>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4413      	add	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003556:	bf00      	nop
 8003558:	f7ff ffde 	bl	8003518 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	429a      	cmp	r2, r3
 8003566:	d8f7      	bhi.n	8003558 <HAL_Delay+0x28>
  {
  }
}
 8003568:	bf00      	nop
 800356a:	bf00      	nop
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	200000a0 	.word	0x200000a0

08003578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003588:	4b0c      	ldr	r3, [pc, #48]	; (80035bc <__NVIC_SetPriorityGrouping+0x44>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003594:	4013      	ands	r3, r2
 8003596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035aa:	4a04      	ldr	r2, [pc, #16]	; (80035bc <__NVIC_SetPriorityGrouping+0x44>)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	60d3      	str	r3, [r2, #12]
}
 80035b0:	bf00      	nop
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	e000ed00 	.word	0xe000ed00

080035c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035c4:	4b04      	ldr	r3, [pc, #16]	; (80035d8 <__NVIC_GetPriorityGrouping+0x18>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	0a1b      	lsrs	r3, r3, #8
 80035ca:	f003 0307 	and.w	r3, r3, #7
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	e000ed00 	.word	0xe000ed00

080035dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	db0b      	blt.n	8003606 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	f003 021f 	and.w	r2, r3, #31
 80035f4:	4907      	ldr	r1, [pc, #28]	; (8003614 <__NVIC_EnableIRQ+0x38>)
 80035f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	2001      	movs	r0, #1
 80035fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	e000e100 	.word	0xe000e100

08003618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	6039      	str	r1, [r7, #0]
 8003622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003628:	2b00      	cmp	r3, #0
 800362a:	db0a      	blt.n	8003642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	b2da      	uxtb	r2, r3
 8003630:	490c      	ldr	r1, [pc, #48]	; (8003664 <__NVIC_SetPriority+0x4c>)
 8003632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003636:	0112      	lsls	r2, r2, #4
 8003638:	b2d2      	uxtb	r2, r2
 800363a:	440b      	add	r3, r1
 800363c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003640:	e00a      	b.n	8003658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	b2da      	uxtb	r2, r3
 8003646:	4908      	ldr	r1, [pc, #32]	; (8003668 <__NVIC_SetPriority+0x50>)
 8003648:	79fb      	ldrb	r3, [r7, #7]
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	3b04      	subs	r3, #4
 8003650:	0112      	lsls	r2, r2, #4
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	440b      	add	r3, r1
 8003656:	761a      	strb	r2, [r3, #24]
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	e000e100 	.word	0xe000e100
 8003668:	e000ed00 	.word	0xe000ed00

0800366c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800366c:	b480      	push	{r7}
 800366e:	b089      	sub	sp, #36	; 0x24
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f1c3 0307 	rsb	r3, r3, #7
 8003686:	2b04      	cmp	r3, #4
 8003688:	bf28      	it	cs
 800368a:	2304      	movcs	r3, #4
 800368c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	3304      	adds	r3, #4
 8003692:	2b06      	cmp	r3, #6
 8003694:	d902      	bls.n	800369c <NVIC_EncodePriority+0x30>
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	3b03      	subs	r3, #3
 800369a:	e000      	b.n	800369e <NVIC_EncodePriority+0x32>
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a0:	f04f 32ff 	mov.w	r2, #4294967295
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	43da      	mvns	r2, r3
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	401a      	ands	r2, r3
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036b4:	f04f 31ff 	mov.w	r1, #4294967295
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	fa01 f303 	lsl.w	r3, r1, r3
 80036be:	43d9      	mvns	r1, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c4:	4313      	orrs	r3, r2
         );
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3724      	adds	r7, #36	; 0x24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
	...

080036d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3b01      	subs	r3, #1
 80036e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036e4:	d301      	bcc.n	80036ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036e6:	2301      	movs	r3, #1
 80036e8:	e00f      	b.n	800370a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ea:	4a0a      	ldr	r2, [pc, #40]	; (8003714 <SysTick_Config+0x40>)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036f2:	210f      	movs	r1, #15
 80036f4:	f04f 30ff 	mov.w	r0, #4294967295
 80036f8:	f7ff ff8e 	bl	8003618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036fc:	4b05      	ldr	r3, [pc, #20]	; (8003714 <SysTick_Config+0x40>)
 80036fe:	2200      	movs	r2, #0
 8003700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003702:	4b04      	ldr	r3, [pc, #16]	; (8003714 <SysTick_Config+0x40>)
 8003704:	2207      	movs	r2, #7
 8003706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	e000e010 	.word	0xe000e010

08003718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7ff ff29 	bl	8003578 <__NVIC_SetPriorityGrouping>
}
 8003726:	bf00      	nop
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b086      	sub	sp, #24
 8003732:	af00      	add	r7, sp, #0
 8003734:	4603      	mov	r3, r0
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	607a      	str	r2, [r7, #4]
 800373a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800373c:	2300      	movs	r3, #0
 800373e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003740:	f7ff ff3e 	bl	80035c0 <__NVIC_GetPriorityGrouping>
 8003744:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	68b9      	ldr	r1, [r7, #8]
 800374a:	6978      	ldr	r0, [r7, #20]
 800374c:	f7ff ff8e 	bl	800366c <NVIC_EncodePriority>
 8003750:	4602      	mov	r2, r0
 8003752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003756:	4611      	mov	r1, r2
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff ff5d 	bl	8003618 <__NVIC_SetPriority>
}
 800375e:	bf00      	nop
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b082      	sub	sp, #8
 800376a:	af00      	add	r7, sp, #0
 800376c:	4603      	mov	r3, r0
 800376e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff ff31 	bl	80035dc <__NVIC_EnableIRQ>
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b082      	sub	sp, #8
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff ffa2 	bl	80036d4 <SysTick_Config>
 8003790:	4603      	mov	r3, r0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800379c:	b480      	push	{r7}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037aa:	e148      	b.n	8003a3e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	2101      	movs	r1, #1
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	fa01 f303 	lsl.w	r3, r1, r3
 80037b8:	4013      	ands	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 813a 	beq.w	8003a38 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 0303 	and.w	r3, r3, #3
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d005      	beq.n	80037dc <HAL_GPIO_Init+0x40>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 0303 	and.w	r3, r3, #3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d130      	bne.n	800383e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	2203      	movs	r2, #3
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	43db      	mvns	r3, r3
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	4013      	ands	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003812:	2201      	movs	r2, #1
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43db      	mvns	r3, r3
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	4013      	ands	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	091b      	lsrs	r3, r3, #4
 8003828:	f003 0201 	and.w	r2, r3, #1
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b03      	cmp	r3, #3
 8003848:	d017      	beq.n	800387a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	2203      	movs	r2, #3
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	43db      	mvns	r3, r3
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	4013      	ands	r3, r2
 8003860:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d123      	bne.n	80038ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	08da      	lsrs	r2, r3, #3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3208      	adds	r2, #8
 800388e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003892:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	220f      	movs	r2, #15
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	43db      	mvns	r3, r3
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4013      	ands	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	4313      	orrs	r3, r2
 80038be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	08da      	lsrs	r2, r3, #3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3208      	adds	r2, #8
 80038c8:	6939      	ldr	r1, [r7, #16]
 80038ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	2203      	movs	r2, #3
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	43db      	mvns	r3, r3
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	4013      	ands	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f003 0203 	and.w	r2, r3, #3
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 8094 	beq.w	8003a38 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003910:	4b52      	ldr	r3, [pc, #328]	; (8003a5c <HAL_GPIO_Init+0x2c0>)
 8003912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003914:	4a51      	ldr	r2, [pc, #324]	; (8003a5c <HAL_GPIO_Init+0x2c0>)
 8003916:	f043 0301 	orr.w	r3, r3, #1
 800391a:	6613      	str	r3, [r2, #96]	; 0x60
 800391c:	4b4f      	ldr	r3, [pc, #316]	; (8003a5c <HAL_GPIO_Init+0x2c0>)
 800391e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	60bb      	str	r3, [r7, #8]
 8003926:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003928:	4a4d      	ldr	r2, [pc, #308]	; (8003a60 <HAL_GPIO_Init+0x2c4>)
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	089b      	lsrs	r3, r3, #2
 800392e:	3302      	adds	r3, #2
 8003930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003934:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f003 0303 	and.w	r3, r3, #3
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	220f      	movs	r2, #15
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4013      	ands	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003952:	d00d      	beq.n	8003970 <HAL_GPIO_Init+0x1d4>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a43      	ldr	r2, [pc, #268]	; (8003a64 <HAL_GPIO_Init+0x2c8>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d007      	beq.n	800396c <HAL_GPIO_Init+0x1d0>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a42      	ldr	r2, [pc, #264]	; (8003a68 <HAL_GPIO_Init+0x2cc>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d101      	bne.n	8003968 <HAL_GPIO_Init+0x1cc>
 8003964:	2302      	movs	r3, #2
 8003966:	e004      	b.n	8003972 <HAL_GPIO_Init+0x1d6>
 8003968:	2307      	movs	r3, #7
 800396a:	e002      	b.n	8003972 <HAL_GPIO_Init+0x1d6>
 800396c:	2301      	movs	r3, #1
 800396e:	e000      	b.n	8003972 <HAL_GPIO_Init+0x1d6>
 8003970:	2300      	movs	r3, #0
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	f002 0203 	and.w	r2, r2, #3
 8003978:	0092      	lsls	r2, r2, #2
 800397a:	4093      	lsls	r3, r2
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003982:	4937      	ldr	r1, [pc, #220]	; (8003a60 <HAL_GPIO_Init+0x2c4>)
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	089b      	lsrs	r3, r3, #2
 8003988:	3302      	adds	r3, #2
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003990:	4b36      	ldr	r3, [pc, #216]	; (8003a6c <HAL_GPIO_Init+0x2d0>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	43db      	mvns	r3, r3
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	4013      	ands	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039b4:	4a2d      	ldr	r2, [pc, #180]	; (8003a6c <HAL_GPIO_Init+0x2d0>)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039ba:	4b2c      	ldr	r3, [pc, #176]	; (8003a6c <HAL_GPIO_Init+0x2d0>)
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	43db      	mvns	r3, r3
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	4013      	ands	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4313      	orrs	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039de:	4a23      	ldr	r2, [pc, #140]	; (8003a6c <HAL_GPIO_Init+0x2d0>)
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80039e4:	4b21      	ldr	r3, [pc, #132]	; (8003a6c <HAL_GPIO_Init+0x2d0>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	43db      	mvns	r3, r3
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	4013      	ands	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a08:	4a18      	ldr	r2, [pc, #96]	; (8003a6c <HAL_GPIO_Init+0x2d0>)
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003a0e:	4b17      	ldr	r3, [pc, #92]	; (8003a6c <HAL_GPIO_Init+0x2d0>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	43db      	mvns	r3, r3
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a32:	4a0e      	ldr	r2, [pc, #56]	; (8003a6c <HAL_GPIO_Init+0x2d0>)
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	fa22 f303 	lsr.w	r3, r2, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f47f aeaf 	bne.w	80037ac <HAL_GPIO_Init+0x10>
  }
}
 8003a4e:	bf00      	nop
 8003a50:	bf00      	nop
 8003a52:	371c      	adds	r7, #28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	40010000 	.word	0x40010000
 8003a64:	48000400 	.word	0x48000400
 8003a68:	48000800 	.word	0x48000800
 8003a6c:	40010400 	.word	0x40010400

08003a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	807b      	strh	r3, [r7, #2]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a80:	787b      	ldrb	r3, [r7, #1]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a86:	887a      	ldrh	r2, [r7, #2]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a8c:	e002      	b.n	8003a94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a8e:	887a      	ldrh	r2, [r7, #2]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ab2:	887a      	ldrh	r2, [r7, #2]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	041a      	lsls	r2, r3, #16
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	43d9      	mvns	r1, r3
 8003abe:	887b      	ldrh	r3, [r7, #2]
 8003ac0:	400b      	ands	r3, r1
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	619a      	str	r2, [r3, #24]
}
 8003ac8:	bf00      	nop
 8003aca:	3714      	adds	r7, #20
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	4603      	mov	r3, r0
 8003adc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ade:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ae0:	695a      	ldr	r2, [r3, #20]
 8003ae2:	88fb      	ldrh	r3, [r7, #6]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d006      	beq.n	8003af8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003aea:	4a05      	ldr	r2, [pc, #20]	; (8003b00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003aec:	88fb      	ldrh	r3, [r7, #6]
 8003aee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003af0:	88fb      	ldrh	r3, [r7, #6]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fe fcfa 	bl	80024ec <HAL_GPIO_EXTI_Callback>
  }
}
 8003af8:	bf00      	nop
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40010400 	.word	0x40010400

08003b04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e081      	b.n	8003c1a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d106      	bne.n	8003b30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7fd fa10 	bl	8000f50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2224      	movs	r2, #36	; 0x24
 8003b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0201 	bic.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d107      	bne.n	8003b7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b7a:	609a      	str	r2, [r3, #8]
 8003b7c:	e006      	b.n	8003b8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689a      	ldr	r2, [r3, #8]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d104      	bne.n	8003b9e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6812      	ldr	r2, [r2, #0]
 8003ba8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bb0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bc0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691a      	ldr	r2, [r3, #16]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	69d9      	ldr	r1, [r3, #28]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a1a      	ldr	r2, [r3, #32]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0201 	orr.w	r2, r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2220      	movs	r2, #32
 8003c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b088      	sub	sp, #32
 8003c28:	af02      	add	r7, sp, #8
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	607a      	str	r2, [r7, #4]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	460b      	mov	r3, r1
 8003c32:	817b      	strh	r3, [r7, #10]
 8003c34:	4613      	mov	r3, r2
 8003c36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b20      	cmp	r3, #32
 8003c42:	f040 80da 	bne.w	8003dfa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_I2C_Master_Transmit+0x30>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e0d3      	b.n	8003dfc <HAL_I2C_Master_Transmit+0x1d8>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c5c:	f7ff fc5c 	bl	8003518 <HAL_GetTick>
 8003c60:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	2319      	movs	r3, #25
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 fbc6 	bl	8004400 <I2C_WaitOnFlagUntilTimeout>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e0be      	b.n	8003dfc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2221      	movs	r2, #33	; 0x21
 8003c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2210      	movs	r2, #16
 8003c8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	893a      	ldrh	r2, [r7, #8]
 8003c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	2bff      	cmp	r3, #255	; 0xff
 8003cae:	d90e      	bls.n	8003cce <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	22ff      	movs	r2, #255	; 0xff
 8003cb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	8979      	ldrh	r1, [r7, #10]
 8003cbe:	4b51      	ldr	r3, [pc, #324]	; (8003e04 <HAL_I2C_Master_Transmit+0x1e0>)
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 fd42 	bl	8004750 <I2C_TransferConfig>
 8003ccc:	e06c      	b.n	8003da8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	8979      	ldrh	r1, [r7, #10]
 8003ce0:	4b48      	ldr	r3, [pc, #288]	; (8003e04 <HAL_I2C_Master_Transmit+0x1e0>)
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 fd31 	bl	8004750 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003cee:	e05b      	b.n	8003da8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	6a39      	ldr	r1, [r7, #32]
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 fbc3 	bl	8004480 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e07b      	b.n	8003dfc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	781a      	ldrb	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	1c5a      	adds	r2, r3, #1
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d034      	beq.n	8003da8 <HAL_I2C_Master_Transmit+0x184>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d130      	bne.n	8003da8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	2180      	movs	r1, #128	; 0x80
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 fb55 	bl	8004400 <I2C_WaitOnFlagUntilTimeout>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e04d      	b.n	8003dfc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	2bff      	cmp	r3, #255	; 0xff
 8003d68:	d90e      	bls.n	8003d88 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	22ff      	movs	r2, #255	; 0xff
 8003d6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	8979      	ldrh	r1, [r7, #10]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 fce5 	bl	8004750 <I2C_TransferConfig>
 8003d86:	e00f      	b.n	8003da8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	8979      	ldrh	r1, [r7, #10]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 fcd4 	bl	8004750 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d19e      	bne.n	8003cf0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	6a39      	ldr	r1, [r7, #32]
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 fba2 	bl	8004500 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e01a      	b.n	8003dfc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6859      	ldr	r1, [r3, #4]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <HAL_I2C_Master_Transmit+0x1e4>)
 8003dda:	400b      	ands	r3, r1
 8003ddc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	e000      	b.n	8003dfc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003dfa:	2302      	movs	r3, #2
  }
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3718      	adds	r7, #24
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	80002000 	.word	0x80002000
 8003e08:	fe00e800 	.word	0xfe00e800

08003e0c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af02      	add	r7, sp, #8
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	4608      	mov	r0, r1
 8003e16:	4611      	mov	r1, r2
 8003e18:	461a      	mov	r2, r3
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	817b      	strh	r3, [r7, #10]
 8003e1e:	460b      	mov	r3, r1
 8003e20:	813b      	strh	r3, [r7, #8]
 8003e22:	4613      	mov	r3, r2
 8003e24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b20      	cmp	r3, #32
 8003e30:	f040 80f9 	bne.w	8004026 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d002      	beq.n	8003e40 <HAL_I2C_Mem_Write+0x34>
 8003e3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d105      	bne.n	8003e4c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e46:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e0ed      	b.n	8004028 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d101      	bne.n	8003e5a <HAL_I2C_Mem_Write+0x4e>
 8003e56:	2302      	movs	r3, #2
 8003e58:	e0e6      	b.n	8004028 <HAL_I2C_Mem_Write+0x21c>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e62:	f7ff fb59 	bl	8003518 <HAL_GetTick>
 8003e66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	2319      	movs	r3, #25
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 fac3 	bl	8004400 <I2C_WaitOnFlagUntilTimeout>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0d1      	b.n	8004028 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2221      	movs	r2, #33	; 0x21
 8003e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2240      	movs	r2, #64	; 0x40
 8003e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a3a      	ldr	r2, [r7, #32]
 8003e9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ea4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003eac:	88f8      	ldrh	r0, [r7, #6]
 8003eae:	893a      	ldrh	r2, [r7, #8]
 8003eb0:	8979      	ldrh	r1, [r7, #10]
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	9301      	str	r3, [sp, #4]
 8003eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	4603      	mov	r3, r0
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 f9d3 	bl	8004268 <I2C_RequestMemoryWrite>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d005      	beq.n	8003ed4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e0a9      	b.n	8004028 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2bff      	cmp	r3, #255	; 0xff
 8003edc:	d90e      	bls.n	8003efc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	22ff      	movs	r2, #255	; 0xff
 8003ee2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	8979      	ldrh	r1, [r7, #10]
 8003eec:	2300      	movs	r3, #0
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f000 fc2b 	bl	8004750 <I2C_TransferConfig>
 8003efa:	e00f      	b.n	8003f1c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	8979      	ldrh	r1, [r7, #10]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 fc1a 	bl	8004750 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 faad 	bl	8004480 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e07b      	b.n	8004028 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	781a      	ldrb	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d034      	beq.n	8003fd4 <HAL_I2C_Mem_Write+0x1c8>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d130      	bne.n	8003fd4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2180      	movs	r1, #128	; 0x80
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 fa3f 	bl	8004400 <I2C_WaitOnFlagUntilTimeout>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e04d      	b.n	8004028 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	2bff      	cmp	r3, #255	; 0xff
 8003f94:	d90e      	bls.n	8003fb4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	22ff      	movs	r2, #255	; 0xff
 8003f9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	8979      	ldrh	r1, [r7, #10]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 fbcf 	bl	8004750 <I2C_TransferConfig>
 8003fb2:	e00f      	b.n	8003fd4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	8979      	ldrh	r1, [r7, #10]
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 fbbe 	bl	8004750 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d19e      	bne.n	8003f1c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 fa8c 	bl	8004500 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e01a      	b.n	8004028 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6859      	ldr	r1, [r3, #4]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	4b0a      	ldr	r3, [pc, #40]	; (8004030 <HAL_I2C_Mem_Write+0x224>)
 8004006:	400b      	ands	r3, r1
 8004008:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2220      	movs	r2, #32
 800400e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	e000      	b.n	8004028 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004026:	2302      	movs	r3, #2
  }
}
 8004028:	4618      	mov	r0, r3
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	fe00e800 	.word	0xfe00e800

08004034 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b088      	sub	sp, #32
 8004038:	af02      	add	r7, sp, #8
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	4608      	mov	r0, r1
 800403e:	4611      	mov	r1, r2
 8004040:	461a      	mov	r2, r3
 8004042:	4603      	mov	r3, r0
 8004044:	817b      	strh	r3, [r7, #10]
 8004046:	460b      	mov	r3, r1
 8004048:	813b      	strh	r3, [r7, #8]
 800404a:	4613      	mov	r3, r2
 800404c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b20      	cmp	r3, #32
 8004058:	f040 80fd 	bne.w	8004256 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <HAL_I2C_Mem_Read+0x34>
 8004062:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004064:	2b00      	cmp	r3, #0
 8004066:	d105      	bne.n	8004074 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800406e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e0f1      	b.n	8004258 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800407a:	2b01      	cmp	r3, #1
 800407c:	d101      	bne.n	8004082 <HAL_I2C_Mem_Read+0x4e>
 800407e:	2302      	movs	r3, #2
 8004080:	e0ea      	b.n	8004258 <HAL_I2C_Mem_Read+0x224>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800408a:	f7ff fa45 	bl	8003518 <HAL_GetTick>
 800408e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	2319      	movs	r3, #25
 8004096:	2201      	movs	r2, #1
 8004098:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 f9af 	bl	8004400 <I2C_WaitOnFlagUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e0d5      	b.n	8004258 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2222      	movs	r2, #34	; 0x22
 80040b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2240      	movs	r2, #64	; 0x40
 80040b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a3a      	ldr	r2, [r7, #32]
 80040c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040d4:	88f8      	ldrh	r0, [r7, #6]
 80040d6:	893a      	ldrh	r2, [r7, #8]
 80040d8:	8979      	ldrh	r1, [r7, #10]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	9301      	str	r3, [sp, #4]
 80040de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	4603      	mov	r3, r0
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 f913 	bl	8004310 <I2C_RequestMemoryRead>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0ad      	b.n	8004258 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004100:	b29b      	uxth	r3, r3
 8004102:	2bff      	cmp	r3, #255	; 0xff
 8004104:	d90e      	bls.n	8004124 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	22ff      	movs	r2, #255	; 0xff
 800410a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004110:	b2da      	uxtb	r2, r3
 8004112:	8979      	ldrh	r1, [r7, #10]
 8004114:	4b52      	ldr	r3, [pc, #328]	; (8004260 <HAL_I2C_Mem_Read+0x22c>)
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 fb17 	bl	8004750 <I2C_TransferConfig>
 8004122:	e00f      	b.n	8004144 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004132:	b2da      	uxtb	r2, r3
 8004134:	8979      	ldrh	r1, [r7, #10]
 8004136:	4b4a      	ldr	r3, [pc, #296]	; (8004260 <HAL_I2C_Mem_Read+0x22c>)
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f000 fb06 	bl	8004750 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414a:	2200      	movs	r2, #0
 800414c:	2104      	movs	r1, #4
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f000 f956 	bl	8004400 <I2C_WaitOnFlagUntilTimeout>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e07c      	b.n	8004258 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800417a:	3b01      	subs	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004186:	b29b      	uxth	r3, r3
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004194:	b29b      	uxth	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d034      	beq.n	8004204 <HAL_I2C_Mem_Read+0x1d0>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d130      	bne.n	8004204 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a8:	2200      	movs	r2, #0
 80041aa:	2180      	movs	r1, #128	; 0x80
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 f927 	bl	8004400 <I2C_WaitOnFlagUntilTimeout>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e04d      	b.n	8004258 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2bff      	cmp	r3, #255	; 0xff
 80041c4:	d90e      	bls.n	80041e4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	22ff      	movs	r2, #255	; 0xff
 80041ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	8979      	ldrh	r1, [r7, #10]
 80041d4:	2300      	movs	r3, #0
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 fab7 	bl	8004750 <I2C_TransferConfig>
 80041e2:	e00f      	b.n	8004204 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	8979      	ldrh	r1, [r7, #10]
 80041f6:	2300      	movs	r3, #0
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 faa6 	bl	8004750 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004208:	b29b      	uxth	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d19a      	bne.n	8004144 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 f974 	bl	8004500 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e01a      	b.n	8004258 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2220      	movs	r2, #32
 8004228:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6859      	ldr	r1, [r3, #4]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <HAL_I2C_Mem_Read+0x230>)
 8004236:	400b      	ands	r3, r1
 8004238:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2220      	movs	r2, #32
 800423e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	e000      	b.n	8004258 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004256:	2302      	movs	r3, #2
  }
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	80002400 	.word	0x80002400
 8004264:	fe00e800 	.word	0xfe00e800

08004268 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af02      	add	r7, sp, #8
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	4608      	mov	r0, r1
 8004272:	4611      	mov	r1, r2
 8004274:	461a      	mov	r2, r3
 8004276:	4603      	mov	r3, r0
 8004278:	817b      	strh	r3, [r7, #10]
 800427a:	460b      	mov	r3, r1
 800427c:	813b      	strh	r3, [r7, #8]
 800427e:	4613      	mov	r3, r2
 8004280:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004282:	88fb      	ldrh	r3, [r7, #6]
 8004284:	b2da      	uxtb	r2, r3
 8004286:	8979      	ldrh	r1, [r7, #10]
 8004288:	4b20      	ldr	r3, [pc, #128]	; (800430c <I2C_RequestMemoryWrite+0xa4>)
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 fa5d 	bl	8004750 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004296:	69fa      	ldr	r2, [r7, #28]
 8004298:	69b9      	ldr	r1, [r7, #24]
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 f8f0 	bl	8004480 <I2C_WaitOnTXISFlagUntilTimeout>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e02c      	b.n	8004304 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042aa:	88fb      	ldrh	r3, [r7, #6]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d105      	bne.n	80042bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042b0:	893b      	ldrh	r3, [r7, #8]
 80042b2:	b2da      	uxtb	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	629a      	str	r2, [r3, #40]	; 0x28
 80042ba:	e015      	b.n	80042e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80042bc:	893b      	ldrh	r3, [r7, #8]
 80042be:	0a1b      	lsrs	r3, r3, #8
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ca:	69fa      	ldr	r2, [r7, #28]
 80042cc:	69b9      	ldr	r1, [r7, #24]
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 f8d6 	bl	8004480 <I2C_WaitOnTXISFlagUntilTimeout>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e012      	b.n	8004304 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042de:	893b      	ldrh	r3, [r7, #8]
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	2200      	movs	r2, #0
 80042f0:	2180      	movs	r1, #128	; 0x80
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 f884 	bl	8004400 <I2C_WaitOnFlagUntilTimeout>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e000      	b.n	8004304 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	80002000 	.word	0x80002000

08004310 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af02      	add	r7, sp, #8
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	4608      	mov	r0, r1
 800431a:	4611      	mov	r1, r2
 800431c:	461a      	mov	r2, r3
 800431e:	4603      	mov	r3, r0
 8004320:	817b      	strh	r3, [r7, #10]
 8004322:	460b      	mov	r3, r1
 8004324:	813b      	strh	r3, [r7, #8]
 8004326:	4613      	mov	r3, r2
 8004328:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800432a:	88fb      	ldrh	r3, [r7, #6]
 800432c:	b2da      	uxtb	r2, r3
 800432e:	8979      	ldrh	r1, [r7, #10]
 8004330:	4b20      	ldr	r3, [pc, #128]	; (80043b4 <I2C_RequestMemoryRead+0xa4>)
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	2300      	movs	r3, #0
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 fa0a 	bl	8004750 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800433c:	69fa      	ldr	r2, [r7, #28]
 800433e:	69b9      	ldr	r1, [r7, #24]
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 f89d 	bl	8004480 <I2C_WaitOnTXISFlagUntilTimeout>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e02c      	b.n	80043aa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004350:	88fb      	ldrh	r3, [r7, #6]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d105      	bne.n	8004362 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004356:	893b      	ldrh	r3, [r7, #8]
 8004358:	b2da      	uxtb	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	629a      	str	r2, [r3, #40]	; 0x28
 8004360:	e015      	b.n	800438e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004362:	893b      	ldrh	r3, [r7, #8]
 8004364:	0a1b      	lsrs	r3, r3, #8
 8004366:	b29b      	uxth	r3, r3
 8004368:	b2da      	uxtb	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004370:	69fa      	ldr	r2, [r7, #28]
 8004372:	69b9      	ldr	r1, [r7, #24]
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 f883 	bl	8004480 <I2C_WaitOnTXISFlagUntilTimeout>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e012      	b.n	80043aa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004384:	893b      	ldrh	r3, [r7, #8]
 8004386:	b2da      	uxtb	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	2200      	movs	r2, #0
 8004396:	2140      	movs	r1, #64	; 0x40
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 f831 	bl	8004400 <I2C_WaitOnFlagUntilTimeout>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e000      	b.n	80043aa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	80002000 	.word	0x80002000

080043b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d103      	bne.n	80043d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2200      	movs	r2, #0
 80043d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d007      	beq.n	80043f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699a      	ldr	r2, [r3, #24]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0201 	orr.w	r2, r2, #1
 80043f2:	619a      	str	r2, [r3, #24]
  }
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	603b      	str	r3, [r7, #0]
 800440c:	4613      	mov	r3, r2
 800440e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004410:	e022      	b.n	8004458 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004418:	d01e      	beq.n	8004458 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800441a:	f7ff f87d 	bl	8003518 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d302      	bcc.n	8004430 <I2C_WaitOnFlagUntilTimeout+0x30>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d113      	bne.n	8004458 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004434:	f043 0220 	orr.w	r2, r3, #32
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e00f      	b.n	8004478 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	699a      	ldr	r2, [r3, #24]
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	4013      	ands	r3, r2
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	429a      	cmp	r2, r3
 8004466:	bf0c      	ite	eq
 8004468:	2301      	moveq	r3, #1
 800446a:	2300      	movne	r3, #0
 800446c:	b2db      	uxtb	r3, r3
 800446e:	461a      	mov	r2, r3
 8004470:	79fb      	ldrb	r3, [r7, #7]
 8004472:	429a      	cmp	r2, r3
 8004474:	d0cd      	beq.n	8004412 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800448c:	e02c      	b.n	80044e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	68b9      	ldr	r1, [r7, #8]
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 f870 	bl	8004578 <I2C_IsErrorOccurred>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e02a      	b.n	80044f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a8:	d01e      	beq.n	80044e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044aa:	f7ff f835 	bl	8003518 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d302      	bcc.n	80044c0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d113      	bne.n	80044e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c4:	f043 0220 	orr.w	r2, r3, #32
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e007      	b.n	80044f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d1cb      	bne.n	800448e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800450c:	e028      	b.n	8004560 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	68b9      	ldr	r1, [r7, #8]
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 f830 	bl	8004578 <I2C_IsErrorOccurred>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e026      	b.n	8004570 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004522:	f7fe fff9 	bl	8003518 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	429a      	cmp	r2, r3
 8004530:	d302      	bcc.n	8004538 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d113      	bne.n	8004560 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453c:	f043 0220 	orr.w	r2, r3, #32
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e007      	b.n	8004570 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b20      	cmp	r3, #32
 800456c:	d1cf      	bne.n	800450e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08a      	sub	sp, #40	; 0x28
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004584:	2300      	movs	r3, #0
 8004586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004592:	2300      	movs	r3, #0
 8004594:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	f003 0310 	and.w	r3, r3, #16
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d075      	beq.n	8004690 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2210      	movs	r2, #16
 80045aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045ac:	e056      	b.n	800465c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b4:	d052      	beq.n	800465c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045b6:	f7fe ffaf 	bl	8003518 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d302      	bcc.n	80045cc <I2C_IsErrorOccurred+0x54>
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d147      	bne.n	800465c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045ee:	d12e      	bne.n	800464e <I2C_IsErrorOccurred+0xd6>
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045f6:	d02a      	beq.n	800464e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80045f8:	7cfb      	ldrb	r3, [r7, #19]
 80045fa:	2b20      	cmp	r3, #32
 80045fc:	d027      	beq.n	800464e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800460c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800460e:	f7fe ff83 	bl	8003518 <HAL_GetTick>
 8004612:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004614:	e01b      	b.n	800464e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004616:	f7fe ff7f 	bl	8003518 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b19      	cmp	r3, #25
 8004622:	d914      	bls.n	800464e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004628:	f043 0220 	orr.w	r2, r3, #32
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2220      	movs	r2, #32
 8004634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b20      	cmp	r3, #32
 800465a:	d1dc      	bne.n	8004616 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b20      	cmp	r3, #32
 8004668:	d003      	beq.n	8004672 <I2C_IsErrorOccurred+0xfa>
 800466a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800466e:	2b00      	cmp	r3, #0
 8004670:	d09d      	beq.n	80045ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004672:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004676:	2b00      	cmp	r3, #0
 8004678:	d103      	bne.n	8004682 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2220      	movs	r2, #32
 8004680:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	f043 0304 	orr.w	r3, r3, #4
 8004688:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00b      	beq.n	80046ba <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	f043 0301 	orr.w	r3, r3, #1
 80046a8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00b      	beq.n	80046dc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	f043 0308 	orr.w	r3, r3, #8
 80046ca:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00b      	beq.n	80046fe <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	f043 0302 	orr.w	r3, r3, #2
 80046ec:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80046fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004702:	2b00      	cmp	r3, #0
 8004704:	d01c      	beq.n	8004740 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f7ff fe56 	bl	80043b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6859      	ldr	r1, [r3, #4]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	4b0d      	ldr	r3, [pc, #52]	; (800474c <I2C_IsErrorOccurred+0x1d4>)
 8004718:	400b      	ands	r3, r1
 800471a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004720:	6a3b      	ldr	r3, [r7, #32]
 8004722:	431a      	orrs	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004744:	4618      	mov	r0, r3
 8004746:	3728      	adds	r7, #40	; 0x28
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	fe00e800 	.word	0xfe00e800

08004750 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004750:	b480      	push	{r7}
 8004752:	b087      	sub	sp, #28
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	607b      	str	r3, [r7, #4]
 800475a:	460b      	mov	r3, r1
 800475c:	817b      	strh	r3, [r7, #10]
 800475e:	4613      	mov	r3, r2
 8004760:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004762:	897b      	ldrh	r3, [r7, #10]
 8004764:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004768:	7a7b      	ldrb	r3, [r7, #9]
 800476a:	041b      	lsls	r3, r3, #16
 800476c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004770:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	4313      	orrs	r3, r2
 800477a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800477e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	0d5b      	lsrs	r3, r3, #21
 800478a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800478e:	4b08      	ldr	r3, [pc, #32]	; (80047b0 <I2C_TransferConfig+0x60>)
 8004790:	430b      	orrs	r3, r1
 8004792:	43db      	mvns	r3, r3
 8004794:	ea02 0103 	and.w	r1, r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	430a      	orrs	r2, r1
 80047a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80047a2:	bf00      	nop
 80047a4:	371c      	adds	r7, #28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	03ff63ff 	.word	0x03ff63ff

080047b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b20      	cmp	r3, #32
 80047c8:	d138      	bne.n	800483c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d101      	bne.n	80047d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80047d4:	2302      	movs	r3, #2
 80047d6:	e032      	b.n	800483e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2224      	movs	r2, #36	; 0x24
 80047e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0201 	bic.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004806:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6819      	ldr	r1, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0201 	orr.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004838:	2300      	movs	r3, #0
 800483a:	e000      	b.n	800483e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800483c:	2302      	movs	r3, #2
  }
}
 800483e:	4618      	mov	r0, r3
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800484a:	b480      	push	{r7}
 800484c:	b085      	sub	sp, #20
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b20      	cmp	r3, #32
 800485e:	d139      	bne.n	80048d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004866:	2b01      	cmp	r3, #1
 8004868:	d101      	bne.n	800486e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800486a:	2302      	movs	r3, #2
 800486c:	e033      	b.n	80048d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2224      	movs	r2, #36	; 0x24
 800487a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0201 	bic.w	r2, r2, #1
 800488c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800489c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	021b      	lsls	r3, r3, #8
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0201 	orr.w	r2, r2, #1
 80048be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2220      	movs	r2, #32
 80048c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048d0:	2300      	movs	r3, #0
 80048d2:	e000      	b.n	80048d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80048d4:	2302      	movs	r3, #2
  }
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
	...

080048e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80048e8:	4b04      	ldr	r3, [pc, #16]	; (80048fc <HAL_PWREx_GetVoltageRange+0x18>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40007000 	.word	0x40007000

08004900 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800490e:	d130      	bne.n	8004972 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004910:	4b23      	ldr	r3, [pc, #140]	; (80049a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800491c:	d038      	beq.n	8004990 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800491e:	4b20      	ldr	r3, [pc, #128]	; (80049a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004926:	4a1e      	ldr	r2, [pc, #120]	; (80049a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004928:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800492c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800492e:	4b1d      	ldr	r3, [pc, #116]	; (80049a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2232      	movs	r2, #50	; 0x32
 8004934:	fb02 f303 	mul.w	r3, r2, r3
 8004938:	4a1b      	ldr	r2, [pc, #108]	; (80049a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800493a:	fba2 2303 	umull	r2, r3, r2, r3
 800493e:	0c9b      	lsrs	r3, r3, #18
 8004940:	3301      	adds	r3, #1
 8004942:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004944:	e002      	b.n	800494c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	3b01      	subs	r3, #1
 800494a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800494c:	4b14      	ldr	r3, [pc, #80]	; (80049a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004958:	d102      	bne.n	8004960 <HAL_PWREx_ControlVoltageScaling+0x60>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1f2      	bne.n	8004946 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004960:	4b0f      	ldr	r3, [pc, #60]	; (80049a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800496c:	d110      	bne.n	8004990 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e00f      	b.n	8004992 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004972:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800497a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800497e:	d007      	beq.n	8004990 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004980:	4b07      	ldr	r3, [pc, #28]	; (80049a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004988:	4a05      	ldr	r2, [pc, #20]	; (80049a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800498a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800498e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40007000 	.word	0x40007000
 80049a4:	20000098 	.word	0x20000098
 80049a8:	431bde83 	.word	0x431bde83

080049ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b088      	sub	sp, #32
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d102      	bne.n	80049c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	f000 bc02 	b.w	80051c4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049c0:	4b96      	ldr	r3, [pc, #600]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f003 030c 	and.w	r3, r3, #12
 80049c8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049ca:	4b94      	ldr	r3, [pc, #592]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0310 	and.w	r3, r3, #16
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 80e4 	beq.w	8004baa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d007      	beq.n	80049f8 <HAL_RCC_OscConfig+0x4c>
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	2b0c      	cmp	r3, #12
 80049ec:	f040 808b 	bne.w	8004b06 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	f040 8087 	bne.w	8004b06 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049f8:	4b88      	ldr	r3, [pc, #544]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <HAL_RCC_OscConfig+0x64>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d101      	bne.n	8004a10 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e3d9      	b.n	80051c4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a1a      	ldr	r2, [r3, #32]
 8004a14:	4b81      	ldr	r3, [pc, #516]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0308 	and.w	r3, r3, #8
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d004      	beq.n	8004a2a <HAL_RCC_OscConfig+0x7e>
 8004a20:	4b7e      	ldr	r3, [pc, #504]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a28:	e005      	b.n	8004a36 <HAL_RCC_OscConfig+0x8a>
 8004a2a:	4b7c      	ldr	r3, [pc, #496]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a30:	091b      	lsrs	r3, r3, #4
 8004a32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d223      	bcs.n	8004a82 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 fd54 	bl	80054ec <RCC_SetFlashLatencyFromMSIRange>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e3ba      	b.n	80051c4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a4e:	4b73      	ldr	r3, [pc, #460]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a72      	ldr	r2, [pc, #456]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004a54:	f043 0308 	orr.w	r3, r3, #8
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	4b70      	ldr	r3, [pc, #448]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	496d      	ldr	r1, [pc, #436]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a6c:	4b6b      	ldr	r3, [pc, #428]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	69db      	ldr	r3, [r3, #28]
 8004a78:	021b      	lsls	r3, r3, #8
 8004a7a:	4968      	ldr	r1, [pc, #416]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	604b      	str	r3, [r1, #4]
 8004a80:	e025      	b.n	8004ace <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a82:	4b66      	ldr	r3, [pc, #408]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a65      	ldr	r2, [pc, #404]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004a88:	f043 0308 	orr.w	r3, r3, #8
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	4b63      	ldr	r3, [pc, #396]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	4960      	ldr	r1, [pc, #384]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004aa0:	4b5e      	ldr	r3, [pc, #376]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	021b      	lsls	r3, r3, #8
 8004aae:	495b      	ldr	r1, [pc, #364]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d109      	bne.n	8004ace <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 fd14 	bl	80054ec <RCC_SetFlashLatencyFromMSIRange>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e37a      	b.n	80051c4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ace:	f000 fc81 	bl	80053d4 <HAL_RCC_GetSysClockFreq>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	4b51      	ldr	r3, [pc, #324]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	091b      	lsrs	r3, r3, #4
 8004ada:	f003 030f 	and.w	r3, r3, #15
 8004ade:	4950      	ldr	r1, [pc, #320]	; (8004c20 <HAL_RCC_OscConfig+0x274>)
 8004ae0:	5ccb      	ldrb	r3, [r1, r3]
 8004ae2:	f003 031f 	and.w	r3, r3, #31
 8004ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aea:	4a4e      	ldr	r2, [pc, #312]	; (8004c24 <HAL_RCC_OscConfig+0x278>)
 8004aec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004aee:	4b4e      	ldr	r3, [pc, #312]	; (8004c28 <HAL_RCC_OscConfig+0x27c>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fe fcc0 	bl	8003478 <HAL_InitTick>
 8004af8:	4603      	mov	r3, r0
 8004afa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d052      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
 8004b04:	e35e      	b.n	80051c4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d032      	beq.n	8004b74 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b0e:	4b43      	ldr	r3, [pc, #268]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a42      	ldr	r2, [pc, #264]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004b14:	f043 0301 	orr.w	r3, r3, #1
 8004b18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b1a:	f7fe fcfd 	bl	8003518 <HAL_GetTick>
 8004b1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b20:	e008      	b.n	8004b34 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b22:	f7fe fcf9 	bl	8003518 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d901      	bls.n	8004b34 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e347      	b.n	80051c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b34:	4b39      	ldr	r3, [pc, #228]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d0f0      	beq.n	8004b22 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b40:	4b36      	ldr	r3, [pc, #216]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a35      	ldr	r2, [pc, #212]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004b46:	f043 0308 	orr.w	r3, r3, #8
 8004b4a:	6013      	str	r3, [r2, #0]
 8004b4c:	4b33      	ldr	r3, [pc, #204]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	4930      	ldr	r1, [pc, #192]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b5e:	4b2f      	ldr	r3, [pc, #188]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	021b      	lsls	r3, r3, #8
 8004b6c:	492b      	ldr	r1, [pc, #172]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	604b      	str	r3, [r1, #4]
 8004b72:	e01a      	b.n	8004baa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b74:	4b29      	ldr	r3, [pc, #164]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a28      	ldr	r2, [pc, #160]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004b7a:	f023 0301 	bic.w	r3, r3, #1
 8004b7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b80:	f7fe fcca 	bl	8003518 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b88:	f7fe fcc6 	bl	8003518 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e314      	b.n	80051c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b9a:	4b20      	ldr	r3, [pc, #128]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1f0      	bne.n	8004b88 <HAL_RCC_OscConfig+0x1dc>
 8004ba6:	e000      	b.n	8004baa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ba8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d073      	beq.n	8004c9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d005      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x21c>
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	2b0c      	cmp	r3, #12
 8004bc0:	d10e      	bne.n	8004be0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2b03      	cmp	r3, #3
 8004bc6:	d10b      	bne.n	8004be0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bc8:	4b14      	ldr	r3, [pc, #80]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d063      	beq.n	8004c9c <HAL_RCC_OscConfig+0x2f0>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d15f      	bne.n	8004c9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e2f1      	b.n	80051c4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be8:	d106      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x24c>
 8004bea:	4b0c      	ldr	r3, [pc, #48]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a0b      	ldr	r2, [pc, #44]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	e025      	b.n	8004c44 <HAL_RCC_OscConfig+0x298>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c00:	d114      	bne.n	8004c2c <HAL_RCC_OscConfig+0x280>
 8004c02:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a05      	ldr	r2, [pc, #20]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	4b03      	ldr	r3, [pc, #12]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a02      	ldr	r2, [pc, #8]	; (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c18:	6013      	str	r3, [r2, #0]
 8004c1a:	e013      	b.n	8004c44 <HAL_RCC_OscConfig+0x298>
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	0800a74c 	.word	0x0800a74c
 8004c24:	20000098 	.word	0x20000098
 8004c28:	2000009c 	.word	0x2000009c
 8004c2c:	4ba0      	ldr	r3, [pc, #640]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a9f      	ldr	r2, [pc, #636]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	4b9d      	ldr	r3, [pc, #628]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a9c      	ldr	r2, [pc, #624]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d013      	beq.n	8004c74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c4c:	f7fe fc64 	bl	8003518 <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c52:	e008      	b.n	8004c66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c54:	f7fe fc60 	bl	8003518 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b64      	cmp	r3, #100	; 0x64
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e2ae      	b.n	80051c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c66:	4b92      	ldr	r3, [pc, #584]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0f0      	beq.n	8004c54 <HAL_RCC_OscConfig+0x2a8>
 8004c72:	e014      	b.n	8004c9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c74:	f7fe fc50 	bl	8003518 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c7c:	f7fe fc4c 	bl	8003518 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b64      	cmp	r3, #100	; 0x64
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e29a      	b.n	80051c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c8e:	4b88      	ldr	r3, [pc, #544]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f0      	bne.n	8004c7c <HAL_RCC_OscConfig+0x2d0>
 8004c9a:	e000      	b.n	8004c9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d060      	beq.n	8004d6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	2b04      	cmp	r3, #4
 8004cae:	d005      	beq.n	8004cbc <HAL_RCC_OscConfig+0x310>
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	2b0c      	cmp	r3, #12
 8004cb4:	d119      	bne.n	8004cea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d116      	bne.n	8004cea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cbc:	4b7c      	ldr	r3, [pc, #496]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d005      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x328>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e277      	b.n	80051c4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cd4:	4b76      	ldr	r3, [pc, #472]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	061b      	lsls	r3, r3, #24
 8004ce2:	4973      	ldr	r1, [pc, #460]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ce8:	e040      	b.n	8004d6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d023      	beq.n	8004d3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cf2:	4b6f      	ldr	r3, [pc, #444]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a6e      	ldr	r2, [pc, #440]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfe:	f7fe fc0b 	bl	8003518 <HAL_GetTick>
 8004d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d04:	e008      	b.n	8004d18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d06:	f7fe fc07 	bl	8003518 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e255      	b.n	80051c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d18:	4b65      	ldr	r3, [pc, #404]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0f0      	beq.n	8004d06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d24:	4b62      	ldr	r3, [pc, #392]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	061b      	lsls	r3, r3, #24
 8004d32:	495f      	ldr	r1, [pc, #380]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	604b      	str	r3, [r1, #4]
 8004d38:	e018      	b.n	8004d6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d3a:	4b5d      	ldr	r3, [pc, #372]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a5c      	ldr	r2, [pc, #368]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004d40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d46:	f7fe fbe7 	bl	8003518 <HAL_GetTick>
 8004d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d4c:	e008      	b.n	8004d60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d4e:	f7fe fbe3 	bl	8003518 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e231      	b.n	80051c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d60:	4b53      	ldr	r3, [pc, #332]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1f0      	bne.n	8004d4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0308 	and.w	r3, r3, #8
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d03c      	beq.n	8004df2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d01c      	beq.n	8004dba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d80:	4b4b      	ldr	r3, [pc, #300]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d86:	4a4a      	ldr	r2, [pc, #296]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004d88:	f043 0301 	orr.w	r3, r3, #1
 8004d8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d90:	f7fe fbc2 	bl	8003518 <HAL_GetTick>
 8004d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d96:	e008      	b.n	8004daa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d98:	f7fe fbbe 	bl	8003518 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e20c      	b.n	80051c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004daa:	4b41      	ldr	r3, [pc, #260]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0ef      	beq.n	8004d98 <HAL_RCC_OscConfig+0x3ec>
 8004db8:	e01b      	b.n	8004df2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dba:	4b3d      	ldr	r3, [pc, #244]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dc0:	4a3b      	ldr	r2, [pc, #236]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004dc2:	f023 0301 	bic.w	r3, r3, #1
 8004dc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dca:	f7fe fba5 	bl	8003518 <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dd0:	e008      	b.n	8004de4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dd2:	f7fe fba1 	bl	8003518 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e1ef      	b.n	80051c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004de4:	4b32      	ldr	r3, [pc, #200]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1ef      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0304 	and.w	r3, r3, #4
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 80a6 	beq.w	8004f4c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e00:	2300      	movs	r3, #0
 8004e02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004e04:	4b2a      	ldr	r3, [pc, #168]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10d      	bne.n	8004e2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e10:	4b27      	ldr	r3, [pc, #156]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e14:	4a26      	ldr	r2, [pc, #152]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e1a:	6593      	str	r3, [r2, #88]	; 0x58
 8004e1c:	4b24      	ldr	r3, [pc, #144]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e24:	60bb      	str	r3, [r7, #8]
 8004e26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e2c:	4b21      	ldr	r3, [pc, #132]	; (8004eb4 <HAL_RCC_OscConfig+0x508>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d118      	bne.n	8004e6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e38:	4b1e      	ldr	r3, [pc, #120]	; (8004eb4 <HAL_RCC_OscConfig+0x508>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a1d      	ldr	r2, [pc, #116]	; (8004eb4 <HAL_RCC_OscConfig+0x508>)
 8004e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e44:	f7fe fb68 	bl	8003518 <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e4a:	e008      	b.n	8004e5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e4c:	f7fe fb64 	bl	8003518 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e1b2      	b.n	80051c4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e5e:	4b15      	ldr	r3, [pc, #84]	; (8004eb4 <HAL_RCC_OscConfig+0x508>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d0f0      	beq.n	8004e4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d108      	bne.n	8004e84 <HAL_RCC_OscConfig+0x4d8>
 8004e72:	4b0f      	ldr	r3, [pc, #60]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e78:	4a0d      	ldr	r2, [pc, #52]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004e7a:	f043 0301 	orr.w	r3, r3, #1
 8004e7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e82:	e029      	b.n	8004ed8 <HAL_RCC_OscConfig+0x52c>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	2b05      	cmp	r3, #5
 8004e8a:	d115      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x50c>
 8004e8c:	4b08      	ldr	r3, [pc, #32]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e92:	4a07      	ldr	r2, [pc, #28]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004e94:	f043 0304 	orr.w	r3, r3, #4
 8004e98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e9c:	4b04      	ldr	r3, [pc, #16]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea2:	4a03      	ldr	r2, [pc, #12]	; (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004ea4:	f043 0301 	orr.w	r3, r3, #1
 8004ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004eac:	e014      	b.n	8004ed8 <HAL_RCC_OscConfig+0x52c>
 8004eae:	bf00      	nop
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	40007000 	.word	0x40007000
 8004eb8:	4b9a      	ldr	r3, [pc, #616]	; (8005124 <HAL_RCC_OscConfig+0x778>)
 8004eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ebe:	4a99      	ldr	r2, [pc, #612]	; (8005124 <HAL_RCC_OscConfig+0x778>)
 8004ec0:	f023 0301 	bic.w	r3, r3, #1
 8004ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ec8:	4b96      	ldr	r3, [pc, #600]	; (8005124 <HAL_RCC_OscConfig+0x778>)
 8004eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ece:	4a95      	ldr	r2, [pc, #596]	; (8005124 <HAL_RCC_OscConfig+0x778>)
 8004ed0:	f023 0304 	bic.w	r3, r3, #4
 8004ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d016      	beq.n	8004f0e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee0:	f7fe fb1a 	bl	8003518 <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ee6:	e00a      	b.n	8004efe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee8:	f7fe fb16 	bl	8003518 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e162      	b.n	80051c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004efe:	4b89      	ldr	r3, [pc, #548]	; (8005124 <HAL_RCC_OscConfig+0x778>)
 8004f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0ed      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x53c>
 8004f0c:	e015      	b.n	8004f3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f0e:	f7fe fb03 	bl	8003518 <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f14:	e00a      	b.n	8004f2c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f16:	f7fe faff 	bl	8003518 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e14b      	b.n	80051c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f2c:	4b7d      	ldr	r3, [pc, #500]	; (8005124 <HAL_RCC_OscConfig+0x778>)
 8004f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1ed      	bne.n	8004f16 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f3a:	7ffb      	ldrb	r3, [r7, #31]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d105      	bne.n	8004f4c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f40:	4b78      	ldr	r3, [pc, #480]	; (8005124 <HAL_RCC_OscConfig+0x778>)
 8004f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f44:	4a77      	ldr	r2, [pc, #476]	; (8005124 <HAL_RCC_OscConfig+0x778>)
 8004f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f4a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0320 	and.w	r3, r3, #32
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d03c      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d01c      	beq.n	8004f9a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f60:	4b70      	ldr	r3, [pc, #448]	; (8005124 <HAL_RCC_OscConfig+0x778>)
 8004f62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f66:	4a6f      	ldr	r2, [pc, #444]	; (8005124 <HAL_RCC_OscConfig+0x778>)
 8004f68:	f043 0301 	orr.w	r3, r3, #1
 8004f6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f70:	f7fe fad2 	bl	8003518 <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f76:	e008      	b.n	8004f8a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f78:	f7fe face 	bl	8003518 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e11c      	b.n	80051c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f8a:	4b66      	ldr	r3, [pc, #408]	; (8005124 <HAL_RCC_OscConfig+0x778>)
 8004f8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0ef      	beq.n	8004f78 <HAL_RCC_OscConfig+0x5cc>
 8004f98:	e01b      	b.n	8004fd2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f9a:	4b62      	ldr	r3, [pc, #392]	; (8005124 <HAL_RCC_OscConfig+0x778>)
 8004f9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fa0:	4a60      	ldr	r2, [pc, #384]	; (8005124 <HAL_RCC_OscConfig+0x778>)
 8004fa2:	f023 0301 	bic.w	r3, r3, #1
 8004fa6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004faa:	f7fe fab5 	bl	8003518 <HAL_GetTick>
 8004fae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fb0:	e008      	b.n	8004fc4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fb2:	f7fe fab1 	bl	8003518 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e0ff      	b.n	80051c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fc4:	4b57      	ldr	r3, [pc, #348]	; (8005124 <HAL_RCC_OscConfig+0x778>)
 8004fc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1ef      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 80f3 	beq.w	80051c2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	f040 80c9 	bne.w	8005178 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004fe6:	4b4f      	ldr	r3, [pc, #316]	; (8005124 <HAL_RCC_OscConfig+0x778>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f003 0203 	and.w	r2, r3, #3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d12c      	bne.n	8005054 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005004:	3b01      	subs	r3, #1
 8005006:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005008:	429a      	cmp	r2, r3
 800500a:	d123      	bne.n	8005054 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005016:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005018:	429a      	cmp	r2, r3
 800501a:	d11b      	bne.n	8005054 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005026:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005028:	429a      	cmp	r2, r3
 800502a:	d113      	bne.n	8005054 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005036:	085b      	lsrs	r3, r3, #1
 8005038:	3b01      	subs	r3, #1
 800503a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800503c:	429a      	cmp	r2, r3
 800503e:	d109      	bne.n	8005054 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	085b      	lsrs	r3, r3, #1
 800504c:	3b01      	subs	r3, #1
 800504e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005050:	429a      	cmp	r2, r3
 8005052:	d06b      	beq.n	800512c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	2b0c      	cmp	r3, #12
 8005058:	d062      	beq.n	8005120 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800505a:	4b32      	ldr	r3, [pc, #200]	; (8005124 <HAL_RCC_OscConfig+0x778>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e0ac      	b.n	80051c4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800506a:	4b2e      	ldr	r3, [pc, #184]	; (8005124 <HAL_RCC_OscConfig+0x778>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a2d      	ldr	r2, [pc, #180]	; (8005124 <HAL_RCC_OscConfig+0x778>)
 8005070:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005074:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005076:	f7fe fa4f 	bl	8003518 <HAL_GetTick>
 800507a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800507c:	e008      	b.n	8005090 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800507e:	f7fe fa4b 	bl	8003518 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	2b02      	cmp	r3, #2
 800508a:	d901      	bls.n	8005090 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e099      	b.n	80051c4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005090:	4b24      	ldr	r3, [pc, #144]	; (8005124 <HAL_RCC_OscConfig+0x778>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1f0      	bne.n	800507e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800509c:	4b21      	ldr	r3, [pc, #132]	; (8005124 <HAL_RCC_OscConfig+0x778>)
 800509e:	68da      	ldr	r2, [r3, #12]
 80050a0:	4b21      	ldr	r3, [pc, #132]	; (8005128 <HAL_RCC_OscConfig+0x77c>)
 80050a2:	4013      	ands	r3, r2
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80050ac:	3a01      	subs	r2, #1
 80050ae:	0112      	lsls	r2, r2, #4
 80050b0:	4311      	orrs	r1, r2
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050b6:	0212      	lsls	r2, r2, #8
 80050b8:	4311      	orrs	r1, r2
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80050be:	0852      	lsrs	r2, r2, #1
 80050c0:	3a01      	subs	r2, #1
 80050c2:	0552      	lsls	r2, r2, #21
 80050c4:	4311      	orrs	r1, r2
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80050ca:	0852      	lsrs	r2, r2, #1
 80050cc:	3a01      	subs	r2, #1
 80050ce:	0652      	lsls	r2, r2, #25
 80050d0:	4311      	orrs	r1, r2
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050d6:	06d2      	lsls	r2, r2, #27
 80050d8:	430a      	orrs	r2, r1
 80050da:	4912      	ldr	r1, [pc, #72]	; (8005124 <HAL_RCC_OscConfig+0x778>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80050e0:	4b10      	ldr	r3, [pc, #64]	; (8005124 <HAL_RCC_OscConfig+0x778>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a0f      	ldr	r2, [pc, #60]	; (8005124 <HAL_RCC_OscConfig+0x778>)
 80050e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050ec:	4b0d      	ldr	r3, [pc, #52]	; (8005124 <HAL_RCC_OscConfig+0x778>)
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	4a0c      	ldr	r2, [pc, #48]	; (8005124 <HAL_RCC_OscConfig+0x778>)
 80050f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050f8:	f7fe fa0e 	bl	8003518 <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050fe:	e008      	b.n	8005112 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005100:	f7fe fa0a 	bl	8003518 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b02      	cmp	r3, #2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e058      	b.n	80051c4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005112:	4b04      	ldr	r3, [pc, #16]	; (8005124 <HAL_RCC_OscConfig+0x778>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d0f0      	beq.n	8005100 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800511e:	e050      	b.n	80051c2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e04f      	b.n	80051c4 <HAL_RCC_OscConfig+0x818>
 8005124:	40021000 	.word	0x40021000
 8005128:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800512c:	4b27      	ldr	r3, [pc, #156]	; (80051cc <HAL_RCC_OscConfig+0x820>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d144      	bne.n	80051c2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005138:	4b24      	ldr	r3, [pc, #144]	; (80051cc <HAL_RCC_OscConfig+0x820>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a23      	ldr	r2, [pc, #140]	; (80051cc <HAL_RCC_OscConfig+0x820>)
 800513e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005142:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005144:	4b21      	ldr	r3, [pc, #132]	; (80051cc <HAL_RCC_OscConfig+0x820>)
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	4a20      	ldr	r2, [pc, #128]	; (80051cc <HAL_RCC_OscConfig+0x820>)
 800514a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800514e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005150:	f7fe f9e2 	bl	8003518 <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005158:	f7fe f9de 	bl	8003518 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e02c      	b.n	80051c4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800516a:	4b18      	ldr	r3, [pc, #96]	; (80051cc <HAL_RCC_OscConfig+0x820>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0f0      	beq.n	8005158 <HAL_RCC_OscConfig+0x7ac>
 8005176:	e024      	b.n	80051c2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	2b0c      	cmp	r3, #12
 800517c:	d01f      	beq.n	80051be <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800517e:	4b13      	ldr	r3, [pc, #76]	; (80051cc <HAL_RCC_OscConfig+0x820>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a12      	ldr	r2, [pc, #72]	; (80051cc <HAL_RCC_OscConfig+0x820>)
 8005184:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800518a:	f7fe f9c5 	bl	8003518 <HAL_GetTick>
 800518e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005190:	e008      	b.n	80051a4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005192:	f7fe f9c1 	bl	8003518 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e00f      	b.n	80051c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051a4:	4b09      	ldr	r3, [pc, #36]	; (80051cc <HAL_RCC_OscConfig+0x820>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1f0      	bne.n	8005192 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80051b0:	4b06      	ldr	r3, [pc, #24]	; (80051cc <HAL_RCC_OscConfig+0x820>)
 80051b2:	68da      	ldr	r2, [r3, #12]
 80051b4:	4905      	ldr	r1, [pc, #20]	; (80051cc <HAL_RCC_OscConfig+0x820>)
 80051b6:	4b06      	ldr	r3, [pc, #24]	; (80051d0 <HAL_RCC_OscConfig+0x824>)
 80051b8:	4013      	ands	r3, r2
 80051ba:	60cb      	str	r3, [r1, #12]
 80051bc:	e001      	b.n	80051c2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e000      	b.n	80051c4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3720      	adds	r7, #32
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	40021000 	.word	0x40021000
 80051d0:	feeefffc 	.word	0xfeeefffc

080051d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e0e7      	b.n	80053b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051e8:	4b75      	ldr	r3, [pc, #468]	; (80053c0 <HAL_RCC_ClockConfig+0x1ec>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0307 	and.w	r3, r3, #7
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d910      	bls.n	8005218 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051f6:	4b72      	ldr	r3, [pc, #456]	; (80053c0 <HAL_RCC_ClockConfig+0x1ec>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f023 0207 	bic.w	r2, r3, #7
 80051fe:	4970      	ldr	r1, [pc, #448]	; (80053c0 <HAL_RCC_ClockConfig+0x1ec>)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	4313      	orrs	r3, r2
 8005204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005206:	4b6e      	ldr	r3, [pc, #440]	; (80053c0 <HAL_RCC_ClockConfig+0x1ec>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0307 	and.w	r3, r3, #7
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	429a      	cmp	r2, r3
 8005212:	d001      	beq.n	8005218 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e0cf      	b.n	80053b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d010      	beq.n	8005246 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	4b66      	ldr	r3, [pc, #408]	; (80053c4 <HAL_RCC_ClockConfig+0x1f0>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005230:	429a      	cmp	r2, r3
 8005232:	d908      	bls.n	8005246 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005234:	4b63      	ldr	r3, [pc, #396]	; (80053c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	4960      	ldr	r1, [pc, #384]	; (80053c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005242:	4313      	orrs	r3, r2
 8005244:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	d04c      	beq.n	80052ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2b03      	cmp	r3, #3
 8005258:	d107      	bne.n	800526a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800525a:	4b5a      	ldr	r3, [pc, #360]	; (80053c4 <HAL_RCC_ClockConfig+0x1f0>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d121      	bne.n	80052aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e0a6      	b.n	80053b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	2b02      	cmp	r3, #2
 8005270:	d107      	bne.n	8005282 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005272:	4b54      	ldr	r3, [pc, #336]	; (80053c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d115      	bne.n	80052aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e09a      	b.n	80053b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d107      	bne.n	800529a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800528a:	4b4e      	ldr	r3, [pc, #312]	; (80053c4 <HAL_RCC_ClockConfig+0x1f0>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d109      	bne.n	80052aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e08e      	b.n	80053b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800529a:	4b4a      	ldr	r3, [pc, #296]	; (80053c4 <HAL_RCC_ClockConfig+0x1f0>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e086      	b.n	80053b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052aa:	4b46      	ldr	r3, [pc, #280]	; (80053c4 <HAL_RCC_ClockConfig+0x1f0>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f023 0203 	bic.w	r2, r3, #3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	4943      	ldr	r1, [pc, #268]	; (80053c4 <HAL_RCC_ClockConfig+0x1f0>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052bc:	f7fe f92c 	bl	8003518 <HAL_GetTick>
 80052c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052c2:	e00a      	b.n	80052da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052c4:	f7fe f928 	bl	8003518 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e06e      	b.n	80053b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052da:	4b3a      	ldr	r3, [pc, #232]	; (80053c4 <HAL_RCC_ClockConfig+0x1f0>)
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f003 020c 	and.w	r2, r3, #12
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d1eb      	bne.n	80052c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d010      	beq.n	800531a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	4b31      	ldr	r3, [pc, #196]	; (80053c4 <HAL_RCC_ClockConfig+0x1f0>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005304:	429a      	cmp	r2, r3
 8005306:	d208      	bcs.n	800531a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005308:	4b2e      	ldr	r3, [pc, #184]	; (80053c4 <HAL_RCC_ClockConfig+0x1f0>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	492b      	ldr	r1, [pc, #172]	; (80053c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005316:	4313      	orrs	r3, r2
 8005318:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800531a:	4b29      	ldr	r3, [pc, #164]	; (80053c0 <HAL_RCC_ClockConfig+0x1ec>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	429a      	cmp	r2, r3
 8005326:	d210      	bcs.n	800534a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005328:	4b25      	ldr	r3, [pc, #148]	; (80053c0 <HAL_RCC_ClockConfig+0x1ec>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f023 0207 	bic.w	r2, r3, #7
 8005330:	4923      	ldr	r1, [pc, #140]	; (80053c0 <HAL_RCC_ClockConfig+0x1ec>)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	4313      	orrs	r3, r2
 8005336:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005338:	4b21      	ldr	r3, [pc, #132]	; (80053c0 <HAL_RCC_ClockConfig+0x1ec>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0307 	and.w	r3, r3, #7
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	429a      	cmp	r2, r3
 8005344:	d001      	beq.n	800534a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e036      	b.n	80053b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0304 	and.w	r3, r3, #4
 8005352:	2b00      	cmp	r3, #0
 8005354:	d008      	beq.n	8005368 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005356:	4b1b      	ldr	r3, [pc, #108]	; (80053c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	4918      	ldr	r1, [pc, #96]	; (80053c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005364:	4313      	orrs	r3, r2
 8005366:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0308 	and.w	r3, r3, #8
 8005370:	2b00      	cmp	r3, #0
 8005372:	d009      	beq.n	8005388 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005374:	4b13      	ldr	r3, [pc, #76]	; (80053c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	00db      	lsls	r3, r3, #3
 8005382:	4910      	ldr	r1, [pc, #64]	; (80053c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005384:	4313      	orrs	r3, r2
 8005386:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005388:	f000 f824 	bl	80053d4 <HAL_RCC_GetSysClockFreq>
 800538c:	4602      	mov	r2, r0
 800538e:	4b0d      	ldr	r3, [pc, #52]	; (80053c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	091b      	lsrs	r3, r3, #4
 8005394:	f003 030f 	and.w	r3, r3, #15
 8005398:	490b      	ldr	r1, [pc, #44]	; (80053c8 <HAL_RCC_ClockConfig+0x1f4>)
 800539a:	5ccb      	ldrb	r3, [r1, r3]
 800539c:	f003 031f 	and.w	r3, r3, #31
 80053a0:	fa22 f303 	lsr.w	r3, r2, r3
 80053a4:	4a09      	ldr	r2, [pc, #36]	; (80053cc <HAL_RCC_ClockConfig+0x1f8>)
 80053a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80053a8:	4b09      	ldr	r3, [pc, #36]	; (80053d0 <HAL_RCC_ClockConfig+0x1fc>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fe f863 	bl	8003478 <HAL_InitTick>
 80053b2:	4603      	mov	r3, r0
 80053b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80053b6:	7afb      	ldrb	r3, [r7, #11]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	40022000 	.word	0x40022000
 80053c4:	40021000 	.word	0x40021000
 80053c8:	0800a74c 	.word	0x0800a74c
 80053cc:	20000098 	.word	0x20000098
 80053d0:	2000009c 	.word	0x2000009c

080053d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b089      	sub	sp, #36	; 0x24
 80053d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80053da:	2300      	movs	r3, #0
 80053dc:	61fb      	str	r3, [r7, #28]
 80053de:	2300      	movs	r3, #0
 80053e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053e2:	4b3e      	ldr	r3, [pc, #248]	; (80054dc <HAL_RCC_GetSysClockFreq+0x108>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 030c 	and.w	r3, r3, #12
 80053ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053ec:	4b3b      	ldr	r3, [pc, #236]	; (80054dc <HAL_RCC_GetSysClockFreq+0x108>)
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f003 0303 	and.w	r3, r3, #3
 80053f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d005      	beq.n	8005408 <HAL_RCC_GetSysClockFreq+0x34>
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	2b0c      	cmp	r3, #12
 8005400:	d121      	bne.n	8005446 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d11e      	bne.n	8005446 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005408:	4b34      	ldr	r3, [pc, #208]	; (80054dc <HAL_RCC_GetSysClockFreq+0x108>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0308 	and.w	r3, r3, #8
 8005410:	2b00      	cmp	r3, #0
 8005412:	d107      	bne.n	8005424 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005414:	4b31      	ldr	r3, [pc, #196]	; (80054dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800541a:	0a1b      	lsrs	r3, r3, #8
 800541c:	f003 030f 	and.w	r3, r3, #15
 8005420:	61fb      	str	r3, [r7, #28]
 8005422:	e005      	b.n	8005430 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005424:	4b2d      	ldr	r3, [pc, #180]	; (80054dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	091b      	lsrs	r3, r3, #4
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005430:	4a2b      	ldr	r2, [pc, #172]	; (80054e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005438:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10d      	bne.n	800545c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005444:	e00a      	b.n	800545c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	2b04      	cmp	r3, #4
 800544a:	d102      	bne.n	8005452 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800544c:	4b25      	ldr	r3, [pc, #148]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800544e:	61bb      	str	r3, [r7, #24]
 8005450:	e004      	b.n	800545c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	2b08      	cmp	r3, #8
 8005456:	d101      	bne.n	800545c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005458:	4b23      	ldr	r3, [pc, #140]	; (80054e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800545a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	2b0c      	cmp	r3, #12
 8005460:	d134      	bne.n	80054cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005462:	4b1e      	ldr	r3, [pc, #120]	; (80054dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f003 0303 	and.w	r3, r3, #3
 800546a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2b02      	cmp	r3, #2
 8005470:	d003      	beq.n	800547a <HAL_RCC_GetSysClockFreq+0xa6>
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2b03      	cmp	r3, #3
 8005476:	d003      	beq.n	8005480 <HAL_RCC_GetSysClockFreq+0xac>
 8005478:	e005      	b.n	8005486 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800547a:	4b1a      	ldr	r3, [pc, #104]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800547c:	617b      	str	r3, [r7, #20]
      break;
 800547e:	e005      	b.n	800548c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005480:	4b19      	ldr	r3, [pc, #100]	; (80054e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005482:	617b      	str	r3, [r7, #20]
      break;
 8005484:	e002      	b.n	800548c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	617b      	str	r3, [r7, #20]
      break;
 800548a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800548c:	4b13      	ldr	r3, [pc, #76]	; (80054dc <HAL_RCC_GetSysClockFreq+0x108>)
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	091b      	lsrs	r3, r3, #4
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	3301      	adds	r3, #1
 8005498:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800549a:	4b10      	ldr	r3, [pc, #64]	; (80054dc <HAL_RCC_GetSysClockFreq+0x108>)
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	0a1b      	lsrs	r3, r3, #8
 80054a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	fb03 f202 	mul.w	r2, r3, r2
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054b2:	4b0a      	ldr	r3, [pc, #40]	; (80054dc <HAL_RCC_GetSysClockFreq+0x108>)
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	0e5b      	lsrs	r3, r3, #25
 80054b8:	f003 0303 	and.w	r3, r3, #3
 80054bc:	3301      	adds	r3, #1
 80054be:	005b      	lsls	r3, r3, #1
 80054c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80054cc:	69bb      	ldr	r3, [r7, #24]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3724      	adds	r7, #36	; 0x24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	40021000 	.word	0x40021000
 80054e0:	0800a75c 	.word	0x0800a75c
 80054e4:	00f42400 	.word	0x00f42400
 80054e8:	007a1200 	.word	0x007a1200

080054ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80054f4:	2300      	movs	r3, #0
 80054f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80054f8:	4b2a      	ldr	r3, [pc, #168]	; (80055a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005504:	f7ff f9ee 	bl	80048e4 <HAL_PWREx_GetVoltageRange>
 8005508:	6178      	str	r0, [r7, #20]
 800550a:	e014      	b.n	8005536 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800550c:	4b25      	ldr	r3, [pc, #148]	; (80055a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800550e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005510:	4a24      	ldr	r2, [pc, #144]	; (80055a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005516:	6593      	str	r3, [r2, #88]	; 0x58
 8005518:	4b22      	ldr	r3, [pc, #136]	; (80055a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800551a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005520:	60fb      	str	r3, [r7, #12]
 8005522:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005524:	f7ff f9de 	bl	80048e4 <HAL_PWREx_GetVoltageRange>
 8005528:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800552a:	4b1e      	ldr	r3, [pc, #120]	; (80055a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800552c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552e:	4a1d      	ldr	r2, [pc, #116]	; (80055a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005534:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800553c:	d10b      	bne.n	8005556 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b80      	cmp	r3, #128	; 0x80
 8005542:	d919      	bls.n	8005578 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2ba0      	cmp	r3, #160	; 0xa0
 8005548:	d902      	bls.n	8005550 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800554a:	2302      	movs	r3, #2
 800554c:	613b      	str	r3, [r7, #16]
 800554e:	e013      	b.n	8005578 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005550:	2301      	movs	r3, #1
 8005552:	613b      	str	r3, [r7, #16]
 8005554:	e010      	b.n	8005578 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b80      	cmp	r3, #128	; 0x80
 800555a:	d902      	bls.n	8005562 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800555c:	2303      	movs	r3, #3
 800555e:	613b      	str	r3, [r7, #16]
 8005560:	e00a      	b.n	8005578 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b80      	cmp	r3, #128	; 0x80
 8005566:	d102      	bne.n	800556e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005568:	2302      	movs	r3, #2
 800556a:	613b      	str	r3, [r7, #16]
 800556c:	e004      	b.n	8005578 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b70      	cmp	r3, #112	; 0x70
 8005572:	d101      	bne.n	8005578 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005574:	2301      	movs	r3, #1
 8005576:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005578:	4b0b      	ldr	r3, [pc, #44]	; (80055a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f023 0207 	bic.w	r2, r3, #7
 8005580:	4909      	ldr	r1, [pc, #36]	; (80055a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005588:	4b07      	ldr	r3, [pc, #28]	; (80055a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	429a      	cmp	r2, r3
 8005594:	d001      	beq.n	800559a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e000      	b.n	800559c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3718      	adds	r7, #24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	40021000 	.word	0x40021000
 80055a8:	40022000 	.word	0x40022000

080055ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055b4:	2300      	movs	r3, #0
 80055b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055b8:	2300      	movs	r3, #0
 80055ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d031      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055d0:	d01a      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80055d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055d6:	d814      	bhi.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d009      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80055dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055e0:	d10f      	bne.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80055e2:	4b5d      	ldr	r3, [pc, #372]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	4a5c      	ldr	r2, [pc, #368]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ec:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055ee:	e00c      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3304      	adds	r3, #4
 80055f4:	2100      	movs	r1, #0
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 f9ce 	bl	8005998 <RCCEx_PLLSAI1_Config>
 80055fc:	4603      	mov	r3, r0
 80055fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005600:	e003      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	74fb      	strb	r3, [r7, #19]
      break;
 8005606:	e000      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005608:	bf00      	nop
    }

    if(ret == HAL_OK)
 800560a:	7cfb      	ldrb	r3, [r7, #19]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10b      	bne.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005610:	4b51      	ldr	r3, [pc, #324]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005616:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561e:	494e      	ldr	r1, [pc, #312]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005620:	4313      	orrs	r3, r2
 8005622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005626:	e001      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005628:	7cfb      	ldrb	r3, [r7, #19]
 800562a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 809e 	beq.w	8005776 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800563a:	2300      	movs	r3, #0
 800563c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800563e:	4b46      	ldr	r3, [pc, #280]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800564a:	2301      	movs	r3, #1
 800564c:	e000      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800564e:	2300      	movs	r3, #0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00d      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005654:	4b40      	ldr	r3, [pc, #256]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005658:	4a3f      	ldr	r2, [pc, #252]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800565a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800565e:	6593      	str	r3, [r2, #88]	; 0x58
 8005660:	4b3d      	ldr	r3, [pc, #244]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005668:	60bb      	str	r3, [r7, #8]
 800566a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800566c:	2301      	movs	r3, #1
 800566e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005670:	4b3a      	ldr	r3, [pc, #232]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a39      	ldr	r2, [pc, #228]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800567a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800567c:	f7fd ff4c 	bl	8003518 <HAL_GetTick>
 8005680:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005682:	e009      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005684:	f7fd ff48 	bl	8003518 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d902      	bls.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	74fb      	strb	r3, [r7, #19]
        break;
 8005696:	e005      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005698:	4b30      	ldr	r3, [pc, #192]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0ef      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80056a4:	7cfb      	ldrb	r3, [r7, #19]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d15a      	bne.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80056aa:	4b2b      	ldr	r3, [pc, #172]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d01e      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d019      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80056c6:	4b24      	ldr	r3, [pc, #144]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80056d2:	4b21      	ldr	r3, [pc, #132]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d8:	4a1f      	ldr	r2, [pc, #124]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80056e2:	4b1d      	ldr	r3, [pc, #116]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e8:	4a1b      	ldr	r2, [pc, #108]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80056f2:	4a19      	ldr	r2, [pc, #100]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	2b00      	cmp	r3, #0
 8005702:	d016      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005704:	f7fd ff08 	bl	8003518 <HAL_GetTick>
 8005708:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800570a:	e00b      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800570c:	f7fd ff04 	bl	8003518 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	f241 3288 	movw	r2, #5000	; 0x1388
 800571a:	4293      	cmp	r3, r2
 800571c:	d902      	bls.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	74fb      	strb	r3, [r7, #19]
            break;
 8005722:	e006      	b.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005724:	4b0c      	ldr	r3, [pc, #48]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d0ec      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005732:	7cfb      	ldrb	r3, [r7, #19]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10b      	bne.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005738:	4b07      	ldr	r3, [pc, #28]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800573a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800573e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005746:	4904      	ldr	r1, [pc, #16]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005748:	4313      	orrs	r3, r2
 800574a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800574e:	e009      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005750:	7cfb      	ldrb	r3, [r7, #19]
 8005752:	74bb      	strb	r3, [r7, #18]
 8005754:	e006      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005756:	bf00      	nop
 8005758:	40021000 	.word	0x40021000
 800575c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005760:	7cfb      	ldrb	r3, [r7, #19]
 8005762:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005764:	7c7b      	ldrb	r3, [r7, #17]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d105      	bne.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800576a:	4b8a      	ldr	r3, [pc, #552]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800576c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576e:	4a89      	ldr	r2, [pc, #548]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005774:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00a      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005782:	4b84      	ldr	r3, [pc, #528]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005788:	f023 0203 	bic.w	r2, r3, #3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	4980      	ldr	r1, [pc, #512]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005792:	4313      	orrs	r3, r2
 8005794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00a      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057a4:	4b7b      	ldr	r3, [pc, #492]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057aa:	f023 020c 	bic.w	r2, r3, #12
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	4978      	ldr	r1, [pc, #480]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0320 	and.w	r3, r3, #32
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00a      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057c6:	4b73      	ldr	r3, [pc, #460]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d4:	496f      	ldr	r1, [pc, #444]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00a      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057e8:	4b6a      	ldr	r3, [pc, #424]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ee:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f6:	4967      	ldr	r1, [pc, #412]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00a      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800580a:	4b62      	ldr	r3, [pc, #392]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800580c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005810:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005818:	495e      	ldr	r1, [pc, #376]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800581a:	4313      	orrs	r3, r2
 800581c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00a      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800582c:	4b59      	ldr	r3, [pc, #356]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800582e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005832:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583a:	4956      	ldr	r1, [pc, #344]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800583c:	4313      	orrs	r3, r2
 800583e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00a      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800584e:	4b51      	ldr	r3, [pc, #324]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005854:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585c:	494d      	ldr	r1, [pc, #308]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800585e:	4313      	orrs	r3, r2
 8005860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d028      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005870:	4b48      	ldr	r3, [pc, #288]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005876:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587e:	4945      	ldr	r1, [pc, #276]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005880:	4313      	orrs	r3, r2
 8005882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800588e:	d106      	bne.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005890:	4b40      	ldr	r3, [pc, #256]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	4a3f      	ldr	r2, [pc, #252]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005896:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800589a:	60d3      	str	r3, [r2, #12]
 800589c:	e011      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058a6:	d10c      	bne.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	3304      	adds	r3, #4
 80058ac:	2101      	movs	r1, #1
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 f872 	bl	8005998 <RCCEx_PLLSAI1_Config>
 80058b4:	4603      	mov	r3, r0
 80058b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80058b8:	7cfb      	ldrb	r3, [r7, #19]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80058be:	7cfb      	ldrb	r3, [r7, #19]
 80058c0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d028      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058ce:	4b31      	ldr	r3, [pc, #196]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058dc:	492d      	ldr	r1, [pc, #180]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058ec:	d106      	bne.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058ee:	4b29      	ldr	r3, [pc, #164]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	4a28      	ldr	r2, [pc, #160]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80058f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058f8:	60d3      	str	r3, [r2, #12]
 80058fa:	e011      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005900:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005904:	d10c      	bne.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	3304      	adds	r3, #4
 800590a:	2101      	movs	r1, #1
 800590c:	4618      	mov	r0, r3
 800590e:	f000 f843 	bl	8005998 <RCCEx_PLLSAI1_Config>
 8005912:	4603      	mov	r3, r0
 8005914:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005916:	7cfb      	ldrb	r3, [r7, #19]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800591c:	7cfb      	ldrb	r3, [r7, #19]
 800591e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d01c      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800592c:	4b19      	ldr	r3, [pc, #100]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800592e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005932:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800593a:	4916      	ldr	r1, [pc, #88]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800593c:	4313      	orrs	r3, r2
 800593e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005946:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800594a:	d10c      	bne.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3304      	adds	r3, #4
 8005950:	2102      	movs	r1, #2
 8005952:	4618      	mov	r0, r3
 8005954:	f000 f820 	bl	8005998 <RCCEx_PLLSAI1_Config>
 8005958:	4603      	mov	r3, r0
 800595a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800595c:	7cfb      	ldrb	r3, [r7, #19]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005962:	7cfb      	ldrb	r3, [r7, #19]
 8005964:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00a      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005972:	4b08      	ldr	r3, [pc, #32]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005978:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005980:	4904      	ldr	r1, [pc, #16]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005982:	4313      	orrs	r3, r2
 8005984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005988:	7cbb      	ldrb	r3, [r7, #18]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3718      	adds	r7, #24
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	40021000 	.word	0x40021000

08005998 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059a2:	2300      	movs	r3, #0
 80059a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80059a6:	4b74      	ldr	r3, [pc, #464]	; (8005b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	f003 0303 	and.w	r3, r3, #3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d018      	beq.n	80059e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80059b2:	4b71      	ldr	r3, [pc, #452]	; (8005b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f003 0203 	and.w	r2, r3, #3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d10d      	bne.n	80059de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
       ||
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d009      	beq.n	80059de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80059ca:	4b6b      	ldr	r3, [pc, #428]	; (8005b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	091b      	lsrs	r3, r3, #4
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	1c5a      	adds	r2, r3, #1
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
       ||
 80059da:	429a      	cmp	r2, r3
 80059dc:	d047      	beq.n	8005a6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	73fb      	strb	r3, [r7, #15]
 80059e2:	e044      	b.n	8005a6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b03      	cmp	r3, #3
 80059ea:	d018      	beq.n	8005a1e <RCCEx_PLLSAI1_Config+0x86>
 80059ec:	2b03      	cmp	r3, #3
 80059ee:	d825      	bhi.n	8005a3c <RCCEx_PLLSAI1_Config+0xa4>
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d002      	beq.n	80059fa <RCCEx_PLLSAI1_Config+0x62>
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d009      	beq.n	8005a0c <RCCEx_PLLSAI1_Config+0x74>
 80059f8:	e020      	b.n	8005a3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80059fa:	4b5f      	ldr	r3, [pc, #380]	; (8005b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d11d      	bne.n	8005a42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a0a:	e01a      	b.n	8005a42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a0c:	4b5a      	ldr	r3, [pc, #360]	; (8005b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d116      	bne.n	8005a46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a1c:	e013      	b.n	8005a46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a1e:	4b56      	ldr	r3, [pc, #344]	; (8005b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10f      	bne.n	8005a4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a2a:	4b53      	ldr	r3, [pc, #332]	; (8005b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d109      	bne.n	8005a4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a3a:	e006      	b.n	8005a4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a40:	e004      	b.n	8005a4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a42:	bf00      	nop
 8005a44:	e002      	b.n	8005a4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a46:	bf00      	nop
 8005a48:	e000      	b.n	8005a4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10d      	bne.n	8005a6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a52:	4b49      	ldr	r3, [pc, #292]	; (8005b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6819      	ldr	r1, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	3b01      	subs	r3, #1
 8005a64:	011b      	lsls	r3, r3, #4
 8005a66:	430b      	orrs	r3, r1
 8005a68:	4943      	ldr	r1, [pc, #268]	; (8005b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d17c      	bne.n	8005b6e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005a74:	4b40      	ldr	r3, [pc, #256]	; (8005b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a3f      	ldr	r2, [pc, #252]	; (8005b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a80:	f7fd fd4a 	bl	8003518 <HAL_GetTick>
 8005a84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a86:	e009      	b.n	8005a9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a88:	f7fd fd46 	bl	8003518 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d902      	bls.n	8005a9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	73fb      	strb	r3, [r7, #15]
        break;
 8005a9a:	e005      	b.n	8005aa8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a9c:	4b36      	ldr	r3, [pc, #216]	; (8005b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1ef      	bne.n	8005a88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005aa8:	7bfb      	ldrb	r3, [r7, #15]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d15f      	bne.n	8005b6e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d110      	bne.n	8005ad6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ab4:	4b30      	ldr	r3, [pc, #192]	; (8005b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005abc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	6892      	ldr	r2, [r2, #8]
 8005ac4:	0211      	lsls	r1, r2, #8
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	68d2      	ldr	r2, [r2, #12]
 8005aca:	06d2      	lsls	r2, r2, #27
 8005acc:	430a      	orrs	r2, r1
 8005ace:	492a      	ldr	r1, [pc, #168]	; (8005b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	610b      	str	r3, [r1, #16]
 8005ad4:	e027      	b.n	8005b26 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d112      	bne.n	8005b02 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005adc:	4b26      	ldr	r3, [pc, #152]	; (8005b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005ae4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	6892      	ldr	r2, [r2, #8]
 8005aec:	0211      	lsls	r1, r2, #8
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	6912      	ldr	r2, [r2, #16]
 8005af2:	0852      	lsrs	r2, r2, #1
 8005af4:	3a01      	subs	r2, #1
 8005af6:	0552      	lsls	r2, r2, #21
 8005af8:	430a      	orrs	r2, r1
 8005afa:	491f      	ldr	r1, [pc, #124]	; (8005b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	610b      	str	r3, [r1, #16]
 8005b00:	e011      	b.n	8005b26 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b02:	4b1d      	ldr	r3, [pc, #116]	; (8005b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005b0a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	6892      	ldr	r2, [r2, #8]
 8005b12:	0211      	lsls	r1, r2, #8
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6952      	ldr	r2, [r2, #20]
 8005b18:	0852      	lsrs	r2, r2, #1
 8005b1a:	3a01      	subs	r2, #1
 8005b1c:	0652      	lsls	r2, r2, #25
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	4915      	ldr	r1, [pc, #84]	; (8005b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005b26:	4b14      	ldr	r3, [pc, #80]	; (8005b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a13      	ldr	r2, [pc, #76]	; (8005b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b30:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b32:	f7fd fcf1 	bl	8003518 <HAL_GetTick>
 8005b36:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b38:	e009      	b.n	8005b4e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b3a:	f7fd fced 	bl	8003518 <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d902      	bls.n	8005b4e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	73fb      	strb	r3, [r7, #15]
          break;
 8005b4c:	e005      	b.n	8005b5a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b4e:	4b0a      	ldr	r3, [pc, #40]	; (8005b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d0ef      	beq.n	8005b3a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005b5a:	7bfb      	ldrb	r3, [r7, #15]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d106      	bne.n	8005b6e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005b60:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b62:	691a      	ldr	r2, [r3, #16]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	4903      	ldr	r1, [pc, #12]	; (8005b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	40021000 	.word	0x40021000

08005b7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e049      	b.n	8005c22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d106      	bne.n	8005ba8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7fd fbaa 	bl	80032fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	4619      	mov	r1, r3
 8005bba:	4610      	mov	r0, r2
 8005bbc:	f000 feac 	bl	8006918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
	...

08005c2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d001      	beq.n	8005c44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e03b      	b.n	8005cbc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68da      	ldr	r2, [r3, #12]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0201 	orr.w	r2, r2, #1
 8005c5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a19      	ldr	r2, [pc, #100]	; (8005cc8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d009      	beq.n	8005c7a <HAL_TIM_Base_Start_IT+0x4e>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c6e:	d004      	beq.n	8005c7a <HAL_TIM_Base_Start_IT+0x4e>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a15      	ldr	r2, [pc, #84]	; (8005ccc <HAL_TIM_Base_Start_IT+0xa0>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d115      	bne.n	8005ca6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689a      	ldr	r2, [r3, #8]
 8005c80:	4b13      	ldr	r3, [pc, #76]	; (8005cd0 <HAL_TIM_Base_Start_IT+0xa4>)
 8005c82:	4013      	ands	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2b06      	cmp	r3, #6
 8005c8a:	d015      	beq.n	8005cb8 <HAL_TIM_Base_Start_IT+0x8c>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c92:	d011      	beq.n	8005cb8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f042 0201 	orr.w	r2, r2, #1
 8005ca2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ca4:	e008      	b.n	8005cb8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f042 0201 	orr.w	r2, r2, #1
 8005cb4:	601a      	str	r2, [r3, #0]
 8005cb6:	e000      	b.n	8005cba <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cb8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3714      	adds	r7, #20
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr
 8005cc8:	40012c00 	.word	0x40012c00
 8005ccc:	40014000 	.word	0x40014000
 8005cd0:	00010007 	.word	0x00010007

08005cd4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68da      	ldr	r2, [r3, #12]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 0201 	bic.w	r2, r2, #1
 8005cea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6a1a      	ldr	r2, [r3, #32]
 8005cf2:	f241 1311 	movw	r3, #4369	; 0x1111
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10f      	bne.n	8005d1c <HAL_TIM_Base_Stop_IT+0x48>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6a1a      	ldr	r2, [r3, #32]
 8005d02:	f240 4344 	movw	r3, #1092	; 0x444
 8005d06:	4013      	ands	r3, r2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d107      	bne.n	8005d1c <HAL_TIM_Base_Stop_IT+0x48>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 0201 	bic.w	r2, r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b082      	sub	sp, #8
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e049      	b.n	8005dd8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d106      	bne.n	8005d5e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f7fd faf5 	bl	8003348 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2202      	movs	r2, #2
 8005d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	4619      	mov	r1, r3
 8005d70:	4610      	mov	r0, r2
 8005d72:	f000 fdd1 	bl	8006918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d109      	bne.n	8005e04 <HAL_TIM_PWM_Start+0x24>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	bf14      	ite	ne
 8005dfc:	2301      	movne	r3, #1
 8005dfe:	2300      	moveq	r3, #0
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	e03c      	b.n	8005e7e <HAL_TIM_PWM_Start+0x9e>
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	2b04      	cmp	r3, #4
 8005e08:	d109      	bne.n	8005e1e <HAL_TIM_PWM_Start+0x3e>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	bf14      	ite	ne
 8005e16:	2301      	movne	r3, #1
 8005e18:	2300      	moveq	r3, #0
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	e02f      	b.n	8005e7e <HAL_TIM_PWM_Start+0x9e>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	d109      	bne.n	8005e38 <HAL_TIM_PWM_Start+0x58>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	bf14      	ite	ne
 8005e30:	2301      	movne	r3, #1
 8005e32:	2300      	moveq	r3, #0
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	e022      	b.n	8005e7e <HAL_TIM_PWM_Start+0x9e>
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2b0c      	cmp	r3, #12
 8005e3c:	d109      	bne.n	8005e52 <HAL_TIM_PWM_Start+0x72>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	bf14      	ite	ne
 8005e4a:	2301      	movne	r3, #1
 8005e4c:	2300      	moveq	r3, #0
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	e015      	b.n	8005e7e <HAL_TIM_PWM_Start+0x9e>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b10      	cmp	r3, #16
 8005e56:	d109      	bne.n	8005e6c <HAL_TIM_PWM_Start+0x8c>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	bf14      	ite	ne
 8005e64:	2301      	movne	r3, #1
 8005e66:	2300      	moveq	r3, #0
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	e008      	b.n	8005e7e <HAL_TIM_PWM_Start+0x9e>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	bf14      	ite	ne
 8005e78:	2301      	movne	r3, #1
 8005e7a:	2300      	moveq	r3, #0
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e07e      	b.n	8005f84 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d104      	bne.n	8005e96 <HAL_TIM_PWM_Start+0xb6>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e94:	e023      	b.n	8005ede <HAL_TIM_PWM_Start+0xfe>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2b04      	cmp	r3, #4
 8005e9a:	d104      	bne.n	8005ea6 <HAL_TIM_PWM_Start+0xc6>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ea4:	e01b      	b.n	8005ede <HAL_TIM_PWM_Start+0xfe>
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b08      	cmp	r3, #8
 8005eaa:	d104      	bne.n	8005eb6 <HAL_TIM_PWM_Start+0xd6>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005eb4:	e013      	b.n	8005ede <HAL_TIM_PWM_Start+0xfe>
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b0c      	cmp	r3, #12
 8005eba:	d104      	bne.n	8005ec6 <HAL_TIM_PWM_Start+0xe6>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ec4:	e00b      	b.n	8005ede <HAL_TIM_PWM_Start+0xfe>
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2b10      	cmp	r3, #16
 8005eca:	d104      	bne.n	8005ed6 <HAL_TIM_PWM_Start+0xf6>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ed4:	e003      	b.n	8005ede <HAL_TIM_PWM_Start+0xfe>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2202      	movs	r2, #2
 8005eda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	6839      	ldr	r1, [r7, #0]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 fff8 	bl	8006edc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a26      	ldr	r2, [pc, #152]	; (8005f8c <HAL_TIM_PWM_Start+0x1ac>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d009      	beq.n	8005f0a <HAL_TIM_PWM_Start+0x12a>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a25      	ldr	r2, [pc, #148]	; (8005f90 <HAL_TIM_PWM_Start+0x1b0>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d004      	beq.n	8005f0a <HAL_TIM_PWM_Start+0x12a>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a23      	ldr	r2, [pc, #140]	; (8005f94 <HAL_TIM_PWM_Start+0x1b4>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d101      	bne.n	8005f0e <HAL_TIM_PWM_Start+0x12e>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e000      	b.n	8005f10 <HAL_TIM_PWM_Start+0x130>
 8005f0e:	2300      	movs	r3, #0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d007      	beq.n	8005f24 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f22:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a18      	ldr	r2, [pc, #96]	; (8005f8c <HAL_TIM_PWM_Start+0x1ac>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d009      	beq.n	8005f42 <HAL_TIM_PWM_Start+0x162>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f36:	d004      	beq.n	8005f42 <HAL_TIM_PWM_Start+0x162>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a14      	ldr	r2, [pc, #80]	; (8005f90 <HAL_TIM_PWM_Start+0x1b0>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d115      	bne.n	8005f6e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	4b13      	ldr	r3, [pc, #76]	; (8005f98 <HAL_TIM_PWM_Start+0x1b8>)
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2b06      	cmp	r3, #6
 8005f52:	d015      	beq.n	8005f80 <HAL_TIM_PWM_Start+0x1a0>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f5a:	d011      	beq.n	8005f80 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f042 0201 	orr.w	r2, r2, #1
 8005f6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f6c:	e008      	b.n	8005f80 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f042 0201 	orr.w	r2, r2, #1
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	e000      	b.n	8005f82 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	40012c00 	.word	0x40012c00
 8005f90:	40014000 	.word	0x40014000
 8005f94:	40014400 	.word	0x40014400
 8005f98:	00010007 	.word	0x00010007

08005f9c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2200      	movs	r2, #0
 8005fac:	6839      	ldr	r1, [r7, #0]
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f000 ff94 	bl	8006edc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a39      	ldr	r2, [pc, #228]	; (80060a0 <HAL_TIM_PWM_Stop+0x104>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d009      	beq.n	8005fd2 <HAL_TIM_PWM_Stop+0x36>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a38      	ldr	r2, [pc, #224]	; (80060a4 <HAL_TIM_PWM_Stop+0x108>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d004      	beq.n	8005fd2 <HAL_TIM_PWM_Stop+0x36>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a36      	ldr	r2, [pc, #216]	; (80060a8 <HAL_TIM_PWM_Stop+0x10c>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d101      	bne.n	8005fd6 <HAL_TIM_PWM_Stop+0x3a>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e000      	b.n	8005fd8 <HAL_TIM_PWM_Stop+0x3c>
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d017      	beq.n	800600c <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6a1a      	ldr	r2, [r3, #32]
 8005fe2:	f241 1311 	movw	r3, #4369	; 0x1111
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d10f      	bne.n	800600c <HAL_TIM_PWM_Stop+0x70>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6a1a      	ldr	r2, [r3, #32]
 8005ff2:	f240 4344 	movw	r3, #1092	; 0x444
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d107      	bne.n	800600c <HAL_TIM_PWM_Stop+0x70>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800600a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6a1a      	ldr	r2, [r3, #32]
 8006012:	f241 1311 	movw	r3, #4369	; 0x1111
 8006016:	4013      	ands	r3, r2
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10f      	bne.n	800603c <HAL_TIM_PWM_Stop+0xa0>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6a1a      	ldr	r2, [r3, #32]
 8006022:	f240 4344 	movw	r3, #1092	; 0x444
 8006026:	4013      	ands	r3, r2
 8006028:	2b00      	cmp	r3, #0
 800602a:	d107      	bne.n	800603c <HAL_TIM_PWM_Stop+0xa0>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0201 	bic.w	r2, r2, #1
 800603a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d104      	bne.n	800604c <HAL_TIM_PWM_Stop+0xb0>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800604a:	e023      	b.n	8006094 <HAL_TIM_PWM_Stop+0xf8>
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	2b04      	cmp	r3, #4
 8006050:	d104      	bne.n	800605c <HAL_TIM_PWM_Stop+0xc0>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800605a:	e01b      	b.n	8006094 <HAL_TIM_PWM_Stop+0xf8>
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	2b08      	cmp	r3, #8
 8006060:	d104      	bne.n	800606c <HAL_TIM_PWM_Stop+0xd0>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800606a:	e013      	b.n	8006094 <HAL_TIM_PWM_Stop+0xf8>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2b0c      	cmp	r3, #12
 8006070:	d104      	bne.n	800607c <HAL_TIM_PWM_Stop+0xe0>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800607a:	e00b      	b.n	8006094 <HAL_TIM_PWM_Stop+0xf8>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	2b10      	cmp	r3, #16
 8006080:	d104      	bne.n	800608c <HAL_TIM_PWM_Stop+0xf0>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800608a:	e003      	b.n	8006094 <HAL_TIM_PWM_Stop+0xf8>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	40012c00 	.word	0x40012c00
 80060a4:	40014000 	.word	0x40014000
 80060a8:	40014400 	.word	0x40014400

080060ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e097      	b.n	80061f0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d106      	bne.n	80060da <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f7fd f89f 	bl	8003218 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2202      	movs	r2, #2
 80060de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	6812      	ldr	r2, [r2, #0]
 80060ec:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80060f0:	f023 0307 	bic.w	r3, r3, #7
 80060f4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	3304      	adds	r3, #4
 80060fe:	4619      	mov	r1, r3
 8006100:	4610      	mov	r0, r2
 8006102:	f000 fc09 	bl	8006918 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6a1b      	ldr	r3, [r3, #32]
 800611c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	4313      	orrs	r3, r2
 8006126:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800612e:	f023 0303 	bic.w	r3, r3, #3
 8006132:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	689a      	ldr	r2, [r3, #8]
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	021b      	lsls	r3, r3, #8
 800613e:	4313      	orrs	r3, r2
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	4313      	orrs	r3, r2
 8006144:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800614c:	f023 030c 	bic.w	r3, r3, #12
 8006150:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006158:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800615c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	68da      	ldr	r2, [r3, #12]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	021b      	lsls	r3, r3, #8
 8006168:	4313      	orrs	r3, r2
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	4313      	orrs	r3, r2
 800616e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	011a      	lsls	r2, r3, #4
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	031b      	lsls	r3, r3, #12
 800617c:	4313      	orrs	r3, r2
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	4313      	orrs	r3, r2
 8006182:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800618a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006192:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685a      	ldr	r2, [r3, #4]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	011b      	lsls	r3, r3, #4
 800619e:	4313      	orrs	r3, r2
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3718      	adds	r7, #24
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006208:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006210:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006218:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006220:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d110      	bne.n	800624a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006228:	7bfb      	ldrb	r3, [r7, #15]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d102      	bne.n	8006234 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800622e:	7b7b      	ldrb	r3, [r7, #13]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d001      	beq.n	8006238 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e069      	b.n	800630c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2202      	movs	r2, #2
 8006244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006248:	e031      	b.n	80062ae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b04      	cmp	r3, #4
 800624e:	d110      	bne.n	8006272 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006250:	7bbb      	ldrb	r3, [r7, #14]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d102      	bne.n	800625c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006256:	7b3b      	ldrb	r3, [r7, #12]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d001      	beq.n	8006260 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e055      	b.n	800630c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006270:	e01d      	b.n	80062ae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006272:	7bfb      	ldrb	r3, [r7, #15]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d108      	bne.n	800628a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006278:	7bbb      	ldrb	r3, [r7, #14]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d105      	bne.n	800628a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800627e:	7b7b      	ldrb	r3, [r7, #13]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d102      	bne.n	800628a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006284:	7b3b      	ldrb	r3, [r7, #12]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d001      	beq.n	800628e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e03e      	b.n	800630c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2202      	movs	r2, #2
 8006292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2202      	movs	r2, #2
 800629a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2202      	movs	r2, #2
 80062a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2202      	movs	r2, #2
 80062aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d003      	beq.n	80062bc <HAL_TIM_Encoder_Start+0xc4>
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	2b04      	cmp	r3, #4
 80062b8:	d008      	beq.n	80062cc <HAL_TIM_Encoder_Start+0xd4>
 80062ba:	e00f      	b.n	80062dc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2201      	movs	r2, #1
 80062c2:	2100      	movs	r1, #0
 80062c4:	4618      	mov	r0, r3
 80062c6:	f000 fe09 	bl	8006edc <TIM_CCxChannelCmd>
      break;
 80062ca:	e016      	b.n	80062fa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2201      	movs	r2, #1
 80062d2:	2104      	movs	r1, #4
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 fe01 	bl	8006edc <TIM_CCxChannelCmd>
      break;
 80062da:	e00e      	b.n	80062fa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2201      	movs	r2, #1
 80062e2:	2100      	movs	r1, #0
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 fdf9 	bl	8006edc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2201      	movs	r2, #1
 80062f0:	2104      	movs	r1, #4
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 fdf2 	bl	8006edc <TIM_CCxChannelCmd>
      break;
 80062f8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f042 0201 	orr.w	r2, r2, #1
 8006308:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d003      	beq.n	800632c <HAL_TIM_Encoder_Stop+0x18>
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	2b04      	cmp	r3, #4
 8006328:	d008      	beq.n	800633c <HAL_TIM_Encoder_Stop+0x28>
 800632a:	e00f      	b.n	800634c <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2200      	movs	r2, #0
 8006332:	2100      	movs	r1, #0
 8006334:	4618      	mov	r0, r3
 8006336:	f000 fdd1 	bl	8006edc <TIM_CCxChannelCmd>
      break;
 800633a:	e016      	b.n	800636a <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2200      	movs	r2, #0
 8006342:	2104      	movs	r1, #4
 8006344:	4618      	mov	r0, r3
 8006346:	f000 fdc9 	bl	8006edc <TIM_CCxChannelCmd>
      break;
 800634a:	e00e      	b.n	800636a <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2200      	movs	r2, #0
 8006352:	2100      	movs	r1, #0
 8006354:	4618      	mov	r0, r3
 8006356:	f000 fdc1 	bl	8006edc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2200      	movs	r2, #0
 8006360:	2104      	movs	r1, #4
 8006362:	4618      	mov	r0, r3
 8006364:	f000 fdba 	bl	8006edc <TIM_CCxChannelCmd>
      break;
 8006368:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6a1a      	ldr	r2, [r3, #32]
 8006370:	f241 1311 	movw	r3, #4369	; 0x1111
 8006374:	4013      	ands	r3, r2
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10f      	bne.n	800639a <HAL_TIM_Encoder_Stop+0x86>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6a1a      	ldr	r2, [r3, #32]
 8006380:	f240 4344 	movw	r3, #1092	; 0x444
 8006384:	4013      	ands	r3, r2
 8006386:	2b00      	cmp	r3, #0
 8006388:	d107      	bne.n	800639a <HAL_TIM_Encoder_Stop+0x86>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0201 	bic.w	r2, r2, #1
 8006398:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <HAL_TIM_Encoder_Stop+0x92>
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	2b04      	cmp	r3, #4
 80063a4:	d148      	bne.n	8006438 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d104      	bne.n	80063b6 <HAL_TIM_Encoder_Stop+0xa2>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063b4:	e023      	b.n	80063fe <HAL_TIM_Encoder_Stop+0xea>
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	2b04      	cmp	r3, #4
 80063ba:	d104      	bne.n	80063c6 <HAL_TIM_Encoder_Stop+0xb2>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063c4:	e01b      	b.n	80063fe <HAL_TIM_Encoder_Stop+0xea>
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2b08      	cmp	r3, #8
 80063ca:	d104      	bne.n	80063d6 <HAL_TIM_Encoder_Stop+0xc2>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063d4:	e013      	b.n	80063fe <HAL_TIM_Encoder_Stop+0xea>
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b0c      	cmp	r3, #12
 80063da:	d104      	bne.n	80063e6 <HAL_TIM_Encoder_Stop+0xd2>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063e4:	e00b      	b.n	80063fe <HAL_TIM_Encoder_Stop+0xea>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b10      	cmp	r3, #16
 80063ea:	d104      	bne.n	80063f6 <HAL_TIM_Encoder_Stop+0xe2>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063f4:	e003      	b.n	80063fe <HAL_TIM_Encoder_Stop+0xea>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d104      	bne.n	800640e <HAL_TIM_Encoder_Stop+0xfa>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800640c:	e024      	b.n	8006458 <HAL_TIM_Encoder_Stop+0x144>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b04      	cmp	r3, #4
 8006412:	d104      	bne.n	800641e <HAL_TIM_Encoder_Stop+0x10a>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800641c:	e01c      	b.n	8006458 <HAL_TIM_Encoder_Stop+0x144>
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b08      	cmp	r3, #8
 8006422:	d104      	bne.n	800642e <HAL_TIM_Encoder_Stop+0x11a>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800642c:	e014      	b.n	8006458 <HAL_TIM_Encoder_Stop+0x144>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8006436:	e00f      	b.n	8006458 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b082      	sub	sp, #8
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b02      	cmp	r3, #2
 8006476:	d122      	bne.n	80064be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b02      	cmp	r3, #2
 8006484:	d11b      	bne.n	80064be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f06f 0202 	mvn.w	r2, #2
 800648e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	f003 0303 	and.w	r3, r3, #3
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d003      	beq.n	80064ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 fa19 	bl	80068dc <HAL_TIM_IC_CaptureCallback>
 80064aa:	e005      	b.n	80064b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fa0b 	bl	80068c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fa1c 	bl	80068f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	f003 0304 	and.w	r3, r3, #4
 80064c8:	2b04      	cmp	r3, #4
 80064ca:	d122      	bne.n	8006512 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	f003 0304 	and.w	r3, r3, #4
 80064d6:	2b04      	cmp	r3, #4
 80064d8:	d11b      	bne.n	8006512 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f06f 0204 	mvn.w	r2, #4
 80064e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2202      	movs	r2, #2
 80064e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 f9ef 	bl	80068dc <HAL_TIM_IC_CaptureCallback>
 80064fe:	e005      	b.n	800650c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 f9e1 	bl	80068c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f9f2 	bl	80068f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	f003 0308 	and.w	r3, r3, #8
 800651c:	2b08      	cmp	r3, #8
 800651e:	d122      	bne.n	8006566 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	f003 0308 	and.w	r3, r3, #8
 800652a:	2b08      	cmp	r3, #8
 800652c:	d11b      	bne.n	8006566 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f06f 0208 	mvn.w	r2, #8
 8006536:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2204      	movs	r2, #4
 800653c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	69db      	ldr	r3, [r3, #28]
 8006544:	f003 0303 	and.w	r3, r3, #3
 8006548:	2b00      	cmp	r3, #0
 800654a:	d003      	beq.n	8006554 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 f9c5 	bl	80068dc <HAL_TIM_IC_CaptureCallback>
 8006552:	e005      	b.n	8006560 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f9b7 	bl	80068c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f9c8 	bl	80068f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	f003 0310 	and.w	r3, r3, #16
 8006570:	2b10      	cmp	r3, #16
 8006572:	d122      	bne.n	80065ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f003 0310 	and.w	r3, r3, #16
 800657e:	2b10      	cmp	r3, #16
 8006580:	d11b      	bne.n	80065ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f06f 0210 	mvn.w	r2, #16
 800658a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2208      	movs	r2, #8
 8006590:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800659c:	2b00      	cmp	r3, #0
 800659e:	d003      	beq.n	80065a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 f99b 	bl	80068dc <HAL_TIM_IC_CaptureCallback>
 80065a6:	e005      	b.n	80065b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 f98d 	bl	80068c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f99e 	bl	80068f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d10e      	bne.n	80065e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d107      	bne.n	80065e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f06f 0201 	mvn.w	r2, #1
 80065de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7fb ff6d 	bl	80024c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f0:	2b80      	cmp	r3, #128	; 0x80
 80065f2:	d10e      	bne.n	8006612 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065fe:	2b80      	cmp	r3, #128	; 0x80
 8006600:	d107      	bne.n	8006612 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800660a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 fd73 	bl	80070f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800661c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006620:	d10e      	bne.n	8006640 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800662c:	2b80      	cmp	r3, #128	; 0x80
 800662e:	d107      	bne.n	8006640 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 fd66 	bl	800710c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664a:	2b40      	cmp	r3, #64	; 0x40
 800664c:	d10e      	bne.n	800666c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006658:	2b40      	cmp	r3, #64	; 0x40
 800665a:	d107      	bne.n	800666c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f94c 	bl	8006904 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	f003 0320 	and.w	r3, r3, #32
 8006676:	2b20      	cmp	r3, #32
 8006678:	d10e      	bne.n	8006698 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	f003 0320 	and.w	r3, r3, #32
 8006684:	2b20      	cmp	r3, #32
 8006686:	d107      	bne.n	8006698 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f06f 0220 	mvn.w	r2, #32
 8006690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fd26 	bl	80070e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006698:	bf00      	nop
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066ac:	2300      	movs	r3, #0
 80066ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d101      	bne.n	80066be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066ba:	2302      	movs	r3, #2
 80066bc:	e0ff      	b.n	80068be <HAL_TIM_PWM_ConfigChannel+0x21e>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b14      	cmp	r3, #20
 80066ca:	f200 80f0 	bhi.w	80068ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80066ce:	a201      	add	r2, pc, #4	; (adr r2, 80066d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d4:	08006729 	.word	0x08006729
 80066d8:	080068af 	.word	0x080068af
 80066dc:	080068af 	.word	0x080068af
 80066e0:	080068af 	.word	0x080068af
 80066e4:	08006769 	.word	0x08006769
 80066e8:	080068af 	.word	0x080068af
 80066ec:	080068af 	.word	0x080068af
 80066f0:	080068af 	.word	0x080068af
 80066f4:	080067ab 	.word	0x080067ab
 80066f8:	080068af 	.word	0x080068af
 80066fc:	080068af 	.word	0x080068af
 8006700:	080068af 	.word	0x080068af
 8006704:	080067eb 	.word	0x080067eb
 8006708:	080068af 	.word	0x080068af
 800670c:	080068af 	.word	0x080068af
 8006710:	080068af 	.word	0x080068af
 8006714:	0800682d 	.word	0x0800682d
 8006718:	080068af 	.word	0x080068af
 800671c:	080068af 	.word	0x080068af
 8006720:	080068af 	.word	0x080068af
 8006724:	0800686d 	.word	0x0800686d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68b9      	ldr	r1, [r7, #8]
 800672e:	4618      	mov	r0, r3
 8006730:	f000 f956 	bl	80069e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	699a      	ldr	r2, [r3, #24]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f042 0208 	orr.w	r2, r2, #8
 8006742:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	699a      	ldr	r2, [r3, #24]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f022 0204 	bic.w	r2, r2, #4
 8006752:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6999      	ldr	r1, [r3, #24]
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	691a      	ldr	r2, [r3, #16]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	430a      	orrs	r2, r1
 8006764:	619a      	str	r2, [r3, #24]
      break;
 8006766:	e0a5      	b.n	80068b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68b9      	ldr	r1, [r7, #8]
 800676e:	4618      	mov	r0, r3
 8006770:	f000 f9b2 	bl	8006ad8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	699a      	ldr	r2, [r3, #24]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006782:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	699a      	ldr	r2, [r3, #24]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006792:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6999      	ldr	r1, [r3, #24]
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	021a      	lsls	r2, r3, #8
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	619a      	str	r2, [r3, #24]
      break;
 80067a8:	e084      	b.n	80068b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68b9      	ldr	r1, [r7, #8]
 80067b0:	4618      	mov	r0, r3
 80067b2:	f000 fa0b 	bl	8006bcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	69da      	ldr	r2, [r3, #28]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f042 0208 	orr.w	r2, r2, #8
 80067c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	69da      	ldr	r2, [r3, #28]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f022 0204 	bic.w	r2, r2, #4
 80067d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	69d9      	ldr	r1, [r3, #28]
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	691a      	ldr	r2, [r3, #16]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	430a      	orrs	r2, r1
 80067e6:	61da      	str	r2, [r3, #28]
      break;
 80067e8:	e064      	b.n	80068b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68b9      	ldr	r1, [r7, #8]
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 fa63 	bl	8006cbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	69da      	ldr	r2, [r3, #28]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006804:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	69da      	ldr	r2, [r3, #28]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006814:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	69d9      	ldr	r1, [r3, #28]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	021a      	lsls	r2, r3, #8
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	430a      	orrs	r2, r1
 8006828:	61da      	str	r2, [r3, #28]
      break;
 800682a:	e043      	b.n	80068b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68b9      	ldr	r1, [r7, #8]
 8006832:	4618      	mov	r0, r3
 8006834:	f000 faa0 	bl	8006d78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f042 0208 	orr.w	r2, r2, #8
 8006846:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f022 0204 	bic.w	r2, r2, #4
 8006856:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	691a      	ldr	r2, [r3, #16]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800686a:	e023      	b.n	80068b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68b9      	ldr	r1, [r7, #8]
 8006872:	4618      	mov	r0, r3
 8006874:	f000 fad8 	bl	8006e28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006886:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006896:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	021a      	lsls	r2, r3, #8
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	430a      	orrs	r2, r1
 80068aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068ac:	e002      	b.n	80068b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	75fb      	strb	r3, [r7, #23]
      break;
 80068b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop

080068c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a2a      	ldr	r2, [pc, #168]	; (80069d4 <TIM_Base_SetConfig+0xbc>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d003      	beq.n	8006938 <TIM_Base_SetConfig+0x20>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006936:	d108      	bne.n	800694a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800693e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	4313      	orrs	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a21      	ldr	r2, [pc, #132]	; (80069d4 <TIM_Base_SetConfig+0xbc>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d00b      	beq.n	800696a <TIM_Base_SetConfig+0x52>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006958:	d007      	beq.n	800696a <TIM_Base_SetConfig+0x52>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a1e      	ldr	r2, [pc, #120]	; (80069d8 <TIM_Base_SetConfig+0xc0>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d003      	beq.n	800696a <TIM_Base_SetConfig+0x52>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a1d      	ldr	r2, [pc, #116]	; (80069dc <TIM_Base_SetConfig+0xc4>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d108      	bne.n	800697c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	4313      	orrs	r3, r2
 800697a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a0c      	ldr	r2, [pc, #48]	; (80069d4 <TIM_Base_SetConfig+0xbc>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d007      	beq.n	80069b8 <TIM_Base_SetConfig+0xa0>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a0b      	ldr	r2, [pc, #44]	; (80069d8 <TIM_Base_SetConfig+0xc0>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d003      	beq.n	80069b8 <TIM_Base_SetConfig+0xa0>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a0a      	ldr	r2, [pc, #40]	; (80069dc <TIM_Base_SetConfig+0xc4>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d103      	bne.n	80069c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	691a      	ldr	r2, [r3, #16]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	615a      	str	r2, [r3, #20]
}
 80069c6:	bf00      	nop
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	40012c00 	.word	0x40012c00
 80069d8:	40014000 	.word	0x40014000
 80069dc:	40014400 	.word	0x40014400

080069e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b087      	sub	sp, #28
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	f023 0201 	bic.w	r2, r3, #1
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f023 0303 	bic.w	r3, r3, #3
 8006a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	f023 0302 	bic.w	r3, r3, #2
 8006a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a24      	ldr	r2, [pc, #144]	; (8006acc <TIM_OC1_SetConfig+0xec>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d007      	beq.n	8006a50 <TIM_OC1_SetConfig+0x70>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a23      	ldr	r2, [pc, #140]	; (8006ad0 <TIM_OC1_SetConfig+0xf0>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d003      	beq.n	8006a50 <TIM_OC1_SetConfig+0x70>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a22      	ldr	r2, [pc, #136]	; (8006ad4 <TIM_OC1_SetConfig+0xf4>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d10c      	bne.n	8006a6a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	f023 0308 	bic.w	r3, r3, #8
 8006a56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f023 0304 	bic.w	r3, r3, #4
 8006a68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a17      	ldr	r2, [pc, #92]	; (8006acc <TIM_OC1_SetConfig+0xec>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d007      	beq.n	8006a82 <TIM_OC1_SetConfig+0xa2>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a16      	ldr	r2, [pc, #88]	; (8006ad0 <TIM_OC1_SetConfig+0xf0>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d003      	beq.n	8006a82 <TIM_OC1_SetConfig+0xa2>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a15      	ldr	r2, [pc, #84]	; (8006ad4 <TIM_OC1_SetConfig+0xf4>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d111      	bne.n	8006aa6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	621a      	str	r2, [r3, #32]
}
 8006ac0:	bf00      	nop
 8006ac2:	371c      	adds	r7, #28
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr
 8006acc:	40012c00 	.word	0x40012c00
 8006ad0:	40014000 	.word	0x40014000
 8006ad4:	40014400 	.word	0x40014400

08006ad8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b087      	sub	sp, #28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	f023 0210 	bic.w	r2, r3, #16
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	021b      	lsls	r3, r3, #8
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	f023 0320 	bic.w	r3, r3, #32
 8006b26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	011b      	lsls	r3, r3, #4
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a22      	ldr	r2, [pc, #136]	; (8006bc0 <TIM_OC2_SetConfig+0xe8>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d10d      	bne.n	8006b58 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	011b      	lsls	r3, r3, #4
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a19      	ldr	r2, [pc, #100]	; (8006bc0 <TIM_OC2_SetConfig+0xe8>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d007      	beq.n	8006b70 <TIM_OC2_SetConfig+0x98>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a18      	ldr	r2, [pc, #96]	; (8006bc4 <TIM_OC2_SetConfig+0xec>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d003      	beq.n	8006b70 <TIM_OC2_SetConfig+0x98>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a17      	ldr	r2, [pc, #92]	; (8006bc8 <TIM_OC2_SetConfig+0xf0>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d113      	bne.n	8006b98 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	621a      	str	r2, [r3, #32]
}
 8006bb2:	bf00      	nop
 8006bb4:	371c      	adds	r7, #28
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	40012c00 	.word	0x40012c00
 8006bc4:	40014000 	.word	0x40014000
 8006bc8:	40014400 	.word	0x40014400

08006bcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b087      	sub	sp, #28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f023 0303 	bic.w	r3, r3, #3
 8006c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	021b      	lsls	r3, r3, #8
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a21      	ldr	r2, [pc, #132]	; (8006cb0 <TIM_OC3_SetConfig+0xe4>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d10d      	bne.n	8006c4a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	021b      	lsls	r3, r3, #8
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a18      	ldr	r2, [pc, #96]	; (8006cb0 <TIM_OC3_SetConfig+0xe4>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d007      	beq.n	8006c62 <TIM_OC3_SetConfig+0x96>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a17      	ldr	r2, [pc, #92]	; (8006cb4 <TIM_OC3_SetConfig+0xe8>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d003      	beq.n	8006c62 <TIM_OC3_SetConfig+0x96>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a16      	ldr	r2, [pc, #88]	; (8006cb8 <TIM_OC3_SetConfig+0xec>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d113      	bne.n	8006c8a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	011b      	lsls	r3, r3, #4
 8006c78:	693a      	ldr	r2, [r7, #16]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	011b      	lsls	r3, r3, #4
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	685a      	ldr	r2, [r3, #4]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	697a      	ldr	r2, [r7, #20]
 8006ca2:	621a      	str	r2, [r3, #32]
}
 8006ca4:	bf00      	nop
 8006ca6:	371c      	adds	r7, #28
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr
 8006cb0:	40012c00 	.word	0x40012c00
 8006cb4:	40014000 	.word	0x40014000
 8006cb8:	40014400 	.word	0x40014400

08006cbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b087      	sub	sp, #28
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	021b      	lsls	r3, r3, #8
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	031b      	lsls	r3, r3, #12
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a14      	ldr	r2, [pc, #80]	; (8006d6c <TIM_OC4_SetConfig+0xb0>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d007      	beq.n	8006d30 <TIM_OC4_SetConfig+0x74>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a13      	ldr	r2, [pc, #76]	; (8006d70 <TIM_OC4_SetConfig+0xb4>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d003      	beq.n	8006d30 <TIM_OC4_SetConfig+0x74>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a12      	ldr	r2, [pc, #72]	; (8006d74 <TIM_OC4_SetConfig+0xb8>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d109      	bne.n	8006d44 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	695b      	ldr	r3, [r3, #20]
 8006d3c:	019b      	lsls	r3, r3, #6
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	685a      	ldr	r2, [r3, #4]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	621a      	str	r2, [r3, #32]
}
 8006d5e:	bf00      	nop
 8006d60:	371c      	adds	r7, #28
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	40012c00 	.word	0x40012c00
 8006d70:	40014000 	.word	0x40014000
 8006d74:	40014400 	.word	0x40014400

08006d78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b087      	sub	sp, #28
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006dbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	041b      	lsls	r3, r3, #16
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a13      	ldr	r2, [pc, #76]	; (8006e1c <TIM_OC5_SetConfig+0xa4>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d007      	beq.n	8006de2 <TIM_OC5_SetConfig+0x6a>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a12      	ldr	r2, [pc, #72]	; (8006e20 <TIM_OC5_SetConfig+0xa8>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d003      	beq.n	8006de2 <TIM_OC5_SetConfig+0x6a>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a11      	ldr	r2, [pc, #68]	; (8006e24 <TIM_OC5_SetConfig+0xac>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d109      	bne.n	8006df6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006de8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	021b      	lsls	r3, r3, #8
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	621a      	str	r2, [r3, #32]
}
 8006e10:	bf00      	nop
 8006e12:	371c      	adds	r7, #28
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	40012c00 	.word	0x40012c00
 8006e20:	40014000 	.word	0x40014000
 8006e24:	40014400 	.word	0x40014400

08006e28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b087      	sub	sp, #28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	021b      	lsls	r3, r3, #8
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	051b      	lsls	r3, r3, #20
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a14      	ldr	r2, [pc, #80]	; (8006ed0 <TIM_OC6_SetConfig+0xa8>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d007      	beq.n	8006e94 <TIM_OC6_SetConfig+0x6c>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a13      	ldr	r2, [pc, #76]	; (8006ed4 <TIM_OC6_SetConfig+0xac>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d003      	beq.n	8006e94 <TIM_OC6_SetConfig+0x6c>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a12      	ldr	r2, [pc, #72]	; (8006ed8 <TIM_OC6_SetConfig+0xb0>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d109      	bne.n	8006ea8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	029b      	lsls	r3, r3, #10
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	621a      	str	r2, [r3, #32]
}
 8006ec2:	bf00      	nop
 8006ec4:	371c      	adds	r7, #28
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	40012c00 	.word	0x40012c00
 8006ed4:	40014000 	.word	0x40014000
 8006ed8:	40014400 	.word	0x40014400

08006edc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b087      	sub	sp, #28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	f003 031f 	and.w	r3, r3, #31
 8006eee:	2201      	movs	r2, #1
 8006ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6a1a      	ldr	r2, [r3, #32]
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	43db      	mvns	r3, r3
 8006efe:	401a      	ands	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6a1a      	ldr	r2, [r3, #32]
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	f003 031f 	and.w	r3, r3, #31
 8006f0e:	6879      	ldr	r1, [r7, #4]
 8006f10:	fa01 f303 	lsl.w	r3, r1, r3
 8006f14:	431a      	orrs	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	621a      	str	r2, [r3, #32]
}
 8006f1a:	bf00      	nop
 8006f1c:	371c      	adds	r7, #28
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
	...

08006f28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d101      	bne.n	8006f40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	e04f      	b.n	8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a21      	ldr	r2, [pc, #132]	; (8006fec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d108      	bne.n	8006f7c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006f70:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a14      	ldr	r2, [pc, #80]	; (8006fec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d009      	beq.n	8006fb4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fa8:	d004      	beq.n	8006fb4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a10      	ldr	r2, [pc, #64]	; (8006ff0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d10c      	bne.n	8006fce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3714      	adds	r7, #20
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr
 8006fec:	40012c00 	.word	0x40012c00
 8006ff0:	40014000 	.word	0x40014000

08006ff4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ffe:	2300      	movs	r3, #0
 8007000:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007008:	2b01      	cmp	r3, #1
 800700a:	d101      	bne.n	8007010 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800700c:	2302      	movs	r3, #2
 800700e:	e060      	b.n	80070d2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	4313      	orrs	r3, r2
 8007024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	4313      	orrs	r3, r2
 8007032:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	4313      	orrs	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4313      	orrs	r3, r2
 800704e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	4313      	orrs	r3, r2
 800705c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	4313      	orrs	r3, r2
 800706a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007076:	4313      	orrs	r3, r2
 8007078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	041b      	lsls	r3, r3, #16
 8007086:	4313      	orrs	r3, r2
 8007088:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a14      	ldr	r2, [pc, #80]	; (80070e0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d115      	bne.n	80070c0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709e:	051b      	lsls	r3, r3, #20
 80070a0:	4313      	orrs	r3, r2
 80070a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	6a1b      	ldr	r3, [r3, #32]
 80070bc:	4313      	orrs	r3, r2
 80070be:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3714      	adds	r7, #20
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	40012c00 	.word	0x40012c00

080070e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070ec:	bf00      	nop
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <__errno>:
 8007120:	4b01      	ldr	r3, [pc, #4]	; (8007128 <__errno+0x8>)
 8007122:	6818      	ldr	r0, [r3, #0]
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	200000a4 	.word	0x200000a4

0800712c <__libc_init_array>:
 800712c:	b570      	push	{r4, r5, r6, lr}
 800712e:	4d0d      	ldr	r5, [pc, #52]	; (8007164 <__libc_init_array+0x38>)
 8007130:	4c0d      	ldr	r4, [pc, #52]	; (8007168 <__libc_init_array+0x3c>)
 8007132:	1b64      	subs	r4, r4, r5
 8007134:	10a4      	asrs	r4, r4, #2
 8007136:	2600      	movs	r6, #0
 8007138:	42a6      	cmp	r6, r4
 800713a:	d109      	bne.n	8007150 <__libc_init_array+0x24>
 800713c:	4d0b      	ldr	r5, [pc, #44]	; (800716c <__libc_init_array+0x40>)
 800713e:	4c0c      	ldr	r4, [pc, #48]	; (8007170 <__libc_init_array+0x44>)
 8007140:	f003 fa6a 	bl	800a618 <_init>
 8007144:	1b64      	subs	r4, r4, r5
 8007146:	10a4      	asrs	r4, r4, #2
 8007148:	2600      	movs	r6, #0
 800714a:	42a6      	cmp	r6, r4
 800714c:	d105      	bne.n	800715a <__libc_init_array+0x2e>
 800714e:	bd70      	pop	{r4, r5, r6, pc}
 8007150:	f855 3b04 	ldr.w	r3, [r5], #4
 8007154:	4798      	blx	r3
 8007156:	3601      	adds	r6, #1
 8007158:	e7ee      	b.n	8007138 <__libc_init_array+0xc>
 800715a:	f855 3b04 	ldr.w	r3, [r5], #4
 800715e:	4798      	blx	r3
 8007160:	3601      	adds	r6, #1
 8007162:	e7f2      	b.n	800714a <__libc_init_array+0x1e>
 8007164:	0800abd8 	.word	0x0800abd8
 8007168:	0800abd8 	.word	0x0800abd8
 800716c:	0800abd8 	.word	0x0800abd8
 8007170:	0800abdc 	.word	0x0800abdc

08007174 <memset>:
 8007174:	4402      	add	r2, r0
 8007176:	4603      	mov	r3, r0
 8007178:	4293      	cmp	r3, r2
 800717a:	d100      	bne.n	800717e <memset+0xa>
 800717c:	4770      	bx	lr
 800717e:	f803 1b01 	strb.w	r1, [r3], #1
 8007182:	e7f9      	b.n	8007178 <memset+0x4>

08007184 <__cvt>:
 8007184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007188:	ec55 4b10 	vmov	r4, r5, d0
 800718c:	2d00      	cmp	r5, #0
 800718e:	460e      	mov	r6, r1
 8007190:	4619      	mov	r1, r3
 8007192:	462b      	mov	r3, r5
 8007194:	bfbb      	ittet	lt
 8007196:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800719a:	461d      	movlt	r5, r3
 800719c:	2300      	movge	r3, #0
 800719e:	232d      	movlt	r3, #45	; 0x2d
 80071a0:	700b      	strb	r3, [r1, #0]
 80071a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80071a8:	4691      	mov	r9, r2
 80071aa:	f023 0820 	bic.w	r8, r3, #32
 80071ae:	bfbc      	itt	lt
 80071b0:	4622      	movlt	r2, r4
 80071b2:	4614      	movlt	r4, r2
 80071b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80071b8:	d005      	beq.n	80071c6 <__cvt+0x42>
 80071ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80071be:	d100      	bne.n	80071c2 <__cvt+0x3e>
 80071c0:	3601      	adds	r6, #1
 80071c2:	2102      	movs	r1, #2
 80071c4:	e000      	b.n	80071c8 <__cvt+0x44>
 80071c6:	2103      	movs	r1, #3
 80071c8:	ab03      	add	r3, sp, #12
 80071ca:	9301      	str	r3, [sp, #4]
 80071cc:	ab02      	add	r3, sp, #8
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	ec45 4b10 	vmov	d0, r4, r5
 80071d4:	4653      	mov	r3, sl
 80071d6:	4632      	mov	r2, r6
 80071d8:	f000 fcfe 	bl	8007bd8 <_dtoa_r>
 80071dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80071e0:	4607      	mov	r7, r0
 80071e2:	d102      	bne.n	80071ea <__cvt+0x66>
 80071e4:	f019 0f01 	tst.w	r9, #1
 80071e8:	d022      	beq.n	8007230 <__cvt+0xac>
 80071ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80071ee:	eb07 0906 	add.w	r9, r7, r6
 80071f2:	d110      	bne.n	8007216 <__cvt+0x92>
 80071f4:	783b      	ldrb	r3, [r7, #0]
 80071f6:	2b30      	cmp	r3, #48	; 0x30
 80071f8:	d10a      	bne.n	8007210 <__cvt+0x8c>
 80071fa:	2200      	movs	r2, #0
 80071fc:	2300      	movs	r3, #0
 80071fe:	4620      	mov	r0, r4
 8007200:	4629      	mov	r1, r5
 8007202:	f7f9 fc61 	bl	8000ac8 <__aeabi_dcmpeq>
 8007206:	b918      	cbnz	r0, 8007210 <__cvt+0x8c>
 8007208:	f1c6 0601 	rsb	r6, r6, #1
 800720c:	f8ca 6000 	str.w	r6, [sl]
 8007210:	f8da 3000 	ldr.w	r3, [sl]
 8007214:	4499      	add	r9, r3
 8007216:	2200      	movs	r2, #0
 8007218:	2300      	movs	r3, #0
 800721a:	4620      	mov	r0, r4
 800721c:	4629      	mov	r1, r5
 800721e:	f7f9 fc53 	bl	8000ac8 <__aeabi_dcmpeq>
 8007222:	b108      	cbz	r0, 8007228 <__cvt+0xa4>
 8007224:	f8cd 900c 	str.w	r9, [sp, #12]
 8007228:	2230      	movs	r2, #48	; 0x30
 800722a:	9b03      	ldr	r3, [sp, #12]
 800722c:	454b      	cmp	r3, r9
 800722e:	d307      	bcc.n	8007240 <__cvt+0xbc>
 8007230:	9b03      	ldr	r3, [sp, #12]
 8007232:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007234:	1bdb      	subs	r3, r3, r7
 8007236:	4638      	mov	r0, r7
 8007238:	6013      	str	r3, [r2, #0]
 800723a:	b004      	add	sp, #16
 800723c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007240:	1c59      	adds	r1, r3, #1
 8007242:	9103      	str	r1, [sp, #12]
 8007244:	701a      	strb	r2, [r3, #0]
 8007246:	e7f0      	b.n	800722a <__cvt+0xa6>

08007248 <__exponent>:
 8007248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800724a:	4603      	mov	r3, r0
 800724c:	2900      	cmp	r1, #0
 800724e:	bfb8      	it	lt
 8007250:	4249      	neglt	r1, r1
 8007252:	f803 2b02 	strb.w	r2, [r3], #2
 8007256:	bfb4      	ite	lt
 8007258:	222d      	movlt	r2, #45	; 0x2d
 800725a:	222b      	movge	r2, #43	; 0x2b
 800725c:	2909      	cmp	r1, #9
 800725e:	7042      	strb	r2, [r0, #1]
 8007260:	dd2a      	ble.n	80072b8 <__exponent+0x70>
 8007262:	f10d 0407 	add.w	r4, sp, #7
 8007266:	46a4      	mov	ip, r4
 8007268:	270a      	movs	r7, #10
 800726a:	46a6      	mov	lr, r4
 800726c:	460a      	mov	r2, r1
 800726e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007272:	fb07 1516 	mls	r5, r7, r6, r1
 8007276:	3530      	adds	r5, #48	; 0x30
 8007278:	2a63      	cmp	r2, #99	; 0x63
 800727a:	f104 34ff 	add.w	r4, r4, #4294967295
 800727e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007282:	4631      	mov	r1, r6
 8007284:	dcf1      	bgt.n	800726a <__exponent+0x22>
 8007286:	3130      	adds	r1, #48	; 0x30
 8007288:	f1ae 0502 	sub.w	r5, lr, #2
 800728c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007290:	1c44      	adds	r4, r0, #1
 8007292:	4629      	mov	r1, r5
 8007294:	4561      	cmp	r1, ip
 8007296:	d30a      	bcc.n	80072ae <__exponent+0x66>
 8007298:	f10d 0209 	add.w	r2, sp, #9
 800729c:	eba2 020e 	sub.w	r2, r2, lr
 80072a0:	4565      	cmp	r5, ip
 80072a2:	bf88      	it	hi
 80072a4:	2200      	movhi	r2, #0
 80072a6:	4413      	add	r3, r2
 80072a8:	1a18      	subs	r0, r3, r0
 80072aa:	b003      	add	sp, #12
 80072ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80072b6:	e7ed      	b.n	8007294 <__exponent+0x4c>
 80072b8:	2330      	movs	r3, #48	; 0x30
 80072ba:	3130      	adds	r1, #48	; 0x30
 80072bc:	7083      	strb	r3, [r0, #2]
 80072be:	70c1      	strb	r1, [r0, #3]
 80072c0:	1d03      	adds	r3, r0, #4
 80072c2:	e7f1      	b.n	80072a8 <__exponent+0x60>

080072c4 <_printf_float>:
 80072c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c8:	ed2d 8b02 	vpush	{d8}
 80072cc:	b08d      	sub	sp, #52	; 0x34
 80072ce:	460c      	mov	r4, r1
 80072d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80072d4:	4616      	mov	r6, r2
 80072d6:	461f      	mov	r7, r3
 80072d8:	4605      	mov	r5, r0
 80072da:	f001 fa6b 	bl	80087b4 <_localeconv_r>
 80072de:	f8d0 a000 	ldr.w	sl, [r0]
 80072e2:	4650      	mov	r0, sl
 80072e4:	f7f8 ff74 	bl	80001d0 <strlen>
 80072e8:	2300      	movs	r3, #0
 80072ea:	930a      	str	r3, [sp, #40]	; 0x28
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	9305      	str	r3, [sp, #20]
 80072f0:	f8d8 3000 	ldr.w	r3, [r8]
 80072f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80072f8:	3307      	adds	r3, #7
 80072fa:	f023 0307 	bic.w	r3, r3, #7
 80072fe:	f103 0208 	add.w	r2, r3, #8
 8007302:	f8c8 2000 	str.w	r2, [r8]
 8007306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800730e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007312:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007316:	9307      	str	r3, [sp, #28]
 8007318:	f8cd 8018 	str.w	r8, [sp, #24]
 800731c:	ee08 0a10 	vmov	s16, r0
 8007320:	4b9f      	ldr	r3, [pc, #636]	; (80075a0 <_printf_float+0x2dc>)
 8007322:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007326:	f04f 32ff 	mov.w	r2, #4294967295
 800732a:	f7f9 fbff 	bl	8000b2c <__aeabi_dcmpun>
 800732e:	bb88      	cbnz	r0, 8007394 <_printf_float+0xd0>
 8007330:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007334:	4b9a      	ldr	r3, [pc, #616]	; (80075a0 <_printf_float+0x2dc>)
 8007336:	f04f 32ff 	mov.w	r2, #4294967295
 800733a:	f7f9 fbd9 	bl	8000af0 <__aeabi_dcmple>
 800733e:	bb48      	cbnz	r0, 8007394 <_printf_float+0xd0>
 8007340:	2200      	movs	r2, #0
 8007342:	2300      	movs	r3, #0
 8007344:	4640      	mov	r0, r8
 8007346:	4649      	mov	r1, r9
 8007348:	f7f9 fbc8 	bl	8000adc <__aeabi_dcmplt>
 800734c:	b110      	cbz	r0, 8007354 <_printf_float+0x90>
 800734e:	232d      	movs	r3, #45	; 0x2d
 8007350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007354:	4b93      	ldr	r3, [pc, #588]	; (80075a4 <_printf_float+0x2e0>)
 8007356:	4894      	ldr	r0, [pc, #592]	; (80075a8 <_printf_float+0x2e4>)
 8007358:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800735c:	bf94      	ite	ls
 800735e:	4698      	movls	r8, r3
 8007360:	4680      	movhi	r8, r0
 8007362:	2303      	movs	r3, #3
 8007364:	6123      	str	r3, [r4, #16]
 8007366:	9b05      	ldr	r3, [sp, #20]
 8007368:	f023 0204 	bic.w	r2, r3, #4
 800736c:	6022      	str	r2, [r4, #0]
 800736e:	f04f 0900 	mov.w	r9, #0
 8007372:	9700      	str	r7, [sp, #0]
 8007374:	4633      	mov	r3, r6
 8007376:	aa0b      	add	r2, sp, #44	; 0x2c
 8007378:	4621      	mov	r1, r4
 800737a:	4628      	mov	r0, r5
 800737c:	f000 f9d8 	bl	8007730 <_printf_common>
 8007380:	3001      	adds	r0, #1
 8007382:	f040 8090 	bne.w	80074a6 <_printf_float+0x1e2>
 8007386:	f04f 30ff 	mov.w	r0, #4294967295
 800738a:	b00d      	add	sp, #52	; 0x34
 800738c:	ecbd 8b02 	vpop	{d8}
 8007390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007394:	4642      	mov	r2, r8
 8007396:	464b      	mov	r3, r9
 8007398:	4640      	mov	r0, r8
 800739a:	4649      	mov	r1, r9
 800739c:	f7f9 fbc6 	bl	8000b2c <__aeabi_dcmpun>
 80073a0:	b140      	cbz	r0, 80073b4 <_printf_float+0xf0>
 80073a2:	464b      	mov	r3, r9
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	bfbc      	itt	lt
 80073a8:	232d      	movlt	r3, #45	; 0x2d
 80073aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80073ae:	487f      	ldr	r0, [pc, #508]	; (80075ac <_printf_float+0x2e8>)
 80073b0:	4b7f      	ldr	r3, [pc, #508]	; (80075b0 <_printf_float+0x2ec>)
 80073b2:	e7d1      	b.n	8007358 <_printf_float+0x94>
 80073b4:	6863      	ldr	r3, [r4, #4]
 80073b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80073ba:	9206      	str	r2, [sp, #24]
 80073bc:	1c5a      	adds	r2, r3, #1
 80073be:	d13f      	bne.n	8007440 <_printf_float+0x17c>
 80073c0:	2306      	movs	r3, #6
 80073c2:	6063      	str	r3, [r4, #4]
 80073c4:	9b05      	ldr	r3, [sp, #20]
 80073c6:	6861      	ldr	r1, [r4, #4]
 80073c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80073cc:	2300      	movs	r3, #0
 80073ce:	9303      	str	r3, [sp, #12]
 80073d0:	ab0a      	add	r3, sp, #40	; 0x28
 80073d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80073d6:	ab09      	add	r3, sp, #36	; 0x24
 80073d8:	ec49 8b10 	vmov	d0, r8, r9
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	6022      	str	r2, [r4, #0]
 80073e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80073e4:	4628      	mov	r0, r5
 80073e6:	f7ff fecd 	bl	8007184 <__cvt>
 80073ea:	9b06      	ldr	r3, [sp, #24]
 80073ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073ee:	2b47      	cmp	r3, #71	; 0x47
 80073f0:	4680      	mov	r8, r0
 80073f2:	d108      	bne.n	8007406 <_printf_float+0x142>
 80073f4:	1cc8      	adds	r0, r1, #3
 80073f6:	db02      	blt.n	80073fe <_printf_float+0x13a>
 80073f8:	6863      	ldr	r3, [r4, #4]
 80073fa:	4299      	cmp	r1, r3
 80073fc:	dd41      	ble.n	8007482 <_printf_float+0x1be>
 80073fe:	f1ab 0b02 	sub.w	fp, fp, #2
 8007402:	fa5f fb8b 	uxtb.w	fp, fp
 8007406:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800740a:	d820      	bhi.n	800744e <_printf_float+0x18a>
 800740c:	3901      	subs	r1, #1
 800740e:	465a      	mov	r2, fp
 8007410:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007414:	9109      	str	r1, [sp, #36]	; 0x24
 8007416:	f7ff ff17 	bl	8007248 <__exponent>
 800741a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800741c:	1813      	adds	r3, r2, r0
 800741e:	2a01      	cmp	r2, #1
 8007420:	4681      	mov	r9, r0
 8007422:	6123      	str	r3, [r4, #16]
 8007424:	dc02      	bgt.n	800742c <_printf_float+0x168>
 8007426:	6822      	ldr	r2, [r4, #0]
 8007428:	07d2      	lsls	r2, r2, #31
 800742a:	d501      	bpl.n	8007430 <_printf_float+0x16c>
 800742c:	3301      	adds	r3, #1
 800742e:	6123      	str	r3, [r4, #16]
 8007430:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007434:	2b00      	cmp	r3, #0
 8007436:	d09c      	beq.n	8007372 <_printf_float+0xae>
 8007438:	232d      	movs	r3, #45	; 0x2d
 800743a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800743e:	e798      	b.n	8007372 <_printf_float+0xae>
 8007440:	9a06      	ldr	r2, [sp, #24]
 8007442:	2a47      	cmp	r2, #71	; 0x47
 8007444:	d1be      	bne.n	80073c4 <_printf_float+0x100>
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1bc      	bne.n	80073c4 <_printf_float+0x100>
 800744a:	2301      	movs	r3, #1
 800744c:	e7b9      	b.n	80073c2 <_printf_float+0xfe>
 800744e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007452:	d118      	bne.n	8007486 <_printf_float+0x1c2>
 8007454:	2900      	cmp	r1, #0
 8007456:	6863      	ldr	r3, [r4, #4]
 8007458:	dd0b      	ble.n	8007472 <_printf_float+0x1ae>
 800745a:	6121      	str	r1, [r4, #16]
 800745c:	b913      	cbnz	r3, 8007464 <_printf_float+0x1a0>
 800745e:	6822      	ldr	r2, [r4, #0]
 8007460:	07d0      	lsls	r0, r2, #31
 8007462:	d502      	bpl.n	800746a <_printf_float+0x1a6>
 8007464:	3301      	adds	r3, #1
 8007466:	440b      	add	r3, r1
 8007468:	6123      	str	r3, [r4, #16]
 800746a:	65a1      	str	r1, [r4, #88]	; 0x58
 800746c:	f04f 0900 	mov.w	r9, #0
 8007470:	e7de      	b.n	8007430 <_printf_float+0x16c>
 8007472:	b913      	cbnz	r3, 800747a <_printf_float+0x1b6>
 8007474:	6822      	ldr	r2, [r4, #0]
 8007476:	07d2      	lsls	r2, r2, #31
 8007478:	d501      	bpl.n	800747e <_printf_float+0x1ba>
 800747a:	3302      	adds	r3, #2
 800747c:	e7f4      	b.n	8007468 <_printf_float+0x1a4>
 800747e:	2301      	movs	r3, #1
 8007480:	e7f2      	b.n	8007468 <_printf_float+0x1a4>
 8007482:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007488:	4299      	cmp	r1, r3
 800748a:	db05      	blt.n	8007498 <_printf_float+0x1d4>
 800748c:	6823      	ldr	r3, [r4, #0]
 800748e:	6121      	str	r1, [r4, #16]
 8007490:	07d8      	lsls	r0, r3, #31
 8007492:	d5ea      	bpl.n	800746a <_printf_float+0x1a6>
 8007494:	1c4b      	adds	r3, r1, #1
 8007496:	e7e7      	b.n	8007468 <_printf_float+0x1a4>
 8007498:	2900      	cmp	r1, #0
 800749a:	bfd4      	ite	le
 800749c:	f1c1 0202 	rsble	r2, r1, #2
 80074a0:	2201      	movgt	r2, #1
 80074a2:	4413      	add	r3, r2
 80074a4:	e7e0      	b.n	8007468 <_printf_float+0x1a4>
 80074a6:	6823      	ldr	r3, [r4, #0]
 80074a8:	055a      	lsls	r2, r3, #21
 80074aa:	d407      	bmi.n	80074bc <_printf_float+0x1f8>
 80074ac:	6923      	ldr	r3, [r4, #16]
 80074ae:	4642      	mov	r2, r8
 80074b0:	4631      	mov	r1, r6
 80074b2:	4628      	mov	r0, r5
 80074b4:	47b8      	blx	r7
 80074b6:	3001      	adds	r0, #1
 80074b8:	d12c      	bne.n	8007514 <_printf_float+0x250>
 80074ba:	e764      	b.n	8007386 <_printf_float+0xc2>
 80074bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80074c0:	f240 80e0 	bls.w	8007684 <_printf_float+0x3c0>
 80074c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074c8:	2200      	movs	r2, #0
 80074ca:	2300      	movs	r3, #0
 80074cc:	f7f9 fafc 	bl	8000ac8 <__aeabi_dcmpeq>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	d034      	beq.n	800753e <_printf_float+0x27a>
 80074d4:	4a37      	ldr	r2, [pc, #220]	; (80075b4 <_printf_float+0x2f0>)
 80074d6:	2301      	movs	r3, #1
 80074d8:	4631      	mov	r1, r6
 80074da:	4628      	mov	r0, r5
 80074dc:	47b8      	blx	r7
 80074de:	3001      	adds	r0, #1
 80074e0:	f43f af51 	beq.w	8007386 <_printf_float+0xc2>
 80074e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074e8:	429a      	cmp	r2, r3
 80074ea:	db02      	blt.n	80074f2 <_printf_float+0x22e>
 80074ec:	6823      	ldr	r3, [r4, #0]
 80074ee:	07d8      	lsls	r0, r3, #31
 80074f0:	d510      	bpl.n	8007514 <_printf_float+0x250>
 80074f2:	ee18 3a10 	vmov	r3, s16
 80074f6:	4652      	mov	r2, sl
 80074f8:	4631      	mov	r1, r6
 80074fa:	4628      	mov	r0, r5
 80074fc:	47b8      	blx	r7
 80074fe:	3001      	adds	r0, #1
 8007500:	f43f af41 	beq.w	8007386 <_printf_float+0xc2>
 8007504:	f04f 0800 	mov.w	r8, #0
 8007508:	f104 091a 	add.w	r9, r4, #26
 800750c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800750e:	3b01      	subs	r3, #1
 8007510:	4543      	cmp	r3, r8
 8007512:	dc09      	bgt.n	8007528 <_printf_float+0x264>
 8007514:	6823      	ldr	r3, [r4, #0]
 8007516:	079b      	lsls	r3, r3, #30
 8007518:	f100 8105 	bmi.w	8007726 <_printf_float+0x462>
 800751c:	68e0      	ldr	r0, [r4, #12]
 800751e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007520:	4298      	cmp	r0, r3
 8007522:	bfb8      	it	lt
 8007524:	4618      	movlt	r0, r3
 8007526:	e730      	b.n	800738a <_printf_float+0xc6>
 8007528:	2301      	movs	r3, #1
 800752a:	464a      	mov	r2, r9
 800752c:	4631      	mov	r1, r6
 800752e:	4628      	mov	r0, r5
 8007530:	47b8      	blx	r7
 8007532:	3001      	adds	r0, #1
 8007534:	f43f af27 	beq.w	8007386 <_printf_float+0xc2>
 8007538:	f108 0801 	add.w	r8, r8, #1
 800753c:	e7e6      	b.n	800750c <_printf_float+0x248>
 800753e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007540:	2b00      	cmp	r3, #0
 8007542:	dc39      	bgt.n	80075b8 <_printf_float+0x2f4>
 8007544:	4a1b      	ldr	r2, [pc, #108]	; (80075b4 <_printf_float+0x2f0>)
 8007546:	2301      	movs	r3, #1
 8007548:	4631      	mov	r1, r6
 800754a:	4628      	mov	r0, r5
 800754c:	47b8      	blx	r7
 800754e:	3001      	adds	r0, #1
 8007550:	f43f af19 	beq.w	8007386 <_printf_float+0xc2>
 8007554:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007558:	4313      	orrs	r3, r2
 800755a:	d102      	bne.n	8007562 <_printf_float+0x29e>
 800755c:	6823      	ldr	r3, [r4, #0]
 800755e:	07d9      	lsls	r1, r3, #31
 8007560:	d5d8      	bpl.n	8007514 <_printf_float+0x250>
 8007562:	ee18 3a10 	vmov	r3, s16
 8007566:	4652      	mov	r2, sl
 8007568:	4631      	mov	r1, r6
 800756a:	4628      	mov	r0, r5
 800756c:	47b8      	blx	r7
 800756e:	3001      	adds	r0, #1
 8007570:	f43f af09 	beq.w	8007386 <_printf_float+0xc2>
 8007574:	f04f 0900 	mov.w	r9, #0
 8007578:	f104 0a1a 	add.w	sl, r4, #26
 800757c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800757e:	425b      	negs	r3, r3
 8007580:	454b      	cmp	r3, r9
 8007582:	dc01      	bgt.n	8007588 <_printf_float+0x2c4>
 8007584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007586:	e792      	b.n	80074ae <_printf_float+0x1ea>
 8007588:	2301      	movs	r3, #1
 800758a:	4652      	mov	r2, sl
 800758c:	4631      	mov	r1, r6
 800758e:	4628      	mov	r0, r5
 8007590:	47b8      	blx	r7
 8007592:	3001      	adds	r0, #1
 8007594:	f43f aef7 	beq.w	8007386 <_printf_float+0xc2>
 8007598:	f109 0901 	add.w	r9, r9, #1
 800759c:	e7ee      	b.n	800757c <_printf_float+0x2b8>
 800759e:	bf00      	nop
 80075a0:	7fefffff 	.word	0x7fefffff
 80075a4:	0800a790 	.word	0x0800a790
 80075a8:	0800a794 	.word	0x0800a794
 80075ac:	0800a79c 	.word	0x0800a79c
 80075b0:	0800a798 	.word	0x0800a798
 80075b4:	0800a7a0 	.word	0x0800a7a0
 80075b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075bc:	429a      	cmp	r2, r3
 80075be:	bfa8      	it	ge
 80075c0:	461a      	movge	r2, r3
 80075c2:	2a00      	cmp	r2, #0
 80075c4:	4691      	mov	r9, r2
 80075c6:	dc37      	bgt.n	8007638 <_printf_float+0x374>
 80075c8:	f04f 0b00 	mov.w	fp, #0
 80075cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075d0:	f104 021a 	add.w	r2, r4, #26
 80075d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075d6:	9305      	str	r3, [sp, #20]
 80075d8:	eba3 0309 	sub.w	r3, r3, r9
 80075dc:	455b      	cmp	r3, fp
 80075de:	dc33      	bgt.n	8007648 <_printf_float+0x384>
 80075e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075e4:	429a      	cmp	r2, r3
 80075e6:	db3b      	blt.n	8007660 <_printf_float+0x39c>
 80075e8:	6823      	ldr	r3, [r4, #0]
 80075ea:	07da      	lsls	r2, r3, #31
 80075ec:	d438      	bmi.n	8007660 <_printf_float+0x39c>
 80075ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075f0:	9a05      	ldr	r2, [sp, #20]
 80075f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075f4:	1a9a      	subs	r2, r3, r2
 80075f6:	eba3 0901 	sub.w	r9, r3, r1
 80075fa:	4591      	cmp	r9, r2
 80075fc:	bfa8      	it	ge
 80075fe:	4691      	movge	r9, r2
 8007600:	f1b9 0f00 	cmp.w	r9, #0
 8007604:	dc35      	bgt.n	8007672 <_printf_float+0x3ae>
 8007606:	f04f 0800 	mov.w	r8, #0
 800760a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800760e:	f104 0a1a 	add.w	sl, r4, #26
 8007612:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007616:	1a9b      	subs	r3, r3, r2
 8007618:	eba3 0309 	sub.w	r3, r3, r9
 800761c:	4543      	cmp	r3, r8
 800761e:	f77f af79 	ble.w	8007514 <_printf_float+0x250>
 8007622:	2301      	movs	r3, #1
 8007624:	4652      	mov	r2, sl
 8007626:	4631      	mov	r1, r6
 8007628:	4628      	mov	r0, r5
 800762a:	47b8      	blx	r7
 800762c:	3001      	adds	r0, #1
 800762e:	f43f aeaa 	beq.w	8007386 <_printf_float+0xc2>
 8007632:	f108 0801 	add.w	r8, r8, #1
 8007636:	e7ec      	b.n	8007612 <_printf_float+0x34e>
 8007638:	4613      	mov	r3, r2
 800763a:	4631      	mov	r1, r6
 800763c:	4642      	mov	r2, r8
 800763e:	4628      	mov	r0, r5
 8007640:	47b8      	blx	r7
 8007642:	3001      	adds	r0, #1
 8007644:	d1c0      	bne.n	80075c8 <_printf_float+0x304>
 8007646:	e69e      	b.n	8007386 <_printf_float+0xc2>
 8007648:	2301      	movs	r3, #1
 800764a:	4631      	mov	r1, r6
 800764c:	4628      	mov	r0, r5
 800764e:	9205      	str	r2, [sp, #20]
 8007650:	47b8      	blx	r7
 8007652:	3001      	adds	r0, #1
 8007654:	f43f ae97 	beq.w	8007386 <_printf_float+0xc2>
 8007658:	9a05      	ldr	r2, [sp, #20]
 800765a:	f10b 0b01 	add.w	fp, fp, #1
 800765e:	e7b9      	b.n	80075d4 <_printf_float+0x310>
 8007660:	ee18 3a10 	vmov	r3, s16
 8007664:	4652      	mov	r2, sl
 8007666:	4631      	mov	r1, r6
 8007668:	4628      	mov	r0, r5
 800766a:	47b8      	blx	r7
 800766c:	3001      	adds	r0, #1
 800766e:	d1be      	bne.n	80075ee <_printf_float+0x32a>
 8007670:	e689      	b.n	8007386 <_printf_float+0xc2>
 8007672:	9a05      	ldr	r2, [sp, #20]
 8007674:	464b      	mov	r3, r9
 8007676:	4442      	add	r2, r8
 8007678:	4631      	mov	r1, r6
 800767a:	4628      	mov	r0, r5
 800767c:	47b8      	blx	r7
 800767e:	3001      	adds	r0, #1
 8007680:	d1c1      	bne.n	8007606 <_printf_float+0x342>
 8007682:	e680      	b.n	8007386 <_printf_float+0xc2>
 8007684:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007686:	2a01      	cmp	r2, #1
 8007688:	dc01      	bgt.n	800768e <_printf_float+0x3ca>
 800768a:	07db      	lsls	r3, r3, #31
 800768c:	d538      	bpl.n	8007700 <_printf_float+0x43c>
 800768e:	2301      	movs	r3, #1
 8007690:	4642      	mov	r2, r8
 8007692:	4631      	mov	r1, r6
 8007694:	4628      	mov	r0, r5
 8007696:	47b8      	blx	r7
 8007698:	3001      	adds	r0, #1
 800769a:	f43f ae74 	beq.w	8007386 <_printf_float+0xc2>
 800769e:	ee18 3a10 	vmov	r3, s16
 80076a2:	4652      	mov	r2, sl
 80076a4:	4631      	mov	r1, r6
 80076a6:	4628      	mov	r0, r5
 80076a8:	47b8      	blx	r7
 80076aa:	3001      	adds	r0, #1
 80076ac:	f43f ae6b 	beq.w	8007386 <_printf_float+0xc2>
 80076b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076b4:	2200      	movs	r2, #0
 80076b6:	2300      	movs	r3, #0
 80076b8:	f7f9 fa06 	bl	8000ac8 <__aeabi_dcmpeq>
 80076bc:	b9d8      	cbnz	r0, 80076f6 <_printf_float+0x432>
 80076be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076c0:	f108 0201 	add.w	r2, r8, #1
 80076c4:	3b01      	subs	r3, #1
 80076c6:	4631      	mov	r1, r6
 80076c8:	4628      	mov	r0, r5
 80076ca:	47b8      	blx	r7
 80076cc:	3001      	adds	r0, #1
 80076ce:	d10e      	bne.n	80076ee <_printf_float+0x42a>
 80076d0:	e659      	b.n	8007386 <_printf_float+0xc2>
 80076d2:	2301      	movs	r3, #1
 80076d4:	4652      	mov	r2, sl
 80076d6:	4631      	mov	r1, r6
 80076d8:	4628      	mov	r0, r5
 80076da:	47b8      	blx	r7
 80076dc:	3001      	adds	r0, #1
 80076de:	f43f ae52 	beq.w	8007386 <_printf_float+0xc2>
 80076e2:	f108 0801 	add.w	r8, r8, #1
 80076e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076e8:	3b01      	subs	r3, #1
 80076ea:	4543      	cmp	r3, r8
 80076ec:	dcf1      	bgt.n	80076d2 <_printf_float+0x40e>
 80076ee:	464b      	mov	r3, r9
 80076f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80076f4:	e6dc      	b.n	80074b0 <_printf_float+0x1ec>
 80076f6:	f04f 0800 	mov.w	r8, #0
 80076fa:	f104 0a1a 	add.w	sl, r4, #26
 80076fe:	e7f2      	b.n	80076e6 <_printf_float+0x422>
 8007700:	2301      	movs	r3, #1
 8007702:	4642      	mov	r2, r8
 8007704:	e7df      	b.n	80076c6 <_printf_float+0x402>
 8007706:	2301      	movs	r3, #1
 8007708:	464a      	mov	r2, r9
 800770a:	4631      	mov	r1, r6
 800770c:	4628      	mov	r0, r5
 800770e:	47b8      	blx	r7
 8007710:	3001      	adds	r0, #1
 8007712:	f43f ae38 	beq.w	8007386 <_printf_float+0xc2>
 8007716:	f108 0801 	add.w	r8, r8, #1
 800771a:	68e3      	ldr	r3, [r4, #12]
 800771c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800771e:	1a5b      	subs	r3, r3, r1
 8007720:	4543      	cmp	r3, r8
 8007722:	dcf0      	bgt.n	8007706 <_printf_float+0x442>
 8007724:	e6fa      	b.n	800751c <_printf_float+0x258>
 8007726:	f04f 0800 	mov.w	r8, #0
 800772a:	f104 0919 	add.w	r9, r4, #25
 800772e:	e7f4      	b.n	800771a <_printf_float+0x456>

08007730 <_printf_common>:
 8007730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007734:	4616      	mov	r6, r2
 8007736:	4699      	mov	r9, r3
 8007738:	688a      	ldr	r2, [r1, #8]
 800773a:	690b      	ldr	r3, [r1, #16]
 800773c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007740:	4293      	cmp	r3, r2
 8007742:	bfb8      	it	lt
 8007744:	4613      	movlt	r3, r2
 8007746:	6033      	str	r3, [r6, #0]
 8007748:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800774c:	4607      	mov	r7, r0
 800774e:	460c      	mov	r4, r1
 8007750:	b10a      	cbz	r2, 8007756 <_printf_common+0x26>
 8007752:	3301      	adds	r3, #1
 8007754:	6033      	str	r3, [r6, #0]
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	0699      	lsls	r1, r3, #26
 800775a:	bf42      	ittt	mi
 800775c:	6833      	ldrmi	r3, [r6, #0]
 800775e:	3302      	addmi	r3, #2
 8007760:	6033      	strmi	r3, [r6, #0]
 8007762:	6825      	ldr	r5, [r4, #0]
 8007764:	f015 0506 	ands.w	r5, r5, #6
 8007768:	d106      	bne.n	8007778 <_printf_common+0x48>
 800776a:	f104 0a19 	add.w	sl, r4, #25
 800776e:	68e3      	ldr	r3, [r4, #12]
 8007770:	6832      	ldr	r2, [r6, #0]
 8007772:	1a9b      	subs	r3, r3, r2
 8007774:	42ab      	cmp	r3, r5
 8007776:	dc26      	bgt.n	80077c6 <_printf_common+0x96>
 8007778:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800777c:	1e13      	subs	r3, r2, #0
 800777e:	6822      	ldr	r2, [r4, #0]
 8007780:	bf18      	it	ne
 8007782:	2301      	movne	r3, #1
 8007784:	0692      	lsls	r2, r2, #26
 8007786:	d42b      	bmi.n	80077e0 <_printf_common+0xb0>
 8007788:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800778c:	4649      	mov	r1, r9
 800778e:	4638      	mov	r0, r7
 8007790:	47c0      	blx	r8
 8007792:	3001      	adds	r0, #1
 8007794:	d01e      	beq.n	80077d4 <_printf_common+0xa4>
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	68e5      	ldr	r5, [r4, #12]
 800779a:	6832      	ldr	r2, [r6, #0]
 800779c:	f003 0306 	and.w	r3, r3, #6
 80077a0:	2b04      	cmp	r3, #4
 80077a2:	bf08      	it	eq
 80077a4:	1aad      	subeq	r5, r5, r2
 80077a6:	68a3      	ldr	r3, [r4, #8]
 80077a8:	6922      	ldr	r2, [r4, #16]
 80077aa:	bf0c      	ite	eq
 80077ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077b0:	2500      	movne	r5, #0
 80077b2:	4293      	cmp	r3, r2
 80077b4:	bfc4      	itt	gt
 80077b6:	1a9b      	subgt	r3, r3, r2
 80077b8:	18ed      	addgt	r5, r5, r3
 80077ba:	2600      	movs	r6, #0
 80077bc:	341a      	adds	r4, #26
 80077be:	42b5      	cmp	r5, r6
 80077c0:	d11a      	bne.n	80077f8 <_printf_common+0xc8>
 80077c2:	2000      	movs	r0, #0
 80077c4:	e008      	b.n	80077d8 <_printf_common+0xa8>
 80077c6:	2301      	movs	r3, #1
 80077c8:	4652      	mov	r2, sl
 80077ca:	4649      	mov	r1, r9
 80077cc:	4638      	mov	r0, r7
 80077ce:	47c0      	blx	r8
 80077d0:	3001      	adds	r0, #1
 80077d2:	d103      	bne.n	80077dc <_printf_common+0xac>
 80077d4:	f04f 30ff 	mov.w	r0, #4294967295
 80077d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077dc:	3501      	adds	r5, #1
 80077de:	e7c6      	b.n	800776e <_printf_common+0x3e>
 80077e0:	18e1      	adds	r1, r4, r3
 80077e2:	1c5a      	adds	r2, r3, #1
 80077e4:	2030      	movs	r0, #48	; 0x30
 80077e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077ea:	4422      	add	r2, r4
 80077ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077f4:	3302      	adds	r3, #2
 80077f6:	e7c7      	b.n	8007788 <_printf_common+0x58>
 80077f8:	2301      	movs	r3, #1
 80077fa:	4622      	mov	r2, r4
 80077fc:	4649      	mov	r1, r9
 80077fe:	4638      	mov	r0, r7
 8007800:	47c0      	blx	r8
 8007802:	3001      	adds	r0, #1
 8007804:	d0e6      	beq.n	80077d4 <_printf_common+0xa4>
 8007806:	3601      	adds	r6, #1
 8007808:	e7d9      	b.n	80077be <_printf_common+0x8e>
	...

0800780c <_printf_i>:
 800780c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007810:	7e0f      	ldrb	r7, [r1, #24]
 8007812:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007814:	2f78      	cmp	r7, #120	; 0x78
 8007816:	4691      	mov	r9, r2
 8007818:	4680      	mov	r8, r0
 800781a:	460c      	mov	r4, r1
 800781c:	469a      	mov	sl, r3
 800781e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007822:	d807      	bhi.n	8007834 <_printf_i+0x28>
 8007824:	2f62      	cmp	r7, #98	; 0x62
 8007826:	d80a      	bhi.n	800783e <_printf_i+0x32>
 8007828:	2f00      	cmp	r7, #0
 800782a:	f000 80d8 	beq.w	80079de <_printf_i+0x1d2>
 800782e:	2f58      	cmp	r7, #88	; 0x58
 8007830:	f000 80a3 	beq.w	800797a <_printf_i+0x16e>
 8007834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007838:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800783c:	e03a      	b.n	80078b4 <_printf_i+0xa8>
 800783e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007842:	2b15      	cmp	r3, #21
 8007844:	d8f6      	bhi.n	8007834 <_printf_i+0x28>
 8007846:	a101      	add	r1, pc, #4	; (adr r1, 800784c <_printf_i+0x40>)
 8007848:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800784c:	080078a5 	.word	0x080078a5
 8007850:	080078b9 	.word	0x080078b9
 8007854:	08007835 	.word	0x08007835
 8007858:	08007835 	.word	0x08007835
 800785c:	08007835 	.word	0x08007835
 8007860:	08007835 	.word	0x08007835
 8007864:	080078b9 	.word	0x080078b9
 8007868:	08007835 	.word	0x08007835
 800786c:	08007835 	.word	0x08007835
 8007870:	08007835 	.word	0x08007835
 8007874:	08007835 	.word	0x08007835
 8007878:	080079c5 	.word	0x080079c5
 800787c:	080078e9 	.word	0x080078e9
 8007880:	080079a7 	.word	0x080079a7
 8007884:	08007835 	.word	0x08007835
 8007888:	08007835 	.word	0x08007835
 800788c:	080079e7 	.word	0x080079e7
 8007890:	08007835 	.word	0x08007835
 8007894:	080078e9 	.word	0x080078e9
 8007898:	08007835 	.word	0x08007835
 800789c:	08007835 	.word	0x08007835
 80078a0:	080079af 	.word	0x080079af
 80078a4:	682b      	ldr	r3, [r5, #0]
 80078a6:	1d1a      	adds	r2, r3, #4
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	602a      	str	r2, [r5, #0]
 80078ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078b4:	2301      	movs	r3, #1
 80078b6:	e0a3      	b.n	8007a00 <_printf_i+0x1f4>
 80078b8:	6820      	ldr	r0, [r4, #0]
 80078ba:	6829      	ldr	r1, [r5, #0]
 80078bc:	0606      	lsls	r6, r0, #24
 80078be:	f101 0304 	add.w	r3, r1, #4
 80078c2:	d50a      	bpl.n	80078da <_printf_i+0xce>
 80078c4:	680e      	ldr	r6, [r1, #0]
 80078c6:	602b      	str	r3, [r5, #0]
 80078c8:	2e00      	cmp	r6, #0
 80078ca:	da03      	bge.n	80078d4 <_printf_i+0xc8>
 80078cc:	232d      	movs	r3, #45	; 0x2d
 80078ce:	4276      	negs	r6, r6
 80078d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078d4:	485e      	ldr	r0, [pc, #376]	; (8007a50 <_printf_i+0x244>)
 80078d6:	230a      	movs	r3, #10
 80078d8:	e019      	b.n	800790e <_printf_i+0x102>
 80078da:	680e      	ldr	r6, [r1, #0]
 80078dc:	602b      	str	r3, [r5, #0]
 80078de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80078e2:	bf18      	it	ne
 80078e4:	b236      	sxthne	r6, r6
 80078e6:	e7ef      	b.n	80078c8 <_printf_i+0xbc>
 80078e8:	682b      	ldr	r3, [r5, #0]
 80078ea:	6820      	ldr	r0, [r4, #0]
 80078ec:	1d19      	adds	r1, r3, #4
 80078ee:	6029      	str	r1, [r5, #0]
 80078f0:	0601      	lsls	r1, r0, #24
 80078f2:	d501      	bpl.n	80078f8 <_printf_i+0xec>
 80078f4:	681e      	ldr	r6, [r3, #0]
 80078f6:	e002      	b.n	80078fe <_printf_i+0xf2>
 80078f8:	0646      	lsls	r6, r0, #25
 80078fa:	d5fb      	bpl.n	80078f4 <_printf_i+0xe8>
 80078fc:	881e      	ldrh	r6, [r3, #0]
 80078fe:	4854      	ldr	r0, [pc, #336]	; (8007a50 <_printf_i+0x244>)
 8007900:	2f6f      	cmp	r7, #111	; 0x6f
 8007902:	bf0c      	ite	eq
 8007904:	2308      	moveq	r3, #8
 8007906:	230a      	movne	r3, #10
 8007908:	2100      	movs	r1, #0
 800790a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800790e:	6865      	ldr	r5, [r4, #4]
 8007910:	60a5      	str	r5, [r4, #8]
 8007912:	2d00      	cmp	r5, #0
 8007914:	bfa2      	ittt	ge
 8007916:	6821      	ldrge	r1, [r4, #0]
 8007918:	f021 0104 	bicge.w	r1, r1, #4
 800791c:	6021      	strge	r1, [r4, #0]
 800791e:	b90e      	cbnz	r6, 8007924 <_printf_i+0x118>
 8007920:	2d00      	cmp	r5, #0
 8007922:	d04d      	beq.n	80079c0 <_printf_i+0x1b4>
 8007924:	4615      	mov	r5, r2
 8007926:	fbb6 f1f3 	udiv	r1, r6, r3
 800792a:	fb03 6711 	mls	r7, r3, r1, r6
 800792e:	5dc7      	ldrb	r7, [r0, r7]
 8007930:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007934:	4637      	mov	r7, r6
 8007936:	42bb      	cmp	r3, r7
 8007938:	460e      	mov	r6, r1
 800793a:	d9f4      	bls.n	8007926 <_printf_i+0x11a>
 800793c:	2b08      	cmp	r3, #8
 800793e:	d10b      	bne.n	8007958 <_printf_i+0x14c>
 8007940:	6823      	ldr	r3, [r4, #0]
 8007942:	07de      	lsls	r6, r3, #31
 8007944:	d508      	bpl.n	8007958 <_printf_i+0x14c>
 8007946:	6923      	ldr	r3, [r4, #16]
 8007948:	6861      	ldr	r1, [r4, #4]
 800794a:	4299      	cmp	r1, r3
 800794c:	bfde      	ittt	le
 800794e:	2330      	movle	r3, #48	; 0x30
 8007950:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007954:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007958:	1b52      	subs	r2, r2, r5
 800795a:	6122      	str	r2, [r4, #16]
 800795c:	f8cd a000 	str.w	sl, [sp]
 8007960:	464b      	mov	r3, r9
 8007962:	aa03      	add	r2, sp, #12
 8007964:	4621      	mov	r1, r4
 8007966:	4640      	mov	r0, r8
 8007968:	f7ff fee2 	bl	8007730 <_printf_common>
 800796c:	3001      	adds	r0, #1
 800796e:	d14c      	bne.n	8007a0a <_printf_i+0x1fe>
 8007970:	f04f 30ff 	mov.w	r0, #4294967295
 8007974:	b004      	add	sp, #16
 8007976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800797a:	4835      	ldr	r0, [pc, #212]	; (8007a50 <_printf_i+0x244>)
 800797c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007980:	6829      	ldr	r1, [r5, #0]
 8007982:	6823      	ldr	r3, [r4, #0]
 8007984:	f851 6b04 	ldr.w	r6, [r1], #4
 8007988:	6029      	str	r1, [r5, #0]
 800798a:	061d      	lsls	r5, r3, #24
 800798c:	d514      	bpl.n	80079b8 <_printf_i+0x1ac>
 800798e:	07df      	lsls	r7, r3, #31
 8007990:	bf44      	itt	mi
 8007992:	f043 0320 	orrmi.w	r3, r3, #32
 8007996:	6023      	strmi	r3, [r4, #0]
 8007998:	b91e      	cbnz	r6, 80079a2 <_printf_i+0x196>
 800799a:	6823      	ldr	r3, [r4, #0]
 800799c:	f023 0320 	bic.w	r3, r3, #32
 80079a0:	6023      	str	r3, [r4, #0]
 80079a2:	2310      	movs	r3, #16
 80079a4:	e7b0      	b.n	8007908 <_printf_i+0xfc>
 80079a6:	6823      	ldr	r3, [r4, #0]
 80079a8:	f043 0320 	orr.w	r3, r3, #32
 80079ac:	6023      	str	r3, [r4, #0]
 80079ae:	2378      	movs	r3, #120	; 0x78
 80079b0:	4828      	ldr	r0, [pc, #160]	; (8007a54 <_printf_i+0x248>)
 80079b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079b6:	e7e3      	b.n	8007980 <_printf_i+0x174>
 80079b8:	0659      	lsls	r1, r3, #25
 80079ba:	bf48      	it	mi
 80079bc:	b2b6      	uxthmi	r6, r6
 80079be:	e7e6      	b.n	800798e <_printf_i+0x182>
 80079c0:	4615      	mov	r5, r2
 80079c2:	e7bb      	b.n	800793c <_printf_i+0x130>
 80079c4:	682b      	ldr	r3, [r5, #0]
 80079c6:	6826      	ldr	r6, [r4, #0]
 80079c8:	6961      	ldr	r1, [r4, #20]
 80079ca:	1d18      	adds	r0, r3, #4
 80079cc:	6028      	str	r0, [r5, #0]
 80079ce:	0635      	lsls	r5, r6, #24
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	d501      	bpl.n	80079d8 <_printf_i+0x1cc>
 80079d4:	6019      	str	r1, [r3, #0]
 80079d6:	e002      	b.n	80079de <_printf_i+0x1d2>
 80079d8:	0670      	lsls	r0, r6, #25
 80079da:	d5fb      	bpl.n	80079d4 <_printf_i+0x1c8>
 80079dc:	8019      	strh	r1, [r3, #0]
 80079de:	2300      	movs	r3, #0
 80079e0:	6123      	str	r3, [r4, #16]
 80079e2:	4615      	mov	r5, r2
 80079e4:	e7ba      	b.n	800795c <_printf_i+0x150>
 80079e6:	682b      	ldr	r3, [r5, #0]
 80079e8:	1d1a      	adds	r2, r3, #4
 80079ea:	602a      	str	r2, [r5, #0]
 80079ec:	681d      	ldr	r5, [r3, #0]
 80079ee:	6862      	ldr	r2, [r4, #4]
 80079f0:	2100      	movs	r1, #0
 80079f2:	4628      	mov	r0, r5
 80079f4:	f7f8 fbf4 	bl	80001e0 <memchr>
 80079f8:	b108      	cbz	r0, 80079fe <_printf_i+0x1f2>
 80079fa:	1b40      	subs	r0, r0, r5
 80079fc:	6060      	str	r0, [r4, #4]
 80079fe:	6863      	ldr	r3, [r4, #4]
 8007a00:	6123      	str	r3, [r4, #16]
 8007a02:	2300      	movs	r3, #0
 8007a04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a08:	e7a8      	b.n	800795c <_printf_i+0x150>
 8007a0a:	6923      	ldr	r3, [r4, #16]
 8007a0c:	462a      	mov	r2, r5
 8007a0e:	4649      	mov	r1, r9
 8007a10:	4640      	mov	r0, r8
 8007a12:	47d0      	blx	sl
 8007a14:	3001      	adds	r0, #1
 8007a16:	d0ab      	beq.n	8007970 <_printf_i+0x164>
 8007a18:	6823      	ldr	r3, [r4, #0]
 8007a1a:	079b      	lsls	r3, r3, #30
 8007a1c:	d413      	bmi.n	8007a46 <_printf_i+0x23a>
 8007a1e:	68e0      	ldr	r0, [r4, #12]
 8007a20:	9b03      	ldr	r3, [sp, #12]
 8007a22:	4298      	cmp	r0, r3
 8007a24:	bfb8      	it	lt
 8007a26:	4618      	movlt	r0, r3
 8007a28:	e7a4      	b.n	8007974 <_printf_i+0x168>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	4632      	mov	r2, r6
 8007a2e:	4649      	mov	r1, r9
 8007a30:	4640      	mov	r0, r8
 8007a32:	47d0      	blx	sl
 8007a34:	3001      	adds	r0, #1
 8007a36:	d09b      	beq.n	8007970 <_printf_i+0x164>
 8007a38:	3501      	adds	r5, #1
 8007a3a:	68e3      	ldr	r3, [r4, #12]
 8007a3c:	9903      	ldr	r1, [sp, #12]
 8007a3e:	1a5b      	subs	r3, r3, r1
 8007a40:	42ab      	cmp	r3, r5
 8007a42:	dcf2      	bgt.n	8007a2a <_printf_i+0x21e>
 8007a44:	e7eb      	b.n	8007a1e <_printf_i+0x212>
 8007a46:	2500      	movs	r5, #0
 8007a48:	f104 0619 	add.w	r6, r4, #25
 8007a4c:	e7f5      	b.n	8007a3a <_printf_i+0x22e>
 8007a4e:	bf00      	nop
 8007a50:	0800a7a2 	.word	0x0800a7a2
 8007a54:	0800a7b3 	.word	0x0800a7b3

08007a58 <siprintf>:
 8007a58:	b40e      	push	{r1, r2, r3}
 8007a5a:	b500      	push	{lr}
 8007a5c:	b09c      	sub	sp, #112	; 0x70
 8007a5e:	ab1d      	add	r3, sp, #116	; 0x74
 8007a60:	9002      	str	r0, [sp, #8]
 8007a62:	9006      	str	r0, [sp, #24]
 8007a64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a68:	4809      	ldr	r0, [pc, #36]	; (8007a90 <siprintf+0x38>)
 8007a6a:	9107      	str	r1, [sp, #28]
 8007a6c:	9104      	str	r1, [sp, #16]
 8007a6e:	4909      	ldr	r1, [pc, #36]	; (8007a94 <siprintf+0x3c>)
 8007a70:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a74:	9105      	str	r1, [sp, #20]
 8007a76:	6800      	ldr	r0, [r0, #0]
 8007a78:	9301      	str	r3, [sp, #4]
 8007a7a:	a902      	add	r1, sp, #8
 8007a7c:	f001 fb8a 	bl	8009194 <_svfiprintf_r>
 8007a80:	9b02      	ldr	r3, [sp, #8]
 8007a82:	2200      	movs	r2, #0
 8007a84:	701a      	strb	r2, [r3, #0]
 8007a86:	b01c      	add	sp, #112	; 0x70
 8007a88:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a8c:	b003      	add	sp, #12
 8007a8e:	4770      	bx	lr
 8007a90:	200000a4 	.word	0x200000a4
 8007a94:	ffff0208 	.word	0xffff0208

08007a98 <strncpy>:
 8007a98:	b510      	push	{r4, lr}
 8007a9a:	3901      	subs	r1, #1
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	b132      	cbz	r2, 8007aae <strncpy+0x16>
 8007aa0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007aa4:	f803 4b01 	strb.w	r4, [r3], #1
 8007aa8:	3a01      	subs	r2, #1
 8007aaa:	2c00      	cmp	r4, #0
 8007aac:	d1f7      	bne.n	8007a9e <strncpy+0x6>
 8007aae:	441a      	add	r2, r3
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d100      	bne.n	8007ab8 <strncpy+0x20>
 8007ab6:	bd10      	pop	{r4, pc}
 8007ab8:	f803 1b01 	strb.w	r1, [r3], #1
 8007abc:	e7f9      	b.n	8007ab2 <strncpy+0x1a>

08007abe <quorem>:
 8007abe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac2:	6903      	ldr	r3, [r0, #16]
 8007ac4:	690c      	ldr	r4, [r1, #16]
 8007ac6:	42a3      	cmp	r3, r4
 8007ac8:	4607      	mov	r7, r0
 8007aca:	f2c0 8081 	blt.w	8007bd0 <quorem+0x112>
 8007ace:	3c01      	subs	r4, #1
 8007ad0:	f101 0814 	add.w	r8, r1, #20
 8007ad4:	f100 0514 	add.w	r5, r0, #20
 8007ad8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007adc:	9301      	str	r3, [sp, #4]
 8007ade:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ae2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007aee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007af2:	fbb2 f6f3 	udiv	r6, r2, r3
 8007af6:	d331      	bcc.n	8007b5c <quorem+0x9e>
 8007af8:	f04f 0e00 	mov.w	lr, #0
 8007afc:	4640      	mov	r0, r8
 8007afe:	46ac      	mov	ip, r5
 8007b00:	46f2      	mov	sl, lr
 8007b02:	f850 2b04 	ldr.w	r2, [r0], #4
 8007b06:	b293      	uxth	r3, r2
 8007b08:	fb06 e303 	mla	r3, r6, r3, lr
 8007b0c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	ebaa 0303 	sub.w	r3, sl, r3
 8007b16:	f8dc a000 	ldr.w	sl, [ip]
 8007b1a:	0c12      	lsrs	r2, r2, #16
 8007b1c:	fa13 f38a 	uxtah	r3, r3, sl
 8007b20:	fb06 e202 	mla	r2, r6, r2, lr
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	9b00      	ldr	r3, [sp, #0]
 8007b28:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007b2c:	b292      	uxth	r2, r2
 8007b2e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007b32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b36:	f8bd 3000 	ldrh.w	r3, [sp]
 8007b3a:	4581      	cmp	r9, r0
 8007b3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b40:	f84c 3b04 	str.w	r3, [ip], #4
 8007b44:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007b48:	d2db      	bcs.n	8007b02 <quorem+0x44>
 8007b4a:	f855 300b 	ldr.w	r3, [r5, fp]
 8007b4e:	b92b      	cbnz	r3, 8007b5c <quorem+0x9e>
 8007b50:	9b01      	ldr	r3, [sp, #4]
 8007b52:	3b04      	subs	r3, #4
 8007b54:	429d      	cmp	r5, r3
 8007b56:	461a      	mov	r2, r3
 8007b58:	d32e      	bcc.n	8007bb8 <quorem+0xfa>
 8007b5a:	613c      	str	r4, [r7, #16]
 8007b5c:	4638      	mov	r0, r7
 8007b5e:	f001 f8c5 	bl	8008cec <__mcmp>
 8007b62:	2800      	cmp	r0, #0
 8007b64:	db24      	blt.n	8007bb0 <quorem+0xf2>
 8007b66:	3601      	adds	r6, #1
 8007b68:	4628      	mov	r0, r5
 8007b6a:	f04f 0c00 	mov.w	ip, #0
 8007b6e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007b72:	f8d0 e000 	ldr.w	lr, [r0]
 8007b76:	b293      	uxth	r3, r2
 8007b78:	ebac 0303 	sub.w	r3, ip, r3
 8007b7c:	0c12      	lsrs	r2, r2, #16
 8007b7e:	fa13 f38e 	uxtah	r3, r3, lr
 8007b82:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007b86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b90:	45c1      	cmp	r9, r8
 8007b92:	f840 3b04 	str.w	r3, [r0], #4
 8007b96:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007b9a:	d2e8      	bcs.n	8007b6e <quorem+0xb0>
 8007b9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ba0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ba4:	b922      	cbnz	r2, 8007bb0 <quorem+0xf2>
 8007ba6:	3b04      	subs	r3, #4
 8007ba8:	429d      	cmp	r5, r3
 8007baa:	461a      	mov	r2, r3
 8007bac:	d30a      	bcc.n	8007bc4 <quorem+0x106>
 8007bae:	613c      	str	r4, [r7, #16]
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	b003      	add	sp, #12
 8007bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb8:	6812      	ldr	r2, [r2, #0]
 8007bba:	3b04      	subs	r3, #4
 8007bbc:	2a00      	cmp	r2, #0
 8007bbe:	d1cc      	bne.n	8007b5a <quorem+0x9c>
 8007bc0:	3c01      	subs	r4, #1
 8007bc2:	e7c7      	b.n	8007b54 <quorem+0x96>
 8007bc4:	6812      	ldr	r2, [r2, #0]
 8007bc6:	3b04      	subs	r3, #4
 8007bc8:	2a00      	cmp	r2, #0
 8007bca:	d1f0      	bne.n	8007bae <quorem+0xf0>
 8007bcc:	3c01      	subs	r4, #1
 8007bce:	e7eb      	b.n	8007ba8 <quorem+0xea>
 8007bd0:	2000      	movs	r0, #0
 8007bd2:	e7ee      	b.n	8007bb2 <quorem+0xf4>
 8007bd4:	0000      	movs	r0, r0
	...

08007bd8 <_dtoa_r>:
 8007bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bdc:	ed2d 8b04 	vpush	{d8-d9}
 8007be0:	ec57 6b10 	vmov	r6, r7, d0
 8007be4:	b093      	sub	sp, #76	; 0x4c
 8007be6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007be8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007bec:	9106      	str	r1, [sp, #24]
 8007bee:	ee10 aa10 	vmov	sl, s0
 8007bf2:	4604      	mov	r4, r0
 8007bf4:	9209      	str	r2, [sp, #36]	; 0x24
 8007bf6:	930c      	str	r3, [sp, #48]	; 0x30
 8007bf8:	46bb      	mov	fp, r7
 8007bfa:	b975      	cbnz	r5, 8007c1a <_dtoa_r+0x42>
 8007bfc:	2010      	movs	r0, #16
 8007bfe:	f000 fddd 	bl	80087bc <malloc>
 8007c02:	4602      	mov	r2, r0
 8007c04:	6260      	str	r0, [r4, #36]	; 0x24
 8007c06:	b920      	cbnz	r0, 8007c12 <_dtoa_r+0x3a>
 8007c08:	4ba7      	ldr	r3, [pc, #668]	; (8007ea8 <_dtoa_r+0x2d0>)
 8007c0a:	21ea      	movs	r1, #234	; 0xea
 8007c0c:	48a7      	ldr	r0, [pc, #668]	; (8007eac <_dtoa_r+0x2d4>)
 8007c0e:	f001 fbd1 	bl	80093b4 <__assert_func>
 8007c12:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007c16:	6005      	str	r5, [r0, #0]
 8007c18:	60c5      	str	r5, [r0, #12]
 8007c1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c1c:	6819      	ldr	r1, [r3, #0]
 8007c1e:	b151      	cbz	r1, 8007c36 <_dtoa_r+0x5e>
 8007c20:	685a      	ldr	r2, [r3, #4]
 8007c22:	604a      	str	r2, [r1, #4]
 8007c24:	2301      	movs	r3, #1
 8007c26:	4093      	lsls	r3, r2
 8007c28:	608b      	str	r3, [r1, #8]
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	f000 fe1c 	bl	8008868 <_Bfree>
 8007c30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c32:	2200      	movs	r2, #0
 8007c34:	601a      	str	r2, [r3, #0]
 8007c36:	1e3b      	subs	r3, r7, #0
 8007c38:	bfaa      	itet	ge
 8007c3a:	2300      	movge	r3, #0
 8007c3c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007c40:	f8c8 3000 	strge.w	r3, [r8]
 8007c44:	4b9a      	ldr	r3, [pc, #616]	; (8007eb0 <_dtoa_r+0x2d8>)
 8007c46:	bfbc      	itt	lt
 8007c48:	2201      	movlt	r2, #1
 8007c4a:	f8c8 2000 	strlt.w	r2, [r8]
 8007c4e:	ea33 030b 	bics.w	r3, r3, fp
 8007c52:	d11b      	bne.n	8007c8c <_dtoa_r+0xb4>
 8007c54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c56:	f242 730f 	movw	r3, #9999	; 0x270f
 8007c5a:	6013      	str	r3, [r2, #0]
 8007c5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c60:	4333      	orrs	r3, r6
 8007c62:	f000 8592 	beq.w	800878a <_dtoa_r+0xbb2>
 8007c66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c68:	b963      	cbnz	r3, 8007c84 <_dtoa_r+0xac>
 8007c6a:	4b92      	ldr	r3, [pc, #584]	; (8007eb4 <_dtoa_r+0x2dc>)
 8007c6c:	e022      	b.n	8007cb4 <_dtoa_r+0xdc>
 8007c6e:	4b92      	ldr	r3, [pc, #584]	; (8007eb8 <_dtoa_r+0x2e0>)
 8007c70:	9301      	str	r3, [sp, #4]
 8007c72:	3308      	adds	r3, #8
 8007c74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007c76:	6013      	str	r3, [r2, #0]
 8007c78:	9801      	ldr	r0, [sp, #4]
 8007c7a:	b013      	add	sp, #76	; 0x4c
 8007c7c:	ecbd 8b04 	vpop	{d8-d9}
 8007c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c84:	4b8b      	ldr	r3, [pc, #556]	; (8007eb4 <_dtoa_r+0x2dc>)
 8007c86:	9301      	str	r3, [sp, #4]
 8007c88:	3303      	adds	r3, #3
 8007c8a:	e7f3      	b.n	8007c74 <_dtoa_r+0x9c>
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	2300      	movs	r3, #0
 8007c90:	4650      	mov	r0, sl
 8007c92:	4659      	mov	r1, fp
 8007c94:	f7f8 ff18 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c98:	ec4b ab19 	vmov	d9, sl, fp
 8007c9c:	4680      	mov	r8, r0
 8007c9e:	b158      	cbz	r0, 8007cb8 <_dtoa_r+0xe0>
 8007ca0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	6013      	str	r3, [r2, #0]
 8007ca6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f000 856b 	beq.w	8008784 <_dtoa_r+0xbac>
 8007cae:	4883      	ldr	r0, [pc, #524]	; (8007ebc <_dtoa_r+0x2e4>)
 8007cb0:	6018      	str	r0, [r3, #0]
 8007cb2:	1e43      	subs	r3, r0, #1
 8007cb4:	9301      	str	r3, [sp, #4]
 8007cb6:	e7df      	b.n	8007c78 <_dtoa_r+0xa0>
 8007cb8:	ec4b ab10 	vmov	d0, sl, fp
 8007cbc:	aa10      	add	r2, sp, #64	; 0x40
 8007cbe:	a911      	add	r1, sp, #68	; 0x44
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	f001 f8b9 	bl	8008e38 <__d2b>
 8007cc6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007cca:	ee08 0a10 	vmov	s16, r0
 8007cce:	2d00      	cmp	r5, #0
 8007cd0:	f000 8084 	beq.w	8007ddc <_dtoa_r+0x204>
 8007cd4:	ee19 3a90 	vmov	r3, s19
 8007cd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cdc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007ce0:	4656      	mov	r6, sl
 8007ce2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007ce6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007cea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007cee:	4b74      	ldr	r3, [pc, #464]	; (8007ec0 <_dtoa_r+0x2e8>)
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	4630      	mov	r0, r6
 8007cf4:	4639      	mov	r1, r7
 8007cf6:	f7f8 fac7 	bl	8000288 <__aeabi_dsub>
 8007cfa:	a365      	add	r3, pc, #404	; (adr r3, 8007e90 <_dtoa_r+0x2b8>)
 8007cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d00:	f7f8 fc7a 	bl	80005f8 <__aeabi_dmul>
 8007d04:	a364      	add	r3, pc, #400	; (adr r3, 8007e98 <_dtoa_r+0x2c0>)
 8007d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0a:	f7f8 fabf 	bl	800028c <__adddf3>
 8007d0e:	4606      	mov	r6, r0
 8007d10:	4628      	mov	r0, r5
 8007d12:	460f      	mov	r7, r1
 8007d14:	f7f8 fc06 	bl	8000524 <__aeabi_i2d>
 8007d18:	a361      	add	r3, pc, #388	; (adr r3, 8007ea0 <_dtoa_r+0x2c8>)
 8007d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1e:	f7f8 fc6b 	bl	80005f8 <__aeabi_dmul>
 8007d22:	4602      	mov	r2, r0
 8007d24:	460b      	mov	r3, r1
 8007d26:	4630      	mov	r0, r6
 8007d28:	4639      	mov	r1, r7
 8007d2a:	f7f8 faaf 	bl	800028c <__adddf3>
 8007d2e:	4606      	mov	r6, r0
 8007d30:	460f      	mov	r7, r1
 8007d32:	f7f8 ff11 	bl	8000b58 <__aeabi_d2iz>
 8007d36:	2200      	movs	r2, #0
 8007d38:	9000      	str	r0, [sp, #0]
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	4630      	mov	r0, r6
 8007d3e:	4639      	mov	r1, r7
 8007d40:	f7f8 fecc 	bl	8000adc <__aeabi_dcmplt>
 8007d44:	b150      	cbz	r0, 8007d5c <_dtoa_r+0x184>
 8007d46:	9800      	ldr	r0, [sp, #0]
 8007d48:	f7f8 fbec 	bl	8000524 <__aeabi_i2d>
 8007d4c:	4632      	mov	r2, r6
 8007d4e:	463b      	mov	r3, r7
 8007d50:	f7f8 feba 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d54:	b910      	cbnz	r0, 8007d5c <_dtoa_r+0x184>
 8007d56:	9b00      	ldr	r3, [sp, #0]
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	9300      	str	r3, [sp, #0]
 8007d5c:	9b00      	ldr	r3, [sp, #0]
 8007d5e:	2b16      	cmp	r3, #22
 8007d60:	d85a      	bhi.n	8007e18 <_dtoa_r+0x240>
 8007d62:	9a00      	ldr	r2, [sp, #0]
 8007d64:	4b57      	ldr	r3, [pc, #348]	; (8007ec4 <_dtoa_r+0x2ec>)
 8007d66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6e:	ec51 0b19 	vmov	r0, r1, d9
 8007d72:	f7f8 feb3 	bl	8000adc <__aeabi_dcmplt>
 8007d76:	2800      	cmp	r0, #0
 8007d78:	d050      	beq.n	8007e1c <_dtoa_r+0x244>
 8007d7a:	9b00      	ldr	r3, [sp, #0]
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	9300      	str	r3, [sp, #0]
 8007d80:	2300      	movs	r3, #0
 8007d82:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d86:	1b5d      	subs	r5, r3, r5
 8007d88:	1e6b      	subs	r3, r5, #1
 8007d8a:	9305      	str	r3, [sp, #20]
 8007d8c:	bf45      	ittet	mi
 8007d8e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007d92:	9304      	strmi	r3, [sp, #16]
 8007d94:	2300      	movpl	r3, #0
 8007d96:	2300      	movmi	r3, #0
 8007d98:	bf4c      	ite	mi
 8007d9a:	9305      	strmi	r3, [sp, #20]
 8007d9c:	9304      	strpl	r3, [sp, #16]
 8007d9e:	9b00      	ldr	r3, [sp, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	db3d      	blt.n	8007e20 <_dtoa_r+0x248>
 8007da4:	9b05      	ldr	r3, [sp, #20]
 8007da6:	9a00      	ldr	r2, [sp, #0]
 8007da8:	920a      	str	r2, [sp, #40]	; 0x28
 8007daa:	4413      	add	r3, r2
 8007dac:	9305      	str	r3, [sp, #20]
 8007dae:	2300      	movs	r3, #0
 8007db0:	9307      	str	r3, [sp, #28]
 8007db2:	9b06      	ldr	r3, [sp, #24]
 8007db4:	2b09      	cmp	r3, #9
 8007db6:	f200 8089 	bhi.w	8007ecc <_dtoa_r+0x2f4>
 8007dba:	2b05      	cmp	r3, #5
 8007dbc:	bfc4      	itt	gt
 8007dbe:	3b04      	subgt	r3, #4
 8007dc0:	9306      	strgt	r3, [sp, #24]
 8007dc2:	9b06      	ldr	r3, [sp, #24]
 8007dc4:	f1a3 0302 	sub.w	r3, r3, #2
 8007dc8:	bfcc      	ite	gt
 8007dca:	2500      	movgt	r5, #0
 8007dcc:	2501      	movle	r5, #1
 8007dce:	2b03      	cmp	r3, #3
 8007dd0:	f200 8087 	bhi.w	8007ee2 <_dtoa_r+0x30a>
 8007dd4:	e8df f003 	tbb	[pc, r3]
 8007dd8:	59383a2d 	.word	0x59383a2d
 8007ddc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007de0:	441d      	add	r5, r3
 8007de2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007de6:	2b20      	cmp	r3, #32
 8007de8:	bfc1      	itttt	gt
 8007dea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007dee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007df2:	fa0b f303 	lslgt.w	r3, fp, r3
 8007df6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007dfa:	bfda      	itte	le
 8007dfc:	f1c3 0320 	rsble	r3, r3, #32
 8007e00:	fa06 f003 	lslle.w	r0, r6, r3
 8007e04:	4318      	orrgt	r0, r3
 8007e06:	f7f8 fb7d 	bl	8000504 <__aeabi_ui2d>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	4606      	mov	r6, r0
 8007e0e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007e12:	3d01      	subs	r5, #1
 8007e14:	930e      	str	r3, [sp, #56]	; 0x38
 8007e16:	e76a      	b.n	8007cee <_dtoa_r+0x116>
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e7b2      	b.n	8007d82 <_dtoa_r+0x1aa>
 8007e1c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007e1e:	e7b1      	b.n	8007d84 <_dtoa_r+0x1ac>
 8007e20:	9b04      	ldr	r3, [sp, #16]
 8007e22:	9a00      	ldr	r2, [sp, #0]
 8007e24:	1a9b      	subs	r3, r3, r2
 8007e26:	9304      	str	r3, [sp, #16]
 8007e28:	4253      	negs	r3, r2
 8007e2a:	9307      	str	r3, [sp, #28]
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	930a      	str	r3, [sp, #40]	; 0x28
 8007e30:	e7bf      	b.n	8007db2 <_dtoa_r+0x1da>
 8007e32:	2300      	movs	r3, #0
 8007e34:	9308      	str	r3, [sp, #32]
 8007e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	dc55      	bgt.n	8007ee8 <_dtoa_r+0x310>
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e42:	461a      	mov	r2, r3
 8007e44:	9209      	str	r2, [sp, #36]	; 0x24
 8007e46:	e00c      	b.n	8007e62 <_dtoa_r+0x28a>
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e7f3      	b.n	8007e34 <_dtoa_r+0x25c>
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e50:	9308      	str	r3, [sp, #32]
 8007e52:	9b00      	ldr	r3, [sp, #0]
 8007e54:	4413      	add	r3, r2
 8007e56:	9302      	str	r3, [sp, #8]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	9303      	str	r3, [sp, #12]
 8007e5e:	bfb8      	it	lt
 8007e60:	2301      	movlt	r3, #1
 8007e62:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007e64:	2200      	movs	r2, #0
 8007e66:	6042      	str	r2, [r0, #4]
 8007e68:	2204      	movs	r2, #4
 8007e6a:	f102 0614 	add.w	r6, r2, #20
 8007e6e:	429e      	cmp	r6, r3
 8007e70:	6841      	ldr	r1, [r0, #4]
 8007e72:	d93d      	bls.n	8007ef0 <_dtoa_r+0x318>
 8007e74:	4620      	mov	r0, r4
 8007e76:	f000 fcb7 	bl	80087e8 <_Balloc>
 8007e7a:	9001      	str	r0, [sp, #4]
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	d13b      	bne.n	8007ef8 <_dtoa_r+0x320>
 8007e80:	4b11      	ldr	r3, [pc, #68]	; (8007ec8 <_dtoa_r+0x2f0>)
 8007e82:	4602      	mov	r2, r0
 8007e84:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007e88:	e6c0      	b.n	8007c0c <_dtoa_r+0x34>
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e7df      	b.n	8007e4e <_dtoa_r+0x276>
 8007e8e:	bf00      	nop
 8007e90:	636f4361 	.word	0x636f4361
 8007e94:	3fd287a7 	.word	0x3fd287a7
 8007e98:	8b60c8b3 	.word	0x8b60c8b3
 8007e9c:	3fc68a28 	.word	0x3fc68a28
 8007ea0:	509f79fb 	.word	0x509f79fb
 8007ea4:	3fd34413 	.word	0x3fd34413
 8007ea8:	0800a7d1 	.word	0x0800a7d1
 8007eac:	0800a7e8 	.word	0x0800a7e8
 8007eb0:	7ff00000 	.word	0x7ff00000
 8007eb4:	0800a7cd 	.word	0x0800a7cd
 8007eb8:	0800a7c4 	.word	0x0800a7c4
 8007ebc:	0800a7a1 	.word	0x0800a7a1
 8007ec0:	3ff80000 	.word	0x3ff80000
 8007ec4:	0800a8d8 	.word	0x0800a8d8
 8007ec8:	0800a843 	.word	0x0800a843
 8007ecc:	2501      	movs	r5, #1
 8007ece:	2300      	movs	r3, #0
 8007ed0:	9306      	str	r3, [sp, #24]
 8007ed2:	9508      	str	r5, [sp, #32]
 8007ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ed8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007edc:	2200      	movs	r2, #0
 8007ede:	2312      	movs	r3, #18
 8007ee0:	e7b0      	b.n	8007e44 <_dtoa_r+0x26c>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	9308      	str	r3, [sp, #32]
 8007ee6:	e7f5      	b.n	8007ed4 <_dtoa_r+0x2fc>
 8007ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007eee:	e7b8      	b.n	8007e62 <_dtoa_r+0x28a>
 8007ef0:	3101      	adds	r1, #1
 8007ef2:	6041      	str	r1, [r0, #4]
 8007ef4:	0052      	lsls	r2, r2, #1
 8007ef6:	e7b8      	b.n	8007e6a <_dtoa_r+0x292>
 8007ef8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007efa:	9a01      	ldr	r2, [sp, #4]
 8007efc:	601a      	str	r2, [r3, #0]
 8007efe:	9b03      	ldr	r3, [sp, #12]
 8007f00:	2b0e      	cmp	r3, #14
 8007f02:	f200 809d 	bhi.w	8008040 <_dtoa_r+0x468>
 8007f06:	2d00      	cmp	r5, #0
 8007f08:	f000 809a 	beq.w	8008040 <_dtoa_r+0x468>
 8007f0c:	9b00      	ldr	r3, [sp, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	dd32      	ble.n	8007f78 <_dtoa_r+0x3a0>
 8007f12:	4ab7      	ldr	r2, [pc, #732]	; (80081f0 <_dtoa_r+0x618>)
 8007f14:	f003 030f 	and.w	r3, r3, #15
 8007f18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007f1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f20:	9b00      	ldr	r3, [sp, #0]
 8007f22:	05d8      	lsls	r0, r3, #23
 8007f24:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007f28:	d516      	bpl.n	8007f58 <_dtoa_r+0x380>
 8007f2a:	4bb2      	ldr	r3, [pc, #712]	; (80081f4 <_dtoa_r+0x61c>)
 8007f2c:	ec51 0b19 	vmov	r0, r1, d9
 8007f30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f34:	f7f8 fc8a 	bl	800084c <__aeabi_ddiv>
 8007f38:	f007 070f 	and.w	r7, r7, #15
 8007f3c:	4682      	mov	sl, r0
 8007f3e:	468b      	mov	fp, r1
 8007f40:	2503      	movs	r5, #3
 8007f42:	4eac      	ldr	r6, [pc, #688]	; (80081f4 <_dtoa_r+0x61c>)
 8007f44:	b957      	cbnz	r7, 8007f5c <_dtoa_r+0x384>
 8007f46:	4642      	mov	r2, r8
 8007f48:	464b      	mov	r3, r9
 8007f4a:	4650      	mov	r0, sl
 8007f4c:	4659      	mov	r1, fp
 8007f4e:	f7f8 fc7d 	bl	800084c <__aeabi_ddiv>
 8007f52:	4682      	mov	sl, r0
 8007f54:	468b      	mov	fp, r1
 8007f56:	e028      	b.n	8007faa <_dtoa_r+0x3d2>
 8007f58:	2502      	movs	r5, #2
 8007f5a:	e7f2      	b.n	8007f42 <_dtoa_r+0x36a>
 8007f5c:	07f9      	lsls	r1, r7, #31
 8007f5e:	d508      	bpl.n	8007f72 <_dtoa_r+0x39a>
 8007f60:	4640      	mov	r0, r8
 8007f62:	4649      	mov	r1, r9
 8007f64:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007f68:	f7f8 fb46 	bl	80005f8 <__aeabi_dmul>
 8007f6c:	3501      	adds	r5, #1
 8007f6e:	4680      	mov	r8, r0
 8007f70:	4689      	mov	r9, r1
 8007f72:	107f      	asrs	r7, r7, #1
 8007f74:	3608      	adds	r6, #8
 8007f76:	e7e5      	b.n	8007f44 <_dtoa_r+0x36c>
 8007f78:	f000 809b 	beq.w	80080b2 <_dtoa_r+0x4da>
 8007f7c:	9b00      	ldr	r3, [sp, #0]
 8007f7e:	4f9d      	ldr	r7, [pc, #628]	; (80081f4 <_dtoa_r+0x61c>)
 8007f80:	425e      	negs	r6, r3
 8007f82:	4b9b      	ldr	r3, [pc, #620]	; (80081f0 <_dtoa_r+0x618>)
 8007f84:	f006 020f 	and.w	r2, r6, #15
 8007f88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f90:	ec51 0b19 	vmov	r0, r1, d9
 8007f94:	f7f8 fb30 	bl	80005f8 <__aeabi_dmul>
 8007f98:	1136      	asrs	r6, r6, #4
 8007f9a:	4682      	mov	sl, r0
 8007f9c:	468b      	mov	fp, r1
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	2502      	movs	r5, #2
 8007fa2:	2e00      	cmp	r6, #0
 8007fa4:	d17a      	bne.n	800809c <_dtoa_r+0x4c4>
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1d3      	bne.n	8007f52 <_dtoa_r+0x37a>
 8007faa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f000 8082 	beq.w	80080b6 <_dtoa_r+0x4de>
 8007fb2:	4b91      	ldr	r3, [pc, #580]	; (80081f8 <_dtoa_r+0x620>)
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	4650      	mov	r0, sl
 8007fb8:	4659      	mov	r1, fp
 8007fba:	f7f8 fd8f 	bl	8000adc <__aeabi_dcmplt>
 8007fbe:	2800      	cmp	r0, #0
 8007fc0:	d079      	beq.n	80080b6 <_dtoa_r+0x4de>
 8007fc2:	9b03      	ldr	r3, [sp, #12]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d076      	beq.n	80080b6 <_dtoa_r+0x4de>
 8007fc8:	9b02      	ldr	r3, [sp, #8]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	dd36      	ble.n	800803c <_dtoa_r+0x464>
 8007fce:	9b00      	ldr	r3, [sp, #0]
 8007fd0:	4650      	mov	r0, sl
 8007fd2:	4659      	mov	r1, fp
 8007fd4:	1e5f      	subs	r7, r3, #1
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	4b88      	ldr	r3, [pc, #544]	; (80081fc <_dtoa_r+0x624>)
 8007fda:	f7f8 fb0d 	bl	80005f8 <__aeabi_dmul>
 8007fde:	9e02      	ldr	r6, [sp, #8]
 8007fe0:	4682      	mov	sl, r0
 8007fe2:	468b      	mov	fp, r1
 8007fe4:	3501      	adds	r5, #1
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	f7f8 fa9c 	bl	8000524 <__aeabi_i2d>
 8007fec:	4652      	mov	r2, sl
 8007fee:	465b      	mov	r3, fp
 8007ff0:	f7f8 fb02 	bl	80005f8 <__aeabi_dmul>
 8007ff4:	4b82      	ldr	r3, [pc, #520]	; (8008200 <_dtoa_r+0x628>)
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f7f8 f948 	bl	800028c <__adddf3>
 8007ffc:	46d0      	mov	r8, sl
 8007ffe:	46d9      	mov	r9, fp
 8008000:	4682      	mov	sl, r0
 8008002:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008006:	2e00      	cmp	r6, #0
 8008008:	d158      	bne.n	80080bc <_dtoa_r+0x4e4>
 800800a:	4b7e      	ldr	r3, [pc, #504]	; (8008204 <_dtoa_r+0x62c>)
 800800c:	2200      	movs	r2, #0
 800800e:	4640      	mov	r0, r8
 8008010:	4649      	mov	r1, r9
 8008012:	f7f8 f939 	bl	8000288 <__aeabi_dsub>
 8008016:	4652      	mov	r2, sl
 8008018:	465b      	mov	r3, fp
 800801a:	4680      	mov	r8, r0
 800801c:	4689      	mov	r9, r1
 800801e:	f7f8 fd7b 	bl	8000b18 <__aeabi_dcmpgt>
 8008022:	2800      	cmp	r0, #0
 8008024:	f040 8295 	bne.w	8008552 <_dtoa_r+0x97a>
 8008028:	4652      	mov	r2, sl
 800802a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800802e:	4640      	mov	r0, r8
 8008030:	4649      	mov	r1, r9
 8008032:	f7f8 fd53 	bl	8000adc <__aeabi_dcmplt>
 8008036:	2800      	cmp	r0, #0
 8008038:	f040 8289 	bne.w	800854e <_dtoa_r+0x976>
 800803c:	ec5b ab19 	vmov	sl, fp, d9
 8008040:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008042:	2b00      	cmp	r3, #0
 8008044:	f2c0 8148 	blt.w	80082d8 <_dtoa_r+0x700>
 8008048:	9a00      	ldr	r2, [sp, #0]
 800804a:	2a0e      	cmp	r2, #14
 800804c:	f300 8144 	bgt.w	80082d8 <_dtoa_r+0x700>
 8008050:	4b67      	ldr	r3, [pc, #412]	; (80081f0 <_dtoa_r+0x618>)
 8008052:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008056:	e9d3 8900 	ldrd	r8, r9, [r3]
 800805a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800805c:	2b00      	cmp	r3, #0
 800805e:	f280 80d5 	bge.w	800820c <_dtoa_r+0x634>
 8008062:	9b03      	ldr	r3, [sp, #12]
 8008064:	2b00      	cmp	r3, #0
 8008066:	f300 80d1 	bgt.w	800820c <_dtoa_r+0x634>
 800806a:	f040 826f 	bne.w	800854c <_dtoa_r+0x974>
 800806e:	4b65      	ldr	r3, [pc, #404]	; (8008204 <_dtoa_r+0x62c>)
 8008070:	2200      	movs	r2, #0
 8008072:	4640      	mov	r0, r8
 8008074:	4649      	mov	r1, r9
 8008076:	f7f8 fabf 	bl	80005f8 <__aeabi_dmul>
 800807a:	4652      	mov	r2, sl
 800807c:	465b      	mov	r3, fp
 800807e:	f7f8 fd41 	bl	8000b04 <__aeabi_dcmpge>
 8008082:	9e03      	ldr	r6, [sp, #12]
 8008084:	4637      	mov	r7, r6
 8008086:	2800      	cmp	r0, #0
 8008088:	f040 8245 	bne.w	8008516 <_dtoa_r+0x93e>
 800808c:	9d01      	ldr	r5, [sp, #4]
 800808e:	2331      	movs	r3, #49	; 0x31
 8008090:	f805 3b01 	strb.w	r3, [r5], #1
 8008094:	9b00      	ldr	r3, [sp, #0]
 8008096:	3301      	adds	r3, #1
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	e240      	b.n	800851e <_dtoa_r+0x946>
 800809c:	07f2      	lsls	r2, r6, #31
 800809e:	d505      	bpl.n	80080ac <_dtoa_r+0x4d4>
 80080a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080a4:	f7f8 faa8 	bl	80005f8 <__aeabi_dmul>
 80080a8:	3501      	adds	r5, #1
 80080aa:	2301      	movs	r3, #1
 80080ac:	1076      	asrs	r6, r6, #1
 80080ae:	3708      	adds	r7, #8
 80080b0:	e777      	b.n	8007fa2 <_dtoa_r+0x3ca>
 80080b2:	2502      	movs	r5, #2
 80080b4:	e779      	b.n	8007faa <_dtoa_r+0x3d2>
 80080b6:	9f00      	ldr	r7, [sp, #0]
 80080b8:	9e03      	ldr	r6, [sp, #12]
 80080ba:	e794      	b.n	8007fe6 <_dtoa_r+0x40e>
 80080bc:	9901      	ldr	r1, [sp, #4]
 80080be:	4b4c      	ldr	r3, [pc, #304]	; (80081f0 <_dtoa_r+0x618>)
 80080c0:	4431      	add	r1, r6
 80080c2:	910d      	str	r1, [sp, #52]	; 0x34
 80080c4:	9908      	ldr	r1, [sp, #32]
 80080c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80080ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80080ce:	2900      	cmp	r1, #0
 80080d0:	d043      	beq.n	800815a <_dtoa_r+0x582>
 80080d2:	494d      	ldr	r1, [pc, #308]	; (8008208 <_dtoa_r+0x630>)
 80080d4:	2000      	movs	r0, #0
 80080d6:	f7f8 fbb9 	bl	800084c <__aeabi_ddiv>
 80080da:	4652      	mov	r2, sl
 80080dc:	465b      	mov	r3, fp
 80080de:	f7f8 f8d3 	bl	8000288 <__aeabi_dsub>
 80080e2:	9d01      	ldr	r5, [sp, #4]
 80080e4:	4682      	mov	sl, r0
 80080e6:	468b      	mov	fp, r1
 80080e8:	4649      	mov	r1, r9
 80080ea:	4640      	mov	r0, r8
 80080ec:	f7f8 fd34 	bl	8000b58 <__aeabi_d2iz>
 80080f0:	4606      	mov	r6, r0
 80080f2:	f7f8 fa17 	bl	8000524 <__aeabi_i2d>
 80080f6:	4602      	mov	r2, r0
 80080f8:	460b      	mov	r3, r1
 80080fa:	4640      	mov	r0, r8
 80080fc:	4649      	mov	r1, r9
 80080fe:	f7f8 f8c3 	bl	8000288 <__aeabi_dsub>
 8008102:	3630      	adds	r6, #48	; 0x30
 8008104:	f805 6b01 	strb.w	r6, [r5], #1
 8008108:	4652      	mov	r2, sl
 800810a:	465b      	mov	r3, fp
 800810c:	4680      	mov	r8, r0
 800810e:	4689      	mov	r9, r1
 8008110:	f7f8 fce4 	bl	8000adc <__aeabi_dcmplt>
 8008114:	2800      	cmp	r0, #0
 8008116:	d163      	bne.n	80081e0 <_dtoa_r+0x608>
 8008118:	4642      	mov	r2, r8
 800811a:	464b      	mov	r3, r9
 800811c:	4936      	ldr	r1, [pc, #216]	; (80081f8 <_dtoa_r+0x620>)
 800811e:	2000      	movs	r0, #0
 8008120:	f7f8 f8b2 	bl	8000288 <__aeabi_dsub>
 8008124:	4652      	mov	r2, sl
 8008126:	465b      	mov	r3, fp
 8008128:	f7f8 fcd8 	bl	8000adc <__aeabi_dcmplt>
 800812c:	2800      	cmp	r0, #0
 800812e:	f040 80b5 	bne.w	800829c <_dtoa_r+0x6c4>
 8008132:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008134:	429d      	cmp	r5, r3
 8008136:	d081      	beq.n	800803c <_dtoa_r+0x464>
 8008138:	4b30      	ldr	r3, [pc, #192]	; (80081fc <_dtoa_r+0x624>)
 800813a:	2200      	movs	r2, #0
 800813c:	4650      	mov	r0, sl
 800813e:	4659      	mov	r1, fp
 8008140:	f7f8 fa5a 	bl	80005f8 <__aeabi_dmul>
 8008144:	4b2d      	ldr	r3, [pc, #180]	; (80081fc <_dtoa_r+0x624>)
 8008146:	4682      	mov	sl, r0
 8008148:	468b      	mov	fp, r1
 800814a:	4640      	mov	r0, r8
 800814c:	4649      	mov	r1, r9
 800814e:	2200      	movs	r2, #0
 8008150:	f7f8 fa52 	bl	80005f8 <__aeabi_dmul>
 8008154:	4680      	mov	r8, r0
 8008156:	4689      	mov	r9, r1
 8008158:	e7c6      	b.n	80080e8 <_dtoa_r+0x510>
 800815a:	4650      	mov	r0, sl
 800815c:	4659      	mov	r1, fp
 800815e:	f7f8 fa4b 	bl	80005f8 <__aeabi_dmul>
 8008162:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008164:	9d01      	ldr	r5, [sp, #4]
 8008166:	930f      	str	r3, [sp, #60]	; 0x3c
 8008168:	4682      	mov	sl, r0
 800816a:	468b      	mov	fp, r1
 800816c:	4649      	mov	r1, r9
 800816e:	4640      	mov	r0, r8
 8008170:	f7f8 fcf2 	bl	8000b58 <__aeabi_d2iz>
 8008174:	4606      	mov	r6, r0
 8008176:	f7f8 f9d5 	bl	8000524 <__aeabi_i2d>
 800817a:	3630      	adds	r6, #48	; 0x30
 800817c:	4602      	mov	r2, r0
 800817e:	460b      	mov	r3, r1
 8008180:	4640      	mov	r0, r8
 8008182:	4649      	mov	r1, r9
 8008184:	f7f8 f880 	bl	8000288 <__aeabi_dsub>
 8008188:	f805 6b01 	strb.w	r6, [r5], #1
 800818c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800818e:	429d      	cmp	r5, r3
 8008190:	4680      	mov	r8, r0
 8008192:	4689      	mov	r9, r1
 8008194:	f04f 0200 	mov.w	r2, #0
 8008198:	d124      	bne.n	80081e4 <_dtoa_r+0x60c>
 800819a:	4b1b      	ldr	r3, [pc, #108]	; (8008208 <_dtoa_r+0x630>)
 800819c:	4650      	mov	r0, sl
 800819e:	4659      	mov	r1, fp
 80081a0:	f7f8 f874 	bl	800028c <__adddf3>
 80081a4:	4602      	mov	r2, r0
 80081a6:	460b      	mov	r3, r1
 80081a8:	4640      	mov	r0, r8
 80081aa:	4649      	mov	r1, r9
 80081ac:	f7f8 fcb4 	bl	8000b18 <__aeabi_dcmpgt>
 80081b0:	2800      	cmp	r0, #0
 80081b2:	d173      	bne.n	800829c <_dtoa_r+0x6c4>
 80081b4:	4652      	mov	r2, sl
 80081b6:	465b      	mov	r3, fp
 80081b8:	4913      	ldr	r1, [pc, #76]	; (8008208 <_dtoa_r+0x630>)
 80081ba:	2000      	movs	r0, #0
 80081bc:	f7f8 f864 	bl	8000288 <__aeabi_dsub>
 80081c0:	4602      	mov	r2, r0
 80081c2:	460b      	mov	r3, r1
 80081c4:	4640      	mov	r0, r8
 80081c6:	4649      	mov	r1, r9
 80081c8:	f7f8 fc88 	bl	8000adc <__aeabi_dcmplt>
 80081cc:	2800      	cmp	r0, #0
 80081ce:	f43f af35 	beq.w	800803c <_dtoa_r+0x464>
 80081d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80081d4:	1e6b      	subs	r3, r5, #1
 80081d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80081d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80081dc:	2b30      	cmp	r3, #48	; 0x30
 80081de:	d0f8      	beq.n	80081d2 <_dtoa_r+0x5fa>
 80081e0:	9700      	str	r7, [sp, #0]
 80081e2:	e049      	b.n	8008278 <_dtoa_r+0x6a0>
 80081e4:	4b05      	ldr	r3, [pc, #20]	; (80081fc <_dtoa_r+0x624>)
 80081e6:	f7f8 fa07 	bl	80005f8 <__aeabi_dmul>
 80081ea:	4680      	mov	r8, r0
 80081ec:	4689      	mov	r9, r1
 80081ee:	e7bd      	b.n	800816c <_dtoa_r+0x594>
 80081f0:	0800a8d8 	.word	0x0800a8d8
 80081f4:	0800a8b0 	.word	0x0800a8b0
 80081f8:	3ff00000 	.word	0x3ff00000
 80081fc:	40240000 	.word	0x40240000
 8008200:	401c0000 	.word	0x401c0000
 8008204:	40140000 	.word	0x40140000
 8008208:	3fe00000 	.word	0x3fe00000
 800820c:	9d01      	ldr	r5, [sp, #4]
 800820e:	4656      	mov	r6, sl
 8008210:	465f      	mov	r7, fp
 8008212:	4642      	mov	r2, r8
 8008214:	464b      	mov	r3, r9
 8008216:	4630      	mov	r0, r6
 8008218:	4639      	mov	r1, r7
 800821a:	f7f8 fb17 	bl	800084c <__aeabi_ddiv>
 800821e:	f7f8 fc9b 	bl	8000b58 <__aeabi_d2iz>
 8008222:	4682      	mov	sl, r0
 8008224:	f7f8 f97e 	bl	8000524 <__aeabi_i2d>
 8008228:	4642      	mov	r2, r8
 800822a:	464b      	mov	r3, r9
 800822c:	f7f8 f9e4 	bl	80005f8 <__aeabi_dmul>
 8008230:	4602      	mov	r2, r0
 8008232:	460b      	mov	r3, r1
 8008234:	4630      	mov	r0, r6
 8008236:	4639      	mov	r1, r7
 8008238:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800823c:	f7f8 f824 	bl	8000288 <__aeabi_dsub>
 8008240:	f805 6b01 	strb.w	r6, [r5], #1
 8008244:	9e01      	ldr	r6, [sp, #4]
 8008246:	9f03      	ldr	r7, [sp, #12]
 8008248:	1bae      	subs	r6, r5, r6
 800824a:	42b7      	cmp	r7, r6
 800824c:	4602      	mov	r2, r0
 800824e:	460b      	mov	r3, r1
 8008250:	d135      	bne.n	80082be <_dtoa_r+0x6e6>
 8008252:	f7f8 f81b 	bl	800028c <__adddf3>
 8008256:	4642      	mov	r2, r8
 8008258:	464b      	mov	r3, r9
 800825a:	4606      	mov	r6, r0
 800825c:	460f      	mov	r7, r1
 800825e:	f7f8 fc5b 	bl	8000b18 <__aeabi_dcmpgt>
 8008262:	b9d0      	cbnz	r0, 800829a <_dtoa_r+0x6c2>
 8008264:	4642      	mov	r2, r8
 8008266:	464b      	mov	r3, r9
 8008268:	4630      	mov	r0, r6
 800826a:	4639      	mov	r1, r7
 800826c:	f7f8 fc2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008270:	b110      	cbz	r0, 8008278 <_dtoa_r+0x6a0>
 8008272:	f01a 0f01 	tst.w	sl, #1
 8008276:	d110      	bne.n	800829a <_dtoa_r+0x6c2>
 8008278:	4620      	mov	r0, r4
 800827a:	ee18 1a10 	vmov	r1, s16
 800827e:	f000 faf3 	bl	8008868 <_Bfree>
 8008282:	2300      	movs	r3, #0
 8008284:	9800      	ldr	r0, [sp, #0]
 8008286:	702b      	strb	r3, [r5, #0]
 8008288:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800828a:	3001      	adds	r0, #1
 800828c:	6018      	str	r0, [r3, #0]
 800828e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008290:	2b00      	cmp	r3, #0
 8008292:	f43f acf1 	beq.w	8007c78 <_dtoa_r+0xa0>
 8008296:	601d      	str	r5, [r3, #0]
 8008298:	e4ee      	b.n	8007c78 <_dtoa_r+0xa0>
 800829a:	9f00      	ldr	r7, [sp, #0]
 800829c:	462b      	mov	r3, r5
 800829e:	461d      	mov	r5, r3
 80082a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082a4:	2a39      	cmp	r2, #57	; 0x39
 80082a6:	d106      	bne.n	80082b6 <_dtoa_r+0x6de>
 80082a8:	9a01      	ldr	r2, [sp, #4]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d1f7      	bne.n	800829e <_dtoa_r+0x6c6>
 80082ae:	9901      	ldr	r1, [sp, #4]
 80082b0:	2230      	movs	r2, #48	; 0x30
 80082b2:	3701      	adds	r7, #1
 80082b4:	700a      	strb	r2, [r1, #0]
 80082b6:	781a      	ldrb	r2, [r3, #0]
 80082b8:	3201      	adds	r2, #1
 80082ba:	701a      	strb	r2, [r3, #0]
 80082bc:	e790      	b.n	80081e0 <_dtoa_r+0x608>
 80082be:	4ba6      	ldr	r3, [pc, #664]	; (8008558 <_dtoa_r+0x980>)
 80082c0:	2200      	movs	r2, #0
 80082c2:	f7f8 f999 	bl	80005f8 <__aeabi_dmul>
 80082c6:	2200      	movs	r2, #0
 80082c8:	2300      	movs	r3, #0
 80082ca:	4606      	mov	r6, r0
 80082cc:	460f      	mov	r7, r1
 80082ce:	f7f8 fbfb 	bl	8000ac8 <__aeabi_dcmpeq>
 80082d2:	2800      	cmp	r0, #0
 80082d4:	d09d      	beq.n	8008212 <_dtoa_r+0x63a>
 80082d6:	e7cf      	b.n	8008278 <_dtoa_r+0x6a0>
 80082d8:	9a08      	ldr	r2, [sp, #32]
 80082da:	2a00      	cmp	r2, #0
 80082dc:	f000 80d7 	beq.w	800848e <_dtoa_r+0x8b6>
 80082e0:	9a06      	ldr	r2, [sp, #24]
 80082e2:	2a01      	cmp	r2, #1
 80082e4:	f300 80ba 	bgt.w	800845c <_dtoa_r+0x884>
 80082e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082ea:	2a00      	cmp	r2, #0
 80082ec:	f000 80b2 	beq.w	8008454 <_dtoa_r+0x87c>
 80082f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80082f4:	9e07      	ldr	r6, [sp, #28]
 80082f6:	9d04      	ldr	r5, [sp, #16]
 80082f8:	9a04      	ldr	r2, [sp, #16]
 80082fa:	441a      	add	r2, r3
 80082fc:	9204      	str	r2, [sp, #16]
 80082fe:	9a05      	ldr	r2, [sp, #20]
 8008300:	2101      	movs	r1, #1
 8008302:	441a      	add	r2, r3
 8008304:	4620      	mov	r0, r4
 8008306:	9205      	str	r2, [sp, #20]
 8008308:	f000 fb66 	bl	80089d8 <__i2b>
 800830c:	4607      	mov	r7, r0
 800830e:	2d00      	cmp	r5, #0
 8008310:	dd0c      	ble.n	800832c <_dtoa_r+0x754>
 8008312:	9b05      	ldr	r3, [sp, #20]
 8008314:	2b00      	cmp	r3, #0
 8008316:	dd09      	ble.n	800832c <_dtoa_r+0x754>
 8008318:	42ab      	cmp	r3, r5
 800831a:	9a04      	ldr	r2, [sp, #16]
 800831c:	bfa8      	it	ge
 800831e:	462b      	movge	r3, r5
 8008320:	1ad2      	subs	r2, r2, r3
 8008322:	9204      	str	r2, [sp, #16]
 8008324:	9a05      	ldr	r2, [sp, #20]
 8008326:	1aed      	subs	r5, r5, r3
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	9305      	str	r3, [sp, #20]
 800832c:	9b07      	ldr	r3, [sp, #28]
 800832e:	b31b      	cbz	r3, 8008378 <_dtoa_r+0x7a0>
 8008330:	9b08      	ldr	r3, [sp, #32]
 8008332:	2b00      	cmp	r3, #0
 8008334:	f000 80af 	beq.w	8008496 <_dtoa_r+0x8be>
 8008338:	2e00      	cmp	r6, #0
 800833a:	dd13      	ble.n	8008364 <_dtoa_r+0x78c>
 800833c:	4639      	mov	r1, r7
 800833e:	4632      	mov	r2, r6
 8008340:	4620      	mov	r0, r4
 8008342:	f000 fc09 	bl	8008b58 <__pow5mult>
 8008346:	ee18 2a10 	vmov	r2, s16
 800834a:	4601      	mov	r1, r0
 800834c:	4607      	mov	r7, r0
 800834e:	4620      	mov	r0, r4
 8008350:	f000 fb58 	bl	8008a04 <__multiply>
 8008354:	ee18 1a10 	vmov	r1, s16
 8008358:	4680      	mov	r8, r0
 800835a:	4620      	mov	r0, r4
 800835c:	f000 fa84 	bl	8008868 <_Bfree>
 8008360:	ee08 8a10 	vmov	s16, r8
 8008364:	9b07      	ldr	r3, [sp, #28]
 8008366:	1b9a      	subs	r2, r3, r6
 8008368:	d006      	beq.n	8008378 <_dtoa_r+0x7a0>
 800836a:	ee18 1a10 	vmov	r1, s16
 800836e:	4620      	mov	r0, r4
 8008370:	f000 fbf2 	bl	8008b58 <__pow5mult>
 8008374:	ee08 0a10 	vmov	s16, r0
 8008378:	2101      	movs	r1, #1
 800837a:	4620      	mov	r0, r4
 800837c:	f000 fb2c 	bl	80089d8 <__i2b>
 8008380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008382:	2b00      	cmp	r3, #0
 8008384:	4606      	mov	r6, r0
 8008386:	f340 8088 	ble.w	800849a <_dtoa_r+0x8c2>
 800838a:	461a      	mov	r2, r3
 800838c:	4601      	mov	r1, r0
 800838e:	4620      	mov	r0, r4
 8008390:	f000 fbe2 	bl	8008b58 <__pow5mult>
 8008394:	9b06      	ldr	r3, [sp, #24]
 8008396:	2b01      	cmp	r3, #1
 8008398:	4606      	mov	r6, r0
 800839a:	f340 8081 	ble.w	80084a0 <_dtoa_r+0x8c8>
 800839e:	f04f 0800 	mov.w	r8, #0
 80083a2:	6933      	ldr	r3, [r6, #16]
 80083a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80083a8:	6918      	ldr	r0, [r3, #16]
 80083aa:	f000 fac5 	bl	8008938 <__hi0bits>
 80083ae:	f1c0 0020 	rsb	r0, r0, #32
 80083b2:	9b05      	ldr	r3, [sp, #20]
 80083b4:	4418      	add	r0, r3
 80083b6:	f010 001f 	ands.w	r0, r0, #31
 80083ba:	f000 8092 	beq.w	80084e2 <_dtoa_r+0x90a>
 80083be:	f1c0 0320 	rsb	r3, r0, #32
 80083c2:	2b04      	cmp	r3, #4
 80083c4:	f340 808a 	ble.w	80084dc <_dtoa_r+0x904>
 80083c8:	f1c0 001c 	rsb	r0, r0, #28
 80083cc:	9b04      	ldr	r3, [sp, #16]
 80083ce:	4403      	add	r3, r0
 80083d0:	9304      	str	r3, [sp, #16]
 80083d2:	9b05      	ldr	r3, [sp, #20]
 80083d4:	4403      	add	r3, r0
 80083d6:	4405      	add	r5, r0
 80083d8:	9305      	str	r3, [sp, #20]
 80083da:	9b04      	ldr	r3, [sp, #16]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	dd07      	ble.n	80083f0 <_dtoa_r+0x818>
 80083e0:	ee18 1a10 	vmov	r1, s16
 80083e4:	461a      	mov	r2, r3
 80083e6:	4620      	mov	r0, r4
 80083e8:	f000 fc10 	bl	8008c0c <__lshift>
 80083ec:	ee08 0a10 	vmov	s16, r0
 80083f0:	9b05      	ldr	r3, [sp, #20]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	dd05      	ble.n	8008402 <_dtoa_r+0x82a>
 80083f6:	4631      	mov	r1, r6
 80083f8:	461a      	mov	r2, r3
 80083fa:	4620      	mov	r0, r4
 80083fc:	f000 fc06 	bl	8008c0c <__lshift>
 8008400:	4606      	mov	r6, r0
 8008402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008404:	2b00      	cmp	r3, #0
 8008406:	d06e      	beq.n	80084e6 <_dtoa_r+0x90e>
 8008408:	ee18 0a10 	vmov	r0, s16
 800840c:	4631      	mov	r1, r6
 800840e:	f000 fc6d 	bl	8008cec <__mcmp>
 8008412:	2800      	cmp	r0, #0
 8008414:	da67      	bge.n	80084e6 <_dtoa_r+0x90e>
 8008416:	9b00      	ldr	r3, [sp, #0]
 8008418:	3b01      	subs	r3, #1
 800841a:	ee18 1a10 	vmov	r1, s16
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	220a      	movs	r2, #10
 8008422:	2300      	movs	r3, #0
 8008424:	4620      	mov	r0, r4
 8008426:	f000 fa41 	bl	80088ac <__multadd>
 800842a:	9b08      	ldr	r3, [sp, #32]
 800842c:	ee08 0a10 	vmov	s16, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	f000 81b1 	beq.w	8008798 <_dtoa_r+0xbc0>
 8008436:	2300      	movs	r3, #0
 8008438:	4639      	mov	r1, r7
 800843a:	220a      	movs	r2, #10
 800843c:	4620      	mov	r0, r4
 800843e:	f000 fa35 	bl	80088ac <__multadd>
 8008442:	9b02      	ldr	r3, [sp, #8]
 8008444:	2b00      	cmp	r3, #0
 8008446:	4607      	mov	r7, r0
 8008448:	f300 808e 	bgt.w	8008568 <_dtoa_r+0x990>
 800844c:	9b06      	ldr	r3, [sp, #24]
 800844e:	2b02      	cmp	r3, #2
 8008450:	dc51      	bgt.n	80084f6 <_dtoa_r+0x91e>
 8008452:	e089      	b.n	8008568 <_dtoa_r+0x990>
 8008454:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008456:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800845a:	e74b      	b.n	80082f4 <_dtoa_r+0x71c>
 800845c:	9b03      	ldr	r3, [sp, #12]
 800845e:	1e5e      	subs	r6, r3, #1
 8008460:	9b07      	ldr	r3, [sp, #28]
 8008462:	42b3      	cmp	r3, r6
 8008464:	bfbf      	itttt	lt
 8008466:	9b07      	ldrlt	r3, [sp, #28]
 8008468:	9607      	strlt	r6, [sp, #28]
 800846a:	1af2      	sublt	r2, r6, r3
 800846c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800846e:	bfb6      	itet	lt
 8008470:	189b      	addlt	r3, r3, r2
 8008472:	1b9e      	subge	r6, r3, r6
 8008474:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008476:	9b03      	ldr	r3, [sp, #12]
 8008478:	bfb8      	it	lt
 800847a:	2600      	movlt	r6, #0
 800847c:	2b00      	cmp	r3, #0
 800847e:	bfb7      	itett	lt
 8008480:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008484:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008488:	1a9d      	sublt	r5, r3, r2
 800848a:	2300      	movlt	r3, #0
 800848c:	e734      	b.n	80082f8 <_dtoa_r+0x720>
 800848e:	9e07      	ldr	r6, [sp, #28]
 8008490:	9d04      	ldr	r5, [sp, #16]
 8008492:	9f08      	ldr	r7, [sp, #32]
 8008494:	e73b      	b.n	800830e <_dtoa_r+0x736>
 8008496:	9a07      	ldr	r2, [sp, #28]
 8008498:	e767      	b.n	800836a <_dtoa_r+0x792>
 800849a:	9b06      	ldr	r3, [sp, #24]
 800849c:	2b01      	cmp	r3, #1
 800849e:	dc18      	bgt.n	80084d2 <_dtoa_r+0x8fa>
 80084a0:	f1ba 0f00 	cmp.w	sl, #0
 80084a4:	d115      	bne.n	80084d2 <_dtoa_r+0x8fa>
 80084a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084aa:	b993      	cbnz	r3, 80084d2 <_dtoa_r+0x8fa>
 80084ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80084b0:	0d1b      	lsrs	r3, r3, #20
 80084b2:	051b      	lsls	r3, r3, #20
 80084b4:	b183      	cbz	r3, 80084d8 <_dtoa_r+0x900>
 80084b6:	9b04      	ldr	r3, [sp, #16]
 80084b8:	3301      	adds	r3, #1
 80084ba:	9304      	str	r3, [sp, #16]
 80084bc:	9b05      	ldr	r3, [sp, #20]
 80084be:	3301      	adds	r3, #1
 80084c0:	9305      	str	r3, [sp, #20]
 80084c2:	f04f 0801 	mov.w	r8, #1
 80084c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f47f af6a 	bne.w	80083a2 <_dtoa_r+0x7ca>
 80084ce:	2001      	movs	r0, #1
 80084d0:	e76f      	b.n	80083b2 <_dtoa_r+0x7da>
 80084d2:	f04f 0800 	mov.w	r8, #0
 80084d6:	e7f6      	b.n	80084c6 <_dtoa_r+0x8ee>
 80084d8:	4698      	mov	r8, r3
 80084da:	e7f4      	b.n	80084c6 <_dtoa_r+0x8ee>
 80084dc:	f43f af7d 	beq.w	80083da <_dtoa_r+0x802>
 80084e0:	4618      	mov	r0, r3
 80084e2:	301c      	adds	r0, #28
 80084e4:	e772      	b.n	80083cc <_dtoa_r+0x7f4>
 80084e6:	9b03      	ldr	r3, [sp, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	dc37      	bgt.n	800855c <_dtoa_r+0x984>
 80084ec:	9b06      	ldr	r3, [sp, #24]
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	dd34      	ble.n	800855c <_dtoa_r+0x984>
 80084f2:	9b03      	ldr	r3, [sp, #12]
 80084f4:	9302      	str	r3, [sp, #8]
 80084f6:	9b02      	ldr	r3, [sp, #8]
 80084f8:	b96b      	cbnz	r3, 8008516 <_dtoa_r+0x93e>
 80084fa:	4631      	mov	r1, r6
 80084fc:	2205      	movs	r2, #5
 80084fe:	4620      	mov	r0, r4
 8008500:	f000 f9d4 	bl	80088ac <__multadd>
 8008504:	4601      	mov	r1, r0
 8008506:	4606      	mov	r6, r0
 8008508:	ee18 0a10 	vmov	r0, s16
 800850c:	f000 fbee 	bl	8008cec <__mcmp>
 8008510:	2800      	cmp	r0, #0
 8008512:	f73f adbb 	bgt.w	800808c <_dtoa_r+0x4b4>
 8008516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008518:	9d01      	ldr	r5, [sp, #4]
 800851a:	43db      	mvns	r3, r3
 800851c:	9300      	str	r3, [sp, #0]
 800851e:	f04f 0800 	mov.w	r8, #0
 8008522:	4631      	mov	r1, r6
 8008524:	4620      	mov	r0, r4
 8008526:	f000 f99f 	bl	8008868 <_Bfree>
 800852a:	2f00      	cmp	r7, #0
 800852c:	f43f aea4 	beq.w	8008278 <_dtoa_r+0x6a0>
 8008530:	f1b8 0f00 	cmp.w	r8, #0
 8008534:	d005      	beq.n	8008542 <_dtoa_r+0x96a>
 8008536:	45b8      	cmp	r8, r7
 8008538:	d003      	beq.n	8008542 <_dtoa_r+0x96a>
 800853a:	4641      	mov	r1, r8
 800853c:	4620      	mov	r0, r4
 800853e:	f000 f993 	bl	8008868 <_Bfree>
 8008542:	4639      	mov	r1, r7
 8008544:	4620      	mov	r0, r4
 8008546:	f000 f98f 	bl	8008868 <_Bfree>
 800854a:	e695      	b.n	8008278 <_dtoa_r+0x6a0>
 800854c:	2600      	movs	r6, #0
 800854e:	4637      	mov	r7, r6
 8008550:	e7e1      	b.n	8008516 <_dtoa_r+0x93e>
 8008552:	9700      	str	r7, [sp, #0]
 8008554:	4637      	mov	r7, r6
 8008556:	e599      	b.n	800808c <_dtoa_r+0x4b4>
 8008558:	40240000 	.word	0x40240000
 800855c:	9b08      	ldr	r3, [sp, #32]
 800855e:	2b00      	cmp	r3, #0
 8008560:	f000 80ca 	beq.w	80086f8 <_dtoa_r+0xb20>
 8008564:	9b03      	ldr	r3, [sp, #12]
 8008566:	9302      	str	r3, [sp, #8]
 8008568:	2d00      	cmp	r5, #0
 800856a:	dd05      	ble.n	8008578 <_dtoa_r+0x9a0>
 800856c:	4639      	mov	r1, r7
 800856e:	462a      	mov	r2, r5
 8008570:	4620      	mov	r0, r4
 8008572:	f000 fb4b 	bl	8008c0c <__lshift>
 8008576:	4607      	mov	r7, r0
 8008578:	f1b8 0f00 	cmp.w	r8, #0
 800857c:	d05b      	beq.n	8008636 <_dtoa_r+0xa5e>
 800857e:	6879      	ldr	r1, [r7, #4]
 8008580:	4620      	mov	r0, r4
 8008582:	f000 f931 	bl	80087e8 <_Balloc>
 8008586:	4605      	mov	r5, r0
 8008588:	b928      	cbnz	r0, 8008596 <_dtoa_r+0x9be>
 800858a:	4b87      	ldr	r3, [pc, #540]	; (80087a8 <_dtoa_r+0xbd0>)
 800858c:	4602      	mov	r2, r0
 800858e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008592:	f7ff bb3b 	b.w	8007c0c <_dtoa_r+0x34>
 8008596:	693a      	ldr	r2, [r7, #16]
 8008598:	3202      	adds	r2, #2
 800859a:	0092      	lsls	r2, r2, #2
 800859c:	f107 010c 	add.w	r1, r7, #12
 80085a0:	300c      	adds	r0, #12
 80085a2:	f000 f913 	bl	80087cc <memcpy>
 80085a6:	2201      	movs	r2, #1
 80085a8:	4629      	mov	r1, r5
 80085aa:	4620      	mov	r0, r4
 80085ac:	f000 fb2e 	bl	8008c0c <__lshift>
 80085b0:	9b01      	ldr	r3, [sp, #4]
 80085b2:	f103 0901 	add.w	r9, r3, #1
 80085b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80085ba:	4413      	add	r3, r2
 80085bc:	9305      	str	r3, [sp, #20]
 80085be:	f00a 0301 	and.w	r3, sl, #1
 80085c2:	46b8      	mov	r8, r7
 80085c4:	9304      	str	r3, [sp, #16]
 80085c6:	4607      	mov	r7, r0
 80085c8:	4631      	mov	r1, r6
 80085ca:	ee18 0a10 	vmov	r0, s16
 80085ce:	f7ff fa76 	bl	8007abe <quorem>
 80085d2:	4641      	mov	r1, r8
 80085d4:	9002      	str	r0, [sp, #8]
 80085d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80085da:	ee18 0a10 	vmov	r0, s16
 80085de:	f000 fb85 	bl	8008cec <__mcmp>
 80085e2:	463a      	mov	r2, r7
 80085e4:	9003      	str	r0, [sp, #12]
 80085e6:	4631      	mov	r1, r6
 80085e8:	4620      	mov	r0, r4
 80085ea:	f000 fb9b 	bl	8008d24 <__mdiff>
 80085ee:	68c2      	ldr	r2, [r0, #12]
 80085f0:	f109 3bff 	add.w	fp, r9, #4294967295
 80085f4:	4605      	mov	r5, r0
 80085f6:	bb02      	cbnz	r2, 800863a <_dtoa_r+0xa62>
 80085f8:	4601      	mov	r1, r0
 80085fa:	ee18 0a10 	vmov	r0, s16
 80085fe:	f000 fb75 	bl	8008cec <__mcmp>
 8008602:	4602      	mov	r2, r0
 8008604:	4629      	mov	r1, r5
 8008606:	4620      	mov	r0, r4
 8008608:	9207      	str	r2, [sp, #28]
 800860a:	f000 f92d 	bl	8008868 <_Bfree>
 800860e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008612:	ea43 0102 	orr.w	r1, r3, r2
 8008616:	9b04      	ldr	r3, [sp, #16]
 8008618:	430b      	orrs	r3, r1
 800861a:	464d      	mov	r5, r9
 800861c:	d10f      	bne.n	800863e <_dtoa_r+0xa66>
 800861e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008622:	d02a      	beq.n	800867a <_dtoa_r+0xaa2>
 8008624:	9b03      	ldr	r3, [sp, #12]
 8008626:	2b00      	cmp	r3, #0
 8008628:	dd02      	ble.n	8008630 <_dtoa_r+0xa58>
 800862a:	9b02      	ldr	r3, [sp, #8]
 800862c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008630:	f88b a000 	strb.w	sl, [fp]
 8008634:	e775      	b.n	8008522 <_dtoa_r+0x94a>
 8008636:	4638      	mov	r0, r7
 8008638:	e7ba      	b.n	80085b0 <_dtoa_r+0x9d8>
 800863a:	2201      	movs	r2, #1
 800863c:	e7e2      	b.n	8008604 <_dtoa_r+0xa2c>
 800863e:	9b03      	ldr	r3, [sp, #12]
 8008640:	2b00      	cmp	r3, #0
 8008642:	db04      	blt.n	800864e <_dtoa_r+0xa76>
 8008644:	9906      	ldr	r1, [sp, #24]
 8008646:	430b      	orrs	r3, r1
 8008648:	9904      	ldr	r1, [sp, #16]
 800864a:	430b      	orrs	r3, r1
 800864c:	d122      	bne.n	8008694 <_dtoa_r+0xabc>
 800864e:	2a00      	cmp	r2, #0
 8008650:	ddee      	ble.n	8008630 <_dtoa_r+0xa58>
 8008652:	ee18 1a10 	vmov	r1, s16
 8008656:	2201      	movs	r2, #1
 8008658:	4620      	mov	r0, r4
 800865a:	f000 fad7 	bl	8008c0c <__lshift>
 800865e:	4631      	mov	r1, r6
 8008660:	ee08 0a10 	vmov	s16, r0
 8008664:	f000 fb42 	bl	8008cec <__mcmp>
 8008668:	2800      	cmp	r0, #0
 800866a:	dc03      	bgt.n	8008674 <_dtoa_r+0xa9c>
 800866c:	d1e0      	bne.n	8008630 <_dtoa_r+0xa58>
 800866e:	f01a 0f01 	tst.w	sl, #1
 8008672:	d0dd      	beq.n	8008630 <_dtoa_r+0xa58>
 8008674:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008678:	d1d7      	bne.n	800862a <_dtoa_r+0xa52>
 800867a:	2339      	movs	r3, #57	; 0x39
 800867c:	f88b 3000 	strb.w	r3, [fp]
 8008680:	462b      	mov	r3, r5
 8008682:	461d      	mov	r5, r3
 8008684:	3b01      	subs	r3, #1
 8008686:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800868a:	2a39      	cmp	r2, #57	; 0x39
 800868c:	d071      	beq.n	8008772 <_dtoa_r+0xb9a>
 800868e:	3201      	adds	r2, #1
 8008690:	701a      	strb	r2, [r3, #0]
 8008692:	e746      	b.n	8008522 <_dtoa_r+0x94a>
 8008694:	2a00      	cmp	r2, #0
 8008696:	dd07      	ble.n	80086a8 <_dtoa_r+0xad0>
 8008698:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800869c:	d0ed      	beq.n	800867a <_dtoa_r+0xaa2>
 800869e:	f10a 0301 	add.w	r3, sl, #1
 80086a2:	f88b 3000 	strb.w	r3, [fp]
 80086a6:	e73c      	b.n	8008522 <_dtoa_r+0x94a>
 80086a8:	9b05      	ldr	r3, [sp, #20]
 80086aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80086ae:	4599      	cmp	r9, r3
 80086b0:	d047      	beq.n	8008742 <_dtoa_r+0xb6a>
 80086b2:	ee18 1a10 	vmov	r1, s16
 80086b6:	2300      	movs	r3, #0
 80086b8:	220a      	movs	r2, #10
 80086ba:	4620      	mov	r0, r4
 80086bc:	f000 f8f6 	bl	80088ac <__multadd>
 80086c0:	45b8      	cmp	r8, r7
 80086c2:	ee08 0a10 	vmov	s16, r0
 80086c6:	f04f 0300 	mov.w	r3, #0
 80086ca:	f04f 020a 	mov.w	r2, #10
 80086ce:	4641      	mov	r1, r8
 80086d0:	4620      	mov	r0, r4
 80086d2:	d106      	bne.n	80086e2 <_dtoa_r+0xb0a>
 80086d4:	f000 f8ea 	bl	80088ac <__multadd>
 80086d8:	4680      	mov	r8, r0
 80086da:	4607      	mov	r7, r0
 80086dc:	f109 0901 	add.w	r9, r9, #1
 80086e0:	e772      	b.n	80085c8 <_dtoa_r+0x9f0>
 80086e2:	f000 f8e3 	bl	80088ac <__multadd>
 80086e6:	4639      	mov	r1, r7
 80086e8:	4680      	mov	r8, r0
 80086ea:	2300      	movs	r3, #0
 80086ec:	220a      	movs	r2, #10
 80086ee:	4620      	mov	r0, r4
 80086f0:	f000 f8dc 	bl	80088ac <__multadd>
 80086f4:	4607      	mov	r7, r0
 80086f6:	e7f1      	b.n	80086dc <_dtoa_r+0xb04>
 80086f8:	9b03      	ldr	r3, [sp, #12]
 80086fa:	9302      	str	r3, [sp, #8]
 80086fc:	9d01      	ldr	r5, [sp, #4]
 80086fe:	ee18 0a10 	vmov	r0, s16
 8008702:	4631      	mov	r1, r6
 8008704:	f7ff f9db 	bl	8007abe <quorem>
 8008708:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800870c:	9b01      	ldr	r3, [sp, #4]
 800870e:	f805 ab01 	strb.w	sl, [r5], #1
 8008712:	1aea      	subs	r2, r5, r3
 8008714:	9b02      	ldr	r3, [sp, #8]
 8008716:	4293      	cmp	r3, r2
 8008718:	dd09      	ble.n	800872e <_dtoa_r+0xb56>
 800871a:	ee18 1a10 	vmov	r1, s16
 800871e:	2300      	movs	r3, #0
 8008720:	220a      	movs	r2, #10
 8008722:	4620      	mov	r0, r4
 8008724:	f000 f8c2 	bl	80088ac <__multadd>
 8008728:	ee08 0a10 	vmov	s16, r0
 800872c:	e7e7      	b.n	80086fe <_dtoa_r+0xb26>
 800872e:	9b02      	ldr	r3, [sp, #8]
 8008730:	2b00      	cmp	r3, #0
 8008732:	bfc8      	it	gt
 8008734:	461d      	movgt	r5, r3
 8008736:	9b01      	ldr	r3, [sp, #4]
 8008738:	bfd8      	it	le
 800873a:	2501      	movle	r5, #1
 800873c:	441d      	add	r5, r3
 800873e:	f04f 0800 	mov.w	r8, #0
 8008742:	ee18 1a10 	vmov	r1, s16
 8008746:	2201      	movs	r2, #1
 8008748:	4620      	mov	r0, r4
 800874a:	f000 fa5f 	bl	8008c0c <__lshift>
 800874e:	4631      	mov	r1, r6
 8008750:	ee08 0a10 	vmov	s16, r0
 8008754:	f000 faca 	bl	8008cec <__mcmp>
 8008758:	2800      	cmp	r0, #0
 800875a:	dc91      	bgt.n	8008680 <_dtoa_r+0xaa8>
 800875c:	d102      	bne.n	8008764 <_dtoa_r+0xb8c>
 800875e:	f01a 0f01 	tst.w	sl, #1
 8008762:	d18d      	bne.n	8008680 <_dtoa_r+0xaa8>
 8008764:	462b      	mov	r3, r5
 8008766:	461d      	mov	r5, r3
 8008768:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800876c:	2a30      	cmp	r2, #48	; 0x30
 800876e:	d0fa      	beq.n	8008766 <_dtoa_r+0xb8e>
 8008770:	e6d7      	b.n	8008522 <_dtoa_r+0x94a>
 8008772:	9a01      	ldr	r2, [sp, #4]
 8008774:	429a      	cmp	r2, r3
 8008776:	d184      	bne.n	8008682 <_dtoa_r+0xaaa>
 8008778:	9b00      	ldr	r3, [sp, #0]
 800877a:	3301      	adds	r3, #1
 800877c:	9300      	str	r3, [sp, #0]
 800877e:	2331      	movs	r3, #49	; 0x31
 8008780:	7013      	strb	r3, [r2, #0]
 8008782:	e6ce      	b.n	8008522 <_dtoa_r+0x94a>
 8008784:	4b09      	ldr	r3, [pc, #36]	; (80087ac <_dtoa_r+0xbd4>)
 8008786:	f7ff ba95 	b.w	8007cb4 <_dtoa_r+0xdc>
 800878a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800878c:	2b00      	cmp	r3, #0
 800878e:	f47f aa6e 	bne.w	8007c6e <_dtoa_r+0x96>
 8008792:	4b07      	ldr	r3, [pc, #28]	; (80087b0 <_dtoa_r+0xbd8>)
 8008794:	f7ff ba8e 	b.w	8007cb4 <_dtoa_r+0xdc>
 8008798:	9b02      	ldr	r3, [sp, #8]
 800879a:	2b00      	cmp	r3, #0
 800879c:	dcae      	bgt.n	80086fc <_dtoa_r+0xb24>
 800879e:	9b06      	ldr	r3, [sp, #24]
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	f73f aea8 	bgt.w	80084f6 <_dtoa_r+0x91e>
 80087a6:	e7a9      	b.n	80086fc <_dtoa_r+0xb24>
 80087a8:	0800a843 	.word	0x0800a843
 80087ac:	0800a7a0 	.word	0x0800a7a0
 80087b0:	0800a7c4 	.word	0x0800a7c4

080087b4 <_localeconv_r>:
 80087b4:	4800      	ldr	r0, [pc, #0]	; (80087b8 <_localeconv_r+0x4>)
 80087b6:	4770      	bx	lr
 80087b8:	200001f8 	.word	0x200001f8

080087bc <malloc>:
 80087bc:	4b02      	ldr	r3, [pc, #8]	; (80087c8 <malloc+0xc>)
 80087be:	4601      	mov	r1, r0
 80087c0:	6818      	ldr	r0, [r3, #0]
 80087c2:	f000 bc17 	b.w	8008ff4 <_malloc_r>
 80087c6:	bf00      	nop
 80087c8:	200000a4 	.word	0x200000a4

080087cc <memcpy>:
 80087cc:	440a      	add	r2, r1
 80087ce:	4291      	cmp	r1, r2
 80087d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80087d4:	d100      	bne.n	80087d8 <memcpy+0xc>
 80087d6:	4770      	bx	lr
 80087d8:	b510      	push	{r4, lr}
 80087da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087e2:	4291      	cmp	r1, r2
 80087e4:	d1f9      	bne.n	80087da <memcpy+0xe>
 80087e6:	bd10      	pop	{r4, pc}

080087e8 <_Balloc>:
 80087e8:	b570      	push	{r4, r5, r6, lr}
 80087ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80087ec:	4604      	mov	r4, r0
 80087ee:	460d      	mov	r5, r1
 80087f0:	b976      	cbnz	r6, 8008810 <_Balloc+0x28>
 80087f2:	2010      	movs	r0, #16
 80087f4:	f7ff ffe2 	bl	80087bc <malloc>
 80087f8:	4602      	mov	r2, r0
 80087fa:	6260      	str	r0, [r4, #36]	; 0x24
 80087fc:	b920      	cbnz	r0, 8008808 <_Balloc+0x20>
 80087fe:	4b18      	ldr	r3, [pc, #96]	; (8008860 <_Balloc+0x78>)
 8008800:	4818      	ldr	r0, [pc, #96]	; (8008864 <_Balloc+0x7c>)
 8008802:	2166      	movs	r1, #102	; 0x66
 8008804:	f000 fdd6 	bl	80093b4 <__assert_func>
 8008808:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800880c:	6006      	str	r6, [r0, #0]
 800880e:	60c6      	str	r6, [r0, #12]
 8008810:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008812:	68f3      	ldr	r3, [r6, #12]
 8008814:	b183      	cbz	r3, 8008838 <_Balloc+0x50>
 8008816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800881e:	b9b8      	cbnz	r0, 8008850 <_Balloc+0x68>
 8008820:	2101      	movs	r1, #1
 8008822:	fa01 f605 	lsl.w	r6, r1, r5
 8008826:	1d72      	adds	r2, r6, #5
 8008828:	0092      	lsls	r2, r2, #2
 800882a:	4620      	mov	r0, r4
 800882c:	f000 fb60 	bl	8008ef0 <_calloc_r>
 8008830:	b160      	cbz	r0, 800884c <_Balloc+0x64>
 8008832:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008836:	e00e      	b.n	8008856 <_Balloc+0x6e>
 8008838:	2221      	movs	r2, #33	; 0x21
 800883a:	2104      	movs	r1, #4
 800883c:	4620      	mov	r0, r4
 800883e:	f000 fb57 	bl	8008ef0 <_calloc_r>
 8008842:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008844:	60f0      	str	r0, [r6, #12]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1e4      	bne.n	8008816 <_Balloc+0x2e>
 800884c:	2000      	movs	r0, #0
 800884e:	bd70      	pop	{r4, r5, r6, pc}
 8008850:	6802      	ldr	r2, [r0, #0]
 8008852:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008856:	2300      	movs	r3, #0
 8008858:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800885c:	e7f7      	b.n	800884e <_Balloc+0x66>
 800885e:	bf00      	nop
 8008860:	0800a7d1 	.word	0x0800a7d1
 8008864:	0800a854 	.word	0x0800a854

08008868 <_Bfree>:
 8008868:	b570      	push	{r4, r5, r6, lr}
 800886a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800886c:	4605      	mov	r5, r0
 800886e:	460c      	mov	r4, r1
 8008870:	b976      	cbnz	r6, 8008890 <_Bfree+0x28>
 8008872:	2010      	movs	r0, #16
 8008874:	f7ff ffa2 	bl	80087bc <malloc>
 8008878:	4602      	mov	r2, r0
 800887a:	6268      	str	r0, [r5, #36]	; 0x24
 800887c:	b920      	cbnz	r0, 8008888 <_Bfree+0x20>
 800887e:	4b09      	ldr	r3, [pc, #36]	; (80088a4 <_Bfree+0x3c>)
 8008880:	4809      	ldr	r0, [pc, #36]	; (80088a8 <_Bfree+0x40>)
 8008882:	218a      	movs	r1, #138	; 0x8a
 8008884:	f000 fd96 	bl	80093b4 <__assert_func>
 8008888:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800888c:	6006      	str	r6, [r0, #0]
 800888e:	60c6      	str	r6, [r0, #12]
 8008890:	b13c      	cbz	r4, 80088a2 <_Bfree+0x3a>
 8008892:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008894:	6862      	ldr	r2, [r4, #4]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800889c:	6021      	str	r1, [r4, #0]
 800889e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088a2:	bd70      	pop	{r4, r5, r6, pc}
 80088a4:	0800a7d1 	.word	0x0800a7d1
 80088a8:	0800a854 	.word	0x0800a854

080088ac <__multadd>:
 80088ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b0:	690d      	ldr	r5, [r1, #16]
 80088b2:	4607      	mov	r7, r0
 80088b4:	460c      	mov	r4, r1
 80088b6:	461e      	mov	r6, r3
 80088b8:	f101 0c14 	add.w	ip, r1, #20
 80088bc:	2000      	movs	r0, #0
 80088be:	f8dc 3000 	ldr.w	r3, [ip]
 80088c2:	b299      	uxth	r1, r3
 80088c4:	fb02 6101 	mla	r1, r2, r1, r6
 80088c8:	0c1e      	lsrs	r6, r3, #16
 80088ca:	0c0b      	lsrs	r3, r1, #16
 80088cc:	fb02 3306 	mla	r3, r2, r6, r3
 80088d0:	b289      	uxth	r1, r1
 80088d2:	3001      	adds	r0, #1
 80088d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80088d8:	4285      	cmp	r5, r0
 80088da:	f84c 1b04 	str.w	r1, [ip], #4
 80088de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80088e2:	dcec      	bgt.n	80088be <__multadd+0x12>
 80088e4:	b30e      	cbz	r6, 800892a <__multadd+0x7e>
 80088e6:	68a3      	ldr	r3, [r4, #8]
 80088e8:	42ab      	cmp	r3, r5
 80088ea:	dc19      	bgt.n	8008920 <__multadd+0x74>
 80088ec:	6861      	ldr	r1, [r4, #4]
 80088ee:	4638      	mov	r0, r7
 80088f0:	3101      	adds	r1, #1
 80088f2:	f7ff ff79 	bl	80087e8 <_Balloc>
 80088f6:	4680      	mov	r8, r0
 80088f8:	b928      	cbnz	r0, 8008906 <__multadd+0x5a>
 80088fa:	4602      	mov	r2, r0
 80088fc:	4b0c      	ldr	r3, [pc, #48]	; (8008930 <__multadd+0x84>)
 80088fe:	480d      	ldr	r0, [pc, #52]	; (8008934 <__multadd+0x88>)
 8008900:	21b5      	movs	r1, #181	; 0xb5
 8008902:	f000 fd57 	bl	80093b4 <__assert_func>
 8008906:	6922      	ldr	r2, [r4, #16]
 8008908:	3202      	adds	r2, #2
 800890a:	f104 010c 	add.w	r1, r4, #12
 800890e:	0092      	lsls	r2, r2, #2
 8008910:	300c      	adds	r0, #12
 8008912:	f7ff ff5b 	bl	80087cc <memcpy>
 8008916:	4621      	mov	r1, r4
 8008918:	4638      	mov	r0, r7
 800891a:	f7ff ffa5 	bl	8008868 <_Bfree>
 800891e:	4644      	mov	r4, r8
 8008920:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008924:	3501      	adds	r5, #1
 8008926:	615e      	str	r6, [r3, #20]
 8008928:	6125      	str	r5, [r4, #16]
 800892a:	4620      	mov	r0, r4
 800892c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008930:	0800a843 	.word	0x0800a843
 8008934:	0800a854 	.word	0x0800a854

08008938 <__hi0bits>:
 8008938:	0c03      	lsrs	r3, r0, #16
 800893a:	041b      	lsls	r3, r3, #16
 800893c:	b9d3      	cbnz	r3, 8008974 <__hi0bits+0x3c>
 800893e:	0400      	lsls	r0, r0, #16
 8008940:	2310      	movs	r3, #16
 8008942:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008946:	bf04      	itt	eq
 8008948:	0200      	lsleq	r0, r0, #8
 800894a:	3308      	addeq	r3, #8
 800894c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008950:	bf04      	itt	eq
 8008952:	0100      	lsleq	r0, r0, #4
 8008954:	3304      	addeq	r3, #4
 8008956:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800895a:	bf04      	itt	eq
 800895c:	0080      	lsleq	r0, r0, #2
 800895e:	3302      	addeq	r3, #2
 8008960:	2800      	cmp	r0, #0
 8008962:	db05      	blt.n	8008970 <__hi0bits+0x38>
 8008964:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008968:	f103 0301 	add.w	r3, r3, #1
 800896c:	bf08      	it	eq
 800896e:	2320      	moveq	r3, #32
 8008970:	4618      	mov	r0, r3
 8008972:	4770      	bx	lr
 8008974:	2300      	movs	r3, #0
 8008976:	e7e4      	b.n	8008942 <__hi0bits+0xa>

08008978 <__lo0bits>:
 8008978:	6803      	ldr	r3, [r0, #0]
 800897a:	f013 0207 	ands.w	r2, r3, #7
 800897e:	4601      	mov	r1, r0
 8008980:	d00b      	beq.n	800899a <__lo0bits+0x22>
 8008982:	07da      	lsls	r2, r3, #31
 8008984:	d423      	bmi.n	80089ce <__lo0bits+0x56>
 8008986:	0798      	lsls	r0, r3, #30
 8008988:	bf49      	itett	mi
 800898a:	085b      	lsrmi	r3, r3, #1
 800898c:	089b      	lsrpl	r3, r3, #2
 800898e:	2001      	movmi	r0, #1
 8008990:	600b      	strmi	r3, [r1, #0]
 8008992:	bf5c      	itt	pl
 8008994:	600b      	strpl	r3, [r1, #0]
 8008996:	2002      	movpl	r0, #2
 8008998:	4770      	bx	lr
 800899a:	b298      	uxth	r0, r3
 800899c:	b9a8      	cbnz	r0, 80089ca <__lo0bits+0x52>
 800899e:	0c1b      	lsrs	r3, r3, #16
 80089a0:	2010      	movs	r0, #16
 80089a2:	b2da      	uxtb	r2, r3
 80089a4:	b90a      	cbnz	r2, 80089aa <__lo0bits+0x32>
 80089a6:	3008      	adds	r0, #8
 80089a8:	0a1b      	lsrs	r3, r3, #8
 80089aa:	071a      	lsls	r2, r3, #28
 80089ac:	bf04      	itt	eq
 80089ae:	091b      	lsreq	r3, r3, #4
 80089b0:	3004      	addeq	r0, #4
 80089b2:	079a      	lsls	r2, r3, #30
 80089b4:	bf04      	itt	eq
 80089b6:	089b      	lsreq	r3, r3, #2
 80089b8:	3002      	addeq	r0, #2
 80089ba:	07da      	lsls	r2, r3, #31
 80089bc:	d403      	bmi.n	80089c6 <__lo0bits+0x4e>
 80089be:	085b      	lsrs	r3, r3, #1
 80089c0:	f100 0001 	add.w	r0, r0, #1
 80089c4:	d005      	beq.n	80089d2 <__lo0bits+0x5a>
 80089c6:	600b      	str	r3, [r1, #0]
 80089c8:	4770      	bx	lr
 80089ca:	4610      	mov	r0, r2
 80089cc:	e7e9      	b.n	80089a2 <__lo0bits+0x2a>
 80089ce:	2000      	movs	r0, #0
 80089d0:	4770      	bx	lr
 80089d2:	2020      	movs	r0, #32
 80089d4:	4770      	bx	lr
	...

080089d8 <__i2b>:
 80089d8:	b510      	push	{r4, lr}
 80089da:	460c      	mov	r4, r1
 80089dc:	2101      	movs	r1, #1
 80089de:	f7ff ff03 	bl	80087e8 <_Balloc>
 80089e2:	4602      	mov	r2, r0
 80089e4:	b928      	cbnz	r0, 80089f2 <__i2b+0x1a>
 80089e6:	4b05      	ldr	r3, [pc, #20]	; (80089fc <__i2b+0x24>)
 80089e8:	4805      	ldr	r0, [pc, #20]	; (8008a00 <__i2b+0x28>)
 80089ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80089ee:	f000 fce1 	bl	80093b4 <__assert_func>
 80089f2:	2301      	movs	r3, #1
 80089f4:	6144      	str	r4, [r0, #20]
 80089f6:	6103      	str	r3, [r0, #16]
 80089f8:	bd10      	pop	{r4, pc}
 80089fa:	bf00      	nop
 80089fc:	0800a843 	.word	0x0800a843
 8008a00:	0800a854 	.word	0x0800a854

08008a04 <__multiply>:
 8008a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a08:	4691      	mov	r9, r2
 8008a0a:	690a      	ldr	r2, [r1, #16]
 8008a0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	bfb8      	it	lt
 8008a14:	460b      	movlt	r3, r1
 8008a16:	460c      	mov	r4, r1
 8008a18:	bfbc      	itt	lt
 8008a1a:	464c      	movlt	r4, r9
 8008a1c:	4699      	movlt	r9, r3
 8008a1e:	6927      	ldr	r7, [r4, #16]
 8008a20:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008a24:	68a3      	ldr	r3, [r4, #8]
 8008a26:	6861      	ldr	r1, [r4, #4]
 8008a28:	eb07 060a 	add.w	r6, r7, sl
 8008a2c:	42b3      	cmp	r3, r6
 8008a2e:	b085      	sub	sp, #20
 8008a30:	bfb8      	it	lt
 8008a32:	3101      	addlt	r1, #1
 8008a34:	f7ff fed8 	bl	80087e8 <_Balloc>
 8008a38:	b930      	cbnz	r0, 8008a48 <__multiply+0x44>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	4b44      	ldr	r3, [pc, #272]	; (8008b50 <__multiply+0x14c>)
 8008a3e:	4845      	ldr	r0, [pc, #276]	; (8008b54 <__multiply+0x150>)
 8008a40:	f240 115d 	movw	r1, #349	; 0x15d
 8008a44:	f000 fcb6 	bl	80093b4 <__assert_func>
 8008a48:	f100 0514 	add.w	r5, r0, #20
 8008a4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a50:	462b      	mov	r3, r5
 8008a52:	2200      	movs	r2, #0
 8008a54:	4543      	cmp	r3, r8
 8008a56:	d321      	bcc.n	8008a9c <__multiply+0x98>
 8008a58:	f104 0314 	add.w	r3, r4, #20
 8008a5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008a60:	f109 0314 	add.w	r3, r9, #20
 8008a64:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008a68:	9202      	str	r2, [sp, #8]
 8008a6a:	1b3a      	subs	r2, r7, r4
 8008a6c:	3a15      	subs	r2, #21
 8008a6e:	f022 0203 	bic.w	r2, r2, #3
 8008a72:	3204      	adds	r2, #4
 8008a74:	f104 0115 	add.w	r1, r4, #21
 8008a78:	428f      	cmp	r7, r1
 8008a7a:	bf38      	it	cc
 8008a7c:	2204      	movcc	r2, #4
 8008a7e:	9201      	str	r2, [sp, #4]
 8008a80:	9a02      	ldr	r2, [sp, #8]
 8008a82:	9303      	str	r3, [sp, #12]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d80c      	bhi.n	8008aa2 <__multiply+0x9e>
 8008a88:	2e00      	cmp	r6, #0
 8008a8a:	dd03      	ble.n	8008a94 <__multiply+0x90>
 8008a8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d05a      	beq.n	8008b4a <__multiply+0x146>
 8008a94:	6106      	str	r6, [r0, #16]
 8008a96:	b005      	add	sp, #20
 8008a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a9c:	f843 2b04 	str.w	r2, [r3], #4
 8008aa0:	e7d8      	b.n	8008a54 <__multiply+0x50>
 8008aa2:	f8b3 a000 	ldrh.w	sl, [r3]
 8008aa6:	f1ba 0f00 	cmp.w	sl, #0
 8008aaa:	d024      	beq.n	8008af6 <__multiply+0xf2>
 8008aac:	f104 0e14 	add.w	lr, r4, #20
 8008ab0:	46a9      	mov	r9, r5
 8008ab2:	f04f 0c00 	mov.w	ip, #0
 8008ab6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008aba:	f8d9 1000 	ldr.w	r1, [r9]
 8008abe:	fa1f fb82 	uxth.w	fp, r2
 8008ac2:	b289      	uxth	r1, r1
 8008ac4:	fb0a 110b 	mla	r1, sl, fp, r1
 8008ac8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008acc:	f8d9 2000 	ldr.w	r2, [r9]
 8008ad0:	4461      	add	r1, ip
 8008ad2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008ad6:	fb0a c20b 	mla	r2, sl, fp, ip
 8008ada:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008ade:	b289      	uxth	r1, r1
 8008ae0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008ae4:	4577      	cmp	r7, lr
 8008ae6:	f849 1b04 	str.w	r1, [r9], #4
 8008aea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008aee:	d8e2      	bhi.n	8008ab6 <__multiply+0xb2>
 8008af0:	9a01      	ldr	r2, [sp, #4]
 8008af2:	f845 c002 	str.w	ip, [r5, r2]
 8008af6:	9a03      	ldr	r2, [sp, #12]
 8008af8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008afc:	3304      	adds	r3, #4
 8008afe:	f1b9 0f00 	cmp.w	r9, #0
 8008b02:	d020      	beq.n	8008b46 <__multiply+0x142>
 8008b04:	6829      	ldr	r1, [r5, #0]
 8008b06:	f104 0c14 	add.w	ip, r4, #20
 8008b0a:	46ae      	mov	lr, r5
 8008b0c:	f04f 0a00 	mov.w	sl, #0
 8008b10:	f8bc b000 	ldrh.w	fp, [ip]
 8008b14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008b18:	fb09 220b 	mla	r2, r9, fp, r2
 8008b1c:	4492      	add	sl, r2
 8008b1e:	b289      	uxth	r1, r1
 8008b20:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008b24:	f84e 1b04 	str.w	r1, [lr], #4
 8008b28:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008b2c:	f8be 1000 	ldrh.w	r1, [lr]
 8008b30:	0c12      	lsrs	r2, r2, #16
 8008b32:	fb09 1102 	mla	r1, r9, r2, r1
 8008b36:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008b3a:	4567      	cmp	r7, ip
 8008b3c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008b40:	d8e6      	bhi.n	8008b10 <__multiply+0x10c>
 8008b42:	9a01      	ldr	r2, [sp, #4]
 8008b44:	50a9      	str	r1, [r5, r2]
 8008b46:	3504      	adds	r5, #4
 8008b48:	e79a      	b.n	8008a80 <__multiply+0x7c>
 8008b4a:	3e01      	subs	r6, #1
 8008b4c:	e79c      	b.n	8008a88 <__multiply+0x84>
 8008b4e:	bf00      	nop
 8008b50:	0800a843 	.word	0x0800a843
 8008b54:	0800a854 	.word	0x0800a854

08008b58 <__pow5mult>:
 8008b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b5c:	4615      	mov	r5, r2
 8008b5e:	f012 0203 	ands.w	r2, r2, #3
 8008b62:	4606      	mov	r6, r0
 8008b64:	460f      	mov	r7, r1
 8008b66:	d007      	beq.n	8008b78 <__pow5mult+0x20>
 8008b68:	4c25      	ldr	r4, [pc, #148]	; (8008c00 <__pow5mult+0xa8>)
 8008b6a:	3a01      	subs	r2, #1
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b72:	f7ff fe9b 	bl	80088ac <__multadd>
 8008b76:	4607      	mov	r7, r0
 8008b78:	10ad      	asrs	r5, r5, #2
 8008b7a:	d03d      	beq.n	8008bf8 <__pow5mult+0xa0>
 8008b7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008b7e:	b97c      	cbnz	r4, 8008ba0 <__pow5mult+0x48>
 8008b80:	2010      	movs	r0, #16
 8008b82:	f7ff fe1b 	bl	80087bc <malloc>
 8008b86:	4602      	mov	r2, r0
 8008b88:	6270      	str	r0, [r6, #36]	; 0x24
 8008b8a:	b928      	cbnz	r0, 8008b98 <__pow5mult+0x40>
 8008b8c:	4b1d      	ldr	r3, [pc, #116]	; (8008c04 <__pow5mult+0xac>)
 8008b8e:	481e      	ldr	r0, [pc, #120]	; (8008c08 <__pow5mult+0xb0>)
 8008b90:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008b94:	f000 fc0e 	bl	80093b4 <__assert_func>
 8008b98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b9c:	6004      	str	r4, [r0, #0]
 8008b9e:	60c4      	str	r4, [r0, #12]
 8008ba0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008ba4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ba8:	b94c      	cbnz	r4, 8008bbe <__pow5mult+0x66>
 8008baa:	f240 2171 	movw	r1, #625	; 0x271
 8008bae:	4630      	mov	r0, r6
 8008bb0:	f7ff ff12 	bl	80089d8 <__i2b>
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008bba:	4604      	mov	r4, r0
 8008bbc:	6003      	str	r3, [r0, #0]
 8008bbe:	f04f 0900 	mov.w	r9, #0
 8008bc2:	07eb      	lsls	r3, r5, #31
 8008bc4:	d50a      	bpl.n	8008bdc <__pow5mult+0x84>
 8008bc6:	4639      	mov	r1, r7
 8008bc8:	4622      	mov	r2, r4
 8008bca:	4630      	mov	r0, r6
 8008bcc:	f7ff ff1a 	bl	8008a04 <__multiply>
 8008bd0:	4639      	mov	r1, r7
 8008bd2:	4680      	mov	r8, r0
 8008bd4:	4630      	mov	r0, r6
 8008bd6:	f7ff fe47 	bl	8008868 <_Bfree>
 8008bda:	4647      	mov	r7, r8
 8008bdc:	106d      	asrs	r5, r5, #1
 8008bde:	d00b      	beq.n	8008bf8 <__pow5mult+0xa0>
 8008be0:	6820      	ldr	r0, [r4, #0]
 8008be2:	b938      	cbnz	r0, 8008bf4 <__pow5mult+0x9c>
 8008be4:	4622      	mov	r2, r4
 8008be6:	4621      	mov	r1, r4
 8008be8:	4630      	mov	r0, r6
 8008bea:	f7ff ff0b 	bl	8008a04 <__multiply>
 8008bee:	6020      	str	r0, [r4, #0]
 8008bf0:	f8c0 9000 	str.w	r9, [r0]
 8008bf4:	4604      	mov	r4, r0
 8008bf6:	e7e4      	b.n	8008bc2 <__pow5mult+0x6a>
 8008bf8:	4638      	mov	r0, r7
 8008bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bfe:	bf00      	nop
 8008c00:	0800a9a0 	.word	0x0800a9a0
 8008c04:	0800a7d1 	.word	0x0800a7d1
 8008c08:	0800a854 	.word	0x0800a854

08008c0c <__lshift>:
 8008c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c10:	460c      	mov	r4, r1
 8008c12:	6849      	ldr	r1, [r1, #4]
 8008c14:	6923      	ldr	r3, [r4, #16]
 8008c16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c1a:	68a3      	ldr	r3, [r4, #8]
 8008c1c:	4607      	mov	r7, r0
 8008c1e:	4691      	mov	r9, r2
 8008c20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c24:	f108 0601 	add.w	r6, r8, #1
 8008c28:	42b3      	cmp	r3, r6
 8008c2a:	db0b      	blt.n	8008c44 <__lshift+0x38>
 8008c2c:	4638      	mov	r0, r7
 8008c2e:	f7ff fddb 	bl	80087e8 <_Balloc>
 8008c32:	4605      	mov	r5, r0
 8008c34:	b948      	cbnz	r0, 8008c4a <__lshift+0x3e>
 8008c36:	4602      	mov	r2, r0
 8008c38:	4b2a      	ldr	r3, [pc, #168]	; (8008ce4 <__lshift+0xd8>)
 8008c3a:	482b      	ldr	r0, [pc, #172]	; (8008ce8 <__lshift+0xdc>)
 8008c3c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008c40:	f000 fbb8 	bl	80093b4 <__assert_func>
 8008c44:	3101      	adds	r1, #1
 8008c46:	005b      	lsls	r3, r3, #1
 8008c48:	e7ee      	b.n	8008c28 <__lshift+0x1c>
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	f100 0114 	add.w	r1, r0, #20
 8008c50:	f100 0210 	add.w	r2, r0, #16
 8008c54:	4618      	mov	r0, r3
 8008c56:	4553      	cmp	r3, sl
 8008c58:	db37      	blt.n	8008cca <__lshift+0xbe>
 8008c5a:	6920      	ldr	r0, [r4, #16]
 8008c5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c60:	f104 0314 	add.w	r3, r4, #20
 8008c64:	f019 091f 	ands.w	r9, r9, #31
 8008c68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c6c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008c70:	d02f      	beq.n	8008cd2 <__lshift+0xc6>
 8008c72:	f1c9 0e20 	rsb	lr, r9, #32
 8008c76:	468a      	mov	sl, r1
 8008c78:	f04f 0c00 	mov.w	ip, #0
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	fa02 f209 	lsl.w	r2, r2, r9
 8008c82:	ea42 020c 	orr.w	r2, r2, ip
 8008c86:	f84a 2b04 	str.w	r2, [sl], #4
 8008c8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c8e:	4298      	cmp	r0, r3
 8008c90:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008c94:	d8f2      	bhi.n	8008c7c <__lshift+0x70>
 8008c96:	1b03      	subs	r3, r0, r4
 8008c98:	3b15      	subs	r3, #21
 8008c9a:	f023 0303 	bic.w	r3, r3, #3
 8008c9e:	3304      	adds	r3, #4
 8008ca0:	f104 0215 	add.w	r2, r4, #21
 8008ca4:	4290      	cmp	r0, r2
 8008ca6:	bf38      	it	cc
 8008ca8:	2304      	movcc	r3, #4
 8008caa:	f841 c003 	str.w	ip, [r1, r3]
 8008cae:	f1bc 0f00 	cmp.w	ip, #0
 8008cb2:	d001      	beq.n	8008cb8 <__lshift+0xac>
 8008cb4:	f108 0602 	add.w	r6, r8, #2
 8008cb8:	3e01      	subs	r6, #1
 8008cba:	4638      	mov	r0, r7
 8008cbc:	612e      	str	r6, [r5, #16]
 8008cbe:	4621      	mov	r1, r4
 8008cc0:	f7ff fdd2 	bl	8008868 <_Bfree>
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cca:	f842 0f04 	str.w	r0, [r2, #4]!
 8008cce:	3301      	adds	r3, #1
 8008cd0:	e7c1      	b.n	8008c56 <__lshift+0x4a>
 8008cd2:	3904      	subs	r1, #4
 8008cd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cd8:	f841 2f04 	str.w	r2, [r1, #4]!
 8008cdc:	4298      	cmp	r0, r3
 8008cde:	d8f9      	bhi.n	8008cd4 <__lshift+0xc8>
 8008ce0:	e7ea      	b.n	8008cb8 <__lshift+0xac>
 8008ce2:	bf00      	nop
 8008ce4:	0800a843 	.word	0x0800a843
 8008ce8:	0800a854 	.word	0x0800a854

08008cec <__mcmp>:
 8008cec:	b530      	push	{r4, r5, lr}
 8008cee:	6902      	ldr	r2, [r0, #16]
 8008cf0:	690c      	ldr	r4, [r1, #16]
 8008cf2:	1b12      	subs	r2, r2, r4
 8008cf4:	d10e      	bne.n	8008d14 <__mcmp+0x28>
 8008cf6:	f100 0314 	add.w	r3, r0, #20
 8008cfa:	3114      	adds	r1, #20
 8008cfc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008d00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008d04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008d08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008d0c:	42a5      	cmp	r5, r4
 8008d0e:	d003      	beq.n	8008d18 <__mcmp+0x2c>
 8008d10:	d305      	bcc.n	8008d1e <__mcmp+0x32>
 8008d12:	2201      	movs	r2, #1
 8008d14:	4610      	mov	r0, r2
 8008d16:	bd30      	pop	{r4, r5, pc}
 8008d18:	4283      	cmp	r3, r0
 8008d1a:	d3f3      	bcc.n	8008d04 <__mcmp+0x18>
 8008d1c:	e7fa      	b.n	8008d14 <__mcmp+0x28>
 8008d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d22:	e7f7      	b.n	8008d14 <__mcmp+0x28>

08008d24 <__mdiff>:
 8008d24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d28:	460c      	mov	r4, r1
 8008d2a:	4606      	mov	r6, r0
 8008d2c:	4611      	mov	r1, r2
 8008d2e:	4620      	mov	r0, r4
 8008d30:	4690      	mov	r8, r2
 8008d32:	f7ff ffdb 	bl	8008cec <__mcmp>
 8008d36:	1e05      	subs	r5, r0, #0
 8008d38:	d110      	bne.n	8008d5c <__mdiff+0x38>
 8008d3a:	4629      	mov	r1, r5
 8008d3c:	4630      	mov	r0, r6
 8008d3e:	f7ff fd53 	bl	80087e8 <_Balloc>
 8008d42:	b930      	cbnz	r0, 8008d52 <__mdiff+0x2e>
 8008d44:	4b3a      	ldr	r3, [pc, #232]	; (8008e30 <__mdiff+0x10c>)
 8008d46:	4602      	mov	r2, r0
 8008d48:	f240 2132 	movw	r1, #562	; 0x232
 8008d4c:	4839      	ldr	r0, [pc, #228]	; (8008e34 <__mdiff+0x110>)
 8008d4e:	f000 fb31 	bl	80093b4 <__assert_func>
 8008d52:	2301      	movs	r3, #1
 8008d54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d5c:	bfa4      	itt	ge
 8008d5e:	4643      	movge	r3, r8
 8008d60:	46a0      	movge	r8, r4
 8008d62:	4630      	mov	r0, r6
 8008d64:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008d68:	bfa6      	itte	ge
 8008d6a:	461c      	movge	r4, r3
 8008d6c:	2500      	movge	r5, #0
 8008d6e:	2501      	movlt	r5, #1
 8008d70:	f7ff fd3a 	bl	80087e8 <_Balloc>
 8008d74:	b920      	cbnz	r0, 8008d80 <__mdiff+0x5c>
 8008d76:	4b2e      	ldr	r3, [pc, #184]	; (8008e30 <__mdiff+0x10c>)
 8008d78:	4602      	mov	r2, r0
 8008d7a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008d7e:	e7e5      	b.n	8008d4c <__mdiff+0x28>
 8008d80:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008d84:	6926      	ldr	r6, [r4, #16]
 8008d86:	60c5      	str	r5, [r0, #12]
 8008d88:	f104 0914 	add.w	r9, r4, #20
 8008d8c:	f108 0514 	add.w	r5, r8, #20
 8008d90:	f100 0e14 	add.w	lr, r0, #20
 8008d94:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008d98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008d9c:	f108 0210 	add.w	r2, r8, #16
 8008da0:	46f2      	mov	sl, lr
 8008da2:	2100      	movs	r1, #0
 8008da4:	f859 3b04 	ldr.w	r3, [r9], #4
 8008da8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008dac:	fa1f f883 	uxth.w	r8, r3
 8008db0:	fa11 f18b 	uxtah	r1, r1, fp
 8008db4:	0c1b      	lsrs	r3, r3, #16
 8008db6:	eba1 0808 	sub.w	r8, r1, r8
 8008dba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008dbe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008dc2:	fa1f f888 	uxth.w	r8, r8
 8008dc6:	1419      	asrs	r1, r3, #16
 8008dc8:	454e      	cmp	r6, r9
 8008dca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008dce:	f84a 3b04 	str.w	r3, [sl], #4
 8008dd2:	d8e7      	bhi.n	8008da4 <__mdiff+0x80>
 8008dd4:	1b33      	subs	r3, r6, r4
 8008dd6:	3b15      	subs	r3, #21
 8008dd8:	f023 0303 	bic.w	r3, r3, #3
 8008ddc:	3304      	adds	r3, #4
 8008dde:	3415      	adds	r4, #21
 8008de0:	42a6      	cmp	r6, r4
 8008de2:	bf38      	it	cc
 8008de4:	2304      	movcc	r3, #4
 8008de6:	441d      	add	r5, r3
 8008de8:	4473      	add	r3, lr
 8008dea:	469e      	mov	lr, r3
 8008dec:	462e      	mov	r6, r5
 8008dee:	4566      	cmp	r6, ip
 8008df0:	d30e      	bcc.n	8008e10 <__mdiff+0xec>
 8008df2:	f10c 0203 	add.w	r2, ip, #3
 8008df6:	1b52      	subs	r2, r2, r5
 8008df8:	f022 0203 	bic.w	r2, r2, #3
 8008dfc:	3d03      	subs	r5, #3
 8008dfe:	45ac      	cmp	ip, r5
 8008e00:	bf38      	it	cc
 8008e02:	2200      	movcc	r2, #0
 8008e04:	441a      	add	r2, r3
 8008e06:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008e0a:	b17b      	cbz	r3, 8008e2c <__mdiff+0x108>
 8008e0c:	6107      	str	r7, [r0, #16]
 8008e0e:	e7a3      	b.n	8008d58 <__mdiff+0x34>
 8008e10:	f856 8b04 	ldr.w	r8, [r6], #4
 8008e14:	fa11 f288 	uxtah	r2, r1, r8
 8008e18:	1414      	asrs	r4, r2, #16
 8008e1a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008e1e:	b292      	uxth	r2, r2
 8008e20:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008e24:	f84e 2b04 	str.w	r2, [lr], #4
 8008e28:	1421      	asrs	r1, r4, #16
 8008e2a:	e7e0      	b.n	8008dee <__mdiff+0xca>
 8008e2c:	3f01      	subs	r7, #1
 8008e2e:	e7ea      	b.n	8008e06 <__mdiff+0xe2>
 8008e30:	0800a843 	.word	0x0800a843
 8008e34:	0800a854 	.word	0x0800a854

08008e38 <__d2b>:
 8008e38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e3c:	4689      	mov	r9, r1
 8008e3e:	2101      	movs	r1, #1
 8008e40:	ec57 6b10 	vmov	r6, r7, d0
 8008e44:	4690      	mov	r8, r2
 8008e46:	f7ff fccf 	bl	80087e8 <_Balloc>
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	b930      	cbnz	r0, 8008e5c <__d2b+0x24>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	4b25      	ldr	r3, [pc, #148]	; (8008ee8 <__d2b+0xb0>)
 8008e52:	4826      	ldr	r0, [pc, #152]	; (8008eec <__d2b+0xb4>)
 8008e54:	f240 310a 	movw	r1, #778	; 0x30a
 8008e58:	f000 faac 	bl	80093b4 <__assert_func>
 8008e5c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008e60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e64:	bb35      	cbnz	r5, 8008eb4 <__d2b+0x7c>
 8008e66:	2e00      	cmp	r6, #0
 8008e68:	9301      	str	r3, [sp, #4]
 8008e6a:	d028      	beq.n	8008ebe <__d2b+0x86>
 8008e6c:	4668      	mov	r0, sp
 8008e6e:	9600      	str	r6, [sp, #0]
 8008e70:	f7ff fd82 	bl	8008978 <__lo0bits>
 8008e74:	9900      	ldr	r1, [sp, #0]
 8008e76:	b300      	cbz	r0, 8008eba <__d2b+0x82>
 8008e78:	9a01      	ldr	r2, [sp, #4]
 8008e7a:	f1c0 0320 	rsb	r3, r0, #32
 8008e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e82:	430b      	orrs	r3, r1
 8008e84:	40c2      	lsrs	r2, r0
 8008e86:	6163      	str	r3, [r4, #20]
 8008e88:	9201      	str	r2, [sp, #4]
 8008e8a:	9b01      	ldr	r3, [sp, #4]
 8008e8c:	61a3      	str	r3, [r4, #24]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	bf14      	ite	ne
 8008e92:	2202      	movne	r2, #2
 8008e94:	2201      	moveq	r2, #1
 8008e96:	6122      	str	r2, [r4, #16]
 8008e98:	b1d5      	cbz	r5, 8008ed0 <__d2b+0x98>
 8008e9a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008e9e:	4405      	add	r5, r0
 8008ea0:	f8c9 5000 	str.w	r5, [r9]
 8008ea4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ea8:	f8c8 0000 	str.w	r0, [r8]
 8008eac:	4620      	mov	r0, r4
 8008eae:	b003      	add	sp, #12
 8008eb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008eb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008eb8:	e7d5      	b.n	8008e66 <__d2b+0x2e>
 8008eba:	6161      	str	r1, [r4, #20]
 8008ebc:	e7e5      	b.n	8008e8a <__d2b+0x52>
 8008ebe:	a801      	add	r0, sp, #4
 8008ec0:	f7ff fd5a 	bl	8008978 <__lo0bits>
 8008ec4:	9b01      	ldr	r3, [sp, #4]
 8008ec6:	6163      	str	r3, [r4, #20]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	6122      	str	r2, [r4, #16]
 8008ecc:	3020      	adds	r0, #32
 8008ece:	e7e3      	b.n	8008e98 <__d2b+0x60>
 8008ed0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ed4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008ed8:	f8c9 0000 	str.w	r0, [r9]
 8008edc:	6918      	ldr	r0, [r3, #16]
 8008ede:	f7ff fd2b 	bl	8008938 <__hi0bits>
 8008ee2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008ee6:	e7df      	b.n	8008ea8 <__d2b+0x70>
 8008ee8:	0800a843 	.word	0x0800a843
 8008eec:	0800a854 	.word	0x0800a854

08008ef0 <_calloc_r>:
 8008ef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ef2:	fba1 2402 	umull	r2, r4, r1, r2
 8008ef6:	b94c      	cbnz	r4, 8008f0c <_calloc_r+0x1c>
 8008ef8:	4611      	mov	r1, r2
 8008efa:	9201      	str	r2, [sp, #4]
 8008efc:	f000 f87a 	bl	8008ff4 <_malloc_r>
 8008f00:	9a01      	ldr	r2, [sp, #4]
 8008f02:	4605      	mov	r5, r0
 8008f04:	b930      	cbnz	r0, 8008f14 <_calloc_r+0x24>
 8008f06:	4628      	mov	r0, r5
 8008f08:	b003      	add	sp, #12
 8008f0a:	bd30      	pop	{r4, r5, pc}
 8008f0c:	220c      	movs	r2, #12
 8008f0e:	6002      	str	r2, [r0, #0]
 8008f10:	2500      	movs	r5, #0
 8008f12:	e7f8      	b.n	8008f06 <_calloc_r+0x16>
 8008f14:	4621      	mov	r1, r4
 8008f16:	f7fe f92d 	bl	8007174 <memset>
 8008f1a:	e7f4      	b.n	8008f06 <_calloc_r+0x16>

08008f1c <_free_r>:
 8008f1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f1e:	2900      	cmp	r1, #0
 8008f20:	d044      	beq.n	8008fac <_free_r+0x90>
 8008f22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f26:	9001      	str	r0, [sp, #4]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f1a1 0404 	sub.w	r4, r1, #4
 8008f2e:	bfb8      	it	lt
 8008f30:	18e4      	addlt	r4, r4, r3
 8008f32:	f000 fa9b 	bl	800946c <__malloc_lock>
 8008f36:	4a1e      	ldr	r2, [pc, #120]	; (8008fb0 <_free_r+0x94>)
 8008f38:	9801      	ldr	r0, [sp, #4]
 8008f3a:	6813      	ldr	r3, [r2, #0]
 8008f3c:	b933      	cbnz	r3, 8008f4c <_free_r+0x30>
 8008f3e:	6063      	str	r3, [r4, #4]
 8008f40:	6014      	str	r4, [r2, #0]
 8008f42:	b003      	add	sp, #12
 8008f44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f48:	f000 ba96 	b.w	8009478 <__malloc_unlock>
 8008f4c:	42a3      	cmp	r3, r4
 8008f4e:	d908      	bls.n	8008f62 <_free_r+0x46>
 8008f50:	6825      	ldr	r5, [r4, #0]
 8008f52:	1961      	adds	r1, r4, r5
 8008f54:	428b      	cmp	r3, r1
 8008f56:	bf01      	itttt	eq
 8008f58:	6819      	ldreq	r1, [r3, #0]
 8008f5a:	685b      	ldreq	r3, [r3, #4]
 8008f5c:	1949      	addeq	r1, r1, r5
 8008f5e:	6021      	streq	r1, [r4, #0]
 8008f60:	e7ed      	b.n	8008f3e <_free_r+0x22>
 8008f62:	461a      	mov	r2, r3
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	b10b      	cbz	r3, 8008f6c <_free_r+0x50>
 8008f68:	42a3      	cmp	r3, r4
 8008f6a:	d9fa      	bls.n	8008f62 <_free_r+0x46>
 8008f6c:	6811      	ldr	r1, [r2, #0]
 8008f6e:	1855      	adds	r5, r2, r1
 8008f70:	42a5      	cmp	r5, r4
 8008f72:	d10b      	bne.n	8008f8c <_free_r+0x70>
 8008f74:	6824      	ldr	r4, [r4, #0]
 8008f76:	4421      	add	r1, r4
 8008f78:	1854      	adds	r4, r2, r1
 8008f7a:	42a3      	cmp	r3, r4
 8008f7c:	6011      	str	r1, [r2, #0]
 8008f7e:	d1e0      	bne.n	8008f42 <_free_r+0x26>
 8008f80:	681c      	ldr	r4, [r3, #0]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	6053      	str	r3, [r2, #4]
 8008f86:	4421      	add	r1, r4
 8008f88:	6011      	str	r1, [r2, #0]
 8008f8a:	e7da      	b.n	8008f42 <_free_r+0x26>
 8008f8c:	d902      	bls.n	8008f94 <_free_r+0x78>
 8008f8e:	230c      	movs	r3, #12
 8008f90:	6003      	str	r3, [r0, #0]
 8008f92:	e7d6      	b.n	8008f42 <_free_r+0x26>
 8008f94:	6825      	ldr	r5, [r4, #0]
 8008f96:	1961      	adds	r1, r4, r5
 8008f98:	428b      	cmp	r3, r1
 8008f9a:	bf04      	itt	eq
 8008f9c:	6819      	ldreq	r1, [r3, #0]
 8008f9e:	685b      	ldreq	r3, [r3, #4]
 8008fa0:	6063      	str	r3, [r4, #4]
 8008fa2:	bf04      	itt	eq
 8008fa4:	1949      	addeq	r1, r1, r5
 8008fa6:	6021      	streq	r1, [r4, #0]
 8008fa8:	6054      	str	r4, [r2, #4]
 8008faa:	e7ca      	b.n	8008f42 <_free_r+0x26>
 8008fac:	b003      	add	sp, #12
 8008fae:	bd30      	pop	{r4, r5, pc}
 8008fb0:	200005ec 	.word	0x200005ec

08008fb4 <sbrk_aligned>:
 8008fb4:	b570      	push	{r4, r5, r6, lr}
 8008fb6:	4e0e      	ldr	r6, [pc, #56]	; (8008ff0 <sbrk_aligned+0x3c>)
 8008fb8:	460c      	mov	r4, r1
 8008fba:	6831      	ldr	r1, [r6, #0]
 8008fbc:	4605      	mov	r5, r0
 8008fbe:	b911      	cbnz	r1, 8008fc6 <sbrk_aligned+0x12>
 8008fc0:	f000 f9e8 	bl	8009394 <_sbrk_r>
 8008fc4:	6030      	str	r0, [r6, #0]
 8008fc6:	4621      	mov	r1, r4
 8008fc8:	4628      	mov	r0, r5
 8008fca:	f000 f9e3 	bl	8009394 <_sbrk_r>
 8008fce:	1c43      	adds	r3, r0, #1
 8008fd0:	d00a      	beq.n	8008fe8 <sbrk_aligned+0x34>
 8008fd2:	1cc4      	adds	r4, r0, #3
 8008fd4:	f024 0403 	bic.w	r4, r4, #3
 8008fd8:	42a0      	cmp	r0, r4
 8008fda:	d007      	beq.n	8008fec <sbrk_aligned+0x38>
 8008fdc:	1a21      	subs	r1, r4, r0
 8008fde:	4628      	mov	r0, r5
 8008fe0:	f000 f9d8 	bl	8009394 <_sbrk_r>
 8008fe4:	3001      	adds	r0, #1
 8008fe6:	d101      	bne.n	8008fec <sbrk_aligned+0x38>
 8008fe8:	f04f 34ff 	mov.w	r4, #4294967295
 8008fec:	4620      	mov	r0, r4
 8008fee:	bd70      	pop	{r4, r5, r6, pc}
 8008ff0:	200005f0 	.word	0x200005f0

08008ff4 <_malloc_r>:
 8008ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff8:	1ccd      	adds	r5, r1, #3
 8008ffa:	f025 0503 	bic.w	r5, r5, #3
 8008ffe:	3508      	adds	r5, #8
 8009000:	2d0c      	cmp	r5, #12
 8009002:	bf38      	it	cc
 8009004:	250c      	movcc	r5, #12
 8009006:	2d00      	cmp	r5, #0
 8009008:	4607      	mov	r7, r0
 800900a:	db01      	blt.n	8009010 <_malloc_r+0x1c>
 800900c:	42a9      	cmp	r1, r5
 800900e:	d905      	bls.n	800901c <_malloc_r+0x28>
 8009010:	230c      	movs	r3, #12
 8009012:	603b      	str	r3, [r7, #0]
 8009014:	2600      	movs	r6, #0
 8009016:	4630      	mov	r0, r6
 8009018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800901c:	4e2e      	ldr	r6, [pc, #184]	; (80090d8 <_malloc_r+0xe4>)
 800901e:	f000 fa25 	bl	800946c <__malloc_lock>
 8009022:	6833      	ldr	r3, [r6, #0]
 8009024:	461c      	mov	r4, r3
 8009026:	bb34      	cbnz	r4, 8009076 <_malloc_r+0x82>
 8009028:	4629      	mov	r1, r5
 800902a:	4638      	mov	r0, r7
 800902c:	f7ff ffc2 	bl	8008fb4 <sbrk_aligned>
 8009030:	1c43      	adds	r3, r0, #1
 8009032:	4604      	mov	r4, r0
 8009034:	d14d      	bne.n	80090d2 <_malloc_r+0xde>
 8009036:	6834      	ldr	r4, [r6, #0]
 8009038:	4626      	mov	r6, r4
 800903a:	2e00      	cmp	r6, #0
 800903c:	d140      	bne.n	80090c0 <_malloc_r+0xcc>
 800903e:	6823      	ldr	r3, [r4, #0]
 8009040:	4631      	mov	r1, r6
 8009042:	4638      	mov	r0, r7
 8009044:	eb04 0803 	add.w	r8, r4, r3
 8009048:	f000 f9a4 	bl	8009394 <_sbrk_r>
 800904c:	4580      	cmp	r8, r0
 800904e:	d13a      	bne.n	80090c6 <_malloc_r+0xd2>
 8009050:	6821      	ldr	r1, [r4, #0]
 8009052:	3503      	adds	r5, #3
 8009054:	1a6d      	subs	r5, r5, r1
 8009056:	f025 0503 	bic.w	r5, r5, #3
 800905a:	3508      	adds	r5, #8
 800905c:	2d0c      	cmp	r5, #12
 800905e:	bf38      	it	cc
 8009060:	250c      	movcc	r5, #12
 8009062:	4629      	mov	r1, r5
 8009064:	4638      	mov	r0, r7
 8009066:	f7ff ffa5 	bl	8008fb4 <sbrk_aligned>
 800906a:	3001      	adds	r0, #1
 800906c:	d02b      	beq.n	80090c6 <_malloc_r+0xd2>
 800906e:	6823      	ldr	r3, [r4, #0]
 8009070:	442b      	add	r3, r5
 8009072:	6023      	str	r3, [r4, #0]
 8009074:	e00e      	b.n	8009094 <_malloc_r+0xa0>
 8009076:	6822      	ldr	r2, [r4, #0]
 8009078:	1b52      	subs	r2, r2, r5
 800907a:	d41e      	bmi.n	80090ba <_malloc_r+0xc6>
 800907c:	2a0b      	cmp	r2, #11
 800907e:	d916      	bls.n	80090ae <_malloc_r+0xba>
 8009080:	1961      	adds	r1, r4, r5
 8009082:	42a3      	cmp	r3, r4
 8009084:	6025      	str	r5, [r4, #0]
 8009086:	bf18      	it	ne
 8009088:	6059      	strne	r1, [r3, #4]
 800908a:	6863      	ldr	r3, [r4, #4]
 800908c:	bf08      	it	eq
 800908e:	6031      	streq	r1, [r6, #0]
 8009090:	5162      	str	r2, [r4, r5]
 8009092:	604b      	str	r3, [r1, #4]
 8009094:	4638      	mov	r0, r7
 8009096:	f104 060b 	add.w	r6, r4, #11
 800909a:	f000 f9ed 	bl	8009478 <__malloc_unlock>
 800909e:	f026 0607 	bic.w	r6, r6, #7
 80090a2:	1d23      	adds	r3, r4, #4
 80090a4:	1af2      	subs	r2, r6, r3
 80090a6:	d0b6      	beq.n	8009016 <_malloc_r+0x22>
 80090a8:	1b9b      	subs	r3, r3, r6
 80090aa:	50a3      	str	r3, [r4, r2]
 80090ac:	e7b3      	b.n	8009016 <_malloc_r+0x22>
 80090ae:	6862      	ldr	r2, [r4, #4]
 80090b0:	42a3      	cmp	r3, r4
 80090b2:	bf0c      	ite	eq
 80090b4:	6032      	streq	r2, [r6, #0]
 80090b6:	605a      	strne	r2, [r3, #4]
 80090b8:	e7ec      	b.n	8009094 <_malloc_r+0xa0>
 80090ba:	4623      	mov	r3, r4
 80090bc:	6864      	ldr	r4, [r4, #4]
 80090be:	e7b2      	b.n	8009026 <_malloc_r+0x32>
 80090c0:	4634      	mov	r4, r6
 80090c2:	6876      	ldr	r6, [r6, #4]
 80090c4:	e7b9      	b.n	800903a <_malloc_r+0x46>
 80090c6:	230c      	movs	r3, #12
 80090c8:	603b      	str	r3, [r7, #0]
 80090ca:	4638      	mov	r0, r7
 80090cc:	f000 f9d4 	bl	8009478 <__malloc_unlock>
 80090d0:	e7a1      	b.n	8009016 <_malloc_r+0x22>
 80090d2:	6025      	str	r5, [r4, #0]
 80090d4:	e7de      	b.n	8009094 <_malloc_r+0xa0>
 80090d6:	bf00      	nop
 80090d8:	200005ec 	.word	0x200005ec

080090dc <__ssputs_r>:
 80090dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090e0:	688e      	ldr	r6, [r1, #8]
 80090e2:	429e      	cmp	r6, r3
 80090e4:	4682      	mov	sl, r0
 80090e6:	460c      	mov	r4, r1
 80090e8:	4690      	mov	r8, r2
 80090ea:	461f      	mov	r7, r3
 80090ec:	d838      	bhi.n	8009160 <__ssputs_r+0x84>
 80090ee:	898a      	ldrh	r2, [r1, #12]
 80090f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80090f4:	d032      	beq.n	800915c <__ssputs_r+0x80>
 80090f6:	6825      	ldr	r5, [r4, #0]
 80090f8:	6909      	ldr	r1, [r1, #16]
 80090fa:	eba5 0901 	sub.w	r9, r5, r1
 80090fe:	6965      	ldr	r5, [r4, #20]
 8009100:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009104:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009108:	3301      	adds	r3, #1
 800910a:	444b      	add	r3, r9
 800910c:	106d      	asrs	r5, r5, #1
 800910e:	429d      	cmp	r5, r3
 8009110:	bf38      	it	cc
 8009112:	461d      	movcc	r5, r3
 8009114:	0553      	lsls	r3, r2, #21
 8009116:	d531      	bpl.n	800917c <__ssputs_r+0xa0>
 8009118:	4629      	mov	r1, r5
 800911a:	f7ff ff6b 	bl	8008ff4 <_malloc_r>
 800911e:	4606      	mov	r6, r0
 8009120:	b950      	cbnz	r0, 8009138 <__ssputs_r+0x5c>
 8009122:	230c      	movs	r3, #12
 8009124:	f8ca 3000 	str.w	r3, [sl]
 8009128:	89a3      	ldrh	r3, [r4, #12]
 800912a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800912e:	81a3      	strh	r3, [r4, #12]
 8009130:	f04f 30ff 	mov.w	r0, #4294967295
 8009134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009138:	6921      	ldr	r1, [r4, #16]
 800913a:	464a      	mov	r2, r9
 800913c:	f7ff fb46 	bl	80087cc <memcpy>
 8009140:	89a3      	ldrh	r3, [r4, #12]
 8009142:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800914a:	81a3      	strh	r3, [r4, #12]
 800914c:	6126      	str	r6, [r4, #16]
 800914e:	6165      	str	r5, [r4, #20]
 8009150:	444e      	add	r6, r9
 8009152:	eba5 0509 	sub.w	r5, r5, r9
 8009156:	6026      	str	r6, [r4, #0]
 8009158:	60a5      	str	r5, [r4, #8]
 800915a:	463e      	mov	r6, r7
 800915c:	42be      	cmp	r6, r7
 800915e:	d900      	bls.n	8009162 <__ssputs_r+0x86>
 8009160:	463e      	mov	r6, r7
 8009162:	6820      	ldr	r0, [r4, #0]
 8009164:	4632      	mov	r2, r6
 8009166:	4641      	mov	r1, r8
 8009168:	f000 f966 	bl	8009438 <memmove>
 800916c:	68a3      	ldr	r3, [r4, #8]
 800916e:	1b9b      	subs	r3, r3, r6
 8009170:	60a3      	str	r3, [r4, #8]
 8009172:	6823      	ldr	r3, [r4, #0]
 8009174:	4433      	add	r3, r6
 8009176:	6023      	str	r3, [r4, #0]
 8009178:	2000      	movs	r0, #0
 800917a:	e7db      	b.n	8009134 <__ssputs_r+0x58>
 800917c:	462a      	mov	r2, r5
 800917e:	f000 f981 	bl	8009484 <_realloc_r>
 8009182:	4606      	mov	r6, r0
 8009184:	2800      	cmp	r0, #0
 8009186:	d1e1      	bne.n	800914c <__ssputs_r+0x70>
 8009188:	6921      	ldr	r1, [r4, #16]
 800918a:	4650      	mov	r0, sl
 800918c:	f7ff fec6 	bl	8008f1c <_free_r>
 8009190:	e7c7      	b.n	8009122 <__ssputs_r+0x46>
	...

08009194 <_svfiprintf_r>:
 8009194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009198:	4698      	mov	r8, r3
 800919a:	898b      	ldrh	r3, [r1, #12]
 800919c:	061b      	lsls	r3, r3, #24
 800919e:	b09d      	sub	sp, #116	; 0x74
 80091a0:	4607      	mov	r7, r0
 80091a2:	460d      	mov	r5, r1
 80091a4:	4614      	mov	r4, r2
 80091a6:	d50e      	bpl.n	80091c6 <_svfiprintf_r+0x32>
 80091a8:	690b      	ldr	r3, [r1, #16]
 80091aa:	b963      	cbnz	r3, 80091c6 <_svfiprintf_r+0x32>
 80091ac:	2140      	movs	r1, #64	; 0x40
 80091ae:	f7ff ff21 	bl	8008ff4 <_malloc_r>
 80091b2:	6028      	str	r0, [r5, #0]
 80091b4:	6128      	str	r0, [r5, #16]
 80091b6:	b920      	cbnz	r0, 80091c2 <_svfiprintf_r+0x2e>
 80091b8:	230c      	movs	r3, #12
 80091ba:	603b      	str	r3, [r7, #0]
 80091bc:	f04f 30ff 	mov.w	r0, #4294967295
 80091c0:	e0d1      	b.n	8009366 <_svfiprintf_r+0x1d2>
 80091c2:	2340      	movs	r3, #64	; 0x40
 80091c4:	616b      	str	r3, [r5, #20]
 80091c6:	2300      	movs	r3, #0
 80091c8:	9309      	str	r3, [sp, #36]	; 0x24
 80091ca:	2320      	movs	r3, #32
 80091cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80091d4:	2330      	movs	r3, #48	; 0x30
 80091d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009380 <_svfiprintf_r+0x1ec>
 80091da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091de:	f04f 0901 	mov.w	r9, #1
 80091e2:	4623      	mov	r3, r4
 80091e4:	469a      	mov	sl, r3
 80091e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091ea:	b10a      	cbz	r2, 80091f0 <_svfiprintf_r+0x5c>
 80091ec:	2a25      	cmp	r2, #37	; 0x25
 80091ee:	d1f9      	bne.n	80091e4 <_svfiprintf_r+0x50>
 80091f0:	ebba 0b04 	subs.w	fp, sl, r4
 80091f4:	d00b      	beq.n	800920e <_svfiprintf_r+0x7a>
 80091f6:	465b      	mov	r3, fp
 80091f8:	4622      	mov	r2, r4
 80091fa:	4629      	mov	r1, r5
 80091fc:	4638      	mov	r0, r7
 80091fe:	f7ff ff6d 	bl	80090dc <__ssputs_r>
 8009202:	3001      	adds	r0, #1
 8009204:	f000 80aa 	beq.w	800935c <_svfiprintf_r+0x1c8>
 8009208:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800920a:	445a      	add	r2, fp
 800920c:	9209      	str	r2, [sp, #36]	; 0x24
 800920e:	f89a 3000 	ldrb.w	r3, [sl]
 8009212:	2b00      	cmp	r3, #0
 8009214:	f000 80a2 	beq.w	800935c <_svfiprintf_r+0x1c8>
 8009218:	2300      	movs	r3, #0
 800921a:	f04f 32ff 	mov.w	r2, #4294967295
 800921e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009222:	f10a 0a01 	add.w	sl, sl, #1
 8009226:	9304      	str	r3, [sp, #16]
 8009228:	9307      	str	r3, [sp, #28]
 800922a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800922e:	931a      	str	r3, [sp, #104]	; 0x68
 8009230:	4654      	mov	r4, sl
 8009232:	2205      	movs	r2, #5
 8009234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009238:	4851      	ldr	r0, [pc, #324]	; (8009380 <_svfiprintf_r+0x1ec>)
 800923a:	f7f6 ffd1 	bl	80001e0 <memchr>
 800923e:	9a04      	ldr	r2, [sp, #16]
 8009240:	b9d8      	cbnz	r0, 800927a <_svfiprintf_r+0xe6>
 8009242:	06d0      	lsls	r0, r2, #27
 8009244:	bf44      	itt	mi
 8009246:	2320      	movmi	r3, #32
 8009248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800924c:	0711      	lsls	r1, r2, #28
 800924e:	bf44      	itt	mi
 8009250:	232b      	movmi	r3, #43	; 0x2b
 8009252:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009256:	f89a 3000 	ldrb.w	r3, [sl]
 800925a:	2b2a      	cmp	r3, #42	; 0x2a
 800925c:	d015      	beq.n	800928a <_svfiprintf_r+0xf6>
 800925e:	9a07      	ldr	r2, [sp, #28]
 8009260:	4654      	mov	r4, sl
 8009262:	2000      	movs	r0, #0
 8009264:	f04f 0c0a 	mov.w	ip, #10
 8009268:	4621      	mov	r1, r4
 800926a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800926e:	3b30      	subs	r3, #48	; 0x30
 8009270:	2b09      	cmp	r3, #9
 8009272:	d94e      	bls.n	8009312 <_svfiprintf_r+0x17e>
 8009274:	b1b0      	cbz	r0, 80092a4 <_svfiprintf_r+0x110>
 8009276:	9207      	str	r2, [sp, #28]
 8009278:	e014      	b.n	80092a4 <_svfiprintf_r+0x110>
 800927a:	eba0 0308 	sub.w	r3, r0, r8
 800927e:	fa09 f303 	lsl.w	r3, r9, r3
 8009282:	4313      	orrs	r3, r2
 8009284:	9304      	str	r3, [sp, #16]
 8009286:	46a2      	mov	sl, r4
 8009288:	e7d2      	b.n	8009230 <_svfiprintf_r+0x9c>
 800928a:	9b03      	ldr	r3, [sp, #12]
 800928c:	1d19      	adds	r1, r3, #4
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	9103      	str	r1, [sp, #12]
 8009292:	2b00      	cmp	r3, #0
 8009294:	bfbb      	ittet	lt
 8009296:	425b      	neglt	r3, r3
 8009298:	f042 0202 	orrlt.w	r2, r2, #2
 800929c:	9307      	strge	r3, [sp, #28]
 800929e:	9307      	strlt	r3, [sp, #28]
 80092a0:	bfb8      	it	lt
 80092a2:	9204      	strlt	r2, [sp, #16]
 80092a4:	7823      	ldrb	r3, [r4, #0]
 80092a6:	2b2e      	cmp	r3, #46	; 0x2e
 80092a8:	d10c      	bne.n	80092c4 <_svfiprintf_r+0x130>
 80092aa:	7863      	ldrb	r3, [r4, #1]
 80092ac:	2b2a      	cmp	r3, #42	; 0x2a
 80092ae:	d135      	bne.n	800931c <_svfiprintf_r+0x188>
 80092b0:	9b03      	ldr	r3, [sp, #12]
 80092b2:	1d1a      	adds	r2, r3, #4
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	9203      	str	r2, [sp, #12]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	bfb8      	it	lt
 80092bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80092c0:	3402      	adds	r4, #2
 80092c2:	9305      	str	r3, [sp, #20]
 80092c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009390 <_svfiprintf_r+0x1fc>
 80092c8:	7821      	ldrb	r1, [r4, #0]
 80092ca:	2203      	movs	r2, #3
 80092cc:	4650      	mov	r0, sl
 80092ce:	f7f6 ff87 	bl	80001e0 <memchr>
 80092d2:	b140      	cbz	r0, 80092e6 <_svfiprintf_r+0x152>
 80092d4:	2340      	movs	r3, #64	; 0x40
 80092d6:	eba0 000a 	sub.w	r0, r0, sl
 80092da:	fa03 f000 	lsl.w	r0, r3, r0
 80092de:	9b04      	ldr	r3, [sp, #16]
 80092e0:	4303      	orrs	r3, r0
 80092e2:	3401      	adds	r4, #1
 80092e4:	9304      	str	r3, [sp, #16]
 80092e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092ea:	4826      	ldr	r0, [pc, #152]	; (8009384 <_svfiprintf_r+0x1f0>)
 80092ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092f0:	2206      	movs	r2, #6
 80092f2:	f7f6 ff75 	bl	80001e0 <memchr>
 80092f6:	2800      	cmp	r0, #0
 80092f8:	d038      	beq.n	800936c <_svfiprintf_r+0x1d8>
 80092fa:	4b23      	ldr	r3, [pc, #140]	; (8009388 <_svfiprintf_r+0x1f4>)
 80092fc:	bb1b      	cbnz	r3, 8009346 <_svfiprintf_r+0x1b2>
 80092fe:	9b03      	ldr	r3, [sp, #12]
 8009300:	3307      	adds	r3, #7
 8009302:	f023 0307 	bic.w	r3, r3, #7
 8009306:	3308      	adds	r3, #8
 8009308:	9303      	str	r3, [sp, #12]
 800930a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800930c:	4433      	add	r3, r6
 800930e:	9309      	str	r3, [sp, #36]	; 0x24
 8009310:	e767      	b.n	80091e2 <_svfiprintf_r+0x4e>
 8009312:	fb0c 3202 	mla	r2, ip, r2, r3
 8009316:	460c      	mov	r4, r1
 8009318:	2001      	movs	r0, #1
 800931a:	e7a5      	b.n	8009268 <_svfiprintf_r+0xd4>
 800931c:	2300      	movs	r3, #0
 800931e:	3401      	adds	r4, #1
 8009320:	9305      	str	r3, [sp, #20]
 8009322:	4619      	mov	r1, r3
 8009324:	f04f 0c0a 	mov.w	ip, #10
 8009328:	4620      	mov	r0, r4
 800932a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800932e:	3a30      	subs	r2, #48	; 0x30
 8009330:	2a09      	cmp	r2, #9
 8009332:	d903      	bls.n	800933c <_svfiprintf_r+0x1a8>
 8009334:	2b00      	cmp	r3, #0
 8009336:	d0c5      	beq.n	80092c4 <_svfiprintf_r+0x130>
 8009338:	9105      	str	r1, [sp, #20]
 800933a:	e7c3      	b.n	80092c4 <_svfiprintf_r+0x130>
 800933c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009340:	4604      	mov	r4, r0
 8009342:	2301      	movs	r3, #1
 8009344:	e7f0      	b.n	8009328 <_svfiprintf_r+0x194>
 8009346:	ab03      	add	r3, sp, #12
 8009348:	9300      	str	r3, [sp, #0]
 800934a:	462a      	mov	r2, r5
 800934c:	4b0f      	ldr	r3, [pc, #60]	; (800938c <_svfiprintf_r+0x1f8>)
 800934e:	a904      	add	r1, sp, #16
 8009350:	4638      	mov	r0, r7
 8009352:	f7fd ffb7 	bl	80072c4 <_printf_float>
 8009356:	1c42      	adds	r2, r0, #1
 8009358:	4606      	mov	r6, r0
 800935a:	d1d6      	bne.n	800930a <_svfiprintf_r+0x176>
 800935c:	89ab      	ldrh	r3, [r5, #12]
 800935e:	065b      	lsls	r3, r3, #25
 8009360:	f53f af2c 	bmi.w	80091bc <_svfiprintf_r+0x28>
 8009364:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009366:	b01d      	add	sp, #116	; 0x74
 8009368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800936c:	ab03      	add	r3, sp, #12
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	462a      	mov	r2, r5
 8009372:	4b06      	ldr	r3, [pc, #24]	; (800938c <_svfiprintf_r+0x1f8>)
 8009374:	a904      	add	r1, sp, #16
 8009376:	4638      	mov	r0, r7
 8009378:	f7fe fa48 	bl	800780c <_printf_i>
 800937c:	e7eb      	b.n	8009356 <_svfiprintf_r+0x1c2>
 800937e:	bf00      	nop
 8009380:	0800a9ac 	.word	0x0800a9ac
 8009384:	0800a9b6 	.word	0x0800a9b6
 8009388:	080072c5 	.word	0x080072c5
 800938c:	080090dd 	.word	0x080090dd
 8009390:	0800a9b2 	.word	0x0800a9b2

08009394 <_sbrk_r>:
 8009394:	b538      	push	{r3, r4, r5, lr}
 8009396:	4d06      	ldr	r5, [pc, #24]	; (80093b0 <_sbrk_r+0x1c>)
 8009398:	2300      	movs	r3, #0
 800939a:	4604      	mov	r4, r0
 800939c:	4608      	mov	r0, r1
 800939e:	602b      	str	r3, [r5, #0]
 80093a0:	f7f9 fd7c 	bl	8002e9c <_sbrk>
 80093a4:	1c43      	adds	r3, r0, #1
 80093a6:	d102      	bne.n	80093ae <_sbrk_r+0x1a>
 80093a8:	682b      	ldr	r3, [r5, #0]
 80093aa:	b103      	cbz	r3, 80093ae <_sbrk_r+0x1a>
 80093ac:	6023      	str	r3, [r4, #0]
 80093ae:	bd38      	pop	{r3, r4, r5, pc}
 80093b0:	200005f4 	.word	0x200005f4

080093b4 <__assert_func>:
 80093b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093b6:	4614      	mov	r4, r2
 80093b8:	461a      	mov	r2, r3
 80093ba:	4b09      	ldr	r3, [pc, #36]	; (80093e0 <__assert_func+0x2c>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4605      	mov	r5, r0
 80093c0:	68d8      	ldr	r0, [r3, #12]
 80093c2:	b14c      	cbz	r4, 80093d8 <__assert_func+0x24>
 80093c4:	4b07      	ldr	r3, [pc, #28]	; (80093e4 <__assert_func+0x30>)
 80093c6:	9100      	str	r1, [sp, #0]
 80093c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80093cc:	4906      	ldr	r1, [pc, #24]	; (80093e8 <__assert_func+0x34>)
 80093ce:	462b      	mov	r3, r5
 80093d0:	f000 f80e 	bl	80093f0 <fiprintf>
 80093d4:	f000 faac 	bl	8009930 <abort>
 80093d8:	4b04      	ldr	r3, [pc, #16]	; (80093ec <__assert_func+0x38>)
 80093da:	461c      	mov	r4, r3
 80093dc:	e7f3      	b.n	80093c6 <__assert_func+0x12>
 80093de:	bf00      	nop
 80093e0:	200000a4 	.word	0x200000a4
 80093e4:	0800a9bd 	.word	0x0800a9bd
 80093e8:	0800a9ca 	.word	0x0800a9ca
 80093ec:	0800a9f8 	.word	0x0800a9f8

080093f0 <fiprintf>:
 80093f0:	b40e      	push	{r1, r2, r3}
 80093f2:	b503      	push	{r0, r1, lr}
 80093f4:	4601      	mov	r1, r0
 80093f6:	ab03      	add	r3, sp, #12
 80093f8:	4805      	ldr	r0, [pc, #20]	; (8009410 <fiprintf+0x20>)
 80093fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80093fe:	6800      	ldr	r0, [r0, #0]
 8009400:	9301      	str	r3, [sp, #4]
 8009402:	f000 f897 	bl	8009534 <_vfiprintf_r>
 8009406:	b002      	add	sp, #8
 8009408:	f85d eb04 	ldr.w	lr, [sp], #4
 800940c:	b003      	add	sp, #12
 800940e:	4770      	bx	lr
 8009410:	200000a4 	.word	0x200000a4

08009414 <__ascii_mbtowc>:
 8009414:	b082      	sub	sp, #8
 8009416:	b901      	cbnz	r1, 800941a <__ascii_mbtowc+0x6>
 8009418:	a901      	add	r1, sp, #4
 800941a:	b142      	cbz	r2, 800942e <__ascii_mbtowc+0x1a>
 800941c:	b14b      	cbz	r3, 8009432 <__ascii_mbtowc+0x1e>
 800941e:	7813      	ldrb	r3, [r2, #0]
 8009420:	600b      	str	r3, [r1, #0]
 8009422:	7812      	ldrb	r2, [r2, #0]
 8009424:	1e10      	subs	r0, r2, #0
 8009426:	bf18      	it	ne
 8009428:	2001      	movne	r0, #1
 800942a:	b002      	add	sp, #8
 800942c:	4770      	bx	lr
 800942e:	4610      	mov	r0, r2
 8009430:	e7fb      	b.n	800942a <__ascii_mbtowc+0x16>
 8009432:	f06f 0001 	mvn.w	r0, #1
 8009436:	e7f8      	b.n	800942a <__ascii_mbtowc+0x16>

08009438 <memmove>:
 8009438:	4288      	cmp	r0, r1
 800943a:	b510      	push	{r4, lr}
 800943c:	eb01 0402 	add.w	r4, r1, r2
 8009440:	d902      	bls.n	8009448 <memmove+0x10>
 8009442:	4284      	cmp	r4, r0
 8009444:	4623      	mov	r3, r4
 8009446:	d807      	bhi.n	8009458 <memmove+0x20>
 8009448:	1e43      	subs	r3, r0, #1
 800944a:	42a1      	cmp	r1, r4
 800944c:	d008      	beq.n	8009460 <memmove+0x28>
 800944e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009452:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009456:	e7f8      	b.n	800944a <memmove+0x12>
 8009458:	4402      	add	r2, r0
 800945a:	4601      	mov	r1, r0
 800945c:	428a      	cmp	r2, r1
 800945e:	d100      	bne.n	8009462 <memmove+0x2a>
 8009460:	bd10      	pop	{r4, pc}
 8009462:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009466:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800946a:	e7f7      	b.n	800945c <memmove+0x24>

0800946c <__malloc_lock>:
 800946c:	4801      	ldr	r0, [pc, #4]	; (8009474 <__malloc_lock+0x8>)
 800946e:	f000 bc1f 	b.w	8009cb0 <__retarget_lock_acquire_recursive>
 8009472:	bf00      	nop
 8009474:	200005f8 	.word	0x200005f8

08009478 <__malloc_unlock>:
 8009478:	4801      	ldr	r0, [pc, #4]	; (8009480 <__malloc_unlock+0x8>)
 800947a:	f000 bc1a 	b.w	8009cb2 <__retarget_lock_release_recursive>
 800947e:	bf00      	nop
 8009480:	200005f8 	.word	0x200005f8

08009484 <_realloc_r>:
 8009484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009488:	4680      	mov	r8, r0
 800948a:	4614      	mov	r4, r2
 800948c:	460e      	mov	r6, r1
 800948e:	b921      	cbnz	r1, 800949a <_realloc_r+0x16>
 8009490:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009494:	4611      	mov	r1, r2
 8009496:	f7ff bdad 	b.w	8008ff4 <_malloc_r>
 800949a:	b92a      	cbnz	r2, 80094a8 <_realloc_r+0x24>
 800949c:	f7ff fd3e 	bl	8008f1c <_free_r>
 80094a0:	4625      	mov	r5, r4
 80094a2:	4628      	mov	r0, r5
 80094a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094a8:	f000 fc6a 	bl	8009d80 <_malloc_usable_size_r>
 80094ac:	4284      	cmp	r4, r0
 80094ae:	4607      	mov	r7, r0
 80094b0:	d802      	bhi.n	80094b8 <_realloc_r+0x34>
 80094b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094b6:	d812      	bhi.n	80094de <_realloc_r+0x5a>
 80094b8:	4621      	mov	r1, r4
 80094ba:	4640      	mov	r0, r8
 80094bc:	f7ff fd9a 	bl	8008ff4 <_malloc_r>
 80094c0:	4605      	mov	r5, r0
 80094c2:	2800      	cmp	r0, #0
 80094c4:	d0ed      	beq.n	80094a2 <_realloc_r+0x1e>
 80094c6:	42bc      	cmp	r4, r7
 80094c8:	4622      	mov	r2, r4
 80094ca:	4631      	mov	r1, r6
 80094cc:	bf28      	it	cs
 80094ce:	463a      	movcs	r2, r7
 80094d0:	f7ff f97c 	bl	80087cc <memcpy>
 80094d4:	4631      	mov	r1, r6
 80094d6:	4640      	mov	r0, r8
 80094d8:	f7ff fd20 	bl	8008f1c <_free_r>
 80094dc:	e7e1      	b.n	80094a2 <_realloc_r+0x1e>
 80094de:	4635      	mov	r5, r6
 80094e0:	e7df      	b.n	80094a2 <_realloc_r+0x1e>

080094e2 <__sfputc_r>:
 80094e2:	6893      	ldr	r3, [r2, #8]
 80094e4:	3b01      	subs	r3, #1
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	b410      	push	{r4}
 80094ea:	6093      	str	r3, [r2, #8]
 80094ec:	da08      	bge.n	8009500 <__sfputc_r+0x1e>
 80094ee:	6994      	ldr	r4, [r2, #24]
 80094f0:	42a3      	cmp	r3, r4
 80094f2:	db01      	blt.n	80094f8 <__sfputc_r+0x16>
 80094f4:	290a      	cmp	r1, #10
 80094f6:	d103      	bne.n	8009500 <__sfputc_r+0x1e>
 80094f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094fc:	f000 b94a 	b.w	8009794 <__swbuf_r>
 8009500:	6813      	ldr	r3, [r2, #0]
 8009502:	1c58      	adds	r0, r3, #1
 8009504:	6010      	str	r0, [r2, #0]
 8009506:	7019      	strb	r1, [r3, #0]
 8009508:	4608      	mov	r0, r1
 800950a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800950e:	4770      	bx	lr

08009510 <__sfputs_r>:
 8009510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009512:	4606      	mov	r6, r0
 8009514:	460f      	mov	r7, r1
 8009516:	4614      	mov	r4, r2
 8009518:	18d5      	adds	r5, r2, r3
 800951a:	42ac      	cmp	r4, r5
 800951c:	d101      	bne.n	8009522 <__sfputs_r+0x12>
 800951e:	2000      	movs	r0, #0
 8009520:	e007      	b.n	8009532 <__sfputs_r+0x22>
 8009522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009526:	463a      	mov	r2, r7
 8009528:	4630      	mov	r0, r6
 800952a:	f7ff ffda 	bl	80094e2 <__sfputc_r>
 800952e:	1c43      	adds	r3, r0, #1
 8009530:	d1f3      	bne.n	800951a <__sfputs_r+0xa>
 8009532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009534 <_vfiprintf_r>:
 8009534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009538:	460d      	mov	r5, r1
 800953a:	b09d      	sub	sp, #116	; 0x74
 800953c:	4614      	mov	r4, r2
 800953e:	4698      	mov	r8, r3
 8009540:	4606      	mov	r6, r0
 8009542:	b118      	cbz	r0, 800954c <_vfiprintf_r+0x18>
 8009544:	6983      	ldr	r3, [r0, #24]
 8009546:	b90b      	cbnz	r3, 800954c <_vfiprintf_r+0x18>
 8009548:	f000 fb14 	bl	8009b74 <__sinit>
 800954c:	4b89      	ldr	r3, [pc, #548]	; (8009774 <_vfiprintf_r+0x240>)
 800954e:	429d      	cmp	r5, r3
 8009550:	d11b      	bne.n	800958a <_vfiprintf_r+0x56>
 8009552:	6875      	ldr	r5, [r6, #4]
 8009554:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009556:	07d9      	lsls	r1, r3, #31
 8009558:	d405      	bmi.n	8009566 <_vfiprintf_r+0x32>
 800955a:	89ab      	ldrh	r3, [r5, #12]
 800955c:	059a      	lsls	r2, r3, #22
 800955e:	d402      	bmi.n	8009566 <_vfiprintf_r+0x32>
 8009560:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009562:	f000 fba5 	bl	8009cb0 <__retarget_lock_acquire_recursive>
 8009566:	89ab      	ldrh	r3, [r5, #12]
 8009568:	071b      	lsls	r3, r3, #28
 800956a:	d501      	bpl.n	8009570 <_vfiprintf_r+0x3c>
 800956c:	692b      	ldr	r3, [r5, #16]
 800956e:	b9eb      	cbnz	r3, 80095ac <_vfiprintf_r+0x78>
 8009570:	4629      	mov	r1, r5
 8009572:	4630      	mov	r0, r6
 8009574:	f000 f96e 	bl	8009854 <__swsetup_r>
 8009578:	b1c0      	cbz	r0, 80095ac <_vfiprintf_r+0x78>
 800957a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800957c:	07dc      	lsls	r4, r3, #31
 800957e:	d50e      	bpl.n	800959e <_vfiprintf_r+0x6a>
 8009580:	f04f 30ff 	mov.w	r0, #4294967295
 8009584:	b01d      	add	sp, #116	; 0x74
 8009586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800958a:	4b7b      	ldr	r3, [pc, #492]	; (8009778 <_vfiprintf_r+0x244>)
 800958c:	429d      	cmp	r5, r3
 800958e:	d101      	bne.n	8009594 <_vfiprintf_r+0x60>
 8009590:	68b5      	ldr	r5, [r6, #8]
 8009592:	e7df      	b.n	8009554 <_vfiprintf_r+0x20>
 8009594:	4b79      	ldr	r3, [pc, #484]	; (800977c <_vfiprintf_r+0x248>)
 8009596:	429d      	cmp	r5, r3
 8009598:	bf08      	it	eq
 800959a:	68f5      	ldreq	r5, [r6, #12]
 800959c:	e7da      	b.n	8009554 <_vfiprintf_r+0x20>
 800959e:	89ab      	ldrh	r3, [r5, #12]
 80095a0:	0598      	lsls	r0, r3, #22
 80095a2:	d4ed      	bmi.n	8009580 <_vfiprintf_r+0x4c>
 80095a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095a6:	f000 fb84 	bl	8009cb2 <__retarget_lock_release_recursive>
 80095aa:	e7e9      	b.n	8009580 <_vfiprintf_r+0x4c>
 80095ac:	2300      	movs	r3, #0
 80095ae:	9309      	str	r3, [sp, #36]	; 0x24
 80095b0:	2320      	movs	r3, #32
 80095b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80095ba:	2330      	movs	r3, #48	; 0x30
 80095bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009780 <_vfiprintf_r+0x24c>
 80095c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095c4:	f04f 0901 	mov.w	r9, #1
 80095c8:	4623      	mov	r3, r4
 80095ca:	469a      	mov	sl, r3
 80095cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095d0:	b10a      	cbz	r2, 80095d6 <_vfiprintf_r+0xa2>
 80095d2:	2a25      	cmp	r2, #37	; 0x25
 80095d4:	d1f9      	bne.n	80095ca <_vfiprintf_r+0x96>
 80095d6:	ebba 0b04 	subs.w	fp, sl, r4
 80095da:	d00b      	beq.n	80095f4 <_vfiprintf_r+0xc0>
 80095dc:	465b      	mov	r3, fp
 80095de:	4622      	mov	r2, r4
 80095e0:	4629      	mov	r1, r5
 80095e2:	4630      	mov	r0, r6
 80095e4:	f7ff ff94 	bl	8009510 <__sfputs_r>
 80095e8:	3001      	adds	r0, #1
 80095ea:	f000 80aa 	beq.w	8009742 <_vfiprintf_r+0x20e>
 80095ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095f0:	445a      	add	r2, fp
 80095f2:	9209      	str	r2, [sp, #36]	; 0x24
 80095f4:	f89a 3000 	ldrb.w	r3, [sl]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	f000 80a2 	beq.w	8009742 <_vfiprintf_r+0x20e>
 80095fe:	2300      	movs	r3, #0
 8009600:	f04f 32ff 	mov.w	r2, #4294967295
 8009604:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009608:	f10a 0a01 	add.w	sl, sl, #1
 800960c:	9304      	str	r3, [sp, #16]
 800960e:	9307      	str	r3, [sp, #28]
 8009610:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009614:	931a      	str	r3, [sp, #104]	; 0x68
 8009616:	4654      	mov	r4, sl
 8009618:	2205      	movs	r2, #5
 800961a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800961e:	4858      	ldr	r0, [pc, #352]	; (8009780 <_vfiprintf_r+0x24c>)
 8009620:	f7f6 fdde 	bl	80001e0 <memchr>
 8009624:	9a04      	ldr	r2, [sp, #16]
 8009626:	b9d8      	cbnz	r0, 8009660 <_vfiprintf_r+0x12c>
 8009628:	06d1      	lsls	r1, r2, #27
 800962a:	bf44      	itt	mi
 800962c:	2320      	movmi	r3, #32
 800962e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009632:	0713      	lsls	r3, r2, #28
 8009634:	bf44      	itt	mi
 8009636:	232b      	movmi	r3, #43	; 0x2b
 8009638:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800963c:	f89a 3000 	ldrb.w	r3, [sl]
 8009640:	2b2a      	cmp	r3, #42	; 0x2a
 8009642:	d015      	beq.n	8009670 <_vfiprintf_r+0x13c>
 8009644:	9a07      	ldr	r2, [sp, #28]
 8009646:	4654      	mov	r4, sl
 8009648:	2000      	movs	r0, #0
 800964a:	f04f 0c0a 	mov.w	ip, #10
 800964e:	4621      	mov	r1, r4
 8009650:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009654:	3b30      	subs	r3, #48	; 0x30
 8009656:	2b09      	cmp	r3, #9
 8009658:	d94e      	bls.n	80096f8 <_vfiprintf_r+0x1c4>
 800965a:	b1b0      	cbz	r0, 800968a <_vfiprintf_r+0x156>
 800965c:	9207      	str	r2, [sp, #28]
 800965e:	e014      	b.n	800968a <_vfiprintf_r+0x156>
 8009660:	eba0 0308 	sub.w	r3, r0, r8
 8009664:	fa09 f303 	lsl.w	r3, r9, r3
 8009668:	4313      	orrs	r3, r2
 800966a:	9304      	str	r3, [sp, #16]
 800966c:	46a2      	mov	sl, r4
 800966e:	e7d2      	b.n	8009616 <_vfiprintf_r+0xe2>
 8009670:	9b03      	ldr	r3, [sp, #12]
 8009672:	1d19      	adds	r1, r3, #4
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	9103      	str	r1, [sp, #12]
 8009678:	2b00      	cmp	r3, #0
 800967a:	bfbb      	ittet	lt
 800967c:	425b      	neglt	r3, r3
 800967e:	f042 0202 	orrlt.w	r2, r2, #2
 8009682:	9307      	strge	r3, [sp, #28]
 8009684:	9307      	strlt	r3, [sp, #28]
 8009686:	bfb8      	it	lt
 8009688:	9204      	strlt	r2, [sp, #16]
 800968a:	7823      	ldrb	r3, [r4, #0]
 800968c:	2b2e      	cmp	r3, #46	; 0x2e
 800968e:	d10c      	bne.n	80096aa <_vfiprintf_r+0x176>
 8009690:	7863      	ldrb	r3, [r4, #1]
 8009692:	2b2a      	cmp	r3, #42	; 0x2a
 8009694:	d135      	bne.n	8009702 <_vfiprintf_r+0x1ce>
 8009696:	9b03      	ldr	r3, [sp, #12]
 8009698:	1d1a      	adds	r2, r3, #4
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	9203      	str	r2, [sp, #12]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	bfb8      	it	lt
 80096a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80096a6:	3402      	adds	r4, #2
 80096a8:	9305      	str	r3, [sp, #20]
 80096aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009790 <_vfiprintf_r+0x25c>
 80096ae:	7821      	ldrb	r1, [r4, #0]
 80096b0:	2203      	movs	r2, #3
 80096b2:	4650      	mov	r0, sl
 80096b4:	f7f6 fd94 	bl	80001e0 <memchr>
 80096b8:	b140      	cbz	r0, 80096cc <_vfiprintf_r+0x198>
 80096ba:	2340      	movs	r3, #64	; 0x40
 80096bc:	eba0 000a 	sub.w	r0, r0, sl
 80096c0:	fa03 f000 	lsl.w	r0, r3, r0
 80096c4:	9b04      	ldr	r3, [sp, #16]
 80096c6:	4303      	orrs	r3, r0
 80096c8:	3401      	adds	r4, #1
 80096ca:	9304      	str	r3, [sp, #16]
 80096cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096d0:	482c      	ldr	r0, [pc, #176]	; (8009784 <_vfiprintf_r+0x250>)
 80096d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096d6:	2206      	movs	r2, #6
 80096d8:	f7f6 fd82 	bl	80001e0 <memchr>
 80096dc:	2800      	cmp	r0, #0
 80096de:	d03f      	beq.n	8009760 <_vfiprintf_r+0x22c>
 80096e0:	4b29      	ldr	r3, [pc, #164]	; (8009788 <_vfiprintf_r+0x254>)
 80096e2:	bb1b      	cbnz	r3, 800972c <_vfiprintf_r+0x1f8>
 80096e4:	9b03      	ldr	r3, [sp, #12]
 80096e6:	3307      	adds	r3, #7
 80096e8:	f023 0307 	bic.w	r3, r3, #7
 80096ec:	3308      	adds	r3, #8
 80096ee:	9303      	str	r3, [sp, #12]
 80096f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096f2:	443b      	add	r3, r7
 80096f4:	9309      	str	r3, [sp, #36]	; 0x24
 80096f6:	e767      	b.n	80095c8 <_vfiprintf_r+0x94>
 80096f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80096fc:	460c      	mov	r4, r1
 80096fe:	2001      	movs	r0, #1
 8009700:	e7a5      	b.n	800964e <_vfiprintf_r+0x11a>
 8009702:	2300      	movs	r3, #0
 8009704:	3401      	adds	r4, #1
 8009706:	9305      	str	r3, [sp, #20]
 8009708:	4619      	mov	r1, r3
 800970a:	f04f 0c0a 	mov.w	ip, #10
 800970e:	4620      	mov	r0, r4
 8009710:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009714:	3a30      	subs	r2, #48	; 0x30
 8009716:	2a09      	cmp	r2, #9
 8009718:	d903      	bls.n	8009722 <_vfiprintf_r+0x1ee>
 800971a:	2b00      	cmp	r3, #0
 800971c:	d0c5      	beq.n	80096aa <_vfiprintf_r+0x176>
 800971e:	9105      	str	r1, [sp, #20]
 8009720:	e7c3      	b.n	80096aa <_vfiprintf_r+0x176>
 8009722:	fb0c 2101 	mla	r1, ip, r1, r2
 8009726:	4604      	mov	r4, r0
 8009728:	2301      	movs	r3, #1
 800972a:	e7f0      	b.n	800970e <_vfiprintf_r+0x1da>
 800972c:	ab03      	add	r3, sp, #12
 800972e:	9300      	str	r3, [sp, #0]
 8009730:	462a      	mov	r2, r5
 8009732:	4b16      	ldr	r3, [pc, #88]	; (800978c <_vfiprintf_r+0x258>)
 8009734:	a904      	add	r1, sp, #16
 8009736:	4630      	mov	r0, r6
 8009738:	f7fd fdc4 	bl	80072c4 <_printf_float>
 800973c:	4607      	mov	r7, r0
 800973e:	1c78      	adds	r0, r7, #1
 8009740:	d1d6      	bne.n	80096f0 <_vfiprintf_r+0x1bc>
 8009742:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009744:	07d9      	lsls	r1, r3, #31
 8009746:	d405      	bmi.n	8009754 <_vfiprintf_r+0x220>
 8009748:	89ab      	ldrh	r3, [r5, #12]
 800974a:	059a      	lsls	r2, r3, #22
 800974c:	d402      	bmi.n	8009754 <_vfiprintf_r+0x220>
 800974e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009750:	f000 faaf 	bl	8009cb2 <__retarget_lock_release_recursive>
 8009754:	89ab      	ldrh	r3, [r5, #12]
 8009756:	065b      	lsls	r3, r3, #25
 8009758:	f53f af12 	bmi.w	8009580 <_vfiprintf_r+0x4c>
 800975c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800975e:	e711      	b.n	8009584 <_vfiprintf_r+0x50>
 8009760:	ab03      	add	r3, sp, #12
 8009762:	9300      	str	r3, [sp, #0]
 8009764:	462a      	mov	r2, r5
 8009766:	4b09      	ldr	r3, [pc, #36]	; (800978c <_vfiprintf_r+0x258>)
 8009768:	a904      	add	r1, sp, #16
 800976a:	4630      	mov	r0, r6
 800976c:	f7fe f84e 	bl	800780c <_printf_i>
 8009770:	e7e4      	b.n	800973c <_vfiprintf_r+0x208>
 8009772:	bf00      	nop
 8009774:	0800ab24 	.word	0x0800ab24
 8009778:	0800ab44 	.word	0x0800ab44
 800977c:	0800ab04 	.word	0x0800ab04
 8009780:	0800a9ac 	.word	0x0800a9ac
 8009784:	0800a9b6 	.word	0x0800a9b6
 8009788:	080072c5 	.word	0x080072c5
 800978c:	08009511 	.word	0x08009511
 8009790:	0800a9b2 	.word	0x0800a9b2

08009794 <__swbuf_r>:
 8009794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009796:	460e      	mov	r6, r1
 8009798:	4614      	mov	r4, r2
 800979a:	4605      	mov	r5, r0
 800979c:	b118      	cbz	r0, 80097a6 <__swbuf_r+0x12>
 800979e:	6983      	ldr	r3, [r0, #24]
 80097a0:	b90b      	cbnz	r3, 80097a6 <__swbuf_r+0x12>
 80097a2:	f000 f9e7 	bl	8009b74 <__sinit>
 80097a6:	4b21      	ldr	r3, [pc, #132]	; (800982c <__swbuf_r+0x98>)
 80097a8:	429c      	cmp	r4, r3
 80097aa:	d12b      	bne.n	8009804 <__swbuf_r+0x70>
 80097ac:	686c      	ldr	r4, [r5, #4]
 80097ae:	69a3      	ldr	r3, [r4, #24]
 80097b0:	60a3      	str	r3, [r4, #8]
 80097b2:	89a3      	ldrh	r3, [r4, #12]
 80097b4:	071a      	lsls	r2, r3, #28
 80097b6:	d52f      	bpl.n	8009818 <__swbuf_r+0x84>
 80097b8:	6923      	ldr	r3, [r4, #16]
 80097ba:	b36b      	cbz	r3, 8009818 <__swbuf_r+0x84>
 80097bc:	6923      	ldr	r3, [r4, #16]
 80097be:	6820      	ldr	r0, [r4, #0]
 80097c0:	1ac0      	subs	r0, r0, r3
 80097c2:	6963      	ldr	r3, [r4, #20]
 80097c4:	b2f6      	uxtb	r6, r6
 80097c6:	4283      	cmp	r3, r0
 80097c8:	4637      	mov	r7, r6
 80097ca:	dc04      	bgt.n	80097d6 <__swbuf_r+0x42>
 80097cc:	4621      	mov	r1, r4
 80097ce:	4628      	mov	r0, r5
 80097d0:	f000 f93c 	bl	8009a4c <_fflush_r>
 80097d4:	bb30      	cbnz	r0, 8009824 <__swbuf_r+0x90>
 80097d6:	68a3      	ldr	r3, [r4, #8]
 80097d8:	3b01      	subs	r3, #1
 80097da:	60a3      	str	r3, [r4, #8]
 80097dc:	6823      	ldr	r3, [r4, #0]
 80097de:	1c5a      	adds	r2, r3, #1
 80097e0:	6022      	str	r2, [r4, #0]
 80097e2:	701e      	strb	r6, [r3, #0]
 80097e4:	6963      	ldr	r3, [r4, #20]
 80097e6:	3001      	adds	r0, #1
 80097e8:	4283      	cmp	r3, r0
 80097ea:	d004      	beq.n	80097f6 <__swbuf_r+0x62>
 80097ec:	89a3      	ldrh	r3, [r4, #12]
 80097ee:	07db      	lsls	r3, r3, #31
 80097f0:	d506      	bpl.n	8009800 <__swbuf_r+0x6c>
 80097f2:	2e0a      	cmp	r6, #10
 80097f4:	d104      	bne.n	8009800 <__swbuf_r+0x6c>
 80097f6:	4621      	mov	r1, r4
 80097f8:	4628      	mov	r0, r5
 80097fa:	f000 f927 	bl	8009a4c <_fflush_r>
 80097fe:	b988      	cbnz	r0, 8009824 <__swbuf_r+0x90>
 8009800:	4638      	mov	r0, r7
 8009802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009804:	4b0a      	ldr	r3, [pc, #40]	; (8009830 <__swbuf_r+0x9c>)
 8009806:	429c      	cmp	r4, r3
 8009808:	d101      	bne.n	800980e <__swbuf_r+0x7a>
 800980a:	68ac      	ldr	r4, [r5, #8]
 800980c:	e7cf      	b.n	80097ae <__swbuf_r+0x1a>
 800980e:	4b09      	ldr	r3, [pc, #36]	; (8009834 <__swbuf_r+0xa0>)
 8009810:	429c      	cmp	r4, r3
 8009812:	bf08      	it	eq
 8009814:	68ec      	ldreq	r4, [r5, #12]
 8009816:	e7ca      	b.n	80097ae <__swbuf_r+0x1a>
 8009818:	4621      	mov	r1, r4
 800981a:	4628      	mov	r0, r5
 800981c:	f000 f81a 	bl	8009854 <__swsetup_r>
 8009820:	2800      	cmp	r0, #0
 8009822:	d0cb      	beq.n	80097bc <__swbuf_r+0x28>
 8009824:	f04f 37ff 	mov.w	r7, #4294967295
 8009828:	e7ea      	b.n	8009800 <__swbuf_r+0x6c>
 800982a:	bf00      	nop
 800982c:	0800ab24 	.word	0x0800ab24
 8009830:	0800ab44 	.word	0x0800ab44
 8009834:	0800ab04 	.word	0x0800ab04

08009838 <__ascii_wctomb>:
 8009838:	b149      	cbz	r1, 800984e <__ascii_wctomb+0x16>
 800983a:	2aff      	cmp	r2, #255	; 0xff
 800983c:	bf85      	ittet	hi
 800983e:	238a      	movhi	r3, #138	; 0x8a
 8009840:	6003      	strhi	r3, [r0, #0]
 8009842:	700a      	strbls	r2, [r1, #0]
 8009844:	f04f 30ff 	movhi.w	r0, #4294967295
 8009848:	bf98      	it	ls
 800984a:	2001      	movls	r0, #1
 800984c:	4770      	bx	lr
 800984e:	4608      	mov	r0, r1
 8009850:	4770      	bx	lr
	...

08009854 <__swsetup_r>:
 8009854:	4b32      	ldr	r3, [pc, #200]	; (8009920 <__swsetup_r+0xcc>)
 8009856:	b570      	push	{r4, r5, r6, lr}
 8009858:	681d      	ldr	r5, [r3, #0]
 800985a:	4606      	mov	r6, r0
 800985c:	460c      	mov	r4, r1
 800985e:	b125      	cbz	r5, 800986a <__swsetup_r+0x16>
 8009860:	69ab      	ldr	r3, [r5, #24]
 8009862:	b913      	cbnz	r3, 800986a <__swsetup_r+0x16>
 8009864:	4628      	mov	r0, r5
 8009866:	f000 f985 	bl	8009b74 <__sinit>
 800986a:	4b2e      	ldr	r3, [pc, #184]	; (8009924 <__swsetup_r+0xd0>)
 800986c:	429c      	cmp	r4, r3
 800986e:	d10f      	bne.n	8009890 <__swsetup_r+0x3c>
 8009870:	686c      	ldr	r4, [r5, #4]
 8009872:	89a3      	ldrh	r3, [r4, #12]
 8009874:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009878:	0719      	lsls	r1, r3, #28
 800987a:	d42c      	bmi.n	80098d6 <__swsetup_r+0x82>
 800987c:	06dd      	lsls	r5, r3, #27
 800987e:	d411      	bmi.n	80098a4 <__swsetup_r+0x50>
 8009880:	2309      	movs	r3, #9
 8009882:	6033      	str	r3, [r6, #0]
 8009884:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009888:	81a3      	strh	r3, [r4, #12]
 800988a:	f04f 30ff 	mov.w	r0, #4294967295
 800988e:	e03e      	b.n	800990e <__swsetup_r+0xba>
 8009890:	4b25      	ldr	r3, [pc, #148]	; (8009928 <__swsetup_r+0xd4>)
 8009892:	429c      	cmp	r4, r3
 8009894:	d101      	bne.n	800989a <__swsetup_r+0x46>
 8009896:	68ac      	ldr	r4, [r5, #8]
 8009898:	e7eb      	b.n	8009872 <__swsetup_r+0x1e>
 800989a:	4b24      	ldr	r3, [pc, #144]	; (800992c <__swsetup_r+0xd8>)
 800989c:	429c      	cmp	r4, r3
 800989e:	bf08      	it	eq
 80098a0:	68ec      	ldreq	r4, [r5, #12]
 80098a2:	e7e6      	b.n	8009872 <__swsetup_r+0x1e>
 80098a4:	0758      	lsls	r0, r3, #29
 80098a6:	d512      	bpl.n	80098ce <__swsetup_r+0x7a>
 80098a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098aa:	b141      	cbz	r1, 80098be <__swsetup_r+0x6a>
 80098ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098b0:	4299      	cmp	r1, r3
 80098b2:	d002      	beq.n	80098ba <__swsetup_r+0x66>
 80098b4:	4630      	mov	r0, r6
 80098b6:	f7ff fb31 	bl	8008f1c <_free_r>
 80098ba:	2300      	movs	r3, #0
 80098bc:	6363      	str	r3, [r4, #52]	; 0x34
 80098be:	89a3      	ldrh	r3, [r4, #12]
 80098c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80098c4:	81a3      	strh	r3, [r4, #12]
 80098c6:	2300      	movs	r3, #0
 80098c8:	6063      	str	r3, [r4, #4]
 80098ca:	6923      	ldr	r3, [r4, #16]
 80098cc:	6023      	str	r3, [r4, #0]
 80098ce:	89a3      	ldrh	r3, [r4, #12]
 80098d0:	f043 0308 	orr.w	r3, r3, #8
 80098d4:	81a3      	strh	r3, [r4, #12]
 80098d6:	6923      	ldr	r3, [r4, #16]
 80098d8:	b94b      	cbnz	r3, 80098ee <__swsetup_r+0x9a>
 80098da:	89a3      	ldrh	r3, [r4, #12]
 80098dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80098e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098e4:	d003      	beq.n	80098ee <__swsetup_r+0x9a>
 80098e6:	4621      	mov	r1, r4
 80098e8:	4630      	mov	r0, r6
 80098ea:	f000 fa09 	bl	8009d00 <__smakebuf_r>
 80098ee:	89a0      	ldrh	r0, [r4, #12]
 80098f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098f4:	f010 0301 	ands.w	r3, r0, #1
 80098f8:	d00a      	beq.n	8009910 <__swsetup_r+0xbc>
 80098fa:	2300      	movs	r3, #0
 80098fc:	60a3      	str	r3, [r4, #8]
 80098fe:	6963      	ldr	r3, [r4, #20]
 8009900:	425b      	negs	r3, r3
 8009902:	61a3      	str	r3, [r4, #24]
 8009904:	6923      	ldr	r3, [r4, #16]
 8009906:	b943      	cbnz	r3, 800991a <__swsetup_r+0xc6>
 8009908:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800990c:	d1ba      	bne.n	8009884 <__swsetup_r+0x30>
 800990e:	bd70      	pop	{r4, r5, r6, pc}
 8009910:	0781      	lsls	r1, r0, #30
 8009912:	bf58      	it	pl
 8009914:	6963      	ldrpl	r3, [r4, #20]
 8009916:	60a3      	str	r3, [r4, #8]
 8009918:	e7f4      	b.n	8009904 <__swsetup_r+0xb0>
 800991a:	2000      	movs	r0, #0
 800991c:	e7f7      	b.n	800990e <__swsetup_r+0xba>
 800991e:	bf00      	nop
 8009920:	200000a4 	.word	0x200000a4
 8009924:	0800ab24 	.word	0x0800ab24
 8009928:	0800ab44 	.word	0x0800ab44
 800992c:	0800ab04 	.word	0x0800ab04

08009930 <abort>:
 8009930:	b508      	push	{r3, lr}
 8009932:	2006      	movs	r0, #6
 8009934:	f000 fa54 	bl	8009de0 <raise>
 8009938:	2001      	movs	r0, #1
 800993a:	f7f9 fa37 	bl	8002dac <_exit>
	...

08009940 <__sflush_r>:
 8009940:	898a      	ldrh	r2, [r1, #12]
 8009942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009946:	4605      	mov	r5, r0
 8009948:	0710      	lsls	r0, r2, #28
 800994a:	460c      	mov	r4, r1
 800994c:	d458      	bmi.n	8009a00 <__sflush_r+0xc0>
 800994e:	684b      	ldr	r3, [r1, #4]
 8009950:	2b00      	cmp	r3, #0
 8009952:	dc05      	bgt.n	8009960 <__sflush_r+0x20>
 8009954:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009956:	2b00      	cmp	r3, #0
 8009958:	dc02      	bgt.n	8009960 <__sflush_r+0x20>
 800995a:	2000      	movs	r0, #0
 800995c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009960:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009962:	2e00      	cmp	r6, #0
 8009964:	d0f9      	beq.n	800995a <__sflush_r+0x1a>
 8009966:	2300      	movs	r3, #0
 8009968:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800996c:	682f      	ldr	r7, [r5, #0]
 800996e:	602b      	str	r3, [r5, #0]
 8009970:	d032      	beq.n	80099d8 <__sflush_r+0x98>
 8009972:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009974:	89a3      	ldrh	r3, [r4, #12]
 8009976:	075a      	lsls	r2, r3, #29
 8009978:	d505      	bpl.n	8009986 <__sflush_r+0x46>
 800997a:	6863      	ldr	r3, [r4, #4]
 800997c:	1ac0      	subs	r0, r0, r3
 800997e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009980:	b10b      	cbz	r3, 8009986 <__sflush_r+0x46>
 8009982:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009984:	1ac0      	subs	r0, r0, r3
 8009986:	2300      	movs	r3, #0
 8009988:	4602      	mov	r2, r0
 800998a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800998c:	6a21      	ldr	r1, [r4, #32]
 800998e:	4628      	mov	r0, r5
 8009990:	47b0      	blx	r6
 8009992:	1c43      	adds	r3, r0, #1
 8009994:	89a3      	ldrh	r3, [r4, #12]
 8009996:	d106      	bne.n	80099a6 <__sflush_r+0x66>
 8009998:	6829      	ldr	r1, [r5, #0]
 800999a:	291d      	cmp	r1, #29
 800999c:	d82c      	bhi.n	80099f8 <__sflush_r+0xb8>
 800999e:	4a2a      	ldr	r2, [pc, #168]	; (8009a48 <__sflush_r+0x108>)
 80099a0:	40ca      	lsrs	r2, r1
 80099a2:	07d6      	lsls	r6, r2, #31
 80099a4:	d528      	bpl.n	80099f8 <__sflush_r+0xb8>
 80099a6:	2200      	movs	r2, #0
 80099a8:	6062      	str	r2, [r4, #4]
 80099aa:	04d9      	lsls	r1, r3, #19
 80099ac:	6922      	ldr	r2, [r4, #16]
 80099ae:	6022      	str	r2, [r4, #0]
 80099b0:	d504      	bpl.n	80099bc <__sflush_r+0x7c>
 80099b2:	1c42      	adds	r2, r0, #1
 80099b4:	d101      	bne.n	80099ba <__sflush_r+0x7a>
 80099b6:	682b      	ldr	r3, [r5, #0]
 80099b8:	b903      	cbnz	r3, 80099bc <__sflush_r+0x7c>
 80099ba:	6560      	str	r0, [r4, #84]	; 0x54
 80099bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099be:	602f      	str	r7, [r5, #0]
 80099c0:	2900      	cmp	r1, #0
 80099c2:	d0ca      	beq.n	800995a <__sflush_r+0x1a>
 80099c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099c8:	4299      	cmp	r1, r3
 80099ca:	d002      	beq.n	80099d2 <__sflush_r+0x92>
 80099cc:	4628      	mov	r0, r5
 80099ce:	f7ff faa5 	bl	8008f1c <_free_r>
 80099d2:	2000      	movs	r0, #0
 80099d4:	6360      	str	r0, [r4, #52]	; 0x34
 80099d6:	e7c1      	b.n	800995c <__sflush_r+0x1c>
 80099d8:	6a21      	ldr	r1, [r4, #32]
 80099da:	2301      	movs	r3, #1
 80099dc:	4628      	mov	r0, r5
 80099de:	47b0      	blx	r6
 80099e0:	1c41      	adds	r1, r0, #1
 80099e2:	d1c7      	bne.n	8009974 <__sflush_r+0x34>
 80099e4:	682b      	ldr	r3, [r5, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d0c4      	beq.n	8009974 <__sflush_r+0x34>
 80099ea:	2b1d      	cmp	r3, #29
 80099ec:	d001      	beq.n	80099f2 <__sflush_r+0xb2>
 80099ee:	2b16      	cmp	r3, #22
 80099f0:	d101      	bne.n	80099f6 <__sflush_r+0xb6>
 80099f2:	602f      	str	r7, [r5, #0]
 80099f4:	e7b1      	b.n	800995a <__sflush_r+0x1a>
 80099f6:	89a3      	ldrh	r3, [r4, #12]
 80099f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099fc:	81a3      	strh	r3, [r4, #12]
 80099fe:	e7ad      	b.n	800995c <__sflush_r+0x1c>
 8009a00:	690f      	ldr	r7, [r1, #16]
 8009a02:	2f00      	cmp	r7, #0
 8009a04:	d0a9      	beq.n	800995a <__sflush_r+0x1a>
 8009a06:	0793      	lsls	r3, r2, #30
 8009a08:	680e      	ldr	r6, [r1, #0]
 8009a0a:	bf08      	it	eq
 8009a0c:	694b      	ldreq	r3, [r1, #20]
 8009a0e:	600f      	str	r7, [r1, #0]
 8009a10:	bf18      	it	ne
 8009a12:	2300      	movne	r3, #0
 8009a14:	eba6 0807 	sub.w	r8, r6, r7
 8009a18:	608b      	str	r3, [r1, #8]
 8009a1a:	f1b8 0f00 	cmp.w	r8, #0
 8009a1e:	dd9c      	ble.n	800995a <__sflush_r+0x1a>
 8009a20:	6a21      	ldr	r1, [r4, #32]
 8009a22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a24:	4643      	mov	r3, r8
 8009a26:	463a      	mov	r2, r7
 8009a28:	4628      	mov	r0, r5
 8009a2a:	47b0      	blx	r6
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	dc06      	bgt.n	8009a3e <__sflush_r+0xfe>
 8009a30:	89a3      	ldrh	r3, [r4, #12]
 8009a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a36:	81a3      	strh	r3, [r4, #12]
 8009a38:	f04f 30ff 	mov.w	r0, #4294967295
 8009a3c:	e78e      	b.n	800995c <__sflush_r+0x1c>
 8009a3e:	4407      	add	r7, r0
 8009a40:	eba8 0800 	sub.w	r8, r8, r0
 8009a44:	e7e9      	b.n	8009a1a <__sflush_r+0xda>
 8009a46:	bf00      	nop
 8009a48:	20400001 	.word	0x20400001

08009a4c <_fflush_r>:
 8009a4c:	b538      	push	{r3, r4, r5, lr}
 8009a4e:	690b      	ldr	r3, [r1, #16]
 8009a50:	4605      	mov	r5, r0
 8009a52:	460c      	mov	r4, r1
 8009a54:	b913      	cbnz	r3, 8009a5c <_fflush_r+0x10>
 8009a56:	2500      	movs	r5, #0
 8009a58:	4628      	mov	r0, r5
 8009a5a:	bd38      	pop	{r3, r4, r5, pc}
 8009a5c:	b118      	cbz	r0, 8009a66 <_fflush_r+0x1a>
 8009a5e:	6983      	ldr	r3, [r0, #24]
 8009a60:	b90b      	cbnz	r3, 8009a66 <_fflush_r+0x1a>
 8009a62:	f000 f887 	bl	8009b74 <__sinit>
 8009a66:	4b14      	ldr	r3, [pc, #80]	; (8009ab8 <_fflush_r+0x6c>)
 8009a68:	429c      	cmp	r4, r3
 8009a6a:	d11b      	bne.n	8009aa4 <_fflush_r+0x58>
 8009a6c:	686c      	ldr	r4, [r5, #4]
 8009a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d0ef      	beq.n	8009a56 <_fflush_r+0xa>
 8009a76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a78:	07d0      	lsls	r0, r2, #31
 8009a7a:	d404      	bmi.n	8009a86 <_fflush_r+0x3a>
 8009a7c:	0599      	lsls	r1, r3, #22
 8009a7e:	d402      	bmi.n	8009a86 <_fflush_r+0x3a>
 8009a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a82:	f000 f915 	bl	8009cb0 <__retarget_lock_acquire_recursive>
 8009a86:	4628      	mov	r0, r5
 8009a88:	4621      	mov	r1, r4
 8009a8a:	f7ff ff59 	bl	8009940 <__sflush_r>
 8009a8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a90:	07da      	lsls	r2, r3, #31
 8009a92:	4605      	mov	r5, r0
 8009a94:	d4e0      	bmi.n	8009a58 <_fflush_r+0xc>
 8009a96:	89a3      	ldrh	r3, [r4, #12]
 8009a98:	059b      	lsls	r3, r3, #22
 8009a9a:	d4dd      	bmi.n	8009a58 <_fflush_r+0xc>
 8009a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a9e:	f000 f908 	bl	8009cb2 <__retarget_lock_release_recursive>
 8009aa2:	e7d9      	b.n	8009a58 <_fflush_r+0xc>
 8009aa4:	4b05      	ldr	r3, [pc, #20]	; (8009abc <_fflush_r+0x70>)
 8009aa6:	429c      	cmp	r4, r3
 8009aa8:	d101      	bne.n	8009aae <_fflush_r+0x62>
 8009aaa:	68ac      	ldr	r4, [r5, #8]
 8009aac:	e7df      	b.n	8009a6e <_fflush_r+0x22>
 8009aae:	4b04      	ldr	r3, [pc, #16]	; (8009ac0 <_fflush_r+0x74>)
 8009ab0:	429c      	cmp	r4, r3
 8009ab2:	bf08      	it	eq
 8009ab4:	68ec      	ldreq	r4, [r5, #12]
 8009ab6:	e7da      	b.n	8009a6e <_fflush_r+0x22>
 8009ab8:	0800ab24 	.word	0x0800ab24
 8009abc:	0800ab44 	.word	0x0800ab44
 8009ac0:	0800ab04 	.word	0x0800ab04

08009ac4 <std>:
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	b510      	push	{r4, lr}
 8009ac8:	4604      	mov	r4, r0
 8009aca:	e9c0 3300 	strd	r3, r3, [r0]
 8009ace:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ad2:	6083      	str	r3, [r0, #8]
 8009ad4:	8181      	strh	r1, [r0, #12]
 8009ad6:	6643      	str	r3, [r0, #100]	; 0x64
 8009ad8:	81c2      	strh	r2, [r0, #14]
 8009ada:	6183      	str	r3, [r0, #24]
 8009adc:	4619      	mov	r1, r3
 8009ade:	2208      	movs	r2, #8
 8009ae0:	305c      	adds	r0, #92	; 0x5c
 8009ae2:	f7fd fb47 	bl	8007174 <memset>
 8009ae6:	4b05      	ldr	r3, [pc, #20]	; (8009afc <std+0x38>)
 8009ae8:	6263      	str	r3, [r4, #36]	; 0x24
 8009aea:	4b05      	ldr	r3, [pc, #20]	; (8009b00 <std+0x3c>)
 8009aec:	62a3      	str	r3, [r4, #40]	; 0x28
 8009aee:	4b05      	ldr	r3, [pc, #20]	; (8009b04 <std+0x40>)
 8009af0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009af2:	4b05      	ldr	r3, [pc, #20]	; (8009b08 <std+0x44>)
 8009af4:	6224      	str	r4, [r4, #32]
 8009af6:	6323      	str	r3, [r4, #48]	; 0x30
 8009af8:	bd10      	pop	{r4, pc}
 8009afa:	bf00      	nop
 8009afc:	08009e19 	.word	0x08009e19
 8009b00:	08009e3b 	.word	0x08009e3b
 8009b04:	08009e73 	.word	0x08009e73
 8009b08:	08009e97 	.word	0x08009e97

08009b0c <_cleanup_r>:
 8009b0c:	4901      	ldr	r1, [pc, #4]	; (8009b14 <_cleanup_r+0x8>)
 8009b0e:	f000 b8af 	b.w	8009c70 <_fwalk_reent>
 8009b12:	bf00      	nop
 8009b14:	08009a4d 	.word	0x08009a4d

08009b18 <__sfmoreglue>:
 8009b18:	b570      	push	{r4, r5, r6, lr}
 8009b1a:	2268      	movs	r2, #104	; 0x68
 8009b1c:	1e4d      	subs	r5, r1, #1
 8009b1e:	4355      	muls	r5, r2
 8009b20:	460e      	mov	r6, r1
 8009b22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b26:	f7ff fa65 	bl	8008ff4 <_malloc_r>
 8009b2a:	4604      	mov	r4, r0
 8009b2c:	b140      	cbz	r0, 8009b40 <__sfmoreglue+0x28>
 8009b2e:	2100      	movs	r1, #0
 8009b30:	e9c0 1600 	strd	r1, r6, [r0]
 8009b34:	300c      	adds	r0, #12
 8009b36:	60a0      	str	r0, [r4, #8]
 8009b38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b3c:	f7fd fb1a 	bl	8007174 <memset>
 8009b40:	4620      	mov	r0, r4
 8009b42:	bd70      	pop	{r4, r5, r6, pc}

08009b44 <__sfp_lock_acquire>:
 8009b44:	4801      	ldr	r0, [pc, #4]	; (8009b4c <__sfp_lock_acquire+0x8>)
 8009b46:	f000 b8b3 	b.w	8009cb0 <__retarget_lock_acquire_recursive>
 8009b4a:	bf00      	nop
 8009b4c:	200005f9 	.word	0x200005f9

08009b50 <__sfp_lock_release>:
 8009b50:	4801      	ldr	r0, [pc, #4]	; (8009b58 <__sfp_lock_release+0x8>)
 8009b52:	f000 b8ae 	b.w	8009cb2 <__retarget_lock_release_recursive>
 8009b56:	bf00      	nop
 8009b58:	200005f9 	.word	0x200005f9

08009b5c <__sinit_lock_acquire>:
 8009b5c:	4801      	ldr	r0, [pc, #4]	; (8009b64 <__sinit_lock_acquire+0x8>)
 8009b5e:	f000 b8a7 	b.w	8009cb0 <__retarget_lock_acquire_recursive>
 8009b62:	bf00      	nop
 8009b64:	200005fa 	.word	0x200005fa

08009b68 <__sinit_lock_release>:
 8009b68:	4801      	ldr	r0, [pc, #4]	; (8009b70 <__sinit_lock_release+0x8>)
 8009b6a:	f000 b8a2 	b.w	8009cb2 <__retarget_lock_release_recursive>
 8009b6e:	bf00      	nop
 8009b70:	200005fa 	.word	0x200005fa

08009b74 <__sinit>:
 8009b74:	b510      	push	{r4, lr}
 8009b76:	4604      	mov	r4, r0
 8009b78:	f7ff fff0 	bl	8009b5c <__sinit_lock_acquire>
 8009b7c:	69a3      	ldr	r3, [r4, #24]
 8009b7e:	b11b      	cbz	r3, 8009b88 <__sinit+0x14>
 8009b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b84:	f7ff bff0 	b.w	8009b68 <__sinit_lock_release>
 8009b88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009b8c:	6523      	str	r3, [r4, #80]	; 0x50
 8009b8e:	4b13      	ldr	r3, [pc, #76]	; (8009bdc <__sinit+0x68>)
 8009b90:	4a13      	ldr	r2, [pc, #76]	; (8009be0 <__sinit+0x6c>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b96:	42a3      	cmp	r3, r4
 8009b98:	bf04      	itt	eq
 8009b9a:	2301      	moveq	r3, #1
 8009b9c:	61a3      	streq	r3, [r4, #24]
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	f000 f820 	bl	8009be4 <__sfp>
 8009ba4:	6060      	str	r0, [r4, #4]
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	f000 f81c 	bl	8009be4 <__sfp>
 8009bac:	60a0      	str	r0, [r4, #8]
 8009bae:	4620      	mov	r0, r4
 8009bb0:	f000 f818 	bl	8009be4 <__sfp>
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	60e0      	str	r0, [r4, #12]
 8009bb8:	2104      	movs	r1, #4
 8009bba:	6860      	ldr	r0, [r4, #4]
 8009bbc:	f7ff ff82 	bl	8009ac4 <std>
 8009bc0:	68a0      	ldr	r0, [r4, #8]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	2109      	movs	r1, #9
 8009bc6:	f7ff ff7d 	bl	8009ac4 <std>
 8009bca:	68e0      	ldr	r0, [r4, #12]
 8009bcc:	2202      	movs	r2, #2
 8009bce:	2112      	movs	r1, #18
 8009bd0:	f7ff ff78 	bl	8009ac4 <std>
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	61a3      	str	r3, [r4, #24]
 8009bd8:	e7d2      	b.n	8009b80 <__sinit+0xc>
 8009bda:	bf00      	nop
 8009bdc:	0800a78c 	.word	0x0800a78c
 8009be0:	08009b0d 	.word	0x08009b0d

08009be4 <__sfp>:
 8009be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009be6:	4607      	mov	r7, r0
 8009be8:	f7ff ffac 	bl	8009b44 <__sfp_lock_acquire>
 8009bec:	4b1e      	ldr	r3, [pc, #120]	; (8009c68 <__sfp+0x84>)
 8009bee:	681e      	ldr	r6, [r3, #0]
 8009bf0:	69b3      	ldr	r3, [r6, #24]
 8009bf2:	b913      	cbnz	r3, 8009bfa <__sfp+0x16>
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	f7ff ffbd 	bl	8009b74 <__sinit>
 8009bfa:	3648      	adds	r6, #72	; 0x48
 8009bfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c00:	3b01      	subs	r3, #1
 8009c02:	d503      	bpl.n	8009c0c <__sfp+0x28>
 8009c04:	6833      	ldr	r3, [r6, #0]
 8009c06:	b30b      	cbz	r3, 8009c4c <__sfp+0x68>
 8009c08:	6836      	ldr	r6, [r6, #0]
 8009c0a:	e7f7      	b.n	8009bfc <__sfp+0x18>
 8009c0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c10:	b9d5      	cbnz	r5, 8009c48 <__sfp+0x64>
 8009c12:	4b16      	ldr	r3, [pc, #88]	; (8009c6c <__sfp+0x88>)
 8009c14:	60e3      	str	r3, [r4, #12]
 8009c16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c1a:	6665      	str	r5, [r4, #100]	; 0x64
 8009c1c:	f000 f847 	bl	8009cae <__retarget_lock_init_recursive>
 8009c20:	f7ff ff96 	bl	8009b50 <__sfp_lock_release>
 8009c24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c2c:	6025      	str	r5, [r4, #0]
 8009c2e:	61a5      	str	r5, [r4, #24]
 8009c30:	2208      	movs	r2, #8
 8009c32:	4629      	mov	r1, r5
 8009c34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c38:	f7fd fa9c 	bl	8007174 <memset>
 8009c3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c44:	4620      	mov	r0, r4
 8009c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c48:	3468      	adds	r4, #104	; 0x68
 8009c4a:	e7d9      	b.n	8009c00 <__sfp+0x1c>
 8009c4c:	2104      	movs	r1, #4
 8009c4e:	4638      	mov	r0, r7
 8009c50:	f7ff ff62 	bl	8009b18 <__sfmoreglue>
 8009c54:	4604      	mov	r4, r0
 8009c56:	6030      	str	r0, [r6, #0]
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	d1d5      	bne.n	8009c08 <__sfp+0x24>
 8009c5c:	f7ff ff78 	bl	8009b50 <__sfp_lock_release>
 8009c60:	230c      	movs	r3, #12
 8009c62:	603b      	str	r3, [r7, #0]
 8009c64:	e7ee      	b.n	8009c44 <__sfp+0x60>
 8009c66:	bf00      	nop
 8009c68:	0800a78c 	.word	0x0800a78c
 8009c6c:	ffff0001 	.word	0xffff0001

08009c70 <_fwalk_reent>:
 8009c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c74:	4606      	mov	r6, r0
 8009c76:	4688      	mov	r8, r1
 8009c78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009c7c:	2700      	movs	r7, #0
 8009c7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c82:	f1b9 0901 	subs.w	r9, r9, #1
 8009c86:	d505      	bpl.n	8009c94 <_fwalk_reent+0x24>
 8009c88:	6824      	ldr	r4, [r4, #0]
 8009c8a:	2c00      	cmp	r4, #0
 8009c8c:	d1f7      	bne.n	8009c7e <_fwalk_reent+0xe>
 8009c8e:	4638      	mov	r0, r7
 8009c90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c94:	89ab      	ldrh	r3, [r5, #12]
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d907      	bls.n	8009caa <_fwalk_reent+0x3a>
 8009c9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	d003      	beq.n	8009caa <_fwalk_reent+0x3a>
 8009ca2:	4629      	mov	r1, r5
 8009ca4:	4630      	mov	r0, r6
 8009ca6:	47c0      	blx	r8
 8009ca8:	4307      	orrs	r7, r0
 8009caa:	3568      	adds	r5, #104	; 0x68
 8009cac:	e7e9      	b.n	8009c82 <_fwalk_reent+0x12>

08009cae <__retarget_lock_init_recursive>:
 8009cae:	4770      	bx	lr

08009cb0 <__retarget_lock_acquire_recursive>:
 8009cb0:	4770      	bx	lr

08009cb2 <__retarget_lock_release_recursive>:
 8009cb2:	4770      	bx	lr

08009cb4 <__swhatbuf_r>:
 8009cb4:	b570      	push	{r4, r5, r6, lr}
 8009cb6:	460e      	mov	r6, r1
 8009cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cbc:	2900      	cmp	r1, #0
 8009cbe:	b096      	sub	sp, #88	; 0x58
 8009cc0:	4614      	mov	r4, r2
 8009cc2:	461d      	mov	r5, r3
 8009cc4:	da08      	bge.n	8009cd8 <__swhatbuf_r+0x24>
 8009cc6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	602a      	str	r2, [r5, #0]
 8009cce:	061a      	lsls	r2, r3, #24
 8009cd0:	d410      	bmi.n	8009cf4 <__swhatbuf_r+0x40>
 8009cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cd6:	e00e      	b.n	8009cf6 <__swhatbuf_r+0x42>
 8009cd8:	466a      	mov	r2, sp
 8009cda:	f000 f903 	bl	8009ee4 <_fstat_r>
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	dbf1      	blt.n	8009cc6 <__swhatbuf_r+0x12>
 8009ce2:	9a01      	ldr	r2, [sp, #4]
 8009ce4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009ce8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009cec:	425a      	negs	r2, r3
 8009cee:	415a      	adcs	r2, r3
 8009cf0:	602a      	str	r2, [r5, #0]
 8009cf2:	e7ee      	b.n	8009cd2 <__swhatbuf_r+0x1e>
 8009cf4:	2340      	movs	r3, #64	; 0x40
 8009cf6:	2000      	movs	r0, #0
 8009cf8:	6023      	str	r3, [r4, #0]
 8009cfa:	b016      	add	sp, #88	; 0x58
 8009cfc:	bd70      	pop	{r4, r5, r6, pc}
	...

08009d00 <__smakebuf_r>:
 8009d00:	898b      	ldrh	r3, [r1, #12]
 8009d02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d04:	079d      	lsls	r5, r3, #30
 8009d06:	4606      	mov	r6, r0
 8009d08:	460c      	mov	r4, r1
 8009d0a:	d507      	bpl.n	8009d1c <__smakebuf_r+0x1c>
 8009d0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d10:	6023      	str	r3, [r4, #0]
 8009d12:	6123      	str	r3, [r4, #16]
 8009d14:	2301      	movs	r3, #1
 8009d16:	6163      	str	r3, [r4, #20]
 8009d18:	b002      	add	sp, #8
 8009d1a:	bd70      	pop	{r4, r5, r6, pc}
 8009d1c:	ab01      	add	r3, sp, #4
 8009d1e:	466a      	mov	r2, sp
 8009d20:	f7ff ffc8 	bl	8009cb4 <__swhatbuf_r>
 8009d24:	9900      	ldr	r1, [sp, #0]
 8009d26:	4605      	mov	r5, r0
 8009d28:	4630      	mov	r0, r6
 8009d2a:	f7ff f963 	bl	8008ff4 <_malloc_r>
 8009d2e:	b948      	cbnz	r0, 8009d44 <__smakebuf_r+0x44>
 8009d30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d34:	059a      	lsls	r2, r3, #22
 8009d36:	d4ef      	bmi.n	8009d18 <__smakebuf_r+0x18>
 8009d38:	f023 0303 	bic.w	r3, r3, #3
 8009d3c:	f043 0302 	orr.w	r3, r3, #2
 8009d40:	81a3      	strh	r3, [r4, #12]
 8009d42:	e7e3      	b.n	8009d0c <__smakebuf_r+0xc>
 8009d44:	4b0d      	ldr	r3, [pc, #52]	; (8009d7c <__smakebuf_r+0x7c>)
 8009d46:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d48:	89a3      	ldrh	r3, [r4, #12]
 8009d4a:	6020      	str	r0, [r4, #0]
 8009d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d50:	81a3      	strh	r3, [r4, #12]
 8009d52:	9b00      	ldr	r3, [sp, #0]
 8009d54:	6163      	str	r3, [r4, #20]
 8009d56:	9b01      	ldr	r3, [sp, #4]
 8009d58:	6120      	str	r0, [r4, #16]
 8009d5a:	b15b      	cbz	r3, 8009d74 <__smakebuf_r+0x74>
 8009d5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d60:	4630      	mov	r0, r6
 8009d62:	f000 f8d1 	bl	8009f08 <_isatty_r>
 8009d66:	b128      	cbz	r0, 8009d74 <__smakebuf_r+0x74>
 8009d68:	89a3      	ldrh	r3, [r4, #12]
 8009d6a:	f023 0303 	bic.w	r3, r3, #3
 8009d6e:	f043 0301 	orr.w	r3, r3, #1
 8009d72:	81a3      	strh	r3, [r4, #12]
 8009d74:	89a0      	ldrh	r0, [r4, #12]
 8009d76:	4305      	orrs	r5, r0
 8009d78:	81a5      	strh	r5, [r4, #12]
 8009d7a:	e7cd      	b.n	8009d18 <__smakebuf_r+0x18>
 8009d7c:	08009b0d 	.word	0x08009b0d

08009d80 <_malloc_usable_size_r>:
 8009d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d84:	1f18      	subs	r0, r3, #4
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	bfbc      	itt	lt
 8009d8a:	580b      	ldrlt	r3, [r1, r0]
 8009d8c:	18c0      	addlt	r0, r0, r3
 8009d8e:	4770      	bx	lr

08009d90 <_raise_r>:
 8009d90:	291f      	cmp	r1, #31
 8009d92:	b538      	push	{r3, r4, r5, lr}
 8009d94:	4604      	mov	r4, r0
 8009d96:	460d      	mov	r5, r1
 8009d98:	d904      	bls.n	8009da4 <_raise_r+0x14>
 8009d9a:	2316      	movs	r3, #22
 8009d9c:	6003      	str	r3, [r0, #0]
 8009d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009da2:	bd38      	pop	{r3, r4, r5, pc}
 8009da4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009da6:	b112      	cbz	r2, 8009dae <_raise_r+0x1e>
 8009da8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009dac:	b94b      	cbnz	r3, 8009dc2 <_raise_r+0x32>
 8009dae:	4620      	mov	r0, r4
 8009db0:	f000 f830 	bl	8009e14 <_getpid_r>
 8009db4:	462a      	mov	r2, r5
 8009db6:	4601      	mov	r1, r0
 8009db8:	4620      	mov	r0, r4
 8009dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dbe:	f000 b817 	b.w	8009df0 <_kill_r>
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d00a      	beq.n	8009ddc <_raise_r+0x4c>
 8009dc6:	1c59      	adds	r1, r3, #1
 8009dc8:	d103      	bne.n	8009dd2 <_raise_r+0x42>
 8009dca:	2316      	movs	r3, #22
 8009dcc:	6003      	str	r3, [r0, #0]
 8009dce:	2001      	movs	r0, #1
 8009dd0:	e7e7      	b.n	8009da2 <_raise_r+0x12>
 8009dd2:	2400      	movs	r4, #0
 8009dd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009dd8:	4628      	mov	r0, r5
 8009dda:	4798      	blx	r3
 8009ddc:	2000      	movs	r0, #0
 8009dde:	e7e0      	b.n	8009da2 <_raise_r+0x12>

08009de0 <raise>:
 8009de0:	4b02      	ldr	r3, [pc, #8]	; (8009dec <raise+0xc>)
 8009de2:	4601      	mov	r1, r0
 8009de4:	6818      	ldr	r0, [r3, #0]
 8009de6:	f7ff bfd3 	b.w	8009d90 <_raise_r>
 8009dea:	bf00      	nop
 8009dec:	200000a4 	.word	0x200000a4

08009df0 <_kill_r>:
 8009df0:	b538      	push	{r3, r4, r5, lr}
 8009df2:	4d07      	ldr	r5, [pc, #28]	; (8009e10 <_kill_r+0x20>)
 8009df4:	2300      	movs	r3, #0
 8009df6:	4604      	mov	r4, r0
 8009df8:	4608      	mov	r0, r1
 8009dfa:	4611      	mov	r1, r2
 8009dfc:	602b      	str	r3, [r5, #0]
 8009dfe:	f7f8 ffc5 	bl	8002d8c <_kill>
 8009e02:	1c43      	adds	r3, r0, #1
 8009e04:	d102      	bne.n	8009e0c <_kill_r+0x1c>
 8009e06:	682b      	ldr	r3, [r5, #0]
 8009e08:	b103      	cbz	r3, 8009e0c <_kill_r+0x1c>
 8009e0a:	6023      	str	r3, [r4, #0]
 8009e0c:	bd38      	pop	{r3, r4, r5, pc}
 8009e0e:	bf00      	nop
 8009e10:	200005f4 	.word	0x200005f4

08009e14 <_getpid_r>:
 8009e14:	f7f8 bfb2 	b.w	8002d7c <_getpid>

08009e18 <__sread>:
 8009e18:	b510      	push	{r4, lr}
 8009e1a:	460c      	mov	r4, r1
 8009e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e20:	f000 f894 	bl	8009f4c <_read_r>
 8009e24:	2800      	cmp	r0, #0
 8009e26:	bfab      	itete	ge
 8009e28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e2a:	89a3      	ldrhlt	r3, [r4, #12]
 8009e2c:	181b      	addge	r3, r3, r0
 8009e2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e32:	bfac      	ite	ge
 8009e34:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e36:	81a3      	strhlt	r3, [r4, #12]
 8009e38:	bd10      	pop	{r4, pc}

08009e3a <__swrite>:
 8009e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e3e:	461f      	mov	r7, r3
 8009e40:	898b      	ldrh	r3, [r1, #12]
 8009e42:	05db      	lsls	r3, r3, #23
 8009e44:	4605      	mov	r5, r0
 8009e46:	460c      	mov	r4, r1
 8009e48:	4616      	mov	r6, r2
 8009e4a:	d505      	bpl.n	8009e58 <__swrite+0x1e>
 8009e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e50:	2302      	movs	r3, #2
 8009e52:	2200      	movs	r2, #0
 8009e54:	f000 f868 	bl	8009f28 <_lseek_r>
 8009e58:	89a3      	ldrh	r3, [r4, #12]
 8009e5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e62:	81a3      	strh	r3, [r4, #12]
 8009e64:	4632      	mov	r2, r6
 8009e66:	463b      	mov	r3, r7
 8009e68:	4628      	mov	r0, r5
 8009e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e6e:	f000 b817 	b.w	8009ea0 <_write_r>

08009e72 <__sseek>:
 8009e72:	b510      	push	{r4, lr}
 8009e74:	460c      	mov	r4, r1
 8009e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e7a:	f000 f855 	bl	8009f28 <_lseek_r>
 8009e7e:	1c43      	adds	r3, r0, #1
 8009e80:	89a3      	ldrh	r3, [r4, #12]
 8009e82:	bf15      	itete	ne
 8009e84:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e8e:	81a3      	strheq	r3, [r4, #12]
 8009e90:	bf18      	it	ne
 8009e92:	81a3      	strhne	r3, [r4, #12]
 8009e94:	bd10      	pop	{r4, pc}

08009e96 <__sclose>:
 8009e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e9a:	f000 b813 	b.w	8009ec4 <_close_r>
	...

08009ea0 <_write_r>:
 8009ea0:	b538      	push	{r3, r4, r5, lr}
 8009ea2:	4d07      	ldr	r5, [pc, #28]	; (8009ec0 <_write_r+0x20>)
 8009ea4:	4604      	mov	r4, r0
 8009ea6:	4608      	mov	r0, r1
 8009ea8:	4611      	mov	r1, r2
 8009eaa:	2200      	movs	r2, #0
 8009eac:	602a      	str	r2, [r5, #0]
 8009eae:	461a      	mov	r2, r3
 8009eb0:	f7f8 ffa3 	bl	8002dfa <_write>
 8009eb4:	1c43      	adds	r3, r0, #1
 8009eb6:	d102      	bne.n	8009ebe <_write_r+0x1e>
 8009eb8:	682b      	ldr	r3, [r5, #0]
 8009eba:	b103      	cbz	r3, 8009ebe <_write_r+0x1e>
 8009ebc:	6023      	str	r3, [r4, #0]
 8009ebe:	bd38      	pop	{r3, r4, r5, pc}
 8009ec0:	200005f4 	.word	0x200005f4

08009ec4 <_close_r>:
 8009ec4:	b538      	push	{r3, r4, r5, lr}
 8009ec6:	4d06      	ldr	r5, [pc, #24]	; (8009ee0 <_close_r+0x1c>)
 8009ec8:	2300      	movs	r3, #0
 8009eca:	4604      	mov	r4, r0
 8009ecc:	4608      	mov	r0, r1
 8009ece:	602b      	str	r3, [r5, #0]
 8009ed0:	f7f8 ffaf 	bl	8002e32 <_close>
 8009ed4:	1c43      	adds	r3, r0, #1
 8009ed6:	d102      	bne.n	8009ede <_close_r+0x1a>
 8009ed8:	682b      	ldr	r3, [r5, #0]
 8009eda:	b103      	cbz	r3, 8009ede <_close_r+0x1a>
 8009edc:	6023      	str	r3, [r4, #0]
 8009ede:	bd38      	pop	{r3, r4, r5, pc}
 8009ee0:	200005f4 	.word	0x200005f4

08009ee4 <_fstat_r>:
 8009ee4:	b538      	push	{r3, r4, r5, lr}
 8009ee6:	4d07      	ldr	r5, [pc, #28]	; (8009f04 <_fstat_r+0x20>)
 8009ee8:	2300      	movs	r3, #0
 8009eea:	4604      	mov	r4, r0
 8009eec:	4608      	mov	r0, r1
 8009eee:	4611      	mov	r1, r2
 8009ef0:	602b      	str	r3, [r5, #0]
 8009ef2:	f7f8 ffaa 	bl	8002e4a <_fstat>
 8009ef6:	1c43      	adds	r3, r0, #1
 8009ef8:	d102      	bne.n	8009f00 <_fstat_r+0x1c>
 8009efa:	682b      	ldr	r3, [r5, #0]
 8009efc:	b103      	cbz	r3, 8009f00 <_fstat_r+0x1c>
 8009efe:	6023      	str	r3, [r4, #0]
 8009f00:	bd38      	pop	{r3, r4, r5, pc}
 8009f02:	bf00      	nop
 8009f04:	200005f4 	.word	0x200005f4

08009f08 <_isatty_r>:
 8009f08:	b538      	push	{r3, r4, r5, lr}
 8009f0a:	4d06      	ldr	r5, [pc, #24]	; (8009f24 <_isatty_r+0x1c>)
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	4604      	mov	r4, r0
 8009f10:	4608      	mov	r0, r1
 8009f12:	602b      	str	r3, [r5, #0]
 8009f14:	f7f8 ffa9 	bl	8002e6a <_isatty>
 8009f18:	1c43      	adds	r3, r0, #1
 8009f1a:	d102      	bne.n	8009f22 <_isatty_r+0x1a>
 8009f1c:	682b      	ldr	r3, [r5, #0]
 8009f1e:	b103      	cbz	r3, 8009f22 <_isatty_r+0x1a>
 8009f20:	6023      	str	r3, [r4, #0]
 8009f22:	bd38      	pop	{r3, r4, r5, pc}
 8009f24:	200005f4 	.word	0x200005f4

08009f28 <_lseek_r>:
 8009f28:	b538      	push	{r3, r4, r5, lr}
 8009f2a:	4d07      	ldr	r5, [pc, #28]	; (8009f48 <_lseek_r+0x20>)
 8009f2c:	4604      	mov	r4, r0
 8009f2e:	4608      	mov	r0, r1
 8009f30:	4611      	mov	r1, r2
 8009f32:	2200      	movs	r2, #0
 8009f34:	602a      	str	r2, [r5, #0]
 8009f36:	461a      	mov	r2, r3
 8009f38:	f7f8 ffa2 	bl	8002e80 <_lseek>
 8009f3c:	1c43      	adds	r3, r0, #1
 8009f3e:	d102      	bne.n	8009f46 <_lseek_r+0x1e>
 8009f40:	682b      	ldr	r3, [r5, #0]
 8009f42:	b103      	cbz	r3, 8009f46 <_lseek_r+0x1e>
 8009f44:	6023      	str	r3, [r4, #0]
 8009f46:	bd38      	pop	{r3, r4, r5, pc}
 8009f48:	200005f4 	.word	0x200005f4

08009f4c <_read_r>:
 8009f4c:	b538      	push	{r3, r4, r5, lr}
 8009f4e:	4d07      	ldr	r5, [pc, #28]	; (8009f6c <_read_r+0x20>)
 8009f50:	4604      	mov	r4, r0
 8009f52:	4608      	mov	r0, r1
 8009f54:	4611      	mov	r1, r2
 8009f56:	2200      	movs	r2, #0
 8009f58:	602a      	str	r2, [r5, #0]
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	f7f8 ff30 	bl	8002dc0 <_read>
 8009f60:	1c43      	adds	r3, r0, #1
 8009f62:	d102      	bne.n	8009f6a <_read_r+0x1e>
 8009f64:	682b      	ldr	r3, [r5, #0]
 8009f66:	b103      	cbz	r3, 8009f6a <_read_r+0x1e>
 8009f68:	6023      	str	r3, [r4, #0]
 8009f6a:	bd38      	pop	{r3, r4, r5, pc}
 8009f6c:	200005f4 	.word	0x200005f4

08009f70 <atan>:
 8009f70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f74:	ec55 4b10 	vmov	r4, r5, d0
 8009f78:	4bc3      	ldr	r3, [pc, #780]	; (800a288 <atan+0x318>)
 8009f7a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009f7e:	429e      	cmp	r6, r3
 8009f80:	46ab      	mov	fp, r5
 8009f82:	dd18      	ble.n	8009fb6 <atan+0x46>
 8009f84:	4bc1      	ldr	r3, [pc, #772]	; (800a28c <atan+0x31c>)
 8009f86:	429e      	cmp	r6, r3
 8009f88:	dc01      	bgt.n	8009f8e <atan+0x1e>
 8009f8a:	d109      	bne.n	8009fa0 <atan+0x30>
 8009f8c:	b144      	cbz	r4, 8009fa0 <atan+0x30>
 8009f8e:	4622      	mov	r2, r4
 8009f90:	462b      	mov	r3, r5
 8009f92:	4620      	mov	r0, r4
 8009f94:	4629      	mov	r1, r5
 8009f96:	f7f6 f979 	bl	800028c <__adddf3>
 8009f9a:	4604      	mov	r4, r0
 8009f9c:	460d      	mov	r5, r1
 8009f9e:	e006      	b.n	8009fae <atan+0x3e>
 8009fa0:	f1bb 0f00 	cmp.w	fp, #0
 8009fa4:	f300 8131 	bgt.w	800a20a <atan+0x29a>
 8009fa8:	a59b      	add	r5, pc, #620	; (adr r5, 800a218 <atan+0x2a8>)
 8009faa:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009fae:	ec45 4b10 	vmov	d0, r4, r5
 8009fb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb6:	4bb6      	ldr	r3, [pc, #728]	; (800a290 <atan+0x320>)
 8009fb8:	429e      	cmp	r6, r3
 8009fba:	dc14      	bgt.n	8009fe6 <atan+0x76>
 8009fbc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009fc0:	429e      	cmp	r6, r3
 8009fc2:	dc0d      	bgt.n	8009fe0 <atan+0x70>
 8009fc4:	a396      	add	r3, pc, #600	; (adr r3, 800a220 <atan+0x2b0>)
 8009fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fca:	ee10 0a10 	vmov	r0, s0
 8009fce:	4629      	mov	r1, r5
 8009fd0:	f7f6 f95c 	bl	800028c <__adddf3>
 8009fd4:	4baf      	ldr	r3, [pc, #700]	; (800a294 <atan+0x324>)
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f7f6 fd9e 	bl	8000b18 <__aeabi_dcmpgt>
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	d1e6      	bne.n	8009fae <atan+0x3e>
 8009fe0:	f04f 3aff 	mov.w	sl, #4294967295
 8009fe4:	e02b      	b.n	800a03e <atan+0xce>
 8009fe6:	f000 f963 	bl	800a2b0 <fabs>
 8009fea:	4bab      	ldr	r3, [pc, #684]	; (800a298 <atan+0x328>)
 8009fec:	429e      	cmp	r6, r3
 8009fee:	ec55 4b10 	vmov	r4, r5, d0
 8009ff2:	f300 80bf 	bgt.w	800a174 <atan+0x204>
 8009ff6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009ffa:	429e      	cmp	r6, r3
 8009ffc:	f300 80a0 	bgt.w	800a140 <atan+0x1d0>
 800a000:	ee10 2a10 	vmov	r2, s0
 800a004:	ee10 0a10 	vmov	r0, s0
 800a008:	462b      	mov	r3, r5
 800a00a:	4629      	mov	r1, r5
 800a00c:	f7f6 f93e 	bl	800028c <__adddf3>
 800a010:	4ba0      	ldr	r3, [pc, #640]	; (800a294 <atan+0x324>)
 800a012:	2200      	movs	r2, #0
 800a014:	f7f6 f938 	bl	8000288 <__aeabi_dsub>
 800a018:	2200      	movs	r2, #0
 800a01a:	4606      	mov	r6, r0
 800a01c:	460f      	mov	r7, r1
 800a01e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a022:	4620      	mov	r0, r4
 800a024:	4629      	mov	r1, r5
 800a026:	f7f6 f931 	bl	800028c <__adddf3>
 800a02a:	4602      	mov	r2, r0
 800a02c:	460b      	mov	r3, r1
 800a02e:	4630      	mov	r0, r6
 800a030:	4639      	mov	r1, r7
 800a032:	f7f6 fc0b 	bl	800084c <__aeabi_ddiv>
 800a036:	f04f 0a00 	mov.w	sl, #0
 800a03a:	4604      	mov	r4, r0
 800a03c:	460d      	mov	r5, r1
 800a03e:	4622      	mov	r2, r4
 800a040:	462b      	mov	r3, r5
 800a042:	4620      	mov	r0, r4
 800a044:	4629      	mov	r1, r5
 800a046:	f7f6 fad7 	bl	80005f8 <__aeabi_dmul>
 800a04a:	4602      	mov	r2, r0
 800a04c:	460b      	mov	r3, r1
 800a04e:	4680      	mov	r8, r0
 800a050:	4689      	mov	r9, r1
 800a052:	f7f6 fad1 	bl	80005f8 <__aeabi_dmul>
 800a056:	a374      	add	r3, pc, #464	; (adr r3, 800a228 <atan+0x2b8>)
 800a058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05c:	4606      	mov	r6, r0
 800a05e:	460f      	mov	r7, r1
 800a060:	f7f6 faca 	bl	80005f8 <__aeabi_dmul>
 800a064:	a372      	add	r3, pc, #456	; (adr r3, 800a230 <atan+0x2c0>)
 800a066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06a:	f7f6 f90f 	bl	800028c <__adddf3>
 800a06e:	4632      	mov	r2, r6
 800a070:	463b      	mov	r3, r7
 800a072:	f7f6 fac1 	bl	80005f8 <__aeabi_dmul>
 800a076:	a370      	add	r3, pc, #448	; (adr r3, 800a238 <atan+0x2c8>)
 800a078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07c:	f7f6 f906 	bl	800028c <__adddf3>
 800a080:	4632      	mov	r2, r6
 800a082:	463b      	mov	r3, r7
 800a084:	f7f6 fab8 	bl	80005f8 <__aeabi_dmul>
 800a088:	a36d      	add	r3, pc, #436	; (adr r3, 800a240 <atan+0x2d0>)
 800a08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08e:	f7f6 f8fd 	bl	800028c <__adddf3>
 800a092:	4632      	mov	r2, r6
 800a094:	463b      	mov	r3, r7
 800a096:	f7f6 faaf 	bl	80005f8 <__aeabi_dmul>
 800a09a:	a36b      	add	r3, pc, #428	; (adr r3, 800a248 <atan+0x2d8>)
 800a09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a0:	f7f6 f8f4 	bl	800028c <__adddf3>
 800a0a4:	4632      	mov	r2, r6
 800a0a6:	463b      	mov	r3, r7
 800a0a8:	f7f6 faa6 	bl	80005f8 <__aeabi_dmul>
 800a0ac:	a368      	add	r3, pc, #416	; (adr r3, 800a250 <atan+0x2e0>)
 800a0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b2:	f7f6 f8eb 	bl	800028c <__adddf3>
 800a0b6:	4642      	mov	r2, r8
 800a0b8:	464b      	mov	r3, r9
 800a0ba:	f7f6 fa9d 	bl	80005f8 <__aeabi_dmul>
 800a0be:	a366      	add	r3, pc, #408	; (adr r3, 800a258 <atan+0x2e8>)
 800a0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c4:	4680      	mov	r8, r0
 800a0c6:	4689      	mov	r9, r1
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	4639      	mov	r1, r7
 800a0cc:	f7f6 fa94 	bl	80005f8 <__aeabi_dmul>
 800a0d0:	a363      	add	r3, pc, #396	; (adr r3, 800a260 <atan+0x2f0>)
 800a0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d6:	f7f6 f8d7 	bl	8000288 <__aeabi_dsub>
 800a0da:	4632      	mov	r2, r6
 800a0dc:	463b      	mov	r3, r7
 800a0de:	f7f6 fa8b 	bl	80005f8 <__aeabi_dmul>
 800a0e2:	a361      	add	r3, pc, #388	; (adr r3, 800a268 <atan+0x2f8>)
 800a0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e8:	f7f6 f8ce 	bl	8000288 <__aeabi_dsub>
 800a0ec:	4632      	mov	r2, r6
 800a0ee:	463b      	mov	r3, r7
 800a0f0:	f7f6 fa82 	bl	80005f8 <__aeabi_dmul>
 800a0f4:	a35e      	add	r3, pc, #376	; (adr r3, 800a270 <atan+0x300>)
 800a0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fa:	f7f6 f8c5 	bl	8000288 <__aeabi_dsub>
 800a0fe:	4632      	mov	r2, r6
 800a100:	463b      	mov	r3, r7
 800a102:	f7f6 fa79 	bl	80005f8 <__aeabi_dmul>
 800a106:	a35c      	add	r3, pc, #368	; (adr r3, 800a278 <atan+0x308>)
 800a108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10c:	f7f6 f8bc 	bl	8000288 <__aeabi_dsub>
 800a110:	4632      	mov	r2, r6
 800a112:	463b      	mov	r3, r7
 800a114:	f7f6 fa70 	bl	80005f8 <__aeabi_dmul>
 800a118:	4602      	mov	r2, r0
 800a11a:	460b      	mov	r3, r1
 800a11c:	4640      	mov	r0, r8
 800a11e:	4649      	mov	r1, r9
 800a120:	f7f6 f8b4 	bl	800028c <__adddf3>
 800a124:	4622      	mov	r2, r4
 800a126:	462b      	mov	r3, r5
 800a128:	f7f6 fa66 	bl	80005f8 <__aeabi_dmul>
 800a12c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a130:	4602      	mov	r2, r0
 800a132:	460b      	mov	r3, r1
 800a134:	d14b      	bne.n	800a1ce <atan+0x25e>
 800a136:	4620      	mov	r0, r4
 800a138:	4629      	mov	r1, r5
 800a13a:	f7f6 f8a5 	bl	8000288 <__aeabi_dsub>
 800a13e:	e72c      	b.n	8009f9a <atan+0x2a>
 800a140:	ee10 0a10 	vmov	r0, s0
 800a144:	4b53      	ldr	r3, [pc, #332]	; (800a294 <atan+0x324>)
 800a146:	2200      	movs	r2, #0
 800a148:	4629      	mov	r1, r5
 800a14a:	f7f6 f89d 	bl	8000288 <__aeabi_dsub>
 800a14e:	4b51      	ldr	r3, [pc, #324]	; (800a294 <atan+0x324>)
 800a150:	4606      	mov	r6, r0
 800a152:	460f      	mov	r7, r1
 800a154:	2200      	movs	r2, #0
 800a156:	4620      	mov	r0, r4
 800a158:	4629      	mov	r1, r5
 800a15a:	f7f6 f897 	bl	800028c <__adddf3>
 800a15e:	4602      	mov	r2, r0
 800a160:	460b      	mov	r3, r1
 800a162:	4630      	mov	r0, r6
 800a164:	4639      	mov	r1, r7
 800a166:	f7f6 fb71 	bl	800084c <__aeabi_ddiv>
 800a16a:	f04f 0a01 	mov.w	sl, #1
 800a16e:	4604      	mov	r4, r0
 800a170:	460d      	mov	r5, r1
 800a172:	e764      	b.n	800a03e <atan+0xce>
 800a174:	4b49      	ldr	r3, [pc, #292]	; (800a29c <atan+0x32c>)
 800a176:	429e      	cmp	r6, r3
 800a178:	da1d      	bge.n	800a1b6 <atan+0x246>
 800a17a:	ee10 0a10 	vmov	r0, s0
 800a17e:	4b48      	ldr	r3, [pc, #288]	; (800a2a0 <atan+0x330>)
 800a180:	2200      	movs	r2, #0
 800a182:	4629      	mov	r1, r5
 800a184:	f7f6 f880 	bl	8000288 <__aeabi_dsub>
 800a188:	4b45      	ldr	r3, [pc, #276]	; (800a2a0 <atan+0x330>)
 800a18a:	4606      	mov	r6, r0
 800a18c:	460f      	mov	r7, r1
 800a18e:	2200      	movs	r2, #0
 800a190:	4620      	mov	r0, r4
 800a192:	4629      	mov	r1, r5
 800a194:	f7f6 fa30 	bl	80005f8 <__aeabi_dmul>
 800a198:	4b3e      	ldr	r3, [pc, #248]	; (800a294 <atan+0x324>)
 800a19a:	2200      	movs	r2, #0
 800a19c:	f7f6 f876 	bl	800028c <__adddf3>
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	460b      	mov	r3, r1
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	4639      	mov	r1, r7
 800a1a8:	f7f6 fb50 	bl	800084c <__aeabi_ddiv>
 800a1ac:	f04f 0a02 	mov.w	sl, #2
 800a1b0:	4604      	mov	r4, r0
 800a1b2:	460d      	mov	r5, r1
 800a1b4:	e743      	b.n	800a03e <atan+0xce>
 800a1b6:	462b      	mov	r3, r5
 800a1b8:	ee10 2a10 	vmov	r2, s0
 800a1bc:	4939      	ldr	r1, [pc, #228]	; (800a2a4 <atan+0x334>)
 800a1be:	2000      	movs	r0, #0
 800a1c0:	f7f6 fb44 	bl	800084c <__aeabi_ddiv>
 800a1c4:	f04f 0a03 	mov.w	sl, #3
 800a1c8:	4604      	mov	r4, r0
 800a1ca:	460d      	mov	r5, r1
 800a1cc:	e737      	b.n	800a03e <atan+0xce>
 800a1ce:	4b36      	ldr	r3, [pc, #216]	; (800a2a8 <atan+0x338>)
 800a1d0:	4e36      	ldr	r6, [pc, #216]	; (800a2ac <atan+0x33c>)
 800a1d2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a1d6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800a1da:	e9da 2300 	ldrd	r2, r3, [sl]
 800a1de:	f7f6 f853 	bl	8000288 <__aeabi_dsub>
 800a1e2:	4622      	mov	r2, r4
 800a1e4:	462b      	mov	r3, r5
 800a1e6:	f7f6 f84f 	bl	8000288 <__aeabi_dsub>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a1f2:	f7f6 f849 	bl	8000288 <__aeabi_dsub>
 800a1f6:	f1bb 0f00 	cmp.w	fp, #0
 800a1fa:	4604      	mov	r4, r0
 800a1fc:	460d      	mov	r5, r1
 800a1fe:	f6bf aed6 	bge.w	8009fae <atan+0x3e>
 800a202:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a206:	461d      	mov	r5, r3
 800a208:	e6d1      	b.n	8009fae <atan+0x3e>
 800a20a:	a51d      	add	r5, pc, #116	; (adr r5, 800a280 <atan+0x310>)
 800a20c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a210:	e6cd      	b.n	8009fae <atan+0x3e>
 800a212:	bf00      	nop
 800a214:	f3af 8000 	nop.w
 800a218:	54442d18 	.word	0x54442d18
 800a21c:	bff921fb 	.word	0xbff921fb
 800a220:	8800759c 	.word	0x8800759c
 800a224:	7e37e43c 	.word	0x7e37e43c
 800a228:	e322da11 	.word	0xe322da11
 800a22c:	3f90ad3a 	.word	0x3f90ad3a
 800a230:	24760deb 	.word	0x24760deb
 800a234:	3fa97b4b 	.word	0x3fa97b4b
 800a238:	a0d03d51 	.word	0xa0d03d51
 800a23c:	3fb10d66 	.word	0x3fb10d66
 800a240:	c54c206e 	.word	0xc54c206e
 800a244:	3fb745cd 	.word	0x3fb745cd
 800a248:	920083ff 	.word	0x920083ff
 800a24c:	3fc24924 	.word	0x3fc24924
 800a250:	5555550d 	.word	0x5555550d
 800a254:	3fd55555 	.word	0x3fd55555
 800a258:	2c6a6c2f 	.word	0x2c6a6c2f
 800a25c:	bfa2b444 	.word	0xbfa2b444
 800a260:	52defd9a 	.word	0x52defd9a
 800a264:	3fadde2d 	.word	0x3fadde2d
 800a268:	af749a6d 	.word	0xaf749a6d
 800a26c:	3fb3b0f2 	.word	0x3fb3b0f2
 800a270:	fe231671 	.word	0xfe231671
 800a274:	3fbc71c6 	.word	0x3fbc71c6
 800a278:	9998ebc4 	.word	0x9998ebc4
 800a27c:	3fc99999 	.word	0x3fc99999
 800a280:	54442d18 	.word	0x54442d18
 800a284:	3ff921fb 	.word	0x3ff921fb
 800a288:	440fffff 	.word	0x440fffff
 800a28c:	7ff00000 	.word	0x7ff00000
 800a290:	3fdbffff 	.word	0x3fdbffff
 800a294:	3ff00000 	.word	0x3ff00000
 800a298:	3ff2ffff 	.word	0x3ff2ffff
 800a29c:	40038000 	.word	0x40038000
 800a2a0:	3ff80000 	.word	0x3ff80000
 800a2a4:	bff00000 	.word	0xbff00000
 800a2a8:	0800ab88 	.word	0x0800ab88
 800a2ac:	0800ab68 	.word	0x0800ab68

0800a2b0 <fabs>:
 800a2b0:	ec51 0b10 	vmov	r0, r1, d0
 800a2b4:	ee10 2a10 	vmov	r2, s0
 800a2b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a2bc:	ec43 2b10 	vmov	d0, r2, r3
 800a2c0:	4770      	bx	lr

0800a2c2 <atan2>:
 800a2c2:	f000 b82d 	b.w	800a320 <__ieee754_atan2>

0800a2c6 <sqrt>:
 800a2c6:	b538      	push	{r3, r4, r5, lr}
 800a2c8:	ed2d 8b02 	vpush	{d8}
 800a2cc:	ec55 4b10 	vmov	r4, r5, d0
 800a2d0:	f000 f8f0 	bl	800a4b4 <__ieee754_sqrt>
 800a2d4:	4622      	mov	r2, r4
 800a2d6:	462b      	mov	r3, r5
 800a2d8:	4620      	mov	r0, r4
 800a2da:	4629      	mov	r1, r5
 800a2dc:	eeb0 8a40 	vmov.f32	s16, s0
 800a2e0:	eef0 8a60 	vmov.f32	s17, s1
 800a2e4:	f7f6 fc22 	bl	8000b2c <__aeabi_dcmpun>
 800a2e8:	b990      	cbnz	r0, 800a310 <sqrt+0x4a>
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	4629      	mov	r1, r5
 800a2f2:	f7f6 fbf3 	bl	8000adc <__aeabi_dcmplt>
 800a2f6:	b158      	cbz	r0, 800a310 <sqrt+0x4a>
 800a2f8:	f7fc ff12 	bl	8007120 <__errno>
 800a2fc:	2321      	movs	r3, #33	; 0x21
 800a2fe:	6003      	str	r3, [r0, #0]
 800a300:	2200      	movs	r2, #0
 800a302:	2300      	movs	r3, #0
 800a304:	4610      	mov	r0, r2
 800a306:	4619      	mov	r1, r3
 800a308:	f7f6 faa0 	bl	800084c <__aeabi_ddiv>
 800a30c:	ec41 0b18 	vmov	d8, r0, r1
 800a310:	eeb0 0a48 	vmov.f32	s0, s16
 800a314:	eef0 0a68 	vmov.f32	s1, s17
 800a318:	ecbd 8b02 	vpop	{d8}
 800a31c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a320 <__ieee754_atan2>:
 800a320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a324:	ec57 6b11 	vmov	r6, r7, d1
 800a328:	4273      	negs	r3, r6
 800a32a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800a4b0 <__ieee754_atan2+0x190>
 800a32e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800a332:	4333      	orrs	r3, r6
 800a334:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a338:	4573      	cmp	r3, lr
 800a33a:	ec51 0b10 	vmov	r0, r1, d0
 800a33e:	ee11 8a10 	vmov	r8, s2
 800a342:	d80a      	bhi.n	800a35a <__ieee754_atan2+0x3a>
 800a344:	4244      	negs	r4, r0
 800a346:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a34a:	4304      	orrs	r4, r0
 800a34c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a350:	4574      	cmp	r4, lr
 800a352:	ee10 9a10 	vmov	r9, s0
 800a356:	468c      	mov	ip, r1
 800a358:	d907      	bls.n	800a36a <__ieee754_atan2+0x4a>
 800a35a:	4632      	mov	r2, r6
 800a35c:	463b      	mov	r3, r7
 800a35e:	f7f5 ff95 	bl	800028c <__adddf3>
 800a362:	ec41 0b10 	vmov	d0, r0, r1
 800a366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a36a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800a36e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a372:	4334      	orrs	r4, r6
 800a374:	d103      	bne.n	800a37e <__ieee754_atan2+0x5e>
 800a376:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a37a:	f7ff bdf9 	b.w	8009f70 <atan>
 800a37e:	17bc      	asrs	r4, r7, #30
 800a380:	f004 0402 	and.w	r4, r4, #2
 800a384:	ea53 0909 	orrs.w	r9, r3, r9
 800a388:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a38c:	d107      	bne.n	800a39e <__ieee754_atan2+0x7e>
 800a38e:	2c02      	cmp	r4, #2
 800a390:	d060      	beq.n	800a454 <__ieee754_atan2+0x134>
 800a392:	2c03      	cmp	r4, #3
 800a394:	d1e5      	bne.n	800a362 <__ieee754_atan2+0x42>
 800a396:	a142      	add	r1, pc, #264	; (adr r1, 800a4a0 <__ieee754_atan2+0x180>)
 800a398:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a39c:	e7e1      	b.n	800a362 <__ieee754_atan2+0x42>
 800a39e:	ea52 0808 	orrs.w	r8, r2, r8
 800a3a2:	d106      	bne.n	800a3b2 <__ieee754_atan2+0x92>
 800a3a4:	f1bc 0f00 	cmp.w	ip, #0
 800a3a8:	da5f      	bge.n	800a46a <__ieee754_atan2+0x14a>
 800a3aa:	a13f      	add	r1, pc, #252	; (adr r1, 800a4a8 <__ieee754_atan2+0x188>)
 800a3ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3b0:	e7d7      	b.n	800a362 <__ieee754_atan2+0x42>
 800a3b2:	4572      	cmp	r2, lr
 800a3b4:	d10f      	bne.n	800a3d6 <__ieee754_atan2+0xb6>
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	f104 34ff 	add.w	r4, r4, #4294967295
 800a3bc:	d107      	bne.n	800a3ce <__ieee754_atan2+0xae>
 800a3be:	2c02      	cmp	r4, #2
 800a3c0:	d84c      	bhi.n	800a45c <__ieee754_atan2+0x13c>
 800a3c2:	4b35      	ldr	r3, [pc, #212]	; (800a498 <__ieee754_atan2+0x178>)
 800a3c4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a3c8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a3cc:	e7c9      	b.n	800a362 <__ieee754_atan2+0x42>
 800a3ce:	2c02      	cmp	r4, #2
 800a3d0:	d848      	bhi.n	800a464 <__ieee754_atan2+0x144>
 800a3d2:	4b32      	ldr	r3, [pc, #200]	; (800a49c <__ieee754_atan2+0x17c>)
 800a3d4:	e7f6      	b.n	800a3c4 <__ieee754_atan2+0xa4>
 800a3d6:	4573      	cmp	r3, lr
 800a3d8:	d0e4      	beq.n	800a3a4 <__ieee754_atan2+0x84>
 800a3da:	1a9b      	subs	r3, r3, r2
 800a3dc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800a3e0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a3e4:	da1e      	bge.n	800a424 <__ieee754_atan2+0x104>
 800a3e6:	2f00      	cmp	r7, #0
 800a3e8:	da01      	bge.n	800a3ee <__ieee754_atan2+0xce>
 800a3ea:	323c      	adds	r2, #60	; 0x3c
 800a3ec:	db1e      	blt.n	800a42c <__ieee754_atan2+0x10c>
 800a3ee:	4632      	mov	r2, r6
 800a3f0:	463b      	mov	r3, r7
 800a3f2:	f7f6 fa2b 	bl	800084c <__aeabi_ddiv>
 800a3f6:	ec41 0b10 	vmov	d0, r0, r1
 800a3fa:	f7ff ff59 	bl	800a2b0 <fabs>
 800a3fe:	f7ff fdb7 	bl	8009f70 <atan>
 800a402:	ec51 0b10 	vmov	r0, r1, d0
 800a406:	2c01      	cmp	r4, #1
 800a408:	d013      	beq.n	800a432 <__ieee754_atan2+0x112>
 800a40a:	2c02      	cmp	r4, #2
 800a40c:	d015      	beq.n	800a43a <__ieee754_atan2+0x11a>
 800a40e:	2c00      	cmp	r4, #0
 800a410:	d0a7      	beq.n	800a362 <__ieee754_atan2+0x42>
 800a412:	a319      	add	r3, pc, #100	; (adr r3, 800a478 <__ieee754_atan2+0x158>)
 800a414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a418:	f7f5 ff36 	bl	8000288 <__aeabi_dsub>
 800a41c:	a318      	add	r3, pc, #96	; (adr r3, 800a480 <__ieee754_atan2+0x160>)
 800a41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a422:	e014      	b.n	800a44e <__ieee754_atan2+0x12e>
 800a424:	a118      	add	r1, pc, #96	; (adr r1, 800a488 <__ieee754_atan2+0x168>)
 800a426:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a42a:	e7ec      	b.n	800a406 <__ieee754_atan2+0xe6>
 800a42c:	2000      	movs	r0, #0
 800a42e:	2100      	movs	r1, #0
 800a430:	e7e9      	b.n	800a406 <__ieee754_atan2+0xe6>
 800a432:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a436:	4619      	mov	r1, r3
 800a438:	e793      	b.n	800a362 <__ieee754_atan2+0x42>
 800a43a:	a30f      	add	r3, pc, #60	; (adr r3, 800a478 <__ieee754_atan2+0x158>)
 800a43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a440:	f7f5 ff22 	bl	8000288 <__aeabi_dsub>
 800a444:	4602      	mov	r2, r0
 800a446:	460b      	mov	r3, r1
 800a448:	a10d      	add	r1, pc, #52	; (adr r1, 800a480 <__ieee754_atan2+0x160>)
 800a44a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a44e:	f7f5 ff1b 	bl	8000288 <__aeabi_dsub>
 800a452:	e786      	b.n	800a362 <__ieee754_atan2+0x42>
 800a454:	a10a      	add	r1, pc, #40	; (adr r1, 800a480 <__ieee754_atan2+0x160>)
 800a456:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a45a:	e782      	b.n	800a362 <__ieee754_atan2+0x42>
 800a45c:	a10c      	add	r1, pc, #48	; (adr r1, 800a490 <__ieee754_atan2+0x170>)
 800a45e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a462:	e77e      	b.n	800a362 <__ieee754_atan2+0x42>
 800a464:	2000      	movs	r0, #0
 800a466:	2100      	movs	r1, #0
 800a468:	e77b      	b.n	800a362 <__ieee754_atan2+0x42>
 800a46a:	a107      	add	r1, pc, #28	; (adr r1, 800a488 <__ieee754_atan2+0x168>)
 800a46c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a470:	e777      	b.n	800a362 <__ieee754_atan2+0x42>
 800a472:	bf00      	nop
 800a474:	f3af 8000 	nop.w
 800a478:	33145c07 	.word	0x33145c07
 800a47c:	3ca1a626 	.word	0x3ca1a626
 800a480:	54442d18 	.word	0x54442d18
 800a484:	400921fb 	.word	0x400921fb
 800a488:	54442d18 	.word	0x54442d18
 800a48c:	3ff921fb 	.word	0x3ff921fb
 800a490:	54442d18 	.word	0x54442d18
 800a494:	3fe921fb 	.word	0x3fe921fb
 800a498:	0800aba8 	.word	0x0800aba8
 800a49c:	0800abc0 	.word	0x0800abc0
 800a4a0:	54442d18 	.word	0x54442d18
 800a4a4:	c00921fb 	.word	0xc00921fb
 800a4a8:	54442d18 	.word	0x54442d18
 800a4ac:	bff921fb 	.word	0xbff921fb
 800a4b0:	7ff00000 	.word	0x7ff00000

0800a4b4 <__ieee754_sqrt>:
 800a4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b8:	ec55 4b10 	vmov	r4, r5, d0
 800a4bc:	4e55      	ldr	r6, [pc, #340]	; (800a614 <__ieee754_sqrt+0x160>)
 800a4be:	43ae      	bics	r6, r5
 800a4c0:	ee10 0a10 	vmov	r0, s0
 800a4c4:	ee10 3a10 	vmov	r3, s0
 800a4c8:	462a      	mov	r2, r5
 800a4ca:	4629      	mov	r1, r5
 800a4cc:	d110      	bne.n	800a4f0 <__ieee754_sqrt+0x3c>
 800a4ce:	ee10 2a10 	vmov	r2, s0
 800a4d2:	462b      	mov	r3, r5
 800a4d4:	f7f6 f890 	bl	80005f8 <__aeabi_dmul>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	460b      	mov	r3, r1
 800a4dc:	4620      	mov	r0, r4
 800a4de:	4629      	mov	r1, r5
 800a4e0:	f7f5 fed4 	bl	800028c <__adddf3>
 800a4e4:	4604      	mov	r4, r0
 800a4e6:	460d      	mov	r5, r1
 800a4e8:	ec45 4b10 	vmov	d0, r4, r5
 800a4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4f0:	2d00      	cmp	r5, #0
 800a4f2:	dc10      	bgt.n	800a516 <__ieee754_sqrt+0x62>
 800a4f4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a4f8:	4330      	orrs	r0, r6
 800a4fa:	d0f5      	beq.n	800a4e8 <__ieee754_sqrt+0x34>
 800a4fc:	b15d      	cbz	r5, 800a516 <__ieee754_sqrt+0x62>
 800a4fe:	ee10 2a10 	vmov	r2, s0
 800a502:	462b      	mov	r3, r5
 800a504:	ee10 0a10 	vmov	r0, s0
 800a508:	f7f5 febe 	bl	8000288 <__aeabi_dsub>
 800a50c:	4602      	mov	r2, r0
 800a50e:	460b      	mov	r3, r1
 800a510:	f7f6 f99c 	bl	800084c <__aeabi_ddiv>
 800a514:	e7e6      	b.n	800a4e4 <__ieee754_sqrt+0x30>
 800a516:	1512      	asrs	r2, r2, #20
 800a518:	d074      	beq.n	800a604 <__ieee754_sqrt+0x150>
 800a51a:	07d4      	lsls	r4, r2, #31
 800a51c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a520:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a528:	bf5e      	ittt	pl
 800a52a:	0fda      	lsrpl	r2, r3, #31
 800a52c:	005b      	lslpl	r3, r3, #1
 800a52e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a532:	2400      	movs	r4, #0
 800a534:	0fda      	lsrs	r2, r3, #31
 800a536:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a53a:	107f      	asrs	r7, r7, #1
 800a53c:	005b      	lsls	r3, r3, #1
 800a53e:	2516      	movs	r5, #22
 800a540:	4620      	mov	r0, r4
 800a542:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a546:	1886      	adds	r6, r0, r2
 800a548:	428e      	cmp	r6, r1
 800a54a:	bfde      	ittt	le
 800a54c:	1b89      	suble	r1, r1, r6
 800a54e:	18b0      	addle	r0, r6, r2
 800a550:	18a4      	addle	r4, r4, r2
 800a552:	0049      	lsls	r1, r1, #1
 800a554:	3d01      	subs	r5, #1
 800a556:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a55a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a55e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a562:	d1f0      	bne.n	800a546 <__ieee754_sqrt+0x92>
 800a564:	462a      	mov	r2, r5
 800a566:	f04f 0e20 	mov.w	lr, #32
 800a56a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a56e:	4281      	cmp	r1, r0
 800a570:	eb06 0c05 	add.w	ip, r6, r5
 800a574:	dc02      	bgt.n	800a57c <__ieee754_sqrt+0xc8>
 800a576:	d113      	bne.n	800a5a0 <__ieee754_sqrt+0xec>
 800a578:	459c      	cmp	ip, r3
 800a57a:	d811      	bhi.n	800a5a0 <__ieee754_sqrt+0xec>
 800a57c:	f1bc 0f00 	cmp.w	ip, #0
 800a580:	eb0c 0506 	add.w	r5, ip, r6
 800a584:	da43      	bge.n	800a60e <__ieee754_sqrt+0x15a>
 800a586:	2d00      	cmp	r5, #0
 800a588:	db41      	blt.n	800a60e <__ieee754_sqrt+0x15a>
 800a58a:	f100 0801 	add.w	r8, r0, #1
 800a58e:	1a09      	subs	r1, r1, r0
 800a590:	459c      	cmp	ip, r3
 800a592:	bf88      	it	hi
 800a594:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a598:	eba3 030c 	sub.w	r3, r3, ip
 800a59c:	4432      	add	r2, r6
 800a59e:	4640      	mov	r0, r8
 800a5a0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a5a4:	f1be 0e01 	subs.w	lr, lr, #1
 800a5a8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a5ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a5b0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a5b4:	d1db      	bne.n	800a56e <__ieee754_sqrt+0xba>
 800a5b6:	430b      	orrs	r3, r1
 800a5b8:	d006      	beq.n	800a5c8 <__ieee754_sqrt+0x114>
 800a5ba:	1c50      	adds	r0, r2, #1
 800a5bc:	bf13      	iteet	ne
 800a5be:	3201      	addne	r2, #1
 800a5c0:	3401      	addeq	r4, #1
 800a5c2:	4672      	moveq	r2, lr
 800a5c4:	f022 0201 	bicne.w	r2, r2, #1
 800a5c8:	1063      	asrs	r3, r4, #1
 800a5ca:	0852      	lsrs	r2, r2, #1
 800a5cc:	07e1      	lsls	r1, r4, #31
 800a5ce:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a5d2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a5d6:	bf48      	it	mi
 800a5d8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a5dc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a5e0:	4614      	mov	r4, r2
 800a5e2:	e781      	b.n	800a4e8 <__ieee754_sqrt+0x34>
 800a5e4:	0ad9      	lsrs	r1, r3, #11
 800a5e6:	3815      	subs	r0, #21
 800a5e8:	055b      	lsls	r3, r3, #21
 800a5ea:	2900      	cmp	r1, #0
 800a5ec:	d0fa      	beq.n	800a5e4 <__ieee754_sqrt+0x130>
 800a5ee:	02cd      	lsls	r5, r1, #11
 800a5f0:	d50a      	bpl.n	800a608 <__ieee754_sqrt+0x154>
 800a5f2:	f1c2 0420 	rsb	r4, r2, #32
 800a5f6:	fa23 f404 	lsr.w	r4, r3, r4
 800a5fa:	1e55      	subs	r5, r2, #1
 800a5fc:	4093      	lsls	r3, r2
 800a5fe:	4321      	orrs	r1, r4
 800a600:	1b42      	subs	r2, r0, r5
 800a602:	e78a      	b.n	800a51a <__ieee754_sqrt+0x66>
 800a604:	4610      	mov	r0, r2
 800a606:	e7f0      	b.n	800a5ea <__ieee754_sqrt+0x136>
 800a608:	0049      	lsls	r1, r1, #1
 800a60a:	3201      	adds	r2, #1
 800a60c:	e7ef      	b.n	800a5ee <__ieee754_sqrt+0x13a>
 800a60e:	4680      	mov	r8, r0
 800a610:	e7bd      	b.n	800a58e <__ieee754_sqrt+0xda>
 800a612:	bf00      	nop
 800a614:	7ff00000 	.word	0x7ff00000

0800a618 <_init>:
 800a618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a61a:	bf00      	nop
 800a61c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a61e:	bc08      	pop	{r3}
 800a620:	469e      	mov	lr, r3
 800a622:	4770      	bx	lr

0800a624 <_fini>:
 800a624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a626:	bf00      	nop
 800a628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a62a:	bc08      	pop	{r3}
 800a62c:	469e      	mov	lr, r3
 800a62e:	4770      	bx	lr


robo_balance_dev_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  080090f8  080090f8  000190f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009610  08009610  00020274  2**0
                  CONTENTS
  4 .ARM          00000000  08009610  08009610  00020274  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009610  08009610  00020274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009610  08009610  00019610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009614  08009614  00019614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  08009618  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000278  0800988c  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  0800988c  00020470  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 12 .debug_info   000111c0  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028c6  00000000  00000000  00031464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  00033d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  00034e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004191  00000000  00000000  00035d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014110  00000000  00000000  00039f19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9dd4  00000000  00000000  0004e029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00117dfd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057f8  00000000  00000000  00117e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000278 	.word	0x20000278
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080090e0 	.word	0x080090e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000027c 	.word	0x2000027c
 80001cc:	080090e0 	.word	0x080090e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	4b38      	ldr	r3, [pc, #224]	; (8000ca0 <MX_GPIO_Init+0xf8>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	4a37      	ldr	r2, [pc, #220]	; (8000ca0 <MX_GPIO_Init+0xf8>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bca:	4b35      	ldr	r3, [pc, #212]	; (8000ca0 <MX_GPIO_Init+0xf8>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	4b32      	ldr	r3, [pc, #200]	; (8000ca0 <MX_GPIO_Init+0xf8>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	4a31      	ldr	r2, [pc, #196]	; (8000ca0 <MX_GPIO_Init+0xf8>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be2:	4b2f      	ldr	r3, [pc, #188]	; (8000ca0 <MX_GPIO_Init+0xf8>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_L_2_Pin|EN_R_2_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2190      	movs	r1, #144	; 0x90
 8000bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf6:	f002 f859 	bl	8002cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_R_1_Pin|EN_L_1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	210b      	movs	r1, #11
 8000bfe:	4829      	ldr	r0, [pc, #164]	; (8000ca4 <MX_GPIO_Init+0xfc>)
 8000c00:	f002 f854 	bl	8002cac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = EN_L_2_Pin|EN_R_2_Pin;
 8000c04:	2390      	movs	r3, #144	; 0x90
 8000c06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 030c 	add.w	r3, r7, #12
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1e:	f001 fedb 	bl	80029d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = EN_R_1_Pin|EN_L_1_Pin|LD3_Pin;
 8000c22:	230b      	movs	r3, #11
 8000c24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	4619      	mov	r1, r3
 8000c38:	481a      	ldr	r0, [pc, #104]	; (8000ca4 <MX_GPIO_Init+0xfc>)
 8000c3a:	f001 fecd 	bl	80029d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BTN_OK_Pin|BTN_NO_Pin|BTN_LE_Pin;
 8000c3e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c44:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 030c 	add.w	r3, r7, #12
 8000c52:	4619      	mov	r1, r3
 8000c54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c58:	f001 febe 	bl	80029d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_RI_Pin;
 8000c5c:	2320      	movs	r3, #32
 8000c5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c60:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_RI_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 030c 	add.w	r3, r7, #12
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <MX_GPIO_Init+0xfc>)
 8000c72:	f001 feb1 	bl	80029d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 12, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	210c      	movs	r1, #12
 8000c7a:	2017      	movs	r0, #23
 8000c7c:	f001 fe75 	bl	800296a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c80:	2017      	movs	r0, #23
 8000c82:	f001 fe8e 	bl	80029a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 12, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	210c      	movs	r1, #12
 8000c8a:	2028      	movs	r0, #40	; 0x28
 8000c8c:	f001 fe6d 	bl	800296a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c90:	2028      	movs	r0, #40	; 0x28
 8000c92:	f001 fe86 	bl	80029a2 <HAL_NVIC_EnableIRQ>

}
 8000c96:	bf00      	nop
 8000c98:	3720      	adds	r7, #32
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	48000400 	.word	0x48000400

08000ca8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af02      	add	r7, sp, #8
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	f023 030f 	bic.w	r3, r3, #15
 8000cb8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	011b      	lsls	r3, r3, #4
 8000cbe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	f043 030c 	orr.w	r3, r3, #12
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	f043 0308 	orr.w	r3, r3, #8
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000cd4:	7bbb      	ldrb	r3, [r7, #14]
 8000cd6:	f043 030c 	orr.w	r3, r3, #12
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000cde:	7bbb      	ldrb	r3, [r7, #14]
 8000ce0:	f043 0308 	orr.w	r3, r3, #8
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ce8:	f107 0208 	add.w	r2, r7, #8
 8000cec:	2364      	movs	r3, #100	; 0x64
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	214e      	movs	r1, #78	; 0x4e
 8000cf4:	4803      	ldr	r0, [pc, #12]	; (8000d04 <lcd_send_cmd+0x5c>)
 8000cf6:	f002 f8b3 	bl	8002e60 <HAL_I2C_Master_Transmit>
}
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000294 	.word	0x20000294

08000d08 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af02      	add	r7, sp, #8
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	f023 030f 	bic.w	r3, r3, #15
 8000d18:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	011b      	lsls	r3, r3, #4
 8000d1e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	f043 030d 	orr.w	r3, r3, #13
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	f043 0309 	orr.w	r3, r3, #9
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000d34:	7bbb      	ldrb	r3, [r7, #14]
 8000d36:	f043 030d 	orr.w	r3, r3, #13
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000d3e:	7bbb      	ldrb	r3, [r7, #14]
 8000d40:	f043 0309 	orr.w	r3, r3, #9
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000d48:	f107 0208 	add.w	r2, r7, #8
 8000d4c:	2364      	movs	r3, #100	; 0x64
 8000d4e:	9300      	str	r3, [sp, #0]
 8000d50:	2304      	movs	r3, #4
 8000d52:	214e      	movs	r1, #78	; 0x4e
 8000d54:	4803      	ldr	r0, [pc, #12]	; (8000d64 <lcd_send_data+0x5c>)
 8000d56:	f002 f883 	bl	8002e60 <HAL_I2C_Master_Transmit>
}
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000294 	.word	0x20000294

08000d68 <lcd_clear>:

void lcd_clear (void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000d6e:	2080      	movs	r0, #128	; 0x80
 8000d70:	f7ff ff9a 	bl	8000ca8 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000d74:	2300      	movs	r3, #0
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	e005      	b.n	8000d86 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000d7a:	2020      	movs	r0, #32
 8000d7c:	f7ff ffc4 	bl	8000d08 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3301      	adds	r3, #1
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b45      	cmp	r3, #69	; 0x45
 8000d8a:	ddf6      	ble.n	8000d7a <lcd_clear+0x12>
	}
}
 8000d8c:	bf00      	nop
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
 8000d9e:	6039      	str	r1, [r7, #0]
    switch (row)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d003      	beq.n	8000dae <lcd_put_cur+0x18>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d005      	beq.n	8000db8 <lcd_put_cur+0x22>
 8000dac:	e009      	b.n	8000dc2 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db4:	603b      	str	r3, [r7, #0]
            break;
 8000db6:	e004      	b.n	8000dc2 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000dbe:	603b      	str	r3, [r7, #0]
            break;
 8000dc0:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ff6e 	bl	8000ca8 <lcd_send_cmd>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <lcd_init>:


void lcd_init (void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000dd8:	2032      	movs	r0, #50	; 0x32
 8000dda:	f001 fcc7 	bl	800276c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000dde:	2030      	movs	r0, #48	; 0x30
 8000de0:	f7ff ff62 	bl	8000ca8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000de4:	2005      	movs	r0, #5
 8000de6:	f001 fcc1 	bl	800276c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000dea:	2030      	movs	r0, #48	; 0x30
 8000dec:	f7ff ff5c 	bl	8000ca8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000df0:	2001      	movs	r0, #1
 8000df2:	f001 fcbb 	bl	800276c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000df6:	2030      	movs	r0, #48	; 0x30
 8000df8:	f7ff ff56 	bl	8000ca8 <lcd_send_cmd>
	HAL_Delay(10);
 8000dfc:	200a      	movs	r0, #10
 8000dfe:	f001 fcb5 	bl	800276c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000e02:	2020      	movs	r0, #32
 8000e04:	f7ff ff50 	bl	8000ca8 <lcd_send_cmd>
	HAL_Delay(10);
 8000e08:	200a      	movs	r0, #10
 8000e0a:	f001 fcaf 	bl	800276c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000e0e:	2028      	movs	r0, #40	; 0x28
 8000e10:	f7ff ff4a 	bl	8000ca8 <lcd_send_cmd>
	HAL_Delay(1);
 8000e14:	2001      	movs	r0, #1
 8000e16:	f001 fca9 	bl	800276c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000e1a:	2008      	movs	r0, #8
 8000e1c:	f7ff ff44 	bl	8000ca8 <lcd_send_cmd>
	HAL_Delay(1);
 8000e20:	2001      	movs	r0, #1
 8000e22:	f001 fca3 	bl	800276c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000e26:	2001      	movs	r0, #1
 8000e28:	f7ff ff3e 	bl	8000ca8 <lcd_send_cmd>
	HAL_Delay(1);
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f001 fc9d 	bl	800276c <HAL_Delay>
	HAL_Delay(1);
 8000e32:	2001      	movs	r0, #1
 8000e34:	f001 fc9a 	bl	800276c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000e38:	2006      	movs	r0, #6
 8000e3a:	f7ff ff35 	bl	8000ca8 <lcd_send_cmd>
	HAL_Delay(1);
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f001 fc94 	bl	800276c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000e44:	200c      	movs	r0, #12
 8000e46:	f7ff ff2f 	bl	8000ca8 <lcd_send_cmd>
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000e56:	e006      	b.n	8000e66 <lcd_send_string+0x18>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	1c5a      	adds	r2, r3, #1
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff51 	bl	8000d08 <lcd_send_data>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d1f4      	bne.n	8000e58 <lcd_send_string+0xa>
}
 8000e6e:	bf00      	nop
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <MX_I2C1_Init+0x74>)
 8000e7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ef0 <MX_I2C1_Init+0x78>)
 8000e80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <MX_I2C1_Init+0x74>)
 8000e84:	4a1b      	ldr	r2, [pc, #108]	; (8000ef4 <MX_I2C1_Init+0x7c>)
 8000e86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e88:	4b18      	ldr	r3, [pc, #96]	; (8000eec <MX_I2C1_Init+0x74>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e8e:	4b17      	ldr	r3, [pc, #92]	; (8000eec <MX_I2C1_Init+0x74>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e94:	4b15      	ldr	r3, [pc, #84]	; (8000eec <MX_I2C1_Init+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <MX_I2C1_Init+0x74>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <MX_I2C1_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <MX_I2C1_Init+0x74>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <MX_I2C1_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eb2:	480e      	ldr	r0, [pc, #56]	; (8000eec <MX_I2C1_Init+0x74>)
 8000eb4:	f001 ff44 	bl	8002d40 <HAL_I2C_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ebe:	f000 fcd5 	bl	800186c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4809      	ldr	r0, [pc, #36]	; (8000eec <MX_I2C1_Init+0x74>)
 8000ec6:	f002 fd93 	bl	80039f0 <HAL_I2CEx_ConfigAnalogFilter>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ed0:	f000 fccc 	bl	800186c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_I2C1_Init+0x74>)
 8000ed8:	f002 fdd5 	bl	8003a86 <HAL_I2CEx_ConfigDigitalFilter>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ee2:	f000 fcc3 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000294 	.word	0x20000294
 8000ef0:	40005400 	.word	0x40005400
 8000ef4:	10707dbc 	.word	0x10707dbc

08000ef8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b09e      	sub	sp, #120	; 0x78
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	2254      	movs	r2, #84	; 0x54
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f004 fea3 	bl	8005c64 <memset>
  if(i2cHandle->Instance==I2C1)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a1e      	ldr	r2, [pc, #120]	; (8000f9c <HAL_I2C_MspInit+0xa4>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d135      	bne.n	8000f94 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f28:	2340      	movs	r3, #64	; 0x40
 8000f2a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f30:	f107 0310 	add.w	r3, r7, #16
 8000f34:	4618      	mov	r0, r3
 8000f36:	f003 fc57 	bl	80047e8 <HAL_RCCEx_PeriphCLKConfig>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f40:	f000 fc94 	bl	800186c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <HAL_I2C_MspInit+0xa8>)
 8000f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f48:	4a15      	ldr	r2, [pc, #84]	; (8000fa0 <HAL_I2C_MspInit+0xa8>)
 8000f4a:	f043 0302 	orr.w	r3, r3, #2
 8000f4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <HAL_I2C_MspInit+0xa8>)
 8000f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f5c:	23c0      	movs	r3, #192	; 0xc0
 8000f5e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f60:	2312      	movs	r3, #18
 8000f62:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f70:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f74:	4619      	mov	r1, r3
 8000f76:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <HAL_I2C_MspInit+0xac>)
 8000f78:	f001 fd2e 	bl	80029d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <HAL_I2C_MspInit+0xa8>)
 8000f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f80:	4a07      	ldr	r2, [pc, #28]	; (8000fa0 <HAL_I2C_MspInit+0xa8>)
 8000f82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f86:	6593      	str	r3, [r2, #88]	; 0x58
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <HAL_I2C_MspInit+0xa8>)
 8000f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f94:	bf00      	nop
 8000f96:	3778      	adds	r7, #120	; 0x78
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40005400 	.word	0x40005400
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	48000400 	.word	0x48000400

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fac:	f001 fb69 	bl	8002682 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb0:	f000 f854 	bl	800105c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb4:	f7ff fdf8 	bl	8000ba8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fb8:	f7ff ff5e 	bl	8000e78 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000fbc:	f001 f932 	bl	8002224 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000fc0:	f001 f98a 	bl	80022d8 <MX_TIM2_Init>
  MX_TIM15_Init();
 8000fc4:	f001 f9dc 	bl	8002380 <MX_TIM15_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_init();
 8000fc8:	f7ff ff04 	bl	8000dd4 <lcd_init>
  lcd_put_cur(0, 0);
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f7ff fee1 	bl	8000d96 <lcd_put_cur>
  lcd_send_string("Hello, world!");
 8000fd4:	481e      	ldr	r0, [pc, #120]	; (8001050 <main+0xa8>)
 8000fd6:	f7ff ff3a 	bl	8000e4e <lcd_send_string>

  MPU6050_Init(&hi2c1);
 8000fda:	481e      	ldr	r0, [pc, #120]	; (8001054 <main+0xac>)
 8000fdc:	f000 fc4b 	bl	8001876 <MPU6050_Init>
  HAL_Delay(1000);
 8000fe0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fe4:	f001 fbc2 	bl	800276c <HAL_Delay>

  while (1)
  {
	  switch (current_state) {
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <main+0xb0>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	3b01      	subs	r3, #1
 8000fee:	2b07      	cmp	r3, #7
 8000ff0:	d82a      	bhi.n	8001048 <main+0xa0>
 8000ff2:	a201      	add	r2, pc, #4	; (adr r2, 8000ff8 <main+0x50>)
 8000ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff8:	08001043 	.word	0x08001043
 8000ffc:	08001019 	.word	0x08001019
 8001000:	0800101f 	.word	0x0800101f
 8001004:	08001025 	.word	0x08001025
 8001008:	0800102b 	.word	0x0800102b
 800100c:	08001031 	.word	0x08001031
 8001010:	08001037 	.word	0x08001037
 8001014:	0800103d 	.word	0x0800103d
		case ENCODER_DISPLAY_state:
			stateENCODER();
 8001018:	f000 f93e 	bl	8001298 <stateENCODER>
			break;
 800101c:	e017      	b.n	800104e <main+0xa6>
		case IMU_DISPLAY_state:
			stateIMU();
 800101e:	f000 f9eb 	bl	80013f8 <stateIMU>
			break;
 8001022:	e014      	b.n	800104e <main+0xa6>
		case HOME_state:
			stateHOME();
 8001024:	f000 fa64 	bl	80014f0 <stateHOME>
			break;
 8001028:	e011      	b.n	800104e <main+0xa6>
		case EEPROM_RW_state:
			stateEEPROM();
 800102a:	f000 fac1 	bl	80015b0 <stateEEPROM>
			break;
 800102e:	e00e      	b.n	800104e <main+0xa6>
		case KP_state:
			stateKP();
 8001030:	f000 fb2a 	bl	8001688 <stateKP>
			break;
 8001034:	e00b      	b.n	800104e <main+0xa6>
		case KI_state:
			stateKI();
 8001036:	f000 fb7b 	bl	8001730 <stateKI>
			break;
 800103a:	e008      	b.n	800104e <main+0xa6>
		case KD_state:
			stateKD();
 800103c:	f000 fbcc 	bl	80017d8 <stateKD>
			break;
 8001040:	e005      	b.n	800104e <main+0xa6>
		case BALANCE_state:
			stateBALANCE();
 8001042:	f000 f8dd 	bl	8001200 <stateBALANCE>
			break;
 8001046:	e002      	b.n	800104e <main+0xa6>
		default:
			stateNULL();
 8001048:	f000 f886 	bl	8001158 <stateNULL>
			break;
 800104c:	bf00      	nop
	  switch (current_state) {
 800104e:	e7cb      	b.n	8000fe8 <main+0x40>
 8001050:	080090f8 	.word	0x080090f8
 8001054:	20000294 	.word	0x20000294
 8001058:	20000000 	.word	0x20000000

0800105c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b096      	sub	sp, #88	; 0x58
 8001060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	2244      	movs	r2, #68	; 0x44
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f004 fdfa 	bl	8005c64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001070:	463b      	mov	r3, r7
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800107e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001082:	f002 fd5b 	bl	8003b3c <HAL_PWREx_ControlVoltageScaling>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800108c:	f000 fbee 	bl	800186c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001090:	2302      	movs	r3, #2
 8001092:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001094:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001098:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800109a:	2310      	movs	r3, #16
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109e:	2302      	movs	r3, #2
 80010a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010a2:	2302      	movs	r3, #2
 80010a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010a6:	2301      	movs	r3, #1
 80010a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80010aa:	2310      	movs	r3, #16
 80010ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010ae:	2307      	movs	r3, #7
 80010b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010b2:	2302      	movs	r3, #2
 80010b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80010b6:	2304      	movs	r3, #4
 80010b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4618      	mov	r0, r3
 80010c0:	f002 fd92 	bl	8003be8 <HAL_RCC_OscConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <SystemClock_Config+0x72>
  {
    Error_Handler();
 80010ca:	f000 fbcf 	bl	800186c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ce:	230f      	movs	r3, #15
 80010d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d2:	2303      	movs	r3, #3
 80010d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010e2:	463b      	mov	r3, r7
 80010e4:	2103      	movs	r1, #3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f003 f992 	bl	8004410 <HAL_RCC_ClockConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010f2:	f000 fbbb 	bl	800186c <Error_Handler>
  }
}
 80010f6:	bf00      	nop
 80010f8:	3758      	adds	r7, #88	; 0x58
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BTN_OK_Pin)
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001110:	d102      	bne.n	8001118 <HAL_GPIO_EXTI_Callback+0x18>
	{
		BTN.ok = BTN_pressed;
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <HAL_GPIO_EXTI_Callback+0x54>)
 8001114:	2201      	movs	r2, #1
 8001116:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == BTN_NO_Pin)
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800111e:	d102      	bne.n	8001126 <HAL_GPIO_EXTI_Callback+0x26>
	{
		BTN.no = BTN_pressed;
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <HAL_GPIO_EXTI_Callback+0x54>)
 8001122:	2201      	movs	r2, #1
 8001124:	705a      	strb	r2, [r3, #1]
	}
	if (GPIO_Pin == BTN_LE_Pin)
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800112c:	d105      	bne.n	800113a <HAL_GPIO_EXTI_Callback+0x3a>
	{
		BTN.left = BTN_pressed;
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <HAL_GPIO_EXTI_Callback+0x54>)
 8001130:	2201      	movs	r2, #1
 8001132:	709a      	strb	r2, [r3, #2]
		HAL_Delay(2); // XDDDD INTERRUPTS ALE CALLED TWICE WITHOUT THIS DUDE RIGHT HERE XD
 8001134:	2002      	movs	r0, #2
 8001136:	f001 fb19 	bl	800276c <HAL_Delay>
	}
	if (GPIO_Pin == BTN_RI_Pin)
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	2b20      	cmp	r3, #32
 800113e:	d105      	bne.n	800114c <HAL_GPIO_EXTI_Callback+0x4c>
	{
		BTN.right = BTN_pressed;
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <HAL_GPIO_EXTI_Callback+0x54>)
 8001142:	2201      	movs	r2, #1
 8001144:	70da      	strb	r2, [r3, #3]
		HAL_Delay(2); // XDDDD INTERRUPTS ALE CALLED TWICE WITHOUT THIS DUDE RIGHT HERE XD
 8001146:	2002      	movs	r0, #2
 8001148:	f001 fb10 	bl	800276c <HAL_Delay>
	}
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200002ec 	.word	0x200002ec

08001158 <stateNULL>:
void stateNULL(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 800115c:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <stateNULL+0x90>)
 800115e:	781a      	ldrb	r2, [r3, #0]
 8001160:	4b22      	ldr	r3, [pc, #136]	; (80011ec <stateNULL+0x94>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	429a      	cmp	r2, r3
 8001166:	d013      	beq.n	8001190 <stateNULL+0x38>
	{
		previous_state = current_state;
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <stateNULL+0x90>)
 800116a:	781a      	ldrb	r2, [r3, #0]
 800116c:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <stateNULL+0x94>)
 800116e:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001170:	f7ff fdfa 	bl	8000d68 <lcd_clear>
		lcd_put_cur(0, 0);
 8001174:	2100      	movs	r1, #0
 8001176:	2000      	movs	r0, #0
 8001178:	f7ff fe0d 	bl	8000d96 <lcd_put_cur>
		lcd_send_string("oops NULL state?");
 800117c:	481c      	ldr	r0, [pc, #112]	; (80011f0 <stateNULL+0x98>)
 800117e:	f7ff fe66 	bl	8000e4e <lcd_send_string>
		lcd_put_cur(1, 3);
 8001182:	2103      	movs	r1, #3
 8001184:	2001      	movs	r0, #1
 8001186:	f7ff fe06 	bl	8000d96 <lcd_put_cur>
		lcd_send_string("press ok");
 800118a:	481a      	ldr	r0, [pc, #104]	; (80011f4 <stateNULL+0x9c>)
 800118c:	f7ff fe5f 	bl	8000e4e <lcd_send_string>
	}
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001190:	2108      	movs	r1, #8
 8001192:	4819      	ldr	r0, [pc, #100]	; (80011f8 <stateNULL+0xa0>)
 8001194:	f001 fda2 	bl	8002cdc <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 8001198:	20c8      	movs	r0, #200	; 0xc8
 800119a:	f001 fae7 	bl	800276c <HAL_Delay>
	if (BTN.ok == BTN_pressed)
 800119e:	4b17      	ldr	r3, [pc, #92]	; (80011fc <stateNULL+0xa4>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d105      	bne.n	80011b4 <stateNULL+0x5c>
	{
		BTN.ok = BTN_not_pressed;
 80011a8:	4b14      	ldr	r3, [pc, #80]	; (80011fc <stateNULL+0xa4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
		current_state = HOME_state;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <stateNULL+0x90>)
 80011b0:	2204      	movs	r2, #4
 80011b2:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.no == BTN_pressed) BTN.no = BTN_not_pressed;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <stateNULL+0xa4>)
 80011b6:	785b      	ldrb	r3, [r3, #1]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d102      	bne.n	80011c4 <stateNULL+0x6c>
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <stateNULL+0xa4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	705a      	strb	r2, [r3, #1]
	if (BTN.left == BTN_pressed) BTN.left = BTN_not_pressed;
 80011c4:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <stateNULL+0xa4>)
 80011c6:	789b      	ldrb	r3, [r3, #2]
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d102      	bne.n	80011d4 <stateNULL+0x7c>
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <stateNULL+0xa4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	709a      	strb	r2, [r3, #2]
	if (BTN.right == BTN_pressed) BTN.right = BTN_not_pressed;
 80011d4:	4b09      	ldr	r3, [pc, #36]	; (80011fc <stateNULL+0xa4>)
 80011d6:	78db      	ldrb	r3, [r3, #3]
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d102      	bne.n	80011e4 <stateNULL+0x8c>
 80011de:	4b07      	ldr	r3, [pc, #28]	; (80011fc <stateNULL+0xa4>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	70da      	strb	r2, [r3, #3]
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000000 	.word	0x20000000
 80011ec:	200002e8 	.word	0x200002e8
 80011f0:	08009108 	.word	0x08009108
 80011f4:	0800911c 	.word	0x0800911c
 80011f8:	48000400 	.word	0x48000400
 80011fc:	200002ec 	.word	0x200002ec

08001200 <stateBALANCE>:
void stateBALANCE(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 8001204:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <stateBALANCE+0x84>)
 8001206:	781a      	ldrb	r2, [r3, #0]
 8001208:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <stateBALANCE+0x88>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	429a      	cmp	r2, r3
 800120e:	d013      	beq.n	8001238 <stateBALANCE+0x38>
	{
		previous_state = current_state;
 8001210:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <stateBALANCE+0x84>)
 8001212:	781a      	ldrb	r2, [r3, #0]
 8001214:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <stateBALANCE+0x88>)
 8001216:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001218:	f7ff fda6 	bl	8000d68 <lcd_clear>
		lcd_put_cur(0, 0);
 800121c:	2100      	movs	r1, #0
 800121e:	2000      	movs	r0, #0
 8001220:	f7ff fdb9 	bl	8000d96 <lcd_put_cur>
		lcd_send_string("Balancing");
 8001224:	4819      	ldr	r0, [pc, #100]	; (800128c <stateBALANCE+0x8c>)
 8001226:	f7ff fe12 	bl	8000e4e <lcd_send_string>
		lcd_put_cur(1, 0);
 800122a:	2100      	movs	r1, #0
 800122c:	2001      	movs	r0, #1
 800122e:	f7ff fdb2 	bl	8000d96 <lcd_put_cur>
		lcd_send_string("press no to exit");
 8001232:	4817      	ldr	r0, [pc, #92]	; (8001290 <stateBALANCE+0x90>)
 8001234:	f7ff fe0b 	bl	8000e4e <lcd_send_string>
	}
//todo end this XD
	if (BTN.ok == BTN_pressed) BTN.ok = BTN_not_pressed;
 8001238:	4b16      	ldr	r3, [pc, #88]	; (8001294 <stateBALANCE+0x94>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b01      	cmp	r3, #1
 8001240:	d102      	bne.n	8001248 <stateBALANCE+0x48>
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <stateBALANCE+0x94>)
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
	if (BTN.no == BTN_pressed)
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <stateBALANCE+0x94>)
 800124a:	785b      	ldrb	r3, [r3, #1]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b01      	cmp	r3, #1
 8001250:	d105      	bne.n	800125e <stateBALANCE+0x5e>
	{
		BTN.no = BTN_not_pressed;
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <stateBALANCE+0x94>)
 8001254:	2200      	movs	r2, #0
 8001256:	705a      	strb	r2, [r3, #1]
		current_state = HOME_state;
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <stateBALANCE+0x84>)
 800125a:	2204      	movs	r2, #4
 800125c:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.left == BTN_pressed) BTN.left = BTN_not_pressed;
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <stateBALANCE+0x94>)
 8001260:	789b      	ldrb	r3, [r3, #2]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b01      	cmp	r3, #1
 8001266:	d102      	bne.n	800126e <stateBALANCE+0x6e>
 8001268:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <stateBALANCE+0x94>)
 800126a:	2200      	movs	r2, #0
 800126c:	709a      	strb	r2, [r3, #2]
	if (BTN.right == BTN_pressed) BTN.right = BTN_not_pressed;
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <stateBALANCE+0x94>)
 8001270:	78db      	ldrb	r3, [r3, #3]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b01      	cmp	r3, #1
 8001276:	d102      	bne.n	800127e <stateBALANCE+0x7e>
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <stateBALANCE+0x94>)
 800127a:	2200      	movs	r2, #0
 800127c:	70da      	strb	r2, [r3, #3]
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000000 	.word	0x20000000
 8001288:	200002e8 	.word	0x200002e8
 800128c:	08009128 	.word	0x08009128
 8001290:	08009134 	.word	0x08009134
 8001294:	200002ec 	.word	0x200002ec

08001298 <stateENCODER>:
void stateENCODER(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 800129c:	4b49      	ldr	r3, [pc, #292]	; (80013c4 <stateENCODER+0x12c>)
 800129e:	781a      	ldrb	r2, [r3, #0]
 80012a0:	4b49      	ldr	r3, [pc, #292]	; (80013c8 <stateENCODER+0x130>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d024      	beq.n	80012f2 <stateENCODER+0x5a>
	{
		previous_state = current_state;
 80012a8:	4b46      	ldr	r3, [pc, #280]	; (80013c4 <stateENCODER+0x12c>)
 80012aa:	781a      	ldrb	r2, [r3, #0]
 80012ac:	4b46      	ldr	r3, [pc, #280]	; (80013c8 <stateENCODER+0x130>)
 80012ae:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 80012b0:	f7ff fd5a 	bl	8000d68 <lcd_clear>
		lcd_put_cur(0, 0);
 80012b4:	2100      	movs	r1, #0
 80012b6:	2000      	movs	r0, #0
 80012b8:	f7ff fd6d 	bl	8000d96 <lcd_put_cur>
		lcd_send_string("ENCODER");
 80012bc:	4843      	ldr	r0, [pc, #268]	; (80013cc <stateENCODER+0x134>)
 80012be:	f7ff fdc6 	bl	8000e4e <lcd_send_string>
		lcd_put_cur(1, 15);
 80012c2:	210f      	movs	r1, #15
 80012c4:	2001      	movs	r0, #1
 80012c6:	f7ff fd66 	bl	8000d96 <lcd_put_cur>
		lcd_send_data(LCD_RIGHT_ARROW);
 80012ca:	207e      	movs	r0, #126	; 0x7e
 80012cc:	f7ff fd1c 	bl	8000d08 <lcd_send_data>
		HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);	// encoder timer start
 80012d0:	213c      	movs	r1, #60	; 0x3c
 80012d2:	483f      	ldr	r0, [pc, #252]	; (80013d0 <stateENCODER+0x138>)
 80012d4:	f003 fe6d 	bl	8004fb2 <HAL_TIM_Encoder_Start>
		HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);	// encoder timer start
 80012d8:	213c      	movs	r1, #60	; 0x3c
 80012da:	483e      	ldr	r0, [pc, #248]	; (80013d4 <stateENCODER+0x13c>)
 80012dc:	f003 fe69 	bl	8004fb2 <HAL_TIM_Encoder_Start>
		TIM1->CNT = 32767;	// wartosc rejestru na srodek ustawiona
 80012e0:	4b3d      	ldr	r3, [pc, #244]	; (80013d8 <stateENCODER+0x140>)
 80012e2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80012e6:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->CNT = 32767;
 80012e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012ec:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80012f0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	// todo cyclic interrupt needed 10ms like
	encd_left = TIM2->CNT;
 80012f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	4b38      	ldr	r3, [pc, #224]	; (80013dc <stateENCODER+0x144>)
 80012fc:	801a      	strh	r2, [r3, #0]
	encd_right = TIM1->CNT;
 80012fe:	4b36      	ldr	r3, [pc, #216]	; (80013d8 <stateENCODER+0x140>)
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	b29a      	uxth	r2, r3
 8001304:	4b36      	ldr	r3, [pc, #216]	; (80013e0 <stateENCODER+0x148>)
 8001306:	801a      	strh	r2, [r3, #0]

	//encd_right = TIM2->CNT;
	if (encd_left != old_encd_left || encd_right != old_encd_right)
 8001308:	4b34      	ldr	r3, [pc, #208]	; (80013dc <stateENCODER+0x144>)
 800130a:	881a      	ldrh	r2, [r3, #0]
 800130c:	4b35      	ldr	r3, [pc, #212]	; (80013e4 <stateENCODER+0x14c>)
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	429a      	cmp	r2, r3
 8001312:	d105      	bne.n	8001320 <stateENCODER+0x88>
 8001314:	4b32      	ldr	r3, [pc, #200]	; (80013e0 <stateENCODER+0x148>)
 8001316:	881a      	ldrh	r2, [r3, #0]
 8001318:	4b33      	ldr	r3, [pc, #204]	; (80013e8 <stateENCODER+0x150>)
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	429a      	cmp	r2, r3
 800131e:	d023      	beq.n	8001368 <stateENCODER+0xd0>
	{
		old_encd_left = encd_left;
 8001320:	4b2e      	ldr	r3, [pc, #184]	; (80013dc <stateENCODER+0x144>)
 8001322:	881a      	ldrh	r2, [r3, #0]
 8001324:	4b2f      	ldr	r3, [pc, #188]	; (80013e4 <stateENCODER+0x14c>)
 8001326:	801a      	strh	r2, [r3, #0]
		old_encd_right = encd_right;
 8001328:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <stateENCODER+0x148>)
 800132a:	881a      	ldrh	r2, [r3, #0]
 800132c:	4b2e      	ldr	r3, [pc, #184]	; (80013e8 <stateENCODER+0x150>)
 800132e:	801a      	strh	r2, [r3, #0]
		lcd_put_cur(1, 1);
 8001330:	2101      	movs	r1, #1
 8001332:	2001      	movs	r0, #1
 8001334:	f7ff fd2f 	bl	8000d96 <lcd_put_cur>
		sprintf(MSG, "%+06d", encd_left);
 8001338:	4b28      	ldr	r3, [pc, #160]	; (80013dc <stateENCODER+0x144>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	492b      	ldr	r1, [pc, #172]	; (80013ec <stateENCODER+0x154>)
 8001340:	482b      	ldr	r0, [pc, #172]	; (80013f0 <stateENCODER+0x158>)
 8001342:	f005 f901 	bl	8006548 <siprintf>
		lcd_send_string(MSG);
 8001346:	482a      	ldr	r0, [pc, #168]	; (80013f0 <stateENCODER+0x158>)
 8001348:	f7ff fd81 	bl	8000e4e <lcd_send_string>

		lcd_put_cur(1, 8);
 800134c:	2108      	movs	r1, #8
 800134e:	2001      	movs	r0, #1
 8001350:	f7ff fd21 	bl	8000d96 <lcd_put_cur>
		sprintf(MSG, "%+06d", encd_right);
 8001354:	4b22      	ldr	r3, [pc, #136]	; (80013e0 <stateENCODER+0x148>)
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	4924      	ldr	r1, [pc, #144]	; (80013ec <stateENCODER+0x154>)
 800135c:	4824      	ldr	r0, [pc, #144]	; (80013f0 <stateENCODER+0x158>)
 800135e:	f005 f8f3 	bl	8006548 <siprintf>
		lcd_send_string(MSG);
 8001362:	4823      	ldr	r0, [pc, #140]	; (80013f0 <stateENCODER+0x158>)
 8001364:	f7ff fd73 	bl	8000e4e <lcd_send_string>
	}

	if (BTN.ok == BTN_pressed)
 8001368:	4b22      	ldr	r3, [pc, #136]	; (80013f4 <stateENCODER+0x15c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b01      	cmp	r3, #1
 8001370:	d102      	bne.n	8001378 <stateENCODER+0xe0>
	{
		BTN.ok = BTN_not_pressed;
 8001372:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <stateENCODER+0x15c>)
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.no == BTN_pressed)
 8001378:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <stateENCODER+0x15c>)
 800137a:	785b      	ldrb	r3, [r3, #1]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b01      	cmp	r3, #1
 8001380:	d102      	bne.n	8001388 <stateENCODER+0xf0>
	{
		BTN.no = BTN_not_pressed;
 8001382:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <stateENCODER+0x15c>)
 8001384:	2200      	movs	r2, #0
 8001386:	705a      	strb	r2, [r3, #1]
	}
	if (BTN.left == BTN_pressed)
 8001388:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <stateENCODER+0x15c>)
 800138a:	789b      	ldrb	r3, [r3, #2]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b01      	cmp	r3, #1
 8001390:	d102      	bne.n	8001398 <stateENCODER+0x100>
	{
		BTN.left = BTN_not_pressed;
 8001392:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <stateENCODER+0x15c>)
 8001394:	2200      	movs	r2, #0
 8001396:	709a      	strb	r2, [r3, #2]
	}
	if (BTN.right == BTN_pressed)
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <stateENCODER+0x15c>)
 800139a:	78db      	ldrb	r3, [r3, #3]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d10d      	bne.n	80013be <stateENCODER+0x126>
	{
		BTN.right = BTN_not_pressed;
 80013a2:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <stateENCODER+0x15c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	70da      	strb	r2, [r3, #3]
		HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 80013a8:	213c      	movs	r1, #60	; 0x3c
 80013aa:	4809      	ldr	r0, [pc, #36]	; (80013d0 <stateENCODER+0x138>)
 80013ac:	f003 fe8f 	bl	80050ce <HAL_TIM_Encoder_Stop>
		HAL_TIM_Encoder_Stop(&htim2, TIM_CHANNEL_ALL);
 80013b0:	213c      	movs	r1, #60	; 0x3c
 80013b2:	4808      	ldr	r0, [pc, #32]	; (80013d4 <stateENCODER+0x13c>)
 80013b4:	f003 fe8b 	bl	80050ce <HAL_TIM_Encoder_Stop>
		current_state = IMU_DISPLAY_state;
 80013b8:	4b02      	ldr	r3, [pc, #8]	; (80013c4 <stateENCODER+0x12c>)
 80013ba:	2203      	movs	r2, #3
 80013bc:	701a      	strb	r2, [r3, #0]
	}
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000000 	.word	0x20000000
 80013c8:	200002e8 	.word	0x200002e8
 80013cc:	08009148 	.word	0x08009148
 80013d0:	20000378 	.word	0x20000378
 80013d4:	200003c4 	.word	0x200003c4
 80013d8:	40012c00 	.word	0x40012c00
 80013dc:	20000362 	.word	0x20000362
 80013e0:	20000366 	.word	0x20000366
 80013e4:	20000360 	.word	0x20000360
 80013e8:	20000364 	.word	0x20000364
 80013ec:	08009150 	.word	0x08009150
 80013f0:	200002f0 	.word	0x200002f0
 80013f4:	200002ec 	.word	0x200002ec

080013f8 <stateIMU>:
void stateIMU(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 80013fe:	4b34      	ldr	r3, [pc, #208]	; (80014d0 <stateIMU+0xd8>)
 8001400:	781a      	ldrb	r2, [r3, #0]
 8001402:	4b34      	ldr	r3, [pc, #208]	; (80014d4 <stateIMU+0xdc>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d021      	beq.n	800144e <stateIMU+0x56>
	{
		previous_state = current_state;
 800140a:	4b31      	ldr	r3, [pc, #196]	; (80014d0 <stateIMU+0xd8>)
 800140c:	781a      	ldrb	r2, [r3, #0]
 800140e:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <stateIMU+0xdc>)
 8001410:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001412:	f7ff fca9 	bl	8000d68 <lcd_clear>
		lcd_put_cur(0, 0);
 8001416:	2100      	movs	r1, #0
 8001418:	2000      	movs	r0, #0
 800141a:	f7ff fcbc 	bl	8000d96 <lcd_put_cur>
		lcd_send_string("IMU");
 800141e:	482e      	ldr	r0, [pc, #184]	; (80014d8 <stateIMU+0xe0>)
 8001420:	f7ff fd15 	bl	8000e4e <lcd_send_string>
		lcd_put_cur(1, 0);
 8001424:	2100      	movs	r1, #0
 8001426:	2001      	movs	r0, #1
 8001428:	f7ff fcb5 	bl	8000d96 <lcd_put_cur>
		lcd_send_data(LCD_LEFT_ARROW);
 800142c:	207f      	movs	r0, #127	; 0x7f
 800142e:	f7ff fc6b 	bl	8000d08 <lcd_send_data>
		lcd_put_cur(1, 15);
 8001432:	210f      	movs	r1, #15
 8001434:	2001      	movs	r0, #1
 8001436:	f7ff fcae 	bl	8000d96 <lcd_put_cur>
		lcd_send_data(LCD_RIGHT_ARROW);
 800143a:	207e      	movs	r0, #126	; 0x7e
 800143c:	f7ff fc64 	bl	8000d08 <lcd_send_data>
		lcd_put_cur(0, 10);
 8001440:	210a      	movs	r1, #10
 8001442:	2000      	movs	r0, #0
 8001444:	f7ff fca7 	bl	8000d96 <lcd_put_cur>
		lcd_send_data(LCD_DEGREE_SYMBOL);
 8001448:	20df      	movs	r0, #223	; 0xdf
 800144a:	f7ff fc5d 	bl	8000d08 <lcd_send_data>
	}

	// todo cyclic interrupt needed 10ms like
	// MPU READ ANGLE
	MPU6050_Read_All(&hi2c1, &MPU6050);
 800144e:	4923      	ldr	r1, [pc, #140]	; (80014dc <stateIMU+0xe4>)
 8001450:	4823      	ldr	r0, [pc, #140]	; (80014e0 <stateIMU+0xe8>)
 8001452:	f000 fa69 	bl	8001928 <MPU6050_Read_All>
	double angle = MPU6050.KalmanAngleX;
 8001456:	4b21      	ldr	r3, [pc, #132]	; (80014dc <stateIMU+0xe4>)
 8001458:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800145c:	e9c7 2300 	strd	r2, r3, [r7]
	// MPU DISPLAY ANGLE
	lcd_put_cur(0, 4);
 8001460:	2104      	movs	r1, #4
 8001462:	2000      	movs	r0, #0
 8001464:	f7ff fc97 	bl	8000d96 <lcd_put_cur>
	sprintf(MSG, "%+06.2f", angle);
 8001468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800146c:	491d      	ldr	r1, [pc, #116]	; (80014e4 <stateIMU+0xec>)
 800146e:	481e      	ldr	r0, [pc, #120]	; (80014e8 <stateIMU+0xf0>)
 8001470:	f005 f86a 	bl	8006548 <siprintf>
	lcd_send_string(MSG);
 8001474:	481c      	ldr	r0, [pc, #112]	; (80014e8 <stateIMU+0xf0>)
 8001476:	f7ff fcea 	bl	8000e4e <lcd_send_string>


	if (BTN.ok == BTN_pressed)
 800147a:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <stateIMU+0xf4>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b01      	cmp	r3, #1
 8001482:	d102      	bne.n	800148a <stateIMU+0x92>
	{
		BTN.ok = BTN_not_pressed;
 8001484:	4b19      	ldr	r3, [pc, #100]	; (80014ec <stateIMU+0xf4>)
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.no == BTN_pressed)
 800148a:	4b18      	ldr	r3, [pc, #96]	; (80014ec <stateIMU+0xf4>)
 800148c:	785b      	ldrb	r3, [r3, #1]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b01      	cmp	r3, #1
 8001492:	d102      	bne.n	800149a <stateIMU+0xa2>
	{
		BTN.no = BTN_not_pressed;
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <stateIMU+0xf4>)
 8001496:	2200      	movs	r2, #0
 8001498:	705a      	strb	r2, [r3, #1]
	}
	if (BTN.left == BTN_pressed)
 800149a:	4b14      	ldr	r3, [pc, #80]	; (80014ec <stateIMU+0xf4>)
 800149c:	789b      	ldrb	r3, [r3, #2]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d105      	bne.n	80014b0 <stateIMU+0xb8>
	{
		BTN.left = BTN_not_pressed;
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <stateIMU+0xf4>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	709a      	strb	r2, [r3, #2]
		current_state = ENCODER_DISPLAY_state;
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <stateIMU+0xd8>)
 80014ac:	2202      	movs	r2, #2
 80014ae:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.right == BTN_pressed)
 80014b0:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <stateIMU+0xf4>)
 80014b2:	78db      	ldrb	r3, [r3, #3]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d105      	bne.n	80014c6 <stateIMU+0xce>
	{
		BTN.right = BTN_not_pressed;
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <stateIMU+0xf4>)
 80014bc:	2200      	movs	r2, #0
 80014be:	70da      	strb	r2, [r3, #3]
		current_state = HOME_state;
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <stateIMU+0xd8>)
 80014c2:	2204      	movs	r2, #4
 80014c4:	701a      	strb	r2, [r3, #0]
	}
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000000 	.word	0x20000000
 80014d4:	200002e8 	.word	0x200002e8
 80014d8:	08009158 	.word	0x08009158
 80014dc:	20000308 	.word	0x20000308
 80014e0:	20000294 	.word	0x20000294
 80014e4:	0800915c 	.word	0x0800915c
 80014e8:	200002f0 	.word	0x200002f0
 80014ec:	200002ec 	.word	0x200002ec

080014f0 <stateHOME>:
void stateHOME(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 80014f4:	4b29      	ldr	r3, [pc, #164]	; (800159c <stateHOME+0xac>)
 80014f6:	781a      	ldrb	r2, [r3, #0]
 80014f8:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <stateHOME+0xb0>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d01a      	beq.n	8001536 <stateHOME+0x46>
	{
		previous_state = current_state;
 8001500:	4b26      	ldr	r3, [pc, #152]	; (800159c <stateHOME+0xac>)
 8001502:	781a      	ldrb	r2, [r3, #0]
 8001504:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <stateHOME+0xb0>)
 8001506:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001508:	f7ff fc2e 	bl	8000d68 <lcd_clear>
		lcd_put_cur(0, 0);
 800150c:	2100      	movs	r1, #0
 800150e:	2000      	movs	r0, #0
 8001510:	f7ff fc41 	bl	8000d96 <lcd_put_cur>
		lcd_send_string("Home");
 8001514:	4823      	ldr	r0, [pc, #140]	; (80015a4 <stateHOME+0xb4>)
 8001516:	f7ff fc9a 	bl	8000e4e <lcd_send_string>
		lcd_put_cur(1, 0);
 800151a:	2100      	movs	r1, #0
 800151c:	2001      	movs	r0, #1
 800151e:	f7ff fc3a 	bl	8000d96 <lcd_put_cur>
		lcd_send_data(LCD_LEFT_ARROW);
 8001522:	207f      	movs	r0, #127	; 0x7f
 8001524:	f7ff fbf0 	bl	8000d08 <lcd_send_data>
		lcd_put_cur(1, 15);
 8001528:	210f      	movs	r1, #15
 800152a:	2001      	movs	r0, #1
 800152c:	f7ff fc33 	bl	8000d96 <lcd_put_cur>
		lcd_send_data(LCD_RIGHT_ARROW);
 8001530:	207e      	movs	r0, #126	; 0x7e
 8001532:	f7ff fbe9 	bl	8000d08 <lcd_send_data>
	}

	HAL_Delay(200);
 8001536:	20c8      	movs	r0, #200	; 0xc8
 8001538:	f001 f918 	bl	800276c <HAL_Delay>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800153c:	2108      	movs	r1, #8
 800153e:	481a      	ldr	r0, [pc, #104]	; (80015a8 <stateHOME+0xb8>)
 8001540:	f001 fbcc 	bl	8002cdc <HAL_GPIO_TogglePin>

	if (BTN.ok == BTN_pressed)
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <stateHOME+0xbc>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b01      	cmp	r3, #1
 800154c:	d105      	bne.n	800155a <stateHOME+0x6a>
	{
		BTN.ok = BTN_not_pressed;
 800154e:	4b17      	ldr	r3, [pc, #92]	; (80015ac <stateHOME+0xbc>)
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
		current_state = BALANCE_state;
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <stateHOME+0xac>)
 8001556:	2201      	movs	r2, #1
 8001558:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.no == BTN_pressed)
 800155a:	4b14      	ldr	r3, [pc, #80]	; (80015ac <stateHOME+0xbc>)
 800155c:	785b      	ldrb	r3, [r3, #1]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b01      	cmp	r3, #1
 8001562:	d102      	bne.n	800156a <stateHOME+0x7a>
	{
		BTN.no = BTN_not_pressed;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <stateHOME+0xbc>)
 8001566:	2200      	movs	r2, #0
 8001568:	705a      	strb	r2, [r3, #1]
	}
	if (BTN.left == BTN_pressed)
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <stateHOME+0xbc>)
 800156c:	789b      	ldrb	r3, [r3, #2]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2b01      	cmp	r3, #1
 8001572:	d105      	bne.n	8001580 <stateHOME+0x90>
	{
		BTN.left = BTN_not_pressed;
 8001574:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <stateHOME+0xbc>)
 8001576:	2200      	movs	r2, #0
 8001578:	709a      	strb	r2, [r3, #2]
		current_state = IMU_DISPLAY_state;
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <stateHOME+0xac>)
 800157c:	2203      	movs	r2, #3
 800157e:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.right == BTN_pressed)
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <stateHOME+0xbc>)
 8001582:	78db      	ldrb	r3, [r3, #3]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b01      	cmp	r3, #1
 8001588:	d105      	bne.n	8001596 <stateHOME+0xa6>
	{
		BTN.right = BTN_not_pressed;
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <stateHOME+0xbc>)
 800158c:	2200      	movs	r2, #0
 800158e:	70da      	strb	r2, [r3, #3]
		current_state = EEPROM_RW_state;
 8001590:	4b02      	ldr	r3, [pc, #8]	; (800159c <stateHOME+0xac>)
 8001592:	2205      	movs	r2, #5
 8001594:	701a      	strb	r2, [r3, #0]
	}
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000000 	.word	0x20000000
 80015a0:	200002e8 	.word	0x200002e8
 80015a4:	08009164 	.word	0x08009164
 80015a8:	48000400 	.word	0x48000400
 80015ac:	200002ec 	.word	0x200002ec

080015b0 <stateEEPROM>:
void stateEEPROM(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 80015b4:	4b2e      	ldr	r3, [pc, #184]	; (8001670 <stateEEPROM+0xc0>)
 80015b6:	781a      	ldrb	r2, [r3, #0]
 80015b8:	4b2e      	ldr	r3, [pc, #184]	; (8001674 <stateEEPROM+0xc4>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d01a      	beq.n	80015f6 <stateEEPROM+0x46>
	{
		previous_state = current_state;
 80015c0:	4b2b      	ldr	r3, [pc, #172]	; (8001670 <stateEEPROM+0xc0>)
 80015c2:	781a      	ldrb	r2, [r3, #0]
 80015c4:	4b2b      	ldr	r3, [pc, #172]	; (8001674 <stateEEPROM+0xc4>)
 80015c6:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 80015c8:	f7ff fbce 	bl	8000d68 <lcd_clear>
		lcd_put_cur(0, 0);
 80015cc:	2100      	movs	r1, #0
 80015ce:	2000      	movs	r0, #0
 80015d0:	f7ff fbe1 	bl	8000d96 <lcd_put_cur>
		lcd_send_string("EEPROM");
 80015d4:	4828      	ldr	r0, [pc, #160]	; (8001678 <stateEEPROM+0xc8>)
 80015d6:	f7ff fc3a 	bl	8000e4e <lcd_send_string>
		lcd_put_cur(1, 0);
 80015da:	2100      	movs	r1, #0
 80015dc:	2001      	movs	r0, #1
 80015de:	f7ff fbda 	bl	8000d96 <lcd_put_cur>
		lcd_send_data(LCD_LEFT_ARROW);
 80015e2:	207f      	movs	r0, #127	; 0x7f
 80015e4:	f7ff fb90 	bl	8000d08 <lcd_send_data>
		lcd_put_cur(1, 15);
 80015e8:	210f      	movs	r1, #15
 80015ea:	2001      	movs	r0, #1
 80015ec:	f7ff fbd3 	bl	8000d96 <lcd_put_cur>
		lcd_send_data(LCD_RIGHT_ARROW);
 80015f0:	207e      	movs	r0, #126	; 0x7e
 80015f2:	f7ff fb89 	bl	8000d08 <lcd_send_data>

	}



	if (BTN.ok == BTN_pressed)
 80015f6:	4b21      	ldr	r3, [pc, #132]	; (800167c <stateEEPROM+0xcc>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d10c      	bne.n	800161a <stateEEPROM+0x6a>
	{
		BTN.ok = BTN_not_pressed;
 8001600:	4b1e      	ldr	r3, [pc, #120]	; (800167c <stateEEPROM+0xcc>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
		duty_left++;
 8001606:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <stateEEPROM+0xd0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	3301      	adds	r3, #1
 800160c:	4a1c      	ldr	r2, [pc, #112]	; (8001680 <stateEEPROM+0xd0>)
 800160e:	6013      	str	r3, [r2, #0]
		duty_right++;
 8001610:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <stateEEPROM+0xd4>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	3301      	adds	r3, #1
 8001616:	4a1b      	ldr	r2, [pc, #108]	; (8001684 <stateEEPROM+0xd4>)
 8001618:	6013      	str	r3, [r2, #0]
//		setMotors(duty_left, duty_right, 0, 0);
	}
	if (BTN.no == BTN_pressed)
 800161a:	4b18      	ldr	r3, [pc, #96]	; (800167c <stateEEPROM+0xcc>)
 800161c:	785b      	ldrb	r3, [r3, #1]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b01      	cmp	r3, #1
 8001622:	d10c      	bne.n	800163e <stateEEPROM+0x8e>
	{
		BTN.no = BTN_not_pressed;
 8001624:	4b15      	ldr	r3, [pc, #84]	; (800167c <stateEEPROM+0xcc>)
 8001626:	2200      	movs	r2, #0
 8001628:	705a      	strb	r2, [r3, #1]
		duty_left--;
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <stateEEPROM+0xd0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	3b01      	subs	r3, #1
 8001630:	4a13      	ldr	r2, [pc, #76]	; (8001680 <stateEEPROM+0xd0>)
 8001632:	6013      	str	r3, [r2, #0]
		duty_right--;
 8001634:	4b13      	ldr	r3, [pc, #76]	; (8001684 <stateEEPROM+0xd4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	3b01      	subs	r3, #1
 800163a:	4a12      	ldr	r2, [pc, #72]	; (8001684 <stateEEPROM+0xd4>)
 800163c:	6013      	str	r3, [r2, #0]
//		setMotors(duty_left, duty_right, 0, 0);
	}
	if (BTN.left == BTN_pressed)
 800163e:	4b0f      	ldr	r3, [pc, #60]	; (800167c <stateEEPROM+0xcc>)
 8001640:	789b      	ldrb	r3, [r3, #2]
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b01      	cmp	r3, #1
 8001646:	d105      	bne.n	8001654 <stateEEPROM+0xa4>
	{
		BTN.left = BTN_not_pressed;
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <stateEEPROM+0xcc>)
 800164a:	2200      	movs	r2, #0
 800164c:	709a      	strb	r2, [r3, #2]
//		HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);	// test
//		HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	// test
		current_state = HOME_state;
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <stateEEPROM+0xc0>)
 8001650:	2204      	movs	r2, #4
 8001652:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.right == BTN_pressed)
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <stateEEPROM+0xcc>)
 8001656:	78db      	ldrb	r3, [r3, #3]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b01      	cmp	r3, #1
 800165c:	d105      	bne.n	800166a <stateEEPROM+0xba>
	{
		BTN.right = BTN_not_pressed;
 800165e:	4b07      	ldr	r3, [pc, #28]	; (800167c <stateEEPROM+0xcc>)
 8001660:	2200      	movs	r2, #0
 8001662:	70da      	strb	r2, [r3, #3]
//		HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);	//test
//		HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//test
		current_state = KP_state;
 8001664:	4b02      	ldr	r3, [pc, #8]	; (8001670 <stateEEPROM+0xc0>)
 8001666:	2206      	movs	r2, #6
 8001668:	701a      	strb	r2, [r3, #0]
	}
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000000 	.word	0x20000000
 8001674:	200002e8 	.word	0x200002e8
 8001678:	0800916c 	.word	0x0800916c
 800167c:	200002ec 	.word	0x200002ec
 8001680:	20000368 	.word	0x20000368
 8001684:	2000036c 	.word	0x2000036c

08001688 <stateKP>:
void stateKP(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 800168c:	4b24      	ldr	r3, [pc, #144]	; (8001720 <stateKP+0x98>)
 800168e:	781a      	ldrb	r2, [r3, #0]
 8001690:	4b24      	ldr	r3, [pc, #144]	; (8001724 <stateKP+0x9c>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d01a      	beq.n	80016ce <stateKP+0x46>
	{
		previous_state = current_state;
 8001698:	4b21      	ldr	r3, [pc, #132]	; (8001720 <stateKP+0x98>)
 800169a:	781a      	ldrb	r2, [r3, #0]
 800169c:	4b21      	ldr	r3, [pc, #132]	; (8001724 <stateKP+0x9c>)
 800169e:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 80016a0:	f7ff fb62 	bl	8000d68 <lcd_clear>
		lcd_put_cur(0, 0);
 80016a4:	2100      	movs	r1, #0
 80016a6:	2000      	movs	r0, #0
 80016a8:	f7ff fb75 	bl	8000d96 <lcd_put_cur>
		lcd_send_string("KP");
 80016ac:	481e      	ldr	r0, [pc, #120]	; (8001728 <stateKP+0xa0>)
 80016ae:	f7ff fbce 	bl	8000e4e <lcd_send_string>
		lcd_put_cur(1, 0);
 80016b2:	2100      	movs	r1, #0
 80016b4:	2001      	movs	r0, #1
 80016b6:	f7ff fb6e 	bl	8000d96 <lcd_put_cur>
		lcd_send_data(LCD_LEFT_ARROW);
 80016ba:	207f      	movs	r0, #127	; 0x7f
 80016bc:	f7ff fb24 	bl	8000d08 <lcd_send_data>
		lcd_put_cur(1, 15);
 80016c0:	210f      	movs	r1, #15
 80016c2:	2001      	movs	r0, #1
 80016c4:	f7ff fb67 	bl	8000d96 <lcd_put_cur>
		lcd_send_data(LCD_RIGHT_ARROW);
 80016c8:	207e      	movs	r0, #126	; 0x7e
 80016ca:	f7ff fb1d 	bl	8000d08 <lcd_send_data>
	}

	if (BTN.ok == BTN_pressed)
 80016ce:	4b17      	ldr	r3, [pc, #92]	; (800172c <stateKP+0xa4>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d102      	bne.n	80016de <stateKP+0x56>
	{
		BTN.ok = BTN_not_pressed;
 80016d8:	4b14      	ldr	r3, [pc, #80]	; (800172c <stateKP+0xa4>)
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.no == BTN_pressed)
 80016de:	4b13      	ldr	r3, [pc, #76]	; (800172c <stateKP+0xa4>)
 80016e0:	785b      	ldrb	r3, [r3, #1]
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d102      	bne.n	80016ee <stateKP+0x66>
	{
		BTN.no = BTN_not_pressed;
 80016e8:	4b10      	ldr	r3, [pc, #64]	; (800172c <stateKP+0xa4>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	705a      	strb	r2, [r3, #1]
	}
	if (BTN.left == BTN_pressed)
 80016ee:	4b0f      	ldr	r3, [pc, #60]	; (800172c <stateKP+0xa4>)
 80016f0:	789b      	ldrb	r3, [r3, #2]
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d105      	bne.n	8001704 <stateKP+0x7c>
	{
		BTN.left = BTN_not_pressed;
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <stateKP+0xa4>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	709a      	strb	r2, [r3, #2]
		current_state = EEPROM_RW_state;
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <stateKP+0x98>)
 8001700:	2205      	movs	r2, #5
 8001702:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.right == BTN_pressed)
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <stateKP+0xa4>)
 8001706:	78db      	ldrb	r3, [r3, #3]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b01      	cmp	r3, #1
 800170c:	d105      	bne.n	800171a <stateKP+0x92>
	{
		BTN.right = BTN_not_pressed;
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <stateKP+0xa4>)
 8001710:	2200      	movs	r2, #0
 8001712:	70da      	strb	r2, [r3, #3]
		current_state = KI_state;
 8001714:	4b02      	ldr	r3, [pc, #8]	; (8001720 <stateKP+0x98>)
 8001716:	2207      	movs	r2, #7
 8001718:	701a      	strb	r2, [r3, #0]
	}
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000000 	.word	0x20000000
 8001724:	200002e8 	.word	0x200002e8
 8001728:	08009174 	.word	0x08009174
 800172c:	200002ec 	.word	0x200002ec

08001730 <stateKI>:
void stateKI(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 8001734:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <stateKI+0x98>)
 8001736:	781a      	ldrb	r2, [r3, #0]
 8001738:	4b24      	ldr	r3, [pc, #144]	; (80017cc <stateKI+0x9c>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	429a      	cmp	r2, r3
 800173e:	d01a      	beq.n	8001776 <stateKI+0x46>
	{
		previous_state = current_state;
 8001740:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <stateKI+0x98>)
 8001742:	781a      	ldrb	r2, [r3, #0]
 8001744:	4b21      	ldr	r3, [pc, #132]	; (80017cc <stateKI+0x9c>)
 8001746:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001748:	f7ff fb0e 	bl	8000d68 <lcd_clear>
		lcd_put_cur(0, 0);
 800174c:	2100      	movs	r1, #0
 800174e:	2000      	movs	r0, #0
 8001750:	f7ff fb21 	bl	8000d96 <lcd_put_cur>
		lcd_send_string("KI");
 8001754:	481e      	ldr	r0, [pc, #120]	; (80017d0 <stateKI+0xa0>)
 8001756:	f7ff fb7a 	bl	8000e4e <lcd_send_string>
		lcd_put_cur(1, 0);
 800175a:	2100      	movs	r1, #0
 800175c:	2001      	movs	r0, #1
 800175e:	f7ff fb1a 	bl	8000d96 <lcd_put_cur>
		lcd_send_data(LCD_LEFT_ARROW);
 8001762:	207f      	movs	r0, #127	; 0x7f
 8001764:	f7ff fad0 	bl	8000d08 <lcd_send_data>
		lcd_put_cur(1, 15);
 8001768:	210f      	movs	r1, #15
 800176a:	2001      	movs	r0, #1
 800176c:	f7ff fb13 	bl	8000d96 <lcd_put_cur>
		lcd_send_data(LCD_RIGHT_ARROW);
 8001770:	207e      	movs	r0, #126	; 0x7e
 8001772:	f7ff fac9 	bl	8000d08 <lcd_send_data>
	}

	if (BTN.ok == BTN_pressed)
 8001776:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <stateKI+0xa4>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b01      	cmp	r3, #1
 800177e:	d102      	bne.n	8001786 <stateKI+0x56>
	{
		BTN.ok = BTN_not_pressed;
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <stateKI+0xa4>)
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.no == BTN_pressed)
 8001786:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <stateKI+0xa4>)
 8001788:	785b      	ldrb	r3, [r3, #1]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b01      	cmp	r3, #1
 800178e:	d102      	bne.n	8001796 <stateKI+0x66>
	{
		BTN.no = BTN_not_pressed;
 8001790:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <stateKI+0xa4>)
 8001792:	2200      	movs	r2, #0
 8001794:	705a      	strb	r2, [r3, #1]
	}
	if (BTN.left == BTN_pressed)
 8001796:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <stateKI+0xa4>)
 8001798:	789b      	ldrb	r3, [r3, #2]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b01      	cmp	r3, #1
 800179e:	d105      	bne.n	80017ac <stateKI+0x7c>
	{
		BTN.left = BTN_not_pressed;
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <stateKI+0xa4>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	709a      	strb	r2, [r3, #2]
		current_state = KP_state;
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <stateKI+0x98>)
 80017a8:	2206      	movs	r2, #6
 80017aa:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.right == BTN_pressed)
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <stateKI+0xa4>)
 80017ae:	78db      	ldrb	r3, [r3, #3]
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d105      	bne.n	80017c2 <stateKI+0x92>
	{
		BTN.right = BTN_not_pressed;
 80017b6:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <stateKI+0xa4>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	70da      	strb	r2, [r3, #3]
		current_state = KD_state;
 80017bc:	4b02      	ldr	r3, [pc, #8]	; (80017c8 <stateKI+0x98>)
 80017be:	2208      	movs	r2, #8
 80017c0:	701a      	strb	r2, [r3, #0]
	}
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000000 	.word	0x20000000
 80017cc:	200002e8 	.word	0x200002e8
 80017d0:	08009178 	.word	0x08009178
 80017d4:	200002ec 	.word	0x200002ec

080017d8 <stateKD>:
void stateKD(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 80017dc:	4b1f      	ldr	r3, [pc, #124]	; (800185c <stateKD+0x84>)
 80017de:	781a      	ldrb	r2, [r3, #0]
 80017e0:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <stateKD+0x88>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d013      	beq.n	8001810 <stateKD+0x38>
	{
		previous_state = current_state;
 80017e8:	4b1c      	ldr	r3, [pc, #112]	; (800185c <stateKD+0x84>)
 80017ea:	781a      	ldrb	r2, [r3, #0]
 80017ec:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <stateKD+0x88>)
 80017ee:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 80017f0:	f7ff faba 	bl	8000d68 <lcd_clear>
		lcd_put_cur(0, 0);
 80017f4:	2100      	movs	r1, #0
 80017f6:	2000      	movs	r0, #0
 80017f8:	f7ff facd 	bl	8000d96 <lcd_put_cur>
		lcd_send_string("KD");
 80017fc:	4819      	ldr	r0, [pc, #100]	; (8001864 <stateKD+0x8c>)
 80017fe:	f7ff fb26 	bl	8000e4e <lcd_send_string>
		lcd_put_cur(1, 0);
 8001802:	2100      	movs	r1, #0
 8001804:	2001      	movs	r0, #1
 8001806:	f7ff fac6 	bl	8000d96 <lcd_put_cur>
		lcd_send_data(LCD_LEFT_ARROW);
 800180a:	207f      	movs	r0, #127	; 0x7f
 800180c:	f7ff fa7c 	bl	8000d08 <lcd_send_data>
	}

	if (BTN.ok == BTN_pressed)
 8001810:	4b15      	ldr	r3, [pc, #84]	; (8001868 <stateKD+0x90>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b01      	cmp	r3, #1
 8001818:	d102      	bne.n	8001820 <stateKD+0x48>
	{
		BTN.ok = BTN_not_pressed;
 800181a:	4b13      	ldr	r3, [pc, #76]	; (8001868 <stateKD+0x90>)
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.no == BTN_pressed)
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <stateKD+0x90>)
 8001822:	785b      	ldrb	r3, [r3, #1]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b01      	cmp	r3, #1
 8001828:	d102      	bne.n	8001830 <stateKD+0x58>
	{
		BTN.no = BTN_not_pressed;
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <stateKD+0x90>)
 800182c:	2200      	movs	r2, #0
 800182e:	705a      	strb	r2, [r3, #1]
	}
	if (BTN.left == BTN_pressed)
 8001830:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <stateKD+0x90>)
 8001832:	789b      	ldrb	r3, [r3, #2]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b01      	cmp	r3, #1
 8001838:	d105      	bne.n	8001846 <stateKD+0x6e>
	{
		BTN.left = BTN_not_pressed;
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <stateKD+0x90>)
 800183c:	2200      	movs	r2, #0
 800183e:	709a      	strb	r2, [r3, #2]
		current_state = KI_state;
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <stateKD+0x84>)
 8001842:	2207      	movs	r2, #7
 8001844:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.right == BTN_pressed)
 8001846:	4b08      	ldr	r3, [pc, #32]	; (8001868 <stateKD+0x90>)
 8001848:	78db      	ldrb	r3, [r3, #3]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b01      	cmp	r3, #1
 800184e:	d102      	bne.n	8001856 <stateKD+0x7e>
	{
		BTN.right = BTN_not_pressed;
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <stateKD+0x90>)
 8001852:	2200      	movs	r2, #0
 8001854:	70da      	strb	r2, [r3, #3]
	}
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000000 	.word	0x20000000
 8001860:	200002e8 	.word	0x200002e8
 8001864:	0800917c 	.word	0x0800917c
 8001868:	200002ec 	.word	0x200002ec

0800186c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001870:	b672      	cpsid	i
}
 8001872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001874:	e7fe      	b.n	8001874 <Error_Handler+0x8>

08001876 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b088      	sub	sp, #32
 800187a:	af04      	add	r7, sp, #16
 800187c:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800187e:	2364      	movs	r3, #100	; 0x64
 8001880:	9302      	str	r3, [sp, #8]
 8001882:	2301      	movs	r3, #1
 8001884:	9301      	str	r3, [sp, #4]
 8001886:	f107 030f 	add.w	r3, r7, #15
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	2301      	movs	r3, #1
 800188e:	2275      	movs	r2, #117	; 0x75
 8001890:	21d0      	movs	r1, #208	; 0xd0
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f001 fcec 	bl	8003270 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	2b68      	cmp	r3, #104	; 0x68
 800189c:	d13d      	bne.n	800191a <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80018a2:	2364      	movs	r3, #100	; 0x64
 80018a4:	9302      	str	r3, [sp, #8]
 80018a6:	2301      	movs	r3, #1
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	f107 030e 	add.w	r3, r7, #14
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	2301      	movs	r3, #1
 80018b2:	226b      	movs	r2, #107	; 0x6b
 80018b4:	21d0      	movs	r1, #208	; 0xd0
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f001 fbc6 	bl	8003048 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80018bc:	2307      	movs	r3, #7
 80018be:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80018c0:	2364      	movs	r3, #100	; 0x64
 80018c2:	9302      	str	r3, [sp, #8]
 80018c4:	2301      	movs	r3, #1
 80018c6:	9301      	str	r3, [sp, #4]
 80018c8:	f107 030e 	add.w	r3, r7, #14
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	2301      	movs	r3, #1
 80018d0:	2219      	movs	r2, #25
 80018d2:	21d0      	movs	r1, #208	; 0xd0
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f001 fbb7 	bl	8003048 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80018da:	2300      	movs	r3, #0
 80018dc:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80018de:	2364      	movs	r3, #100	; 0x64
 80018e0:	9302      	str	r3, [sp, #8]
 80018e2:	2301      	movs	r3, #1
 80018e4:	9301      	str	r3, [sp, #4]
 80018e6:	f107 030e 	add.w	r3, r7, #14
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2301      	movs	r3, #1
 80018ee:	221c      	movs	r2, #28
 80018f0:	21d0      	movs	r1, #208	; 0xd0
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f001 fba8 	bl	8003048 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80018f8:	2300      	movs	r3, #0
 80018fa:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80018fc:	2364      	movs	r3, #100	; 0x64
 80018fe:	9302      	str	r3, [sp, #8]
 8001900:	2301      	movs	r3, #1
 8001902:	9301      	str	r3, [sp, #4]
 8001904:	f107 030e 	add.w	r3, r7, #14
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	2301      	movs	r3, #1
 800190c:	221b      	movs	r2, #27
 800190e:	21d0      	movs	r1, #208	; 0xd0
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f001 fb99 	bl	8003048 <HAL_I2C_Mem_Write>
        return 0;
 8001916:	2300      	movs	r3, #0
 8001918:	e000      	b.n	800191c <MPU6050_Init+0xa6>
    }
    return 1;
 800191a:	2301      	movs	r3, #1
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	0000      	movs	r0, r0
	...

08001928 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800192c:	b094      	sub	sp, #80	; 0x50
 800192e:	af04      	add	r7, sp, #16
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001934:	2364      	movs	r3, #100	; 0x64
 8001936:	9302      	str	r3, [sp, #8]
 8001938:	230e      	movs	r3, #14
 800193a:	9301      	str	r3, [sp, #4]
 800193c:	f107 0308 	add.w	r3, r7, #8
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2301      	movs	r3, #1
 8001944:	223b      	movs	r2, #59	; 0x3b
 8001946:	21d0      	movs	r1, #208	; 0xd0
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f001 fc91 	bl	8003270 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800194e:	7a3b      	ldrb	r3, [r7, #8]
 8001950:	021b      	lsls	r3, r3, #8
 8001952:	b21a      	sxth	r2, r3
 8001954:	7a7b      	ldrb	r3, [r7, #9]
 8001956:	b21b      	sxth	r3, r3
 8001958:	4313      	orrs	r3, r2
 800195a:	b21a      	sxth	r2, r3
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001960:	7abb      	ldrb	r3, [r7, #10]
 8001962:	021b      	lsls	r3, r3, #8
 8001964:	b21a      	sxth	r2, r3
 8001966:	7afb      	ldrb	r3, [r7, #11]
 8001968:	b21b      	sxth	r3, r3
 800196a:	4313      	orrs	r3, r2
 800196c:	b21a      	sxth	r2, r3
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001972:	7b3b      	ldrb	r3, [r7, #12]
 8001974:	021b      	lsls	r3, r3, #8
 8001976:	b21a      	sxth	r2, r3
 8001978:	7b7b      	ldrb	r3, [r7, #13]
 800197a:	b21b      	sxth	r3, r3
 800197c:	4313      	orrs	r3, r2
 800197e:	b21a      	sxth	r2, r3
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001984:	7bbb      	ldrb	r3, [r7, #14]
 8001986:	021b      	lsls	r3, r3, #8
 8001988:	b21a      	sxth	r2, r3
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	b21b      	sxth	r3, r3
 800198e:	4313      	orrs	r3, r2
 8001990:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001992:	7c3b      	ldrb	r3, [r7, #16]
 8001994:	021b      	lsls	r3, r3, #8
 8001996:	b21a      	sxth	r2, r3
 8001998:	7c7b      	ldrb	r3, [r7, #17]
 800199a:	b21b      	sxth	r3, r3
 800199c:	4313      	orrs	r3, r2
 800199e:	b21a      	sxth	r2, r3
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80019a4:	7cbb      	ldrb	r3, [r7, #18]
 80019a6:	021b      	lsls	r3, r3, #8
 80019a8:	b21a      	sxth	r2, r3
 80019aa:	7cfb      	ldrb	r3, [r7, #19]
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	4313      	orrs	r3, r2
 80019b0:	b21a      	sxth	r2, r3
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80019b6:	7d3b      	ldrb	r3, [r7, #20]
 80019b8:	021b      	lsls	r3, r3, #8
 80019ba:	b21a      	sxth	r2, r3
 80019bc:	7d7b      	ldrb	r3, [r7, #21]
 80019be:	b21b      	sxth	r3, r3
 80019c0:	4313      	orrs	r3, r2
 80019c2:	b21a      	sxth	r2, r3
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fda8 	bl	8000524 <__aeabi_i2d>
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	4bbd      	ldr	r3, [pc, #756]	; (8001cd0 <MPU6050_Read_All+0x3a8>)
 80019da:	f7fe ff37 	bl	800084c <__aeabi_ddiv>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	6839      	ldr	r1, [r7, #0]
 80019e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fd98 	bl	8000524 <__aeabi_i2d>
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	4bb5      	ldr	r3, [pc, #724]	; (8001cd0 <MPU6050_Read_All+0x3a8>)
 80019fa:	f7fe ff27 	bl	800084c <__aeabi_ddiv>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	6839      	ldr	r1, [r7, #0]
 8001a04:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fd88 	bl	8000524 <__aeabi_i2d>
 8001a14:	a3a8      	add	r3, pc, #672	; (adr r3, 8001cb8 <MPU6050_Read_All+0x390>)
 8001a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1a:	f7fe ff17 	bl	800084c <__aeabi_ddiv>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	6839      	ldr	r1, [r7, #0]
 8001a24:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001a28:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001a2c:	ee07 3a90 	vmov	s15, r3
 8001a30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a34:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8001cd4 <MPU6050_Read_All+0x3ac>
 8001a38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a3c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001cd8 <MPU6050_Read_All+0x3b0>
 8001a40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe fd67 	bl	8000524 <__aeabi_i2d>
 8001a56:	a39a      	add	r3, pc, #616	; (adr r3, 8001cc0 <MPU6050_Read_All+0x398>)
 8001a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5c:	f7fe fef6 	bl	800084c <__aeabi_ddiv>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	6839      	ldr	r1, [r7, #0]
 8001a66:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fd57 	bl	8000524 <__aeabi_i2d>
 8001a76:	a392      	add	r3, pc, #584	; (adr r3, 8001cc0 <MPU6050_Read_All+0x398>)
 8001a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7c:	f7fe fee6 	bl	800084c <__aeabi_ddiv>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	6839      	ldr	r1, [r7, #0]
 8001a86:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe fd47 	bl	8000524 <__aeabi_i2d>
 8001a96:	a38a      	add	r3, pc, #552	; (adr r3, 8001cc0 <MPU6050_Read_All+0x398>)
 8001a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9c:	f7fe fed6 	bl	800084c <__aeabi_ddiv>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	6839      	ldr	r1, [r7, #0]
 8001aa6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001aaa:	f000 fe53 	bl	8002754 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	4b8a      	ldr	r3, [pc, #552]	; (8001cdc <MPU6050_Read_All+0x3b4>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fd24 	bl	8000504 <__aeabi_ui2d>
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	4b87      	ldr	r3, [pc, #540]	; (8001ce0 <MPU6050_Read_All+0x3b8>)
 8001ac2:	f7fe fec3 	bl	800084c <__aeabi_ddiv>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001ace:	f000 fe41 	bl	8002754 <HAL_GetTick>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4a81      	ldr	r2, [pc, #516]	; (8001cdc <MPU6050_Read_All+0x3b4>)
 8001ad6:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae6:	fb03 f202 	mul.w	r2, r3, r2
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001af0:	4619      	mov	r1, r3
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001af8:	fb01 f303 	mul.w	r3, r1, r3
 8001afc:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fd10 	bl	8000524 <__aeabi_i2d>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	ec43 2b10 	vmov	d0, r2, r3
 8001b0c:	f007 f93f 	bl	8008d8e <sqrt>
 8001b10:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	f04f 0300 	mov.w	r3, #0
 8001b1c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b20:	f7fe ffd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d11f      	bne.n	8001b6a <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fcf7 	bl	8000524 <__aeabi_i2d>
 8001b36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b3a:	f7fe fe87 	bl	800084c <__aeabi_ddiv>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	ec43 2b17 	vmov	d7, r2, r3
 8001b46:	eeb0 0a47 	vmov.f32	s0, s14
 8001b4a:	eef0 0a67 	vmov.f32	s1, s15
 8001b4e:	f006 ff73 	bl	8008a38 <atan>
 8001b52:	ec51 0b10 	vmov	r0, r1, d0
 8001b56:	a35c      	add	r3, pc, #368	; (adr r3, 8001cc8 <MPU6050_Read_All+0x3a0>)
 8001b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5c:	f7fe fd4c 	bl	80005f8 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001b68:	e005      	b.n	8001b76 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	f04f 0300 	mov.w	r3, #0
 8001b72:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b7c:	425b      	negs	r3, r3
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fcd0 	bl	8000524 <__aeabi_i2d>
 8001b84:	4682      	mov	sl, r0
 8001b86:	468b      	mov	fp, r1
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fcc8 	bl	8000524 <__aeabi_i2d>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	ec43 2b11 	vmov	d1, r2, r3
 8001b9c:	ec4b ab10 	vmov	d0, sl, fp
 8001ba0:	f007 f8f3 	bl	8008d8a <atan2>
 8001ba4:	ec51 0b10 	vmov	r0, r1, d0
 8001ba8:	a347      	add	r3, pc, #284	; (adr r3, 8001cc8 <MPU6050_Read_All+0x3a0>)
 8001baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bae:	f7fe fd23 	bl	80005f8 <__aeabi_dmul>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	4b49      	ldr	r3, [pc, #292]	; (8001ce4 <MPU6050_Read_All+0x3bc>)
 8001bc0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bc4:	f7fe ff8a 	bl	8000adc <__aeabi_dcmplt>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00a      	beq.n	8001be4 <MPU6050_Read_All+0x2bc>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	4b43      	ldr	r3, [pc, #268]	; (8001ce8 <MPU6050_Read_All+0x3c0>)
 8001bda:	f7fe ff9d 	bl	8000b18 <__aeabi_dcmpgt>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d114      	bne.n	8001c0e <MPU6050_Read_All+0x2e6>
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	4b3f      	ldr	r3, [pc, #252]	; (8001ce8 <MPU6050_Read_All+0x3c0>)
 8001bea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bee:	f7fe ff93 	bl	8000b18 <__aeabi_dcmpgt>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d015      	beq.n	8001c24 <MPU6050_Read_All+0x2fc>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	4b38      	ldr	r3, [pc, #224]	; (8001ce4 <MPU6050_Read_All+0x3bc>)
 8001c04:	f7fe ff6a 	bl	8000adc <__aeabi_dcmplt>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00a      	beq.n	8001c24 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8001c0e:	4937      	ldr	r1, [pc, #220]	; (8001cec <MPU6050_Read_All+0x3c4>)
 8001c10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c14:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001c18:	6839      	ldr	r1, [r7, #0]
 8001c1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c1e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001c22:	e014      	b.n	8001c4e <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001c2a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001c2e:	eeb0 1a47 	vmov.f32	s2, s14
 8001c32:	eef0 1a67 	vmov.f32	s3, s15
 8001c36:	ed97 0b06 	vldr	d0, [r7, #24]
 8001c3a:	482c      	ldr	r0, [pc, #176]	; (8001cec <MPU6050_Read_All+0x3c4>)
 8001c3c:	f000 f85a 	bl	8001cf4 <Kalman_getAngle>
 8001c40:	eeb0 7a40 	vmov.f32	s14, s0
 8001c44:	eef0 7a60 	vmov.f32	s15, s1
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001c54:	4690      	mov	r8, r2
 8001c56:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	4b22      	ldr	r3, [pc, #136]	; (8001ce8 <MPU6050_Read_All+0x3c0>)
 8001c60:	4640      	mov	r0, r8
 8001c62:	4649      	mov	r1, r9
 8001c64:	f7fe ff58 	bl	8000b18 <__aeabi_dcmpgt>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d008      	beq.n	8001c80 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001c74:	4614      	mov	r4, r2
 8001c76:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001c86:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001c8a:	eeb0 1a47 	vmov.f32	s2, s14
 8001c8e:	eef0 1a67 	vmov.f32	s3, s15
 8001c92:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001c96:	4816      	ldr	r0, [pc, #88]	; (8001cf0 <MPU6050_Read_All+0x3c8>)
 8001c98:	f000 f82c 	bl	8001cf4 <Kalman_getAngle>
 8001c9c:	eeb0 7a40 	vmov.f32	s14, s0
 8001ca0:	eef0 7a60 	vmov.f32	s15, s1
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 8001caa:	bf00      	nop
 8001cac:	3740      	adds	r7, #64	; 0x40
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cb4:	f3af 8000 	nop.w
 8001cb8:	00000000 	.word	0x00000000
 8001cbc:	40cc2900 	.word	0x40cc2900
 8001cc0:	00000000 	.word	0x00000000
 8001cc4:	40606000 	.word	0x40606000
 8001cc8:	1a63c1f8 	.word	0x1a63c1f8
 8001ccc:	404ca5dc 	.word	0x404ca5dc
 8001cd0:	40d00000 	.word	0x40d00000
 8001cd4:	43aa0000 	.word	0x43aa0000
 8001cd8:	42121eb8 	.word	0x42121eb8
 8001cdc:	20000370 	.word	0x20000370
 8001ce0:	408f4000 	.word	0x408f4000
 8001ce4:	c0568000 	.word	0xc0568000
 8001ce8:	40568000 	.word	0x40568000
 8001cec:	20000050 	.word	0x20000050
 8001cf0:	20000008 	.word	0x20000008

08001cf4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001cf4:	b5b0      	push	{r4, r5, r7, lr}
 8001cf6:	b096      	sub	sp, #88	; 0x58
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	61f8      	str	r0, [r7, #28]
 8001cfc:	ed87 0b04 	vstr	d0, [r7, #16]
 8001d00:	ed87 1b02 	vstr	d1, [r7, #8]
 8001d04:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001d0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d12:	f7fe fab9 	bl	8000288 <__aeabi_dsub>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001d24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d2c:	f7fe fc64 	bl	80005f8 <__aeabi_dmul>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4620      	mov	r0, r4
 8001d36:	4629      	mov	r1, r5
 8001d38:	f7fe faa8 	bl	800028c <__adddf3>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	69f9      	ldr	r1, [r7, #28]
 8001d42:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001d52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d56:	f7fe fc4f 	bl	80005f8 <__aeabi_dmul>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001d68:	f7fe fa8e 	bl	8000288 <__aeabi_dsub>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001d7a:	f7fe fa85 	bl	8000288 <__aeabi_dsub>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4610      	mov	r0, r2
 8001d84:	4619      	mov	r1, r3
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8c:	f7fe fa7e 	bl	800028c <__adddf3>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d9c:	f7fe fc2c 	bl	80005f8 <__aeabi_dmul>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4620      	mov	r0, r4
 8001da6:	4629      	mov	r1, r5
 8001da8:	f7fe fa70 	bl	800028c <__adddf3>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	69f9      	ldr	r1, [r7, #28]
 8001db2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001dc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dc6:	f7fe fc17 	bl	80005f8 <__aeabi_dmul>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4620      	mov	r0, r4
 8001dd0:	4629      	mov	r1, r5
 8001dd2:	f7fe fa59 	bl	8000288 <__aeabi_dsub>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	69f9      	ldr	r1, [r7, #28]
 8001ddc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001dec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001df0:	f7fe fc02 	bl	80005f8 <__aeabi_dmul>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4620      	mov	r0, r4
 8001dfa:	4629      	mov	r1, r5
 8001dfc:	f7fe fa44 	bl	8000288 <__aeabi_dsub>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	69f9      	ldr	r1, [r7, #28]
 8001e06:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001e16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e1a:	f7fe fbed 	bl	80005f8 <__aeabi_dmul>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4620      	mov	r0, r4
 8001e24:	4629      	mov	r1, r5
 8001e26:	f7fe fa31 	bl	800028c <__adddf3>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	69f9      	ldr	r1, [r7, #28]
 8001e30:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e40:	f7fe fa24 	bl	800028c <__adddf3>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001e52:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001e56:	f7fe fcf9 	bl	800084c <__aeabi_ddiv>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001e68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001e6c:	f7fe fcee 	bl	800084c <__aeabi_ddiv>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001e7e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e82:	f7fe fa01 	bl	8000288 <__aeabi_dsub>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001e94:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e98:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e9c:	f7fe fbac 	bl	80005f8 <__aeabi_dmul>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4620      	mov	r0, r4
 8001ea6:	4629      	mov	r1, r5
 8001ea8:	f7fe f9f0 	bl	800028c <__adddf3>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	69f9      	ldr	r1, [r7, #28]
 8001eb2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001ebc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ec0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ec4:	f7fe fb98 	bl	80005f8 <__aeabi_dmul>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4620      	mov	r0, r4
 8001ece:	4629      	mov	r1, r5
 8001ed0:	f7fe f9dc 	bl	800028c <__adddf3>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	69f9      	ldr	r1, [r7, #28]
 8001eda:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001ee4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001eee:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001ef8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001efc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f00:	f7fe fb7a 	bl	80005f8 <__aeabi_dmul>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4620      	mov	r0, r4
 8001f0a:	4629      	mov	r1, r5
 8001f0c:	f7fe f9bc 	bl	8000288 <__aeabi_dsub>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	69f9      	ldr	r1, [r7, #28]
 8001f16:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001f20:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f24:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f28:	f7fe fb66 	bl	80005f8 <__aeabi_dmul>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4620      	mov	r0, r4
 8001f32:	4629      	mov	r1, r5
 8001f34:	f7fe f9a8 	bl	8000288 <__aeabi_dsub>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	69f9      	ldr	r1, [r7, #28]
 8001f3e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001f48:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f50:	f7fe fb52 	bl	80005f8 <__aeabi_dmul>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4620      	mov	r0, r4
 8001f5a:	4629      	mov	r1, r5
 8001f5c:	f7fe f994 	bl	8000288 <__aeabi_dsub>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	69f9      	ldr	r1, [r7, #28]
 8001f66:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001f70:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f74:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f78:	f7fe fb3e 	bl	80005f8 <__aeabi_dmul>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4620      	mov	r0, r4
 8001f82:	4629      	mov	r1, r5
 8001f84:	f7fe f980 	bl	8000288 <__aeabi_dsub>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	69f9      	ldr	r1, [r7, #28]
 8001f8e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001f98:	ec43 2b17 	vmov	d7, r2, r3
};
 8001f9c:	eeb0 0a47 	vmov.f32	s0, s14
 8001fa0:	eef0 0a67 	vmov.f32	s1, s15
 8001fa4:	3758      	adds	r7, #88	; 0x58
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <HAL_MspInit+0x44>)
 8001fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb6:	4a0e      	ldr	r2, [pc, #56]	; (8001ff0 <HAL_MspInit+0x44>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	6613      	str	r3, [r2, #96]	; 0x60
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <HAL_MspInit+0x44>)
 8001fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	607b      	str	r3, [r7, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fca:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <HAL_MspInit+0x44>)
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fce:	4a08      	ldr	r2, [pc, #32]	; (8001ff0 <HAL_MspInit+0x44>)
 8001fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	6593      	str	r3, [r2, #88]	; 0x58
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <HAL_MspInit+0x44>)
 8001fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fde:	603b      	str	r3, [r7, #0]
 8001fe0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	40021000 	.word	0x40021000

08001ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ff8:	e7fe      	b.n	8001ff8 <NMI_Handler+0x4>

08001ffa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ffe:	e7fe      	b.n	8001ffe <HardFault_Handler+0x4>

08002000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002004:	e7fe      	b.n	8002004 <MemManage_Handler+0x4>

08002006 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800200a:	e7fe      	b.n	800200a <BusFault_Handler+0x4>

0800200c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002010:	e7fe      	b.n	8002010 <UsageFault_Handler+0x4>

08002012 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002040:	f000 fb74 	bl	800272c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}

08002048 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_RI_Pin);
 800204c:	2020      	movs	r0, #32
 800204e:	f000 fe5f 	bl	8002d10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}

08002056 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_OK_Pin);
 800205a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800205e:	f000 fe57 	bl	8002d10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_NO_Pin);
 8002062:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002066:	f000 fe53 	bl	8002d10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_LE_Pin);
 800206a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800206e:	f000 fe4f 	bl	8002d10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}

08002076 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0
	return 1;
 800207a:	2301      	movs	r3, #1
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <_kill>:

int _kill(int pid, int sig)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002090:	f003 fdbe 	bl	8005c10 <__errno>
 8002094:	4603      	mov	r3, r0
 8002096:	2216      	movs	r2, #22
 8002098:	601a      	str	r2, [r3, #0]
	return -1;
 800209a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <_exit>:

void _exit (int status)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020ae:	f04f 31ff 	mov.w	r1, #4294967295
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff ffe7 	bl	8002086 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020b8:	e7fe      	b.n	80020b8 <_exit+0x12>

080020ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b086      	sub	sp, #24
 80020be:	af00      	add	r7, sp, #0
 80020c0:	60f8      	str	r0, [r7, #12]
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	e00a      	b.n	80020e2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020cc:	f3af 8000 	nop.w
 80020d0:	4601      	mov	r1, r0
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	60ba      	str	r2, [r7, #8]
 80020d8:	b2ca      	uxtb	r2, r1
 80020da:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	3301      	adds	r3, #1
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	dbf0      	blt.n	80020cc <_read+0x12>
	}

return len;
 80020ea:	687b      	ldr	r3, [r7, #4]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	e009      	b.n	800211a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	60ba      	str	r2, [r7, #8]
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	3301      	adds	r3, #1
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	429a      	cmp	r2, r3
 8002120:	dbf1      	blt.n	8002106 <_write+0x12>
	}
	return len;
 8002122:	687b      	ldr	r3, [r7, #4]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <_close>:

int _close(int file)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
	return -1;
 8002134:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002138:	4618      	mov	r0, r3
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002154:	605a      	str	r2, [r3, #4]
	return 0;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <_isatty>:

int _isatty(int file)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
	return 1;
 800216c:	2301      	movs	r3, #1
}
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800217a:	b480      	push	{r7}
 800217c:	b085      	sub	sp, #20
 800217e:	af00      	add	r7, sp, #0
 8002180:	60f8      	str	r0, [r7, #12]
 8002182:	60b9      	str	r1, [r7, #8]
 8002184:	607a      	str	r2, [r7, #4]
	return 0;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800219c:	4a14      	ldr	r2, [pc, #80]	; (80021f0 <_sbrk+0x5c>)
 800219e:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <_sbrk+0x60>)
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021a8:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <_sbrk+0x64>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d102      	bne.n	80021b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b0:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <_sbrk+0x64>)
 80021b2:	4a12      	ldr	r2, [pc, #72]	; (80021fc <_sbrk+0x68>)
 80021b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <_sbrk+0x64>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d207      	bcs.n	80021d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021c4:	f003 fd24 	bl	8005c10 <__errno>
 80021c8:	4603      	mov	r3, r0
 80021ca:	220c      	movs	r2, #12
 80021cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ce:	f04f 33ff 	mov.w	r3, #4294967295
 80021d2:	e009      	b.n	80021e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021d4:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <_sbrk+0x64>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021da:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <_sbrk+0x64>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4413      	add	r3, r2
 80021e2:	4a05      	ldr	r2, [pc, #20]	; (80021f8 <_sbrk+0x64>)
 80021e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021e6:	68fb      	ldr	r3, [r7, #12]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20010000 	.word	0x20010000
 80021f4:	00000400 	.word	0x00000400
 80021f8:	20000374 	.word	0x20000374
 80021fc:	20000470 	.word	0x20000470

08002200 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <SystemInit+0x20>)
 8002206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220a:	4a05      	ldr	r2, [pc, #20]	; (8002220 <SystemInit+0x20>)
 800220c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08c      	sub	sp, #48	; 0x30
 8002228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800222a:	f107 030c 	add.w	r3, r7, #12
 800222e:	2224      	movs	r2, #36	; 0x24
 8002230:	2100      	movs	r1, #0
 8002232:	4618      	mov	r0, r3
 8002234:	f003 fd16 	bl	8005c64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002238:	463b      	mov	r3, r7
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	605a      	str	r2, [r3, #4]
 8002240:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002242:	4b23      	ldr	r3, [pc, #140]	; (80022d0 <MX_TIM1_Init+0xac>)
 8002244:	4a23      	ldr	r2, [pc, #140]	; (80022d4 <MX_TIM1_Init+0xb0>)
 8002246:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002248:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <MX_TIM1_Init+0xac>)
 800224a:	2200      	movs	r2, #0
 800224c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800224e:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <MX_TIM1_Init+0xac>)
 8002250:	2200      	movs	r2, #0
 8002252:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002254:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <MX_TIM1_Init+0xac>)
 8002256:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800225a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800225c:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <MX_TIM1_Init+0xac>)
 800225e:	2200      	movs	r2, #0
 8002260:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002262:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <MX_TIM1_Init+0xac>)
 8002264:	2200      	movs	r2, #0
 8002266:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002268:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <MX_TIM1_Init+0xac>)
 800226a:	2200      	movs	r2, #0
 800226c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800226e:	2301      	movs	r3, #1
 8002270:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002276:	2301      	movs	r3, #1
 8002278:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800227a:	2300      	movs	r3, #0
 800227c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002282:	2300      	movs	r3, #0
 8002284:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002286:	2301      	movs	r3, #1
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800228a:	2300      	movs	r3, #0
 800228c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002292:	f107 030c 	add.w	r3, r7, #12
 8002296:	4619      	mov	r1, r3
 8002298:	480d      	ldr	r0, [pc, #52]	; (80022d0 <MX_TIM1_Init+0xac>)
 800229a:	f002 fde4 	bl	8004e66 <HAL_TIM_Encoder_Init>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80022a4:	f7ff fae2 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022a8:	2300      	movs	r3, #0
 80022aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80022ac:	2300      	movs	r3, #0
 80022ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022b4:	463b      	mov	r3, r7
 80022b6:	4619      	mov	r1, r3
 80022b8:	4805      	ldr	r0, [pc, #20]	; (80022d0 <MX_TIM1_Init+0xac>)
 80022ba:	f003 fbcb 	bl	8005a54 <HAL_TIMEx_MasterConfigSynchronization>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80022c4:	f7ff fad2 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80022c8:	bf00      	nop
 80022ca:	3730      	adds	r7, #48	; 0x30
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000378 	.word	0x20000378
 80022d4:	40012c00 	.word	0x40012c00

080022d8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08c      	sub	sp, #48	; 0x30
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022de:	f107 030c 	add.w	r3, r7, #12
 80022e2:	2224      	movs	r2, #36	; 0x24
 80022e4:	2100      	movs	r1, #0
 80022e6:	4618      	mov	r0, r3
 80022e8:	f003 fcbc 	bl	8005c64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ec:	463b      	mov	r3, r7
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022f6:	4b21      	ldr	r3, [pc, #132]	; (800237c <MX_TIM2_Init+0xa4>)
 80022f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80022fe:	4b1f      	ldr	r3, [pc, #124]	; (800237c <MX_TIM2_Init+0xa4>)
 8002300:	2200      	movs	r2, #0
 8002302:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002304:	4b1d      	ldr	r3, [pc, #116]	; (800237c <MX_TIM2_Init+0xa4>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535 - 1;
 800230a:	4b1c      	ldr	r3, [pc, #112]	; (800237c <MX_TIM2_Init+0xa4>)
 800230c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002310:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002312:	4b1a      	ldr	r3, [pc, #104]	; (800237c <MX_TIM2_Init+0xa4>)
 8002314:	2200      	movs	r2, #0
 8002316:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002318:	4b18      	ldr	r3, [pc, #96]	; (800237c <MX_TIM2_Init+0xa4>)
 800231a:	2200      	movs	r2, #0
 800231c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800231e:	2301      	movs	r3, #1
 8002320:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002326:	2301      	movs	r3, #1
 8002328:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800232a:	2300      	movs	r3, #0
 800232c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002332:	2300      	movs	r3, #0
 8002334:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002336:	2301      	movs	r3, #1
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800233a:	2300      	movs	r3, #0
 800233c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002342:	f107 030c 	add.w	r3, r7, #12
 8002346:	4619      	mov	r1, r3
 8002348:	480c      	ldr	r0, [pc, #48]	; (800237c <MX_TIM2_Init+0xa4>)
 800234a:	f002 fd8c 	bl	8004e66 <HAL_TIM_Encoder_Init>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002354:	f7ff fa8a 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002358:	2300      	movs	r3, #0
 800235a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800235c:	2300      	movs	r3, #0
 800235e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002360:	463b      	mov	r3, r7
 8002362:	4619      	mov	r1, r3
 8002364:	4805      	ldr	r0, [pc, #20]	; (800237c <MX_TIM2_Init+0xa4>)
 8002366:	f003 fb75 	bl	8005a54 <HAL_TIMEx_MasterConfigSynchronization>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002370:	f7ff fa7c 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002374:	bf00      	nop
 8002376:	3730      	adds	r7, #48	; 0x30
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	200003c4 	.word	0x200003c4

08002380 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b096      	sub	sp, #88	; 0x58
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002386:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002392:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	609a      	str	r2, [r3, #8]
 800239e:	60da      	str	r2, [r3, #12]
 80023a0:	611a      	str	r2, [r3, #16]
 80023a2:	615a      	str	r2, [r3, #20]
 80023a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023a6:	1d3b      	adds	r3, r7, #4
 80023a8:	222c      	movs	r2, #44	; 0x2c
 80023aa:	2100      	movs	r1, #0
 80023ac:	4618      	mov	r0, r3
 80023ae:	f003 fc59 	bl	8005c64 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80023b2:	4b39      	ldr	r3, [pc, #228]	; (8002498 <MX_TIM15_Init+0x118>)
 80023b4:	4a39      	ldr	r2, [pc, #228]	; (800249c <MX_TIM15_Init+0x11c>)
 80023b6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 64 - 1;
 80023b8:	4b37      	ldr	r3, [pc, #220]	; (8002498 <MX_TIM15_Init+0x118>)
 80023ba:	223f      	movs	r2, #63	; 0x3f
 80023bc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023be:	4b36      	ldr	r3, [pc, #216]	; (8002498 <MX_TIM15_Init+0x118>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 100 - 1;
 80023c4:	4b34      	ldr	r3, [pc, #208]	; (8002498 <MX_TIM15_Init+0x118>)
 80023c6:	2263      	movs	r2, #99	; 0x63
 80023c8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ca:	4b33      	ldr	r3, [pc, #204]	; (8002498 <MX_TIM15_Init+0x118>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80023d0:	4b31      	ldr	r3, [pc, #196]	; (8002498 <MX_TIM15_Init+0x118>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023d6:	4b30      	ldr	r3, [pc, #192]	; (8002498 <MX_TIM15_Init+0x118>)
 80023d8:	2200      	movs	r2, #0
 80023da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80023dc:	482e      	ldr	r0, [pc, #184]	; (8002498 <MX_TIM15_Init+0x118>)
 80023de:	f002 fceb 	bl	8004db8 <HAL_TIM_PWM_Init>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_TIM15_Init+0x6c>
  {
    Error_Handler();
 80023e8:	f7ff fa40 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ec:	2300      	movs	r3, #0
 80023ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023f0:	2300      	movs	r3, #0
 80023f2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80023f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80023f8:	4619      	mov	r1, r3
 80023fa:	4827      	ldr	r0, [pc, #156]	; (8002498 <MX_TIM15_Init+0x118>)
 80023fc:	f003 fb2a 	bl	8005a54 <HAL_TIMEx_MasterConfigSynchronization>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_TIM15_Init+0x8a>
  {
    Error_Handler();
 8002406:	f7ff fa31 	bl	800186c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800240a:	2360      	movs	r3, #96	; 0x60
 800240c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002412:	2300      	movs	r3, #0
 8002414:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002416:	2300      	movs	r3, #0
 8002418:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800241a:	2300      	movs	r3, #0
 800241c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800241e:	2300      	movs	r3, #0
 8002420:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002422:	2300      	movs	r3, #0
 8002424:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002426:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800242a:	2200      	movs	r2, #0
 800242c:	4619      	mov	r1, r3
 800242e:	481a      	ldr	r0, [pc, #104]	; (8002498 <MX_TIM15_Init+0x118>)
 8002430:	f002 fef4 	bl	800521c <HAL_TIM_PWM_ConfigChannel>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_TIM15_Init+0xbe>
  {
    Error_Handler();
 800243a:	f7ff fa17 	bl	800186c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800243e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002442:	2204      	movs	r2, #4
 8002444:	4619      	mov	r1, r3
 8002446:	4814      	ldr	r0, [pc, #80]	; (8002498 <MX_TIM15_Init+0x118>)
 8002448:	f002 fee8 	bl	800521c <HAL_TIM_PWM_ConfigChannel>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_TIM15_Init+0xd6>
  {
    Error_Handler();
 8002452:	f7ff fa0b 	bl	800186c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002456:	2300      	movs	r3, #0
 8002458:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800245a:	2300      	movs	r3, #0
 800245c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800246a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800246e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002470:	2300      	movs	r3, #0
 8002472:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002474:	1d3b      	adds	r3, r7, #4
 8002476:	4619      	mov	r1, r3
 8002478:	4807      	ldr	r0, [pc, #28]	; (8002498 <MX_TIM15_Init+0x118>)
 800247a:	f003 fb51 	bl	8005b20 <HAL_TIMEx_ConfigBreakDeadTime>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_TIM15_Init+0x108>
  {
    Error_Handler();
 8002484:	f7ff f9f2 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002488:	4803      	ldr	r0, [pc, #12]	; (8002498 <MX_TIM15_Init+0x118>)
 800248a:	f000 f89b 	bl	80025c4 <HAL_TIM_MspPostInit>

}
 800248e:	bf00      	nop
 8002490:	3758      	adds	r7, #88	; 0x58
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000410 	.word	0x20000410
 800249c:	40014000 	.word	0x40014000

080024a0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08c      	sub	sp, #48	; 0x30
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a8:	f107 031c 	add.w	r3, r7, #28
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	60da      	str	r2, [r3, #12]
 80024b6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a2f      	ldr	r2, [pc, #188]	; (800257c <HAL_TIM_Encoder_MspInit+0xdc>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d12a      	bne.n	8002518 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024c2:	4b2f      	ldr	r3, [pc, #188]	; (8002580 <HAL_TIM_Encoder_MspInit+0xe0>)
 80024c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c6:	4a2e      	ldr	r2, [pc, #184]	; (8002580 <HAL_TIM_Encoder_MspInit+0xe0>)
 80024c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024cc:	6613      	str	r3, [r2, #96]	; 0x60
 80024ce:	4b2c      	ldr	r3, [pc, #176]	; (8002580 <HAL_TIM_Encoder_MspInit+0xe0>)
 80024d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024d6:	61bb      	str	r3, [r7, #24]
 80024d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024da:	4b29      	ldr	r3, [pc, #164]	; (8002580 <HAL_TIM_Encoder_MspInit+0xe0>)
 80024dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024de:	4a28      	ldr	r2, [pc, #160]	; (8002580 <HAL_TIM_Encoder_MspInit+0xe0>)
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024e6:	4b26      	ldr	r3, [pc, #152]	; (8002580 <HAL_TIM_Encoder_MspInit+0xe0>)
 80024e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f8:	2302      	movs	r3, #2
 80024fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002500:	2300      	movs	r3, #0
 8002502:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002504:	2301      	movs	r3, #1
 8002506:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002508:	f107 031c 	add.w	r3, r7, #28
 800250c:	4619      	mov	r1, r3
 800250e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002512:	f000 fa61 	bl	80029d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002516:	e02d      	b.n	8002574 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002520:	d128      	bne.n	8002574 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002522:	4b17      	ldr	r3, [pc, #92]	; (8002580 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002526:	4a16      	ldr	r2, [pc, #88]	; (8002580 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	6593      	str	r3, [r2, #88]	; 0x58
 800252e:	4b14      	ldr	r3, [pc, #80]	; (8002580 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253a:	4b11      	ldr	r3, [pc, #68]	; (8002580 <HAL_TIM_Encoder_MspInit+0xe0>)
 800253c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253e:	4a10      	ldr	r2, [pc, #64]	; (8002580 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002546:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002552:	2303      	movs	r3, #3
 8002554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002556:	2302      	movs	r3, #2
 8002558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2300      	movs	r3, #0
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255e:	2300      	movs	r3, #0
 8002560:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002562:	2301      	movs	r3, #1
 8002564:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002566:	f107 031c 	add.w	r3, r7, #28
 800256a:	4619      	mov	r1, r3
 800256c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002570:	f000 fa32 	bl	80029d8 <HAL_GPIO_Init>
}
 8002574:	bf00      	nop
 8002576:	3730      	adds	r7, #48	; 0x30
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40012c00 	.word	0x40012c00
 8002580:	40021000 	.word	0x40021000

08002584 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a0a      	ldr	r2, [pc, #40]	; (80025bc <HAL_TIM_PWM_MspInit+0x38>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d10b      	bne.n	80025ae <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002596:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800259a:	4a09      	ldr	r2, [pc, #36]	; (80025c0 <HAL_TIM_PWM_MspInit+0x3c>)
 800259c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a0:	6613      	str	r3, [r2, #96]	; 0x60
 80025a2:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <HAL_TIM_PWM_MspInit+0x3c>)
 80025a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80025ae:	bf00      	nop
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	40014000 	.word	0x40014000
 80025c0:	40021000 	.word	0x40021000

080025c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b088      	sub	sp, #32
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025cc:	f107 030c 	add.w	r3, r7, #12
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	60da      	str	r2, [r3, #12]
 80025da:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a11      	ldr	r2, [pc, #68]	; (8002628 <HAL_TIM_MspPostInit+0x64>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d11c      	bne.n	8002620 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e6:	4b11      	ldr	r3, [pc, #68]	; (800262c <HAL_TIM_MspPostInit+0x68>)
 80025e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ea:	4a10      	ldr	r2, [pc, #64]	; (800262c <HAL_TIM_MspPostInit+0x68>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025f2:	4b0e      	ldr	r3, [pc, #56]	; (800262c <HAL_TIM_MspPostInit+0x68>)
 80025f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	60bb      	str	r3, [r7, #8]
 80025fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    PA3     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025fe:	230c      	movs	r3, #12
 8002600:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002602:	2302      	movs	r3, #2
 8002604:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260a:	2300      	movs	r3, #0
 800260c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800260e:	230e      	movs	r3, #14
 8002610:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002612:	f107 030c 	add.w	r3, r7, #12
 8002616:	4619      	mov	r1, r3
 8002618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800261c:	f000 f9dc 	bl	80029d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002620:	bf00      	nop
 8002622:	3720      	adds	r7, #32
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40014000 	.word	0x40014000
 800262c:	40021000 	.word	0x40021000

08002630 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002630:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002668 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002634:	f7ff fde4 	bl	8002200 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002638:	480c      	ldr	r0, [pc, #48]	; (800266c <LoopForever+0x6>)
  ldr r1, =_edata
 800263a:	490d      	ldr	r1, [pc, #52]	; (8002670 <LoopForever+0xa>)
  ldr r2, =_sidata
 800263c:	4a0d      	ldr	r2, [pc, #52]	; (8002674 <LoopForever+0xe>)
  movs r3, #0
 800263e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002640:	e002      	b.n	8002648 <LoopCopyDataInit>

08002642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002646:	3304      	adds	r3, #4

08002648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800264a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800264c:	d3f9      	bcc.n	8002642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800264e:	4a0a      	ldr	r2, [pc, #40]	; (8002678 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002650:	4c0a      	ldr	r4, [pc, #40]	; (800267c <LoopForever+0x16>)
  movs r3, #0
 8002652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002654:	e001      	b.n	800265a <LoopFillZerobss>

08002656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002658:	3204      	adds	r2, #4

0800265a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800265a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800265c:	d3fb      	bcc.n	8002656 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800265e:	f003 fadd 	bl	8005c1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002662:	f7fe fca1 	bl	8000fa8 <main>

08002666 <LoopForever>:

LoopForever:
    b LoopForever
 8002666:	e7fe      	b.n	8002666 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002668:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800266c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002670:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 8002674:	08009618 	.word	0x08009618
  ldr r2, =_sbss
 8002678:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 800267c:	20000470 	.word	0x20000470

08002680 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002680:	e7fe      	b.n	8002680 <ADC1_IRQHandler>

08002682 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002688:	2300      	movs	r3, #0
 800268a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800268c:	2003      	movs	r0, #3
 800268e:	f000 f961 	bl	8002954 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002692:	2000      	movs	r0, #0
 8002694:	f000 f80e 	bl	80026b4 <HAL_InitTick>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	71fb      	strb	r3, [r7, #7]
 80026a2:	e001      	b.n	80026a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026a4:	f7ff fc82 	bl	8001fac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026a8:	79fb      	ldrb	r3, [r7, #7]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026bc:	2300      	movs	r3, #0
 80026be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80026c0:	4b17      	ldr	r3, [pc, #92]	; (8002720 <HAL_InitTick+0x6c>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d023      	beq.n	8002710 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80026c8:	4b16      	ldr	r3, [pc, #88]	; (8002724 <HAL_InitTick+0x70>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4b14      	ldr	r3, [pc, #80]	; (8002720 <HAL_InitTick+0x6c>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	4619      	mov	r1, r3
 80026d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026da:	fbb2 f3f3 	udiv	r3, r2, r3
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 f96d 	bl	80029be <HAL_SYSTICK_Config>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10f      	bne.n	800270a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b0f      	cmp	r3, #15
 80026ee:	d809      	bhi.n	8002704 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026f0:	2200      	movs	r2, #0
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	f04f 30ff 	mov.w	r0, #4294967295
 80026f8:	f000 f937 	bl	800296a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026fc:	4a0a      	ldr	r2, [pc, #40]	; (8002728 <HAL_InitTick+0x74>)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	e007      	b.n	8002714 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
 8002708:	e004      	b.n	8002714 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	73fb      	strb	r3, [r7, #15]
 800270e:	e001      	b.n	8002714 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002714:	7bfb      	ldrb	r3, [r7, #15]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	200000a0 	.word	0x200000a0
 8002724:	20000098 	.word	0x20000098
 8002728:	2000009c 	.word	0x2000009c

0800272c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_IncTick+0x20>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	461a      	mov	r2, r3
 8002736:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_IncTick+0x24>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4413      	add	r3, r2
 800273c:	4a04      	ldr	r2, [pc, #16]	; (8002750 <HAL_IncTick+0x24>)
 800273e:	6013      	str	r3, [r2, #0]
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	200000a0 	.word	0x200000a0
 8002750:	2000045c 	.word	0x2000045c

08002754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return uwTick;
 8002758:	4b03      	ldr	r3, [pc, #12]	; (8002768 <HAL_GetTick+0x14>)
 800275a:	681b      	ldr	r3, [r3, #0]
}
 800275c:	4618      	mov	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	2000045c 	.word	0x2000045c

0800276c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002774:	f7ff ffee 	bl	8002754 <HAL_GetTick>
 8002778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002784:	d005      	beq.n	8002792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002786:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <HAL_Delay+0x44>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4413      	add	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002792:	bf00      	nop
 8002794:	f7ff ffde 	bl	8002754 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d8f7      	bhi.n	8002794 <HAL_Delay+0x28>
  {
  }
}
 80027a4:	bf00      	nop
 80027a6:	bf00      	nop
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	200000a0 	.word	0x200000a0

080027b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027c4:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <__NVIC_SetPriorityGrouping+0x44>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027d0:	4013      	ands	r3, r2
 80027d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027e6:	4a04      	ldr	r2, [pc, #16]	; (80027f8 <__NVIC_SetPriorityGrouping+0x44>)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	60d3      	str	r3, [r2, #12]
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002800:	4b04      	ldr	r3, [pc, #16]	; (8002814 <__NVIC_GetPriorityGrouping+0x18>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	0a1b      	lsrs	r3, r3, #8
 8002806:	f003 0307 	and.w	r3, r3, #7
}
 800280a:	4618      	mov	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	2b00      	cmp	r3, #0
 8002828:	db0b      	blt.n	8002842 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	f003 021f 	and.w	r2, r3, #31
 8002830:	4907      	ldr	r1, [pc, #28]	; (8002850 <__NVIC_EnableIRQ+0x38>)
 8002832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002836:	095b      	lsrs	r3, r3, #5
 8002838:	2001      	movs	r0, #1
 800283a:	fa00 f202 	lsl.w	r2, r0, r2
 800283e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	e000e100 	.word	0xe000e100

08002854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	6039      	str	r1, [r7, #0]
 800285e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002864:	2b00      	cmp	r3, #0
 8002866:	db0a      	blt.n	800287e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	b2da      	uxtb	r2, r3
 800286c:	490c      	ldr	r1, [pc, #48]	; (80028a0 <__NVIC_SetPriority+0x4c>)
 800286e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002872:	0112      	lsls	r2, r2, #4
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	440b      	add	r3, r1
 8002878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800287c:	e00a      	b.n	8002894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	b2da      	uxtb	r2, r3
 8002882:	4908      	ldr	r1, [pc, #32]	; (80028a4 <__NVIC_SetPriority+0x50>)
 8002884:	79fb      	ldrb	r3, [r7, #7]
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	3b04      	subs	r3, #4
 800288c:	0112      	lsls	r2, r2, #4
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	440b      	add	r3, r1
 8002892:	761a      	strb	r2, [r3, #24]
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	e000e100 	.word	0xe000e100
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b089      	sub	sp, #36	; 0x24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f1c3 0307 	rsb	r3, r3, #7
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	bf28      	it	cs
 80028c6:	2304      	movcs	r3, #4
 80028c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	3304      	adds	r3, #4
 80028ce:	2b06      	cmp	r3, #6
 80028d0:	d902      	bls.n	80028d8 <NVIC_EncodePriority+0x30>
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	3b03      	subs	r3, #3
 80028d6:	e000      	b.n	80028da <NVIC_EncodePriority+0x32>
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028dc:	f04f 32ff 	mov.w	r2, #4294967295
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43da      	mvns	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	401a      	ands	r2, r3
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028f0:	f04f 31ff 	mov.w	r1, #4294967295
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	fa01 f303 	lsl.w	r3, r1, r3
 80028fa:	43d9      	mvns	r1, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002900:	4313      	orrs	r3, r2
         );
}
 8002902:	4618      	mov	r0, r3
 8002904:	3724      	adds	r7, #36	; 0x24
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
	...

08002910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3b01      	subs	r3, #1
 800291c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002920:	d301      	bcc.n	8002926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002922:	2301      	movs	r3, #1
 8002924:	e00f      	b.n	8002946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002926:	4a0a      	ldr	r2, [pc, #40]	; (8002950 <SysTick_Config+0x40>)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3b01      	subs	r3, #1
 800292c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800292e:	210f      	movs	r1, #15
 8002930:	f04f 30ff 	mov.w	r0, #4294967295
 8002934:	f7ff ff8e 	bl	8002854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <SysTick_Config+0x40>)
 800293a:	2200      	movs	r2, #0
 800293c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800293e:	4b04      	ldr	r3, [pc, #16]	; (8002950 <SysTick_Config+0x40>)
 8002940:	2207      	movs	r2, #7
 8002942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	e000e010 	.word	0xe000e010

08002954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7ff ff29 	bl	80027b4 <__NVIC_SetPriorityGrouping>
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b086      	sub	sp, #24
 800296e:	af00      	add	r7, sp, #0
 8002970:	4603      	mov	r3, r0
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
 8002976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800297c:	f7ff ff3e 	bl	80027fc <__NVIC_GetPriorityGrouping>
 8002980:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68b9      	ldr	r1, [r7, #8]
 8002986:	6978      	ldr	r0, [r7, #20]
 8002988:	f7ff ff8e 	bl	80028a8 <NVIC_EncodePriority>
 800298c:	4602      	mov	r2, r0
 800298e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002992:	4611      	mov	r1, r2
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff ff5d 	bl	8002854 <__NVIC_SetPriority>
}
 800299a:	bf00      	nop
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	4603      	mov	r3, r0
 80029aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff ff31 	bl	8002818 <__NVIC_EnableIRQ>
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff ffa2 	bl	8002910 <SysTick_Config>
 80029cc:	4603      	mov	r3, r0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029d8:	b480      	push	{r7}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029e2:	2300      	movs	r3, #0
 80029e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029e6:	e148      	b.n	8002c7a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	2101      	movs	r1, #1
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	fa01 f303 	lsl.w	r3, r1, r3
 80029f4:	4013      	ands	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 813a 	beq.w	8002c74 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 0303 	and.w	r3, r3, #3
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d005      	beq.n	8002a18 <HAL_GPIO_Init+0x40>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d130      	bne.n	8002a7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	2203      	movs	r2, #3
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a4e:	2201      	movs	r2, #1
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	091b      	lsrs	r3, r3, #4
 8002a64:	f003 0201 	and.w	r2, r3, #1
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d017      	beq.n	8002ab6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	2203      	movs	r2, #3
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43db      	mvns	r3, r3
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d123      	bne.n	8002b0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	08da      	lsrs	r2, r3, #3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3208      	adds	r2, #8
 8002aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ace:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	220f      	movs	r2, #15
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	691a      	ldr	r2, [r3, #16]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	08da      	lsrs	r2, r3, #3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3208      	adds	r2, #8
 8002b04:	6939      	ldr	r1, [r7, #16]
 8002b06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	2203      	movs	r2, #3
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 0203 	and.w	r2, r3, #3
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 8094 	beq.w	8002c74 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b4c:	4b52      	ldr	r3, [pc, #328]	; (8002c98 <HAL_GPIO_Init+0x2c0>)
 8002b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b50:	4a51      	ldr	r2, [pc, #324]	; (8002c98 <HAL_GPIO_Init+0x2c0>)
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	6613      	str	r3, [r2, #96]	; 0x60
 8002b58:	4b4f      	ldr	r3, [pc, #316]	; (8002c98 <HAL_GPIO_Init+0x2c0>)
 8002b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	60bb      	str	r3, [r7, #8]
 8002b62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b64:	4a4d      	ldr	r2, [pc, #308]	; (8002c9c <HAL_GPIO_Init+0x2c4>)
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	089b      	lsrs	r3, r3, #2
 8002b6a:	3302      	adds	r3, #2
 8002b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	220f      	movs	r2, #15
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4013      	ands	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b8e:	d00d      	beq.n	8002bac <HAL_GPIO_Init+0x1d4>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a43      	ldr	r2, [pc, #268]	; (8002ca0 <HAL_GPIO_Init+0x2c8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d007      	beq.n	8002ba8 <HAL_GPIO_Init+0x1d0>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a42      	ldr	r2, [pc, #264]	; (8002ca4 <HAL_GPIO_Init+0x2cc>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d101      	bne.n	8002ba4 <HAL_GPIO_Init+0x1cc>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e004      	b.n	8002bae <HAL_GPIO_Init+0x1d6>
 8002ba4:	2307      	movs	r3, #7
 8002ba6:	e002      	b.n	8002bae <HAL_GPIO_Init+0x1d6>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <HAL_GPIO_Init+0x1d6>
 8002bac:	2300      	movs	r3, #0
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	f002 0203 	and.w	r2, r2, #3
 8002bb4:	0092      	lsls	r2, r2, #2
 8002bb6:	4093      	lsls	r3, r2
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bbe:	4937      	ldr	r1, [pc, #220]	; (8002c9c <HAL_GPIO_Init+0x2c4>)
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	089b      	lsrs	r3, r3, #2
 8002bc4:	3302      	adds	r3, #2
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bcc:	4b36      	ldr	r3, [pc, #216]	; (8002ca8 <HAL_GPIO_Init+0x2d0>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bf0:	4a2d      	ldr	r2, [pc, #180]	; (8002ca8 <HAL_GPIO_Init+0x2d0>)
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002bf6:	4b2c      	ldr	r3, [pc, #176]	; (8002ca8 <HAL_GPIO_Init+0x2d0>)
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	4013      	ands	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c1a:	4a23      	ldr	r2, [pc, #140]	; (8002ca8 <HAL_GPIO_Init+0x2d0>)
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c20:	4b21      	ldr	r3, [pc, #132]	; (8002ca8 <HAL_GPIO_Init+0x2d0>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c44:	4a18      	ldr	r2, [pc, #96]	; (8002ca8 <HAL_GPIO_Init+0x2d0>)
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c4a:	4b17      	ldr	r3, [pc, #92]	; (8002ca8 <HAL_GPIO_Init+0x2d0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	43db      	mvns	r3, r3
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4013      	ands	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c6e:	4a0e      	ldr	r2, [pc, #56]	; (8002ca8 <HAL_GPIO_Init+0x2d0>)
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	3301      	adds	r3, #1
 8002c78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	fa22 f303 	lsr.w	r3, r2, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f47f aeaf 	bne.w	80029e8 <HAL_GPIO_Init+0x10>
  }
}
 8002c8a:	bf00      	nop
 8002c8c:	bf00      	nop
 8002c8e:	371c      	adds	r7, #28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40010000 	.word	0x40010000
 8002ca0:	48000400 	.word	0x48000400
 8002ca4:	48000800 	.word	0x48000800
 8002ca8:	40010400 	.word	0x40010400

08002cac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	807b      	strh	r3, [r7, #2]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cbc:	787b      	ldrb	r3, [r7, #1]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cc2:	887a      	ldrh	r2, [r7, #2]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cc8:	e002      	b.n	8002cd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cca:	887a      	ldrh	r2, [r7, #2]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cee:	887a      	ldrh	r2, [r7, #2]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	041a      	lsls	r2, r3, #16
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	43d9      	mvns	r1, r3
 8002cfa:	887b      	ldrh	r3, [r7, #2]
 8002cfc:	400b      	ands	r3, r1
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	619a      	str	r2, [r3, #24]
}
 8002d04:	bf00      	nop
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d1a:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d1c:	695a      	ldr	r2, [r3, #20]
 8002d1e:	88fb      	ldrh	r3, [r7, #6]
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d006      	beq.n	8002d34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d26:	4a05      	ldr	r2, [pc, #20]	; (8002d3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d28:	88fb      	ldrh	r3, [r7, #6]
 8002d2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d2c:	88fb      	ldrh	r3, [r7, #6]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fe f9e6 	bl	8001100 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d34:	bf00      	nop
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40010400 	.word	0x40010400

08002d40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e081      	b.n	8002e56 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7fe f8c6 	bl	8000ef8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2224      	movs	r2, #36	; 0x24
 8002d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0201 	bic.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002da0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d107      	bne.n	8002dba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	e006      	b.n	8002dc8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002dc6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d104      	bne.n	8002dda <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dd8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6812      	ldr	r2, [r2, #0]
 8002de4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dfc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691a      	ldr	r2, [r3, #16]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69d9      	ldr	r1, [r3, #28]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a1a      	ldr	r2, [r3, #32]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0201 	orr.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af02      	add	r7, sp, #8
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	607a      	str	r2, [r7, #4]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	817b      	strh	r3, [r7, #10]
 8002e70:	4613      	mov	r3, r2
 8002e72:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b20      	cmp	r3, #32
 8002e7e:	f040 80da 	bne.w	8003036 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_I2C_Master_Transmit+0x30>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e0d3      	b.n	8003038 <HAL_I2C_Master_Transmit+0x1d8>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e98:	f7ff fc5c 	bl	8002754 <HAL_GetTick>
 8002e9c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	2319      	movs	r3, #25
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 fbc6 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e0be      	b.n	8003038 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2221      	movs	r2, #33	; 0x21
 8002ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2210      	movs	r2, #16
 8002ec6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	893a      	ldrh	r2, [r7, #8]
 8002eda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2bff      	cmp	r3, #255	; 0xff
 8002eea:	d90e      	bls.n	8002f0a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	22ff      	movs	r2, #255	; 0xff
 8002ef0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	8979      	ldrh	r1, [r7, #10]
 8002efa:	4b51      	ldr	r3, [pc, #324]	; (8003040 <HAL_I2C_Master_Transmit+0x1e0>)
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 fd42 	bl	800398c <I2C_TransferConfig>
 8002f08:	e06c      	b.n	8002fe4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	8979      	ldrh	r1, [r7, #10]
 8002f1c:	4b48      	ldr	r3, [pc, #288]	; (8003040 <HAL_I2C_Master_Transmit+0x1e0>)
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 fd31 	bl	800398c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002f2a:	e05b      	b.n	8002fe4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	6a39      	ldr	r1, [r7, #32]
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 fbc3 	bl	80036bc <I2C_WaitOnTXISFlagUntilTimeout>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e07b      	b.n	8003038 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	781a      	ldrb	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d034      	beq.n	8002fe4 <HAL_I2C_Master_Transmit+0x184>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d130      	bne.n	8002fe4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2180      	movs	r1, #128	; 0x80
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 fb55 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e04d      	b.n	8003038 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2bff      	cmp	r3, #255	; 0xff
 8002fa4:	d90e      	bls.n	8002fc4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	22ff      	movs	r2, #255	; 0xff
 8002faa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	8979      	ldrh	r1, [r7, #10]
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 fce5 	bl	800398c <I2C_TransferConfig>
 8002fc2:	e00f      	b.n	8002fe4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	8979      	ldrh	r1, [r7, #10]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 fcd4 	bl	800398c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d19e      	bne.n	8002f2c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	6a39      	ldr	r1, [r7, #32]
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 fba2 	bl	800373c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e01a      	b.n	8003038 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2220      	movs	r2, #32
 8003008:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6859      	ldr	r1, [r3, #4]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_I2C_Master_Transmit+0x1e4>)
 8003016:	400b      	ands	r3, r1
 8003018:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2220      	movs	r2, #32
 800301e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	e000      	b.n	8003038 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003036:	2302      	movs	r3, #2
  }
}
 8003038:	4618      	mov	r0, r3
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	80002000 	.word	0x80002000
 8003044:	fe00e800 	.word	0xfe00e800

08003048 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af02      	add	r7, sp, #8
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	4608      	mov	r0, r1
 8003052:	4611      	mov	r1, r2
 8003054:	461a      	mov	r2, r3
 8003056:	4603      	mov	r3, r0
 8003058:	817b      	strh	r3, [r7, #10]
 800305a:	460b      	mov	r3, r1
 800305c:	813b      	strh	r3, [r7, #8]
 800305e:	4613      	mov	r3, r2
 8003060:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b20      	cmp	r3, #32
 800306c:	f040 80f9 	bne.w	8003262 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <HAL_I2C_Mem_Write+0x34>
 8003076:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003078:	2b00      	cmp	r3, #0
 800307a:	d105      	bne.n	8003088 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003082:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0ed      	b.n	8003264 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_I2C_Mem_Write+0x4e>
 8003092:	2302      	movs	r3, #2
 8003094:	e0e6      	b.n	8003264 <HAL_I2C_Mem_Write+0x21c>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800309e:	f7ff fb59 	bl	8002754 <HAL_GetTick>
 80030a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	2319      	movs	r3, #25
 80030aa:	2201      	movs	r2, #1
 80030ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 fac3 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0d1      	b.n	8003264 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2221      	movs	r2, #33	; 0x21
 80030c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2240      	movs	r2, #64	; 0x40
 80030cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6a3a      	ldr	r2, [r7, #32]
 80030da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030e8:	88f8      	ldrh	r0, [r7, #6]
 80030ea:	893a      	ldrh	r2, [r7, #8]
 80030ec:	8979      	ldrh	r1, [r7, #10]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	9301      	str	r3, [sp, #4]
 80030f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	4603      	mov	r3, r0
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 f9d3 	bl	80034a4 <I2C_RequestMemoryWrite>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e0a9      	b.n	8003264 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003114:	b29b      	uxth	r3, r3
 8003116:	2bff      	cmp	r3, #255	; 0xff
 8003118:	d90e      	bls.n	8003138 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	22ff      	movs	r2, #255	; 0xff
 800311e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003124:	b2da      	uxtb	r2, r3
 8003126:	8979      	ldrh	r1, [r7, #10]
 8003128:	2300      	movs	r3, #0
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 fc2b 	bl	800398c <I2C_TransferConfig>
 8003136:	e00f      	b.n	8003158 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003146:	b2da      	uxtb	r2, r3
 8003148:	8979      	ldrh	r1, [r7, #10]
 800314a:	2300      	movs	r3, #0
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 fc1a 	bl	800398c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 faad 	bl	80036bc <I2C_WaitOnTXISFlagUntilTimeout>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e07b      	b.n	8003264 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	781a      	ldrb	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003186:	b29b      	uxth	r3, r3
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d034      	beq.n	8003210 <HAL_I2C_Mem_Write+0x1c8>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d130      	bne.n	8003210 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b4:	2200      	movs	r2, #0
 80031b6:	2180      	movs	r1, #128	; 0x80
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 fa3f 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e04d      	b.n	8003264 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	2bff      	cmp	r3, #255	; 0xff
 80031d0:	d90e      	bls.n	80031f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	22ff      	movs	r2, #255	; 0xff
 80031d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	8979      	ldrh	r1, [r7, #10]
 80031e0:	2300      	movs	r3, #0
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 fbcf 	bl	800398c <I2C_TransferConfig>
 80031ee:	e00f      	b.n	8003210 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	8979      	ldrh	r1, [r7, #10]
 8003202:	2300      	movs	r3, #0
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 fbbe 	bl	800398c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003214:	b29b      	uxth	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d19e      	bne.n	8003158 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 fa8c 	bl	800373c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e01a      	b.n	8003264 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2220      	movs	r2, #32
 8003234:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6859      	ldr	r1, [r3, #4]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	4b0a      	ldr	r3, [pc, #40]	; (800326c <HAL_I2C_Mem_Write+0x224>)
 8003242:	400b      	ands	r3, r1
 8003244:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	e000      	b.n	8003264 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003262:	2302      	movs	r3, #2
  }
}
 8003264:	4618      	mov	r0, r3
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	fe00e800 	.word	0xfe00e800

08003270 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af02      	add	r7, sp, #8
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	4608      	mov	r0, r1
 800327a:	4611      	mov	r1, r2
 800327c:	461a      	mov	r2, r3
 800327e:	4603      	mov	r3, r0
 8003280:	817b      	strh	r3, [r7, #10]
 8003282:	460b      	mov	r3, r1
 8003284:	813b      	strh	r3, [r7, #8]
 8003286:	4613      	mov	r3, r2
 8003288:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b20      	cmp	r3, #32
 8003294:	f040 80fd 	bne.w	8003492 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <HAL_I2C_Mem_Read+0x34>
 800329e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d105      	bne.n	80032b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e0f1      	b.n	8003494 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <HAL_I2C_Mem_Read+0x4e>
 80032ba:	2302      	movs	r3, #2
 80032bc:	e0ea      	b.n	8003494 <HAL_I2C_Mem_Read+0x224>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032c6:	f7ff fa45 	bl	8002754 <HAL_GetTick>
 80032ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	2319      	movs	r3, #25
 80032d2:	2201      	movs	r2, #1
 80032d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 f9af 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0d5      	b.n	8003494 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2222      	movs	r2, #34	; 0x22
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2240      	movs	r2, #64	; 0x40
 80032f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a3a      	ldr	r2, [r7, #32]
 8003302:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003308:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003310:	88f8      	ldrh	r0, [r7, #6]
 8003312:	893a      	ldrh	r2, [r7, #8]
 8003314:	8979      	ldrh	r1, [r7, #10]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	9301      	str	r3, [sp, #4]
 800331a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	4603      	mov	r3, r0
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 f913 	bl	800354c <I2C_RequestMemoryRead>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0ad      	b.n	8003494 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333c:	b29b      	uxth	r3, r3
 800333e:	2bff      	cmp	r3, #255	; 0xff
 8003340:	d90e      	bls.n	8003360 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	22ff      	movs	r2, #255	; 0xff
 8003346:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334c:	b2da      	uxtb	r2, r3
 800334e:	8979      	ldrh	r1, [r7, #10]
 8003350:	4b52      	ldr	r3, [pc, #328]	; (800349c <HAL_I2C_Mem_Read+0x22c>)
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 fb17 	bl	800398c <I2C_TransferConfig>
 800335e:	e00f      	b.n	8003380 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336e:	b2da      	uxtb	r2, r3
 8003370:	8979      	ldrh	r1, [r7, #10]
 8003372:	4b4a      	ldr	r3, [pc, #296]	; (800349c <HAL_I2C_Mem_Read+0x22c>)
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 fb06 	bl	800398c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003386:	2200      	movs	r2, #0
 8003388:	2104      	movs	r1, #4
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 f956 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e07c      	b.n	8003494 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d034      	beq.n	8003440 <HAL_I2C_Mem_Read+0x1d0>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d130      	bne.n	8003440 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	2200      	movs	r2, #0
 80033e6:	2180      	movs	r1, #128	; 0x80
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 f927 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e04d      	b.n	8003494 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2bff      	cmp	r3, #255	; 0xff
 8003400:	d90e      	bls.n	8003420 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	22ff      	movs	r2, #255	; 0xff
 8003406:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340c:	b2da      	uxtb	r2, r3
 800340e:	8979      	ldrh	r1, [r7, #10]
 8003410:	2300      	movs	r3, #0
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 fab7 	bl	800398c <I2C_TransferConfig>
 800341e:	e00f      	b.n	8003440 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342e:	b2da      	uxtb	r2, r3
 8003430:	8979      	ldrh	r1, [r7, #10]
 8003432:	2300      	movs	r3, #0
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 faa6 	bl	800398c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003444:	b29b      	uxth	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d19a      	bne.n	8003380 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 f974 	bl	800373c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e01a      	b.n	8003494 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2220      	movs	r2, #32
 8003464:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6859      	ldr	r1, [r3, #4]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <HAL_I2C_Mem_Read+0x230>)
 8003472:	400b      	ands	r3, r1
 8003474:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2220      	movs	r2, #32
 800347a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	e000      	b.n	8003494 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003492:	2302      	movs	r3, #2
  }
}
 8003494:	4618      	mov	r0, r3
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	80002400 	.word	0x80002400
 80034a0:	fe00e800 	.word	0xfe00e800

080034a4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af02      	add	r7, sp, #8
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	4608      	mov	r0, r1
 80034ae:	4611      	mov	r1, r2
 80034b0:	461a      	mov	r2, r3
 80034b2:	4603      	mov	r3, r0
 80034b4:	817b      	strh	r3, [r7, #10]
 80034b6:	460b      	mov	r3, r1
 80034b8:	813b      	strh	r3, [r7, #8]
 80034ba:	4613      	mov	r3, r2
 80034bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80034be:	88fb      	ldrh	r3, [r7, #6]
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	8979      	ldrh	r1, [r7, #10]
 80034c4:	4b20      	ldr	r3, [pc, #128]	; (8003548 <I2C_RequestMemoryWrite+0xa4>)
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 fa5d 	bl	800398c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034d2:	69fa      	ldr	r2, [r7, #28]
 80034d4:	69b9      	ldr	r1, [r7, #24]
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 f8f0 	bl	80036bc <I2C_WaitOnTXISFlagUntilTimeout>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e02c      	b.n	8003540 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034e6:	88fb      	ldrh	r3, [r7, #6]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d105      	bne.n	80034f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034ec:	893b      	ldrh	r3, [r7, #8]
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	629a      	str	r2, [r3, #40]	; 0x28
 80034f6:	e015      	b.n	8003524 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80034f8:	893b      	ldrh	r3, [r7, #8]
 80034fa:	0a1b      	lsrs	r3, r3, #8
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003506:	69fa      	ldr	r2, [r7, #28]
 8003508:	69b9      	ldr	r1, [r7, #24]
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 f8d6 	bl	80036bc <I2C_WaitOnTXISFlagUntilTimeout>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e012      	b.n	8003540 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800351a:	893b      	ldrh	r3, [r7, #8]
 800351c:	b2da      	uxtb	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	2200      	movs	r2, #0
 800352c:	2180      	movs	r1, #128	; 0x80
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 f884 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	80002000 	.word	0x80002000

0800354c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af02      	add	r7, sp, #8
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	4608      	mov	r0, r1
 8003556:	4611      	mov	r1, r2
 8003558:	461a      	mov	r2, r3
 800355a:	4603      	mov	r3, r0
 800355c:	817b      	strh	r3, [r7, #10]
 800355e:	460b      	mov	r3, r1
 8003560:	813b      	strh	r3, [r7, #8]
 8003562:	4613      	mov	r3, r2
 8003564:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003566:	88fb      	ldrh	r3, [r7, #6]
 8003568:	b2da      	uxtb	r2, r3
 800356a:	8979      	ldrh	r1, [r7, #10]
 800356c:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <I2C_RequestMemoryRead+0xa4>)
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	2300      	movs	r3, #0
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 fa0a 	bl	800398c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003578:	69fa      	ldr	r2, [r7, #28]
 800357a:	69b9      	ldr	r1, [r7, #24]
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 f89d 	bl	80036bc <I2C_WaitOnTXISFlagUntilTimeout>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e02c      	b.n	80035e6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800358c:	88fb      	ldrh	r3, [r7, #6]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d105      	bne.n	800359e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003592:	893b      	ldrh	r3, [r7, #8]
 8003594:	b2da      	uxtb	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	629a      	str	r2, [r3, #40]	; 0x28
 800359c:	e015      	b.n	80035ca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800359e:	893b      	ldrh	r3, [r7, #8]
 80035a0:	0a1b      	lsrs	r3, r3, #8
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ac:	69fa      	ldr	r2, [r7, #28]
 80035ae:	69b9      	ldr	r1, [r7, #24]
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 f883 	bl	80036bc <I2C_WaitOnTXISFlagUntilTimeout>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e012      	b.n	80035e6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035c0:	893b      	ldrh	r3, [r7, #8]
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	2200      	movs	r2, #0
 80035d2:	2140      	movs	r1, #64	; 0x40
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 f831 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e000      	b.n	80035e6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	80002000 	.word	0x80002000

080035f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b02      	cmp	r3, #2
 8003608:	d103      	bne.n	8003612 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2200      	movs	r2, #0
 8003610:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b01      	cmp	r3, #1
 800361e:	d007      	beq.n	8003630 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699a      	ldr	r2, [r3, #24]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0201 	orr.w	r2, r2, #1
 800362e:	619a      	str	r2, [r3, #24]
  }
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	4613      	mov	r3, r2
 800364a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800364c:	e022      	b.n	8003694 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003654:	d01e      	beq.n	8003694 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003656:	f7ff f87d 	bl	8002754 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d302      	bcc.n	800366c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d113      	bne.n	8003694 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003670:	f043 0220 	orr.w	r2, r3, #32
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e00f      	b.n	80036b4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	699a      	ldr	r2, [r3, #24]
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	4013      	ands	r3, r2
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	bf0c      	ite	eq
 80036a4:	2301      	moveq	r3, #1
 80036a6:	2300      	movne	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	461a      	mov	r2, r3
 80036ac:	79fb      	ldrb	r3, [r7, #7]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d0cd      	beq.n	800364e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036c8:	e02c      	b.n	8003724 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	68b9      	ldr	r1, [r7, #8]
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 f870 	bl	80037b4 <I2C_IsErrorOccurred>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e02a      	b.n	8003734 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e4:	d01e      	beq.n	8003724 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e6:	f7ff f835 	bl	8002754 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d302      	bcc.n	80036fc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d113      	bne.n	8003724 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003700:	f043 0220 	orr.w	r2, r3, #32
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e007      	b.n	8003734 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b02      	cmp	r3, #2
 8003730:	d1cb      	bne.n	80036ca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003748:	e028      	b.n	800379c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	68b9      	ldr	r1, [r7, #8]
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 f830 	bl	80037b4 <I2C_IsErrorOccurred>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e026      	b.n	80037ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800375e:	f7fe fff9 	bl	8002754 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	429a      	cmp	r2, r3
 800376c:	d302      	bcc.n	8003774 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d113      	bne.n	800379c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003778:	f043 0220 	orr.w	r2, r3, #32
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e007      	b.n	80037ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f003 0320 	and.w	r3, r3, #32
 80037a6:	2b20      	cmp	r3, #32
 80037a8:	d1cf      	bne.n	800374a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b08a      	sub	sp, #40	; 0x28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037c0:	2300      	movs	r3, #0
 80037c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80037ce:	2300      	movs	r3, #0
 80037d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	f003 0310 	and.w	r3, r3, #16
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d075      	beq.n	80038cc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2210      	movs	r2, #16
 80037e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037e8:	e056      	b.n	8003898 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f0:	d052      	beq.n	8003898 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037f2:	f7fe ffaf 	bl	8002754 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d302      	bcc.n	8003808 <I2C_IsErrorOccurred+0x54>
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d147      	bne.n	8003898 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003812:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800381a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800382a:	d12e      	bne.n	800388a <I2C_IsErrorOccurred+0xd6>
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003832:	d02a      	beq.n	800388a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003834:	7cfb      	ldrb	r3, [r7, #19]
 8003836:	2b20      	cmp	r3, #32
 8003838:	d027      	beq.n	800388a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003848:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800384a:	f7fe ff83 	bl	8002754 <HAL_GetTick>
 800384e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003850:	e01b      	b.n	800388a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003852:	f7fe ff7f 	bl	8002754 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b19      	cmp	r3, #25
 800385e:	d914      	bls.n	800388a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003864:	f043 0220 	orr.w	r2, r3, #32
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b20      	cmp	r3, #32
 8003896:	d1dc      	bne.n	8003852 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	f003 0320 	and.w	r3, r3, #32
 80038a2:	2b20      	cmp	r3, #32
 80038a4:	d003      	beq.n	80038ae <I2C_IsErrorOccurred+0xfa>
 80038a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d09d      	beq.n	80037ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80038ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d103      	bne.n	80038be <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2220      	movs	r2, #32
 80038bc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	f043 0304 	orr.w	r3, r3, #4
 80038c4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00b      	beq.n	80038f6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	f043 0301 	orr.w	r3, r3, #1
 80038e4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00b      	beq.n	8003918 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	f043 0308 	orr.w	r3, r3, #8
 8003906:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003910:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00b      	beq.n	800393a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	f043 0302 	orr.w	r3, r3, #2
 8003928:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003932:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800393a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800393e:	2b00      	cmp	r3, #0
 8003940:	d01c      	beq.n	800397c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f7ff fe56 	bl	80035f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6859      	ldr	r1, [r3, #4]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	4b0d      	ldr	r3, [pc, #52]	; (8003988 <I2C_IsErrorOccurred+0x1d4>)
 8003954:	400b      	ands	r3, r1
 8003956:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	431a      	orrs	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800397c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003980:	4618      	mov	r0, r3
 8003982:	3728      	adds	r7, #40	; 0x28
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	fe00e800 	.word	0xfe00e800

0800398c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800398c:	b480      	push	{r7}
 800398e:	b087      	sub	sp, #28
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	607b      	str	r3, [r7, #4]
 8003996:	460b      	mov	r3, r1
 8003998:	817b      	strh	r3, [r7, #10]
 800399a:	4613      	mov	r3, r2
 800399c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800399e:	897b      	ldrh	r3, [r7, #10]
 80039a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039a4:	7a7b      	ldrb	r3, [r7, #9]
 80039a6:	041b      	lsls	r3, r3, #16
 80039a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	0d5b      	lsrs	r3, r3, #21
 80039c6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80039ca:	4b08      	ldr	r3, [pc, #32]	; (80039ec <I2C_TransferConfig+0x60>)
 80039cc:	430b      	orrs	r3, r1
 80039ce:	43db      	mvns	r3, r3
 80039d0:	ea02 0103 	and.w	r1, r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	430a      	orrs	r2, r1
 80039dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80039de:	bf00      	nop
 80039e0:	371c      	adds	r7, #28
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	03ff63ff 	.word	0x03ff63ff

080039f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b20      	cmp	r3, #32
 8003a04:	d138      	bne.n	8003a78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e032      	b.n	8003a7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2224      	movs	r2, #36	; 0x24
 8003a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 0201 	bic.w	r2, r2, #1
 8003a32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6819      	ldr	r1, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a74:	2300      	movs	r3, #0
 8003a76:	e000      	b.n	8003a7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a78:	2302      	movs	r3, #2
  }
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b085      	sub	sp, #20
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
 8003a8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b20      	cmp	r3, #32
 8003a9a:	d139      	bne.n	8003b10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d101      	bne.n	8003aaa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e033      	b.n	8003b12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2224      	movs	r2, #36	; 0x24
 8003ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0201 	bic.w	r2, r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ad8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	021b      	lsls	r3, r3, #8
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f042 0201 	orr.w	r2, r2, #1
 8003afa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2220      	movs	r2, #32
 8003b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	e000      	b.n	8003b12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b10:	2302      	movs	r3, #2
  }
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
	...

08003b20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003b24:	4b04      	ldr	r3, [pc, #16]	; (8003b38 <HAL_PWREx_GetVoltageRange+0x18>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40007000 	.word	0x40007000

08003b3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b4a:	d130      	bne.n	8003bae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b4c:	4b23      	ldr	r3, [pc, #140]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b58:	d038      	beq.n	8003bcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b5a:	4b20      	ldr	r3, [pc, #128]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b62:	4a1e      	ldr	r2, [pc, #120]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b68:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b6a:	4b1d      	ldr	r3, [pc, #116]	; (8003be0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2232      	movs	r2, #50	; 0x32
 8003b70:	fb02 f303 	mul.w	r3, r2, r3
 8003b74:	4a1b      	ldr	r2, [pc, #108]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003b76:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7a:	0c9b      	lsrs	r3, r3, #18
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b80:	e002      	b.n	8003b88 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	3b01      	subs	r3, #1
 8003b86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b88:	4b14      	ldr	r3, [pc, #80]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b94:	d102      	bne.n	8003b9c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1f2      	bne.n	8003b82 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b9c:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ba8:	d110      	bne.n	8003bcc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e00f      	b.n	8003bce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bae:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bba:	d007      	beq.n	8003bcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bbc:	4b07      	ldr	r3, [pc, #28]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bc4:	4a05      	ldr	r2, [pc, #20]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	40007000 	.word	0x40007000
 8003be0:	20000098 	.word	0x20000098
 8003be4:	431bde83 	.word	0x431bde83

08003be8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d102      	bne.n	8003bfc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	f000 bc02 	b.w	8004400 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bfc:	4b96      	ldr	r3, [pc, #600]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 030c 	and.w	r3, r3, #12
 8003c04:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c06:	4b94      	ldr	r3, [pc, #592]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0310 	and.w	r3, r3, #16
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 80e4 	beq.w	8003de6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d007      	beq.n	8003c34 <HAL_RCC_OscConfig+0x4c>
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	2b0c      	cmp	r3, #12
 8003c28:	f040 808b 	bne.w	8003d42 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	f040 8087 	bne.w	8003d42 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c34:	4b88      	ldr	r3, [pc, #544]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <HAL_RCC_OscConfig+0x64>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e3d9      	b.n	8004400 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a1a      	ldr	r2, [r3, #32]
 8003c50:	4b81      	ldr	r3, [pc, #516]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0308 	and.w	r3, r3, #8
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d004      	beq.n	8003c66 <HAL_RCC_OscConfig+0x7e>
 8003c5c:	4b7e      	ldr	r3, [pc, #504]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c64:	e005      	b.n	8003c72 <HAL_RCC_OscConfig+0x8a>
 8003c66:	4b7c      	ldr	r3, [pc, #496]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c6c:	091b      	lsrs	r3, r3, #4
 8003c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d223      	bcs.n	8003cbe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 fd54 	bl	8004728 <RCC_SetFlashLatencyFromMSIRange>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e3ba      	b.n	8004400 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c8a:	4b73      	ldr	r3, [pc, #460]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a72      	ldr	r2, [pc, #456]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003c90:	f043 0308 	orr.w	r3, r3, #8
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	4b70      	ldr	r3, [pc, #448]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	496d      	ldr	r1, [pc, #436]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ca8:	4b6b      	ldr	r3, [pc, #428]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	021b      	lsls	r3, r3, #8
 8003cb6:	4968      	ldr	r1, [pc, #416]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	604b      	str	r3, [r1, #4]
 8003cbc:	e025      	b.n	8003d0a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cbe:	4b66      	ldr	r3, [pc, #408]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a65      	ldr	r2, [pc, #404]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003cc4:	f043 0308 	orr.w	r3, r3, #8
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	4b63      	ldr	r3, [pc, #396]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	4960      	ldr	r1, [pc, #384]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cdc:	4b5e      	ldr	r3, [pc, #376]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	021b      	lsls	r3, r3, #8
 8003cea:	495b      	ldr	r1, [pc, #364]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d109      	bne.n	8003d0a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fd14 	bl	8004728 <RCC_SetFlashLatencyFromMSIRange>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e37a      	b.n	8004400 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d0a:	f000 fc81 	bl	8004610 <HAL_RCC_GetSysClockFreq>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	4b51      	ldr	r3, [pc, #324]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	091b      	lsrs	r3, r3, #4
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	4950      	ldr	r1, [pc, #320]	; (8003e5c <HAL_RCC_OscConfig+0x274>)
 8003d1c:	5ccb      	ldrb	r3, [r1, r3]
 8003d1e:	f003 031f 	and.w	r3, r3, #31
 8003d22:	fa22 f303 	lsr.w	r3, r2, r3
 8003d26:	4a4e      	ldr	r2, [pc, #312]	; (8003e60 <HAL_RCC_OscConfig+0x278>)
 8003d28:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d2a:	4b4e      	ldr	r3, [pc, #312]	; (8003e64 <HAL_RCC_OscConfig+0x27c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fe fcc0 	bl	80026b4 <HAL_InitTick>
 8003d34:	4603      	mov	r3, r0
 8003d36:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d052      	beq.n	8003de4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003d3e:	7bfb      	ldrb	r3, [r7, #15]
 8003d40:	e35e      	b.n	8004400 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d032      	beq.n	8003db0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d4a:	4b43      	ldr	r3, [pc, #268]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a42      	ldr	r2, [pc, #264]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003d50:	f043 0301 	orr.w	r3, r3, #1
 8003d54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d56:	f7fe fcfd 	bl	8002754 <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d5e:	f7fe fcf9 	bl	8002754 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e347      	b.n	8004400 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d70:	4b39      	ldr	r3, [pc, #228]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0f0      	beq.n	8003d5e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d7c:	4b36      	ldr	r3, [pc, #216]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a35      	ldr	r2, [pc, #212]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003d82:	f043 0308 	orr.w	r3, r3, #8
 8003d86:	6013      	str	r3, [r2, #0]
 8003d88:	4b33      	ldr	r3, [pc, #204]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	4930      	ldr	r1, [pc, #192]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d9a:	4b2f      	ldr	r3, [pc, #188]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	021b      	lsls	r3, r3, #8
 8003da8:	492b      	ldr	r1, [pc, #172]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	604b      	str	r3, [r1, #4]
 8003dae:	e01a      	b.n	8003de6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003db0:	4b29      	ldr	r3, [pc, #164]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a28      	ldr	r2, [pc, #160]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003db6:	f023 0301 	bic.w	r3, r3, #1
 8003dba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dbc:	f7fe fcca 	bl	8002754 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dc4:	f7fe fcc6 	bl	8002754 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e314      	b.n	8004400 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003dd6:	4b20      	ldr	r3, [pc, #128]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f0      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x1dc>
 8003de2:	e000      	b.n	8003de6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003de4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d073      	beq.n	8003eda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d005      	beq.n	8003e04 <HAL_RCC_OscConfig+0x21c>
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	2b0c      	cmp	r3, #12
 8003dfc:	d10e      	bne.n	8003e1c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2b03      	cmp	r3, #3
 8003e02:	d10b      	bne.n	8003e1c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e04:	4b14      	ldr	r3, [pc, #80]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d063      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x2f0>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d15f      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e2f1      	b.n	8004400 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e24:	d106      	bne.n	8003e34 <HAL_RCC_OscConfig+0x24c>
 8003e26:	4b0c      	ldr	r3, [pc, #48]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a0b      	ldr	r2, [pc, #44]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	e025      	b.n	8003e80 <HAL_RCC_OscConfig+0x298>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e3c:	d114      	bne.n	8003e68 <HAL_RCC_OscConfig+0x280>
 8003e3e:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a05      	ldr	r2, [pc, #20]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	4b03      	ldr	r3, [pc, #12]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a02      	ldr	r2, [pc, #8]	; (8003e58 <HAL_RCC_OscConfig+0x270>)
 8003e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	e013      	b.n	8003e80 <HAL_RCC_OscConfig+0x298>
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	08009180 	.word	0x08009180
 8003e60:	20000098 	.word	0x20000098
 8003e64:	2000009c 	.word	0x2000009c
 8003e68:	4ba0      	ldr	r3, [pc, #640]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a9f      	ldr	r2, [pc, #636]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 8003e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	4b9d      	ldr	r3, [pc, #628]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a9c      	ldr	r2, [pc, #624]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 8003e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d013      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e88:	f7fe fc64 	bl	8002754 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e90:	f7fe fc60 	bl	8002754 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b64      	cmp	r3, #100	; 0x64
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e2ae      	b.n	8004400 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ea2:	4b92      	ldr	r3, [pc, #584]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0x2a8>
 8003eae:	e014      	b.n	8003eda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb0:	f7fe fc50 	bl	8002754 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eb8:	f7fe fc4c 	bl	8002754 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b64      	cmp	r3, #100	; 0x64
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e29a      	b.n	8004400 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003eca:	4b88      	ldr	r3, [pc, #544]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1f0      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x2d0>
 8003ed6:	e000      	b.n	8003eda <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d060      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d005      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x310>
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	2b0c      	cmp	r3, #12
 8003ef0:	d119      	bne.n	8003f26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d116      	bne.n	8003f26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ef8:	4b7c      	ldr	r3, [pc, #496]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d005      	beq.n	8003f10 <HAL_RCC_OscConfig+0x328>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e277      	b.n	8004400 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f10:	4b76      	ldr	r3, [pc, #472]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	061b      	lsls	r3, r3, #24
 8003f1e:	4973      	ldr	r1, [pc, #460]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f24:	e040      	b.n	8003fa8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d023      	beq.n	8003f76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f2e:	4b6f      	ldr	r3, [pc, #444]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a6e      	ldr	r2, [pc, #440]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 8003f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3a:	f7fe fc0b 	bl	8002754 <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f42:	f7fe fc07 	bl	8002754 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e255      	b.n	8004400 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f54:	4b65      	ldr	r3, [pc, #404]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0f0      	beq.n	8003f42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f60:	4b62      	ldr	r3, [pc, #392]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	061b      	lsls	r3, r3, #24
 8003f6e:	495f      	ldr	r1, [pc, #380]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	604b      	str	r3, [r1, #4]
 8003f74:	e018      	b.n	8003fa8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f76:	4b5d      	ldr	r3, [pc, #372]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a5c      	ldr	r2, [pc, #368]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 8003f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f82:	f7fe fbe7 	bl	8002754 <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f88:	e008      	b.n	8003f9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f8a:	f7fe fbe3 	bl	8002754 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e231      	b.n	8004400 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f9c:	4b53      	ldr	r3, [pc, #332]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1f0      	bne.n	8003f8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0308 	and.w	r3, r3, #8
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d03c      	beq.n	800402e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d01c      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fbc:	4b4b      	ldr	r3, [pc, #300]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 8003fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fc2:	4a4a      	ldr	r2, [pc, #296]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 8003fc4:	f043 0301 	orr.w	r3, r3, #1
 8003fc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fcc:	f7fe fbc2 	bl	8002754 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fd4:	f7fe fbbe 	bl	8002754 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e20c      	b.n	8004400 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fe6:	4b41      	ldr	r3, [pc, #260]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 8003fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0ef      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x3ec>
 8003ff4:	e01b      	b.n	800402e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ff6:	4b3d      	ldr	r3, [pc, #244]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 8003ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ffc:	4a3b      	ldr	r2, [pc, #236]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 8003ffe:	f023 0301 	bic.w	r3, r3, #1
 8004002:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004006:	f7fe fba5 	bl	8002754 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800400c:	e008      	b.n	8004020 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800400e:	f7fe fba1 	bl	8002754 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e1ef      	b.n	8004400 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004020:	4b32      	ldr	r3, [pc, #200]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 8004022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1ef      	bne.n	800400e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0304 	and.w	r3, r3, #4
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 80a6 	beq.w	8004188 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800403c:	2300      	movs	r3, #0
 800403e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004040:	4b2a      	ldr	r3, [pc, #168]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 8004042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10d      	bne.n	8004068 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800404c:	4b27      	ldr	r3, [pc, #156]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 800404e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004050:	4a26      	ldr	r2, [pc, #152]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 8004052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004056:	6593      	str	r3, [r2, #88]	; 0x58
 8004058:	4b24      	ldr	r3, [pc, #144]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 800405a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004060:	60bb      	str	r3, [r7, #8]
 8004062:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004064:	2301      	movs	r3, #1
 8004066:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004068:	4b21      	ldr	r3, [pc, #132]	; (80040f0 <HAL_RCC_OscConfig+0x508>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004070:	2b00      	cmp	r3, #0
 8004072:	d118      	bne.n	80040a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004074:	4b1e      	ldr	r3, [pc, #120]	; (80040f0 <HAL_RCC_OscConfig+0x508>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a1d      	ldr	r2, [pc, #116]	; (80040f0 <HAL_RCC_OscConfig+0x508>)
 800407a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800407e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004080:	f7fe fb68 	bl	8002754 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004088:	f7fe fb64 	bl	8002754 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e1b2      	b.n	8004400 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800409a:	4b15      	ldr	r3, [pc, #84]	; (80040f0 <HAL_RCC_OscConfig+0x508>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0f0      	beq.n	8004088 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d108      	bne.n	80040c0 <HAL_RCC_OscConfig+0x4d8>
 80040ae:	4b0f      	ldr	r3, [pc, #60]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 80040b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b4:	4a0d      	ldr	r2, [pc, #52]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 80040b6:	f043 0301 	orr.w	r3, r3, #1
 80040ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040be:	e029      	b.n	8004114 <HAL_RCC_OscConfig+0x52c>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	2b05      	cmp	r3, #5
 80040c6:	d115      	bne.n	80040f4 <HAL_RCC_OscConfig+0x50c>
 80040c8:	4b08      	ldr	r3, [pc, #32]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 80040ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ce:	4a07      	ldr	r2, [pc, #28]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 80040d0:	f043 0304 	orr.w	r3, r3, #4
 80040d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040d8:	4b04      	ldr	r3, [pc, #16]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 80040da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040de:	4a03      	ldr	r2, [pc, #12]	; (80040ec <HAL_RCC_OscConfig+0x504>)
 80040e0:	f043 0301 	orr.w	r3, r3, #1
 80040e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040e8:	e014      	b.n	8004114 <HAL_RCC_OscConfig+0x52c>
 80040ea:	bf00      	nop
 80040ec:	40021000 	.word	0x40021000
 80040f0:	40007000 	.word	0x40007000
 80040f4:	4b9a      	ldr	r3, [pc, #616]	; (8004360 <HAL_RCC_OscConfig+0x778>)
 80040f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fa:	4a99      	ldr	r2, [pc, #612]	; (8004360 <HAL_RCC_OscConfig+0x778>)
 80040fc:	f023 0301 	bic.w	r3, r3, #1
 8004100:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004104:	4b96      	ldr	r3, [pc, #600]	; (8004360 <HAL_RCC_OscConfig+0x778>)
 8004106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410a:	4a95      	ldr	r2, [pc, #596]	; (8004360 <HAL_RCC_OscConfig+0x778>)
 800410c:	f023 0304 	bic.w	r3, r3, #4
 8004110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d016      	beq.n	800414a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800411c:	f7fe fb1a 	bl	8002754 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004122:	e00a      	b.n	800413a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004124:	f7fe fb16 	bl	8002754 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004132:	4293      	cmp	r3, r2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e162      	b.n	8004400 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800413a:	4b89      	ldr	r3, [pc, #548]	; (8004360 <HAL_RCC_OscConfig+0x778>)
 800413c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0ed      	beq.n	8004124 <HAL_RCC_OscConfig+0x53c>
 8004148:	e015      	b.n	8004176 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800414a:	f7fe fb03 	bl	8002754 <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004150:	e00a      	b.n	8004168 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004152:	f7fe faff 	bl	8002754 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004160:	4293      	cmp	r3, r2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e14b      	b.n	8004400 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004168:	4b7d      	ldr	r3, [pc, #500]	; (8004360 <HAL_RCC_OscConfig+0x778>)
 800416a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1ed      	bne.n	8004152 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004176:	7ffb      	ldrb	r3, [r7, #31]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d105      	bne.n	8004188 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800417c:	4b78      	ldr	r3, [pc, #480]	; (8004360 <HAL_RCC_OscConfig+0x778>)
 800417e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004180:	4a77      	ldr	r2, [pc, #476]	; (8004360 <HAL_RCC_OscConfig+0x778>)
 8004182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004186:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0320 	and.w	r3, r3, #32
 8004190:	2b00      	cmp	r3, #0
 8004192:	d03c      	beq.n	800420e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	2b00      	cmp	r3, #0
 800419a:	d01c      	beq.n	80041d6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800419c:	4b70      	ldr	r3, [pc, #448]	; (8004360 <HAL_RCC_OscConfig+0x778>)
 800419e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041a2:	4a6f      	ldr	r2, [pc, #444]	; (8004360 <HAL_RCC_OscConfig+0x778>)
 80041a4:	f043 0301 	orr.w	r3, r3, #1
 80041a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ac:	f7fe fad2 	bl	8002754 <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041b4:	f7fe face 	bl	8002754 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e11c      	b.n	8004400 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041c6:	4b66      	ldr	r3, [pc, #408]	; (8004360 <HAL_RCC_OscConfig+0x778>)
 80041c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0ef      	beq.n	80041b4 <HAL_RCC_OscConfig+0x5cc>
 80041d4:	e01b      	b.n	800420e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041d6:	4b62      	ldr	r3, [pc, #392]	; (8004360 <HAL_RCC_OscConfig+0x778>)
 80041d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041dc:	4a60      	ldr	r2, [pc, #384]	; (8004360 <HAL_RCC_OscConfig+0x778>)
 80041de:	f023 0301 	bic.w	r3, r3, #1
 80041e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e6:	f7fe fab5 	bl	8002754 <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041ee:	f7fe fab1 	bl	8002754 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e0ff      	b.n	8004400 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004200:	4b57      	ldr	r3, [pc, #348]	; (8004360 <HAL_RCC_OscConfig+0x778>)
 8004202:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1ef      	bne.n	80041ee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 80f3 	beq.w	80043fe <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421c:	2b02      	cmp	r3, #2
 800421e:	f040 80c9 	bne.w	80043b4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004222:	4b4f      	ldr	r3, [pc, #316]	; (8004360 <HAL_RCC_OscConfig+0x778>)
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f003 0203 	and.w	r2, r3, #3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004232:	429a      	cmp	r2, r3
 8004234:	d12c      	bne.n	8004290 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004240:	3b01      	subs	r3, #1
 8004242:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004244:	429a      	cmp	r2, r3
 8004246:	d123      	bne.n	8004290 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004252:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004254:	429a      	cmp	r2, r3
 8004256:	d11b      	bne.n	8004290 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004264:	429a      	cmp	r2, r3
 8004266:	d113      	bne.n	8004290 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004272:	085b      	lsrs	r3, r3, #1
 8004274:	3b01      	subs	r3, #1
 8004276:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004278:	429a      	cmp	r2, r3
 800427a:	d109      	bne.n	8004290 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	085b      	lsrs	r3, r3, #1
 8004288:	3b01      	subs	r3, #1
 800428a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800428c:	429a      	cmp	r2, r3
 800428e:	d06b      	beq.n	8004368 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	2b0c      	cmp	r3, #12
 8004294:	d062      	beq.n	800435c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004296:	4b32      	ldr	r3, [pc, #200]	; (8004360 <HAL_RCC_OscConfig+0x778>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e0ac      	b.n	8004400 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80042a6:	4b2e      	ldr	r3, [pc, #184]	; (8004360 <HAL_RCC_OscConfig+0x778>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a2d      	ldr	r2, [pc, #180]	; (8004360 <HAL_RCC_OscConfig+0x778>)
 80042ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042b0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042b2:	f7fe fa4f 	bl	8002754 <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ba:	f7fe fa4b 	bl	8002754 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e099      	b.n	8004400 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042cc:	4b24      	ldr	r3, [pc, #144]	; (8004360 <HAL_RCC_OscConfig+0x778>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1f0      	bne.n	80042ba <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042d8:	4b21      	ldr	r3, [pc, #132]	; (8004360 <HAL_RCC_OscConfig+0x778>)
 80042da:	68da      	ldr	r2, [r3, #12]
 80042dc:	4b21      	ldr	r3, [pc, #132]	; (8004364 <HAL_RCC_OscConfig+0x77c>)
 80042de:	4013      	ands	r3, r2
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80042e8:	3a01      	subs	r2, #1
 80042ea:	0112      	lsls	r2, r2, #4
 80042ec:	4311      	orrs	r1, r2
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042f2:	0212      	lsls	r2, r2, #8
 80042f4:	4311      	orrs	r1, r2
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042fa:	0852      	lsrs	r2, r2, #1
 80042fc:	3a01      	subs	r2, #1
 80042fe:	0552      	lsls	r2, r2, #21
 8004300:	4311      	orrs	r1, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004306:	0852      	lsrs	r2, r2, #1
 8004308:	3a01      	subs	r2, #1
 800430a:	0652      	lsls	r2, r2, #25
 800430c:	4311      	orrs	r1, r2
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004312:	06d2      	lsls	r2, r2, #27
 8004314:	430a      	orrs	r2, r1
 8004316:	4912      	ldr	r1, [pc, #72]	; (8004360 <HAL_RCC_OscConfig+0x778>)
 8004318:	4313      	orrs	r3, r2
 800431a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800431c:	4b10      	ldr	r3, [pc, #64]	; (8004360 <HAL_RCC_OscConfig+0x778>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a0f      	ldr	r2, [pc, #60]	; (8004360 <HAL_RCC_OscConfig+0x778>)
 8004322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004326:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004328:	4b0d      	ldr	r3, [pc, #52]	; (8004360 <HAL_RCC_OscConfig+0x778>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	4a0c      	ldr	r2, [pc, #48]	; (8004360 <HAL_RCC_OscConfig+0x778>)
 800432e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004332:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004334:	f7fe fa0e 	bl	8002754 <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800433c:	f7fe fa0a 	bl	8002754 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e058      	b.n	8004400 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800434e:	4b04      	ldr	r3, [pc, #16]	; (8004360 <HAL_RCC_OscConfig+0x778>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0f0      	beq.n	800433c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800435a:	e050      	b.n	80043fe <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e04f      	b.n	8004400 <HAL_RCC_OscConfig+0x818>
 8004360:	40021000 	.word	0x40021000
 8004364:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004368:	4b27      	ldr	r3, [pc, #156]	; (8004408 <HAL_RCC_OscConfig+0x820>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d144      	bne.n	80043fe <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004374:	4b24      	ldr	r3, [pc, #144]	; (8004408 <HAL_RCC_OscConfig+0x820>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a23      	ldr	r2, [pc, #140]	; (8004408 <HAL_RCC_OscConfig+0x820>)
 800437a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800437e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004380:	4b21      	ldr	r3, [pc, #132]	; (8004408 <HAL_RCC_OscConfig+0x820>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	4a20      	ldr	r2, [pc, #128]	; (8004408 <HAL_RCC_OscConfig+0x820>)
 8004386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800438a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800438c:	f7fe f9e2 	bl	8002754 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004394:	f7fe f9de 	bl	8002754 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e02c      	b.n	8004400 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043a6:	4b18      	ldr	r3, [pc, #96]	; (8004408 <HAL_RCC_OscConfig+0x820>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0f0      	beq.n	8004394 <HAL_RCC_OscConfig+0x7ac>
 80043b2:	e024      	b.n	80043fe <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	2b0c      	cmp	r3, #12
 80043b8:	d01f      	beq.n	80043fa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ba:	4b13      	ldr	r3, [pc, #76]	; (8004408 <HAL_RCC_OscConfig+0x820>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a12      	ldr	r2, [pc, #72]	; (8004408 <HAL_RCC_OscConfig+0x820>)
 80043c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c6:	f7fe f9c5 	bl	8002754 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ce:	f7fe f9c1 	bl	8002754 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e00f      	b.n	8004400 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043e0:	4b09      	ldr	r3, [pc, #36]	; (8004408 <HAL_RCC_OscConfig+0x820>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1f0      	bne.n	80043ce <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80043ec:	4b06      	ldr	r3, [pc, #24]	; (8004408 <HAL_RCC_OscConfig+0x820>)
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	4905      	ldr	r1, [pc, #20]	; (8004408 <HAL_RCC_OscConfig+0x820>)
 80043f2:	4b06      	ldr	r3, [pc, #24]	; (800440c <HAL_RCC_OscConfig+0x824>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	60cb      	str	r3, [r1, #12]
 80043f8:	e001      	b.n	80043fe <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3720      	adds	r7, #32
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40021000 	.word	0x40021000
 800440c:	feeefffc 	.word	0xfeeefffc

08004410 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e0e7      	b.n	80045f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004424:	4b75      	ldr	r3, [pc, #468]	; (80045fc <HAL_RCC_ClockConfig+0x1ec>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	429a      	cmp	r2, r3
 8004430:	d910      	bls.n	8004454 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004432:	4b72      	ldr	r3, [pc, #456]	; (80045fc <HAL_RCC_ClockConfig+0x1ec>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f023 0207 	bic.w	r2, r3, #7
 800443a:	4970      	ldr	r1, [pc, #448]	; (80045fc <HAL_RCC_ClockConfig+0x1ec>)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	4313      	orrs	r3, r2
 8004440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004442:	4b6e      	ldr	r3, [pc, #440]	; (80045fc <HAL_RCC_ClockConfig+0x1ec>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	429a      	cmp	r2, r3
 800444e:	d001      	beq.n	8004454 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e0cf      	b.n	80045f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d010      	beq.n	8004482 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	4b66      	ldr	r3, [pc, #408]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800446c:	429a      	cmp	r2, r3
 800446e:	d908      	bls.n	8004482 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004470:	4b63      	ldr	r3, [pc, #396]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	4960      	ldr	r1, [pc, #384]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 800447e:	4313      	orrs	r3, r2
 8004480:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d04c      	beq.n	8004528 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b03      	cmp	r3, #3
 8004494:	d107      	bne.n	80044a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004496:	4b5a      	ldr	r3, [pc, #360]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d121      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e0a6      	b.n	80045f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d107      	bne.n	80044be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044ae:	4b54      	ldr	r3, [pc, #336]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d115      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e09a      	b.n	80045f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d107      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044c6:	4b4e      	ldr	r3, [pc, #312]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d109      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e08e      	b.n	80045f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044d6:	4b4a      	ldr	r3, [pc, #296]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e086      	b.n	80045f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044e6:	4b46      	ldr	r3, [pc, #280]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f023 0203 	bic.w	r2, r3, #3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	4943      	ldr	r1, [pc, #268]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f8:	f7fe f92c 	bl	8002754 <HAL_GetTick>
 80044fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044fe:	e00a      	b.n	8004516 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004500:	f7fe f928 	bl	8002754 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	f241 3288 	movw	r2, #5000	; 0x1388
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e06e      	b.n	80045f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004516:	4b3a      	ldr	r3, [pc, #232]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 020c 	and.w	r2, r3, #12
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	429a      	cmp	r2, r3
 8004526:	d1eb      	bne.n	8004500 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d010      	beq.n	8004556 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	4b31      	ldr	r3, [pc, #196]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004540:	429a      	cmp	r2, r3
 8004542:	d208      	bcs.n	8004556 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004544:	4b2e      	ldr	r3, [pc, #184]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	492b      	ldr	r1, [pc, #172]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 8004552:	4313      	orrs	r3, r2
 8004554:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004556:	4b29      	ldr	r3, [pc, #164]	; (80045fc <HAL_RCC_ClockConfig+0x1ec>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d210      	bcs.n	8004586 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004564:	4b25      	ldr	r3, [pc, #148]	; (80045fc <HAL_RCC_ClockConfig+0x1ec>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f023 0207 	bic.w	r2, r3, #7
 800456c:	4923      	ldr	r1, [pc, #140]	; (80045fc <HAL_RCC_ClockConfig+0x1ec>)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	4313      	orrs	r3, r2
 8004572:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004574:	4b21      	ldr	r3, [pc, #132]	; (80045fc <HAL_RCC_ClockConfig+0x1ec>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d001      	beq.n	8004586 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e036      	b.n	80045f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0304 	and.w	r3, r3, #4
 800458e:	2b00      	cmp	r3, #0
 8004590:	d008      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004592:	4b1b      	ldr	r3, [pc, #108]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	4918      	ldr	r1, [pc, #96]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d009      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045b0:	4b13      	ldr	r3, [pc, #76]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	4910      	ldr	r1, [pc, #64]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045c4:	f000 f824 	bl	8004610 <HAL_RCC_GetSysClockFreq>
 80045c8:	4602      	mov	r2, r0
 80045ca:	4b0d      	ldr	r3, [pc, #52]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	091b      	lsrs	r3, r3, #4
 80045d0:	f003 030f 	and.w	r3, r3, #15
 80045d4:	490b      	ldr	r1, [pc, #44]	; (8004604 <HAL_RCC_ClockConfig+0x1f4>)
 80045d6:	5ccb      	ldrb	r3, [r1, r3]
 80045d8:	f003 031f 	and.w	r3, r3, #31
 80045dc:	fa22 f303 	lsr.w	r3, r2, r3
 80045e0:	4a09      	ldr	r2, [pc, #36]	; (8004608 <HAL_RCC_ClockConfig+0x1f8>)
 80045e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80045e4:	4b09      	ldr	r3, [pc, #36]	; (800460c <HAL_RCC_ClockConfig+0x1fc>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fe f863 	bl	80026b4 <HAL_InitTick>
 80045ee:	4603      	mov	r3, r0
 80045f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80045f2:	7afb      	ldrb	r3, [r7, #11]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40022000 	.word	0x40022000
 8004600:	40021000 	.word	0x40021000
 8004604:	08009180 	.word	0x08009180
 8004608:	20000098 	.word	0x20000098
 800460c:	2000009c 	.word	0x2000009c

08004610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004610:	b480      	push	{r7}
 8004612:	b089      	sub	sp, #36	; 0x24
 8004614:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004616:	2300      	movs	r3, #0
 8004618:	61fb      	str	r3, [r7, #28]
 800461a:	2300      	movs	r3, #0
 800461c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800461e:	4b3e      	ldr	r3, [pc, #248]	; (8004718 <HAL_RCC_GetSysClockFreq+0x108>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f003 030c 	and.w	r3, r3, #12
 8004626:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004628:	4b3b      	ldr	r3, [pc, #236]	; (8004718 <HAL_RCC_GetSysClockFreq+0x108>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f003 0303 	and.w	r3, r3, #3
 8004630:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d005      	beq.n	8004644 <HAL_RCC_GetSysClockFreq+0x34>
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	2b0c      	cmp	r3, #12
 800463c:	d121      	bne.n	8004682 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d11e      	bne.n	8004682 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004644:	4b34      	ldr	r3, [pc, #208]	; (8004718 <HAL_RCC_GetSysClockFreq+0x108>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0308 	and.w	r3, r3, #8
 800464c:	2b00      	cmp	r3, #0
 800464e:	d107      	bne.n	8004660 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004650:	4b31      	ldr	r3, [pc, #196]	; (8004718 <HAL_RCC_GetSysClockFreq+0x108>)
 8004652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004656:	0a1b      	lsrs	r3, r3, #8
 8004658:	f003 030f 	and.w	r3, r3, #15
 800465c:	61fb      	str	r3, [r7, #28]
 800465e:	e005      	b.n	800466c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004660:	4b2d      	ldr	r3, [pc, #180]	; (8004718 <HAL_RCC_GetSysClockFreq+0x108>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	091b      	lsrs	r3, r3, #4
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800466c:	4a2b      	ldr	r2, [pc, #172]	; (800471c <HAL_RCC_GetSysClockFreq+0x10c>)
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004674:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10d      	bne.n	8004698 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004680:	e00a      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	2b04      	cmp	r3, #4
 8004686:	d102      	bne.n	800468e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004688:	4b25      	ldr	r3, [pc, #148]	; (8004720 <HAL_RCC_GetSysClockFreq+0x110>)
 800468a:	61bb      	str	r3, [r7, #24]
 800468c:	e004      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	2b08      	cmp	r3, #8
 8004692:	d101      	bne.n	8004698 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004694:	4b23      	ldr	r3, [pc, #140]	; (8004724 <HAL_RCC_GetSysClockFreq+0x114>)
 8004696:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	2b0c      	cmp	r3, #12
 800469c:	d134      	bne.n	8004708 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800469e:	4b1e      	ldr	r3, [pc, #120]	; (8004718 <HAL_RCC_GetSysClockFreq+0x108>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f003 0303 	and.w	r3, r3, #3
 80046a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d003      	beq.n	80046b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2b03      	cmp	r3, #3
 80046b2:	d003      	beq.n	80046bc <HAL_RCC_GetSysClockFreq+0xac>
 80046b4:	e005      	b.n	80046c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80046b6:	4b1a      	ldr	r3, [pc, #104]	; (8004720 <HAL_RCC_GetSysClockFreq+0x110>)
 80046b8:	617b      	str	r3, [r7, #20]
      break;
 80046ba:	e005      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80046bc:	4b19      	ldr	r3, [pc, #100]	; (8004724 <HAL_RCC_GetSysClockFreq+0x114>)
 80046be:	617b      	str	r3, [r7, #20]
      break;
 80046c0:	e002      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	617b      	str	r3, [r7, #20]
      break;
 80046c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046c8:	4b13      	ldr	r3, [pc, #76]	; (8004718 <HAL_RCC_GetSysClockFreq+0x108>)
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	091b      	lsrs	r3, r3, #4
 80046ce:	f003 0307 	and.w	r3, r3, #7
 80046d2:	3301      	adds	r3, #1
 80046d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80046d6:	4b10      	ldr	r3, [pc, #64]	; (8004718 <HAL_RCC_GetSysClockFreq+0x108>)
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	0a1b      	lsrs	r3, r3, #8
 80046dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	fb03 f202 	mul.w	r2, r3, r2
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046ee:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <HAL_RCC_GetSysClockFreq+0x108>)
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	0e5b      	lsrs	r3, r3, #25
 80046f4:	f003 0303 	and.w	r3, r3, #3
 80046f8:	3301      	adds	r3, #1
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	fbb2 f3f3 	udiv	r3, r2, r3
 8004706:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004708:	69bb      	ldr	r3, [r7, #24]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3724      	adds	r7, #36	; 0x24
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	40021000 	.word	0x40021000
 800471c:	08009190 	.word	0x08009190
 8004720:	00f42400 	.word	0x00f42400
 8004724:	007a1200 	.word	0x007a1200

08004728 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004730:	2300      	movs	r3, #0
 8004732:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004734:	4b2a      	ldr	r3, [pc, #168]	; (80047e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004740:	f7ff f9ee 	bl	8003b20 <HAL_PWREx_GetVoltageRange>
 8004744:	6178      	str	r0, [r7, #20]
 8004746:	e014      	b.n	8004772 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004748:	4b25      	ldr	r3, [pc, #148]	; (80047e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800474a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474c:	4a24      	ldr	r2, [pc, #144]	; (80047e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800474e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004752:	6593      	str	r3, [r2, #88]	; 0x58
 8004754:	4b22      	ldr	r3, [pc, #136]	; (80047e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004760:	f7ff f9de 	bl	8003b20 <HAL_PWREx_GetVoltageRange>
 8004764:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004766:	4b1e      	ldr	r3, [pc, #120]	; (80047e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476a:	4a1d      	ldr	r2, [pc, #116]	; (80047e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800476c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004770:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004778:	d10b      	bne.n	8004792 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b80      	cmp	r3, #128	; 0x80
 800477e:	d919      	bls.n	80047b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2ba0      	cmp	r3, #160	; 0xa0
 8004784:	d902      	bls.n	800478c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004786:	2302      	movs	r3, #2
 8004788:	613b      	str	r3, [r7, #16]
 800478a:	e013      	b.n	80047b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800478c:	2301      	movs	r3, #1
 800478e:	613b      	str	r3, [r7, #16]
 8004790:	e010      	b.n	80047b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b80      	cmp	r3, #128	; 0x80
 8004796:	d902      	bls.n	800479e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004798:	2303      	movs	r3, #3
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	e00a      	b.n	80047b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b80      	cmp	r3, #128	; 0x80
 80047a2:	d102      	bne.n	80047aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047a4:	2302      	movs	r3, #2
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	e004      	b.n	80047b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b70      	cmp	r3, #112	; 0x70
 80047ae:	d101      	bne.n	80047b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047b0:	2301      	movs	r3, #1
 80047b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047b4:	4b0b      	ldr	r3, [pc, #44]	; (80047e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f023 0207 	bic.w	r2, r3, #7
 80047bc:	4909      	ldr	r1, [pc, #36]	; (80047e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80047c4:	4b07      	ldr	r3, [pc, #28]	; (80047e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d001      	beq.n	80047d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e000      	b.n	80047d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3718      	adds	r7, #24
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40021000 	.word	0x40021000
 80047e4:	40022000 	.word	0x40022000

080047e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047f0:	2300      	movs	r3, #0
 80047f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047f4:	2300      	movs	r3, #0
 80047f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004800:	2b00      	cmp	r3, #0
 8004802:	d031      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004808:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800480c:	d01a      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800480e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004812:	d814      	bhi.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004814:	2b00      	cmp	r3, #0
 8004816:	d009      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004818:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800481c:	d10f      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800481e:	4b5d      	ldr	r3, [pc, #372]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	4a5c      	ldr	r2, [pc, #368]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004828:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800482a:	e00c      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3304      	adds	r3, #4
 8004830:	2100      	movs	r1, #0
 8004832:	4618      	mov	r0, r3
 8004834:	f000 f9ce 	bl	8004bd4 <RCCEx_PLLSAI1_Config>
 8004838:	4603      	mov	r3, r0
 800483a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800483c:	e003      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	74fb      	strb	r3, [r7, #19]
      break;
 8004842:	e000      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004844:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004846:	7cfb      	ldrb	r3, [r7, #19]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10b      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800484c:	4b51      	ldr	r3, [pc, #324]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800484e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004852:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800485a:	494e      	ldr	r1, [pc, #312]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004862:	e001      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004864:	7cfb      	ldrb	r3, [r7, #19]
 8004866:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 809e 	beq.w	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004876:	2300      	movs	r3, #0
 8004878:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800487a:	4b46      	ldr	r3, [pc, #280]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800487c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800487e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004886:	2301      	movs	r3, #1
 8004888:	e000      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800488a:	2300      	movs	r3, #0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00d      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004890:	4b40      	ldr	r3, [pc, #256]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004894:	4a3f      	ldr	r2, [pc, #252]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800489a:	6593      	str	r3, [r2, #88]	; 0x58
 800489c:	4b3d      	ldr	r3, [pc, #244]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800489e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a4:	60bb      	str	r3, [r7, #8]
 80048a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048a8:	2301      	movs	r3, #1
 80048aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048ac:	4b3a      	ldr	r3, [pc, #232]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a39      	ldr	r2, [pc, #228]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80048b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048b8:	f7fd ff4c 	bl	8002754 <HAL_GetTick>
 80048bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048be:	e009      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048c0:	f7fd ff48 	bl	8002754 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d902      	bls.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	74fb      	strb	r3, [r7, #19]
        break;
 80048d2:	e005      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048d4:	4b30      	ldr	r3, [pc, #192]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d0ef      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80048e0:	7cfb      	ldrb	r3, [r7, #19]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d15a      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048e6:	4b2b      	ldr	r3, [pc, #172]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d01e      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d019      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004902:	4b24      	ldr	r3, [pc, #144]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800490c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800490e:	4b21      	ldr	r3, [pc, #132]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004914:	4a1f      	ldr	r2, [pc, #124]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800491a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800491e:	4b1d      	ldr	r3, [pc, #116]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004924:	4a1b      	ldr	r2, [pc, #108]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800492a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800492e:	4a19      	ldr	r2, [pc, #100]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	d016      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004940:	f7fd ff08 	bl	8002754 <HAL_GetTick>
 8004944:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004946:	e00b      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004948:	f7fd ff04 	bl	8002754 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	f241 3288 	movw	r2, #5000	; 0x1388
 8004956:	4293      	cmp	r3, r2
 8004958:	d902      	bls.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	74fb      	strb	r3, [r7, #19]
            break;
 800495e:	e006      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004960:	4b0c      	ldr	r3, [pc, #48]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0ec      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800496e:	7cfb      	ldrb	r3, [r7, #19]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10b      	bne.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004974:	4b07      	ldr	r3, [pc, #28]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004982:	4904      	ldr	r1, [pc, #16]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004984:	4313      	orrs	r3, r2
 8004986:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800498a:	e009      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800498c:	7cfb      	ldrb	r3, [r7, #19]
 800498e:	74bb      	strb	r3, [r7, #18]
 8004990:	e006      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004992:	bf00      	nop
 8004994:	40021000 	.word	0x40021000
 8004998:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800499c:	7cfb      	ldrb	r3, [r7, #19]
 800499e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049a0:	7c7b      	ldrb	r3, [r7, #17]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d105      	bne.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049a6:	4b8a      	ldr	r3, [pc, #552]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049aa:	4a89      	ldr	r2, [pc, #548]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049be:	4b84      	ldr	r3, [pc, #528]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c4:	f023 0203 	bic.w	r2, r3, #3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	4980      	ldr	r1, [pc, #512]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00a      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049e0:	4b7b      	ldr	r3, [pc, #492]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e6:	f023 020c 	bic.w	r2, r3, #12
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	4978      	ldr	r1, [pc, #480]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0320 	and.w	r3, r3, #32
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a02:	4b73      	ldr	r3, [pc, #460]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a08:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a10:	496f      	ldr	r1, [pc, #444]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00a      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a24:	4b6a      	ldr	r3, [pc, #424]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a32:	4967      	ldr	r1, [pc, #412]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00a      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a46:	4b62      	ldr	r3, [pc, #392]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a54:	495e      	ldr	r1, [pc, #376]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00a      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a68:	4b59      	ldr	r3, [pc, #356]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a76:	4956      	ldr	r1, [pc, #344]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a8a:	4b51      	ldr	r3, [pc, #324]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a98:	494d      	ldr	r1, [pc, #308]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d028      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004aac:	4b48      	ldr	r3, [pc, #288]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	4945      	ldr	r1, [pc, #276]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aca:	d106      	bne.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004acc:	4b40      	ldr	r3, [pc, #256]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	4a3f      	ldr	r2, [pc, #252]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ad6:	60d3      	str	r3, [r2, #12]
 8004ad8:	e011      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ae2:	d10c      	bne.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	2101      	movs	r1, #1
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 f872 	bl	8004bd4 <RCCEx_PLLSAI1_Config>
 8004af0:	4603      	mov	r3, r0
 8004af2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004af4:	7cfb      	ldrb	r3, [r7, #19]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004afa:	7cfb      	ldrb	r3, [r7, #19]
 8004afc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d028      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b0a:	4b31      	ldr	r3, [pc, #196]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b10:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b18:	492d      	ldr	r1, [pc, #180]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b28:	d106      	bne.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b2a:	4b29      	ldr	r3, [pc, #164]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	4a28      	ldr	r2, [pc, #160]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b34:	60d3      	str	r3, [r2, #12]
 8004b36:	e011      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b40:	d10c      	bne.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	3304      	adds	r3, #4
 8004b46:	2101      	movs	r1, #1
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 f843 	bl	8004bd4 <RCCEx_PLLSAI1_Config>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b52:	7cfb      	ldrb	r3, [r7, #19]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004b58:	7cfb      	ldrb	r3, [r7, #19]
 8004b5a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d01c      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b68:	4b19      	ldr	r3, [pc, #100]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b76:	4916      	ldr	r1, [pc, #88]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b86:	d10c      	bne.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	2102      	movs	r1, #2
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 f820 	bl	8004bd4 <RCCEx_PLLSAI1_Config>
 8004b94:	4603      	mov	r3, r0
 8004b96:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b98:	7cfb      	ldrb	r3, [r7, #19]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004b9e:	7cfb      	ldrb	r3, [r7, #19]
 8004ba0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004bae:	4b08      	ldr	r3, [pc, #32]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bbc:	4904      	ldr	r1, [pc, #16]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004bc4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40021000 	.word	0x40021000

08004bd4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bde:	2300      	movs	r3, #0
 8004be0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004be2:	4b74      	ldr	r3, [pc, #464]	; (8004db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f003 0303 	and.w	r3, r3, #3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d018      	beq.n	8004c20 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004bee:	4b71      	ldr	r3, [pc, #452]	; (8004db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	f003 0203 	and.w	r2, r3, #3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d10d      	bne.n	8004c1a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
       ||
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d009      	beq.n	8004c1a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004c06:	4b6b      	ldr	r3, [pc, #428]	; (8004db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	091b      	lsrs	r3, r3, #4
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	1c5a      	adds	r2, r3, #1
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
       ||
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d047      	beq.n	8004caa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	73fb      	strb	r3, [r7, #15]
 8004c1e:	e044      	b.n	8004caa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b03      	cmp	r3, #3
 8004c26:	d018      	beq.n	8004c5a <RCCEx_PLLSAI1_Config+0x86>
 8004c28:	2b03      	cmp	r3, #3
 8004c2a:	d825      	bhi.n	8004c78 <RCCEx_PLLSAI1_Config+0xa4>
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d002      	beq.n	8004c36 <RCCEx_PLLSAI1_Config+0x62>
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d009      	beq.n	8004c48 <RCCEx_PLLSAI1_Config+0x74>
 8004c34:	e020      	b.n	8004c78 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c36:	4b5f      	ldr	r3, [pc, #380]	; (8004db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d11d      	bne.n	8004c7e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c46:	e01a      	b.n	8004c7e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c48:	4b5a      	ldr	r3, [pc, #360]	; (8004db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d116      	bne.n	8004c82 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c58:	e013      	b.n	8004c82 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c5a:	4b56      	ldr	r3, [pc, #344]	; (8004db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10f      	bne.n	8004c86 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c66:	4b53      	ldr	r3, [pc, #332]	; (8004db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d109      	bne.n	8004c86 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c76:	e006      	b.n	8004c86 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c7c:	e004      	b.n	8004c88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c7e:	bf00      	nop
 8004c80:	e002      	b.n	8004c88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c82:	bf00      	nop
 8004c84:	e000      	b.n	8004c88 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c86:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10d      	bne.n	8004caa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c8e:	4b49      	ldr	r3, [pc, #292]	; (8004db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6819      	ldr	r1, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	430b      	orrs	r3, r1
 8004ca4:	4943      	ldr	r1, [pc, #268]	; (8004db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004caa:	7bfb      	ldrb	r3, [r7, #15]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d17c      	bne.n	8004daa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004cb0:	4b40      	ldr	r3, [pc, #256]	; (8004db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a3f      	ldr	r2, [pc, #252]	; (8004db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cb6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cbc:	f7fd fd4a 	bl	8002754 <HAL_GetTick>
 8004cc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cc2:	e009      	b.n	8004cd8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cc4:	f7fd fd46 	bl	8002754 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d902      	bls.n	8004cd8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	73fb      	strb	r3, [r7, #15]
        break;
 8004cd6:	e005      	b.n	8004ce4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cd8:	4b36      	ldr	r3, [pc, #216]	; (8004db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1ef      	bne.n	8004cc4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d15f      	bne.n	8004daa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d110      	bne.n	8004d12 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cf0:	4b30      	ldr	r3, [pc, #192]	; (8004db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004cf8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6892      	ldr	r2, [r2, #8]
 8004d00:	0211      	lsls	r1, r2, #8
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	68d2      	ldr	r2, [r2, #12]
 8004d06:	06d2      	lsls	r2, r2, #27
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	492a      	ldr	r1, [pc, #168]	; (8004db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	610b      	str	r3, [r1, #16]
 8004d10:	e027      	b.n	8004d62 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d112      	bne.n	8004d3e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d18:	4b26      	ldr	r3, [pc, #152]	; (8004db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004d20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6892      	ldr	r2, [r2, #8]
 8004d28:	0211      	lsls	r1, r2, #8
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6912      	ldr	r2, [r2, #16]
 8004d2e:	0852      	lsrs	r2, r2, #1
 8004d30:	3a01      	subs	r2, #1
 8004d32:	0552      	lsls	r2, r2, #21
 8004d34:	430a      	orrs	r2, r1
 8004d36:	491f      	ldr	r1, [pc, #124]	; (8004db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	610b      	str	r3, [r1, #16]
 8004d3c:	e011      	b.n	8004d62 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d3e:	4b1d      	ldr	r3, [pc, #116]	; (8004db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d46:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6892      	ldr	r2, [r2, #8]
 8004d4e:	0211      	lsls	r1, r2, #8
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	6952      	ldr	r2, [r2, #20]
 8004d54:	0852      	lsrs	r2, r2, #1
 8004d56:	3a01      	subs	r2, #1
 8004d58:	0652      	lsls	r2, r2, #25
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	4915      	ldr	r1, [pc, #84]	; (8004db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d62:	4b14      	ldr	r3, [pc, #80]	; (8004db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a13      	ldr	r2, [pc, #76]	; (8004db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d6c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d6e:	f7fd fcf1 	bl	8002754 <HAL_GetTick>
 8004d72:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d74:	e009      	b.n	8004d8a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d76:	f7fd fced 	bl	8002754 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d902      	bls.n	8004d8a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	73fb      	strb	r3, [r7, #15]
          break;
 8004d88:	e005      	b.n	8004d96 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d8a:	4b0a      	ldr	r3, [pc, #40]	; (8004db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0ef      	beq.n	8004d76 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d106      	bne.n	8004daa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d9c:	4b05      	ldr	r3, [pc, #20]	; (8004db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d9e:	691a      	ldr	r2, [r3, #16]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	4903      	ldr	r1, [pc, #12]	; (8004db4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	40021000 	.word	0x40021000

08004db8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e049      	b.n	8004e5e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d106      	bne.n	8004de4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7fd fbd0 	bl	8002584 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	3304      	adds	r3, #4
 8004df4:	4619      	mov	r1, r3
 8004df6:	4610      	mov	r0, r2
 8004df8:	f000 fb24 	bl	8005444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b086      	sub	sp, #24
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e097      	b.n	8004faa <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d106      	bne.n	8004e94 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7fd fb06 	bl	80024a0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6812      	ldr	r2, [r2, #0]
 8004ea6:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004eaa:	f023 0307 	bic.w	r3, r3, #7
 8004eae:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	4619      	mov	r1, r3
 8004eba:	4610      	mov	r0, r2
 8004ebc:	f000 fac2 	bl	8005444 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ee8:	f023 0303 	bic.w	r3, r3, #3
 8004eec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	689a      	ldr	r2, [r3, #8]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	021b      	lsls	r3, r3, #8
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004f06:	f023 030c 	bic.w	r3, r3, #12
 8004f0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	68da      	ldr	r2, [r3, #12]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	69db      	ldr	r3, [r3, #28]
 8004f20:	021b      	lsls	r3, r3, #8
 8004f22:	4313      	orrs	r3, r2
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	011a      	lsls	r2, r3, #4
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	031b      	lsls	r3, r3, #12
 8004f36:	4313      	orrs	r3, r2
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004f44:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004f4c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	011b      	lsls	r3, r3, #4
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3718      	adds	r7, #24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b084      	sub	sp, #16
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fc2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fca:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fd2:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fda:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d110      	bne.n	8005004 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d102      	bne.n	8004fee <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fe8:	7b7b      	ldrb	r3, [r7, #13]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d001      	beq.n	8004ff2 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e069      	b.n	80050c6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005002:	e031      	b.n	8005068 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	2b04      	cmp	r3, #4
 8005008:	d110      	bne.n	800502c <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800500a:	7bbb      	ldrb	r3, [r7, #14]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d102      	bne.n	8005016 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005010:	7b3b      	ldrb	r3, [r7, #12]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d001      	beq.n	800501a <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e055      	b.n	80050c6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2202      	movs	r2, #2
 800501e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2202      	movs	r2, #2
 8005026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800502a:	e01d      	b.n	8005068 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800502c:	7bfb      	ldrb	r3, [r7, #15]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d108      	bne.n	8005044 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005032:	7bbb      	ldrb	r3, [r7, #14]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d105      	bne.n	8005044 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005038:	7b7b      	ldrb	r3, [r7, #13]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d102      	bne.n	8005044 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800503e:	7b3b      	ldrb	r3, [r7, #12]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d001      	beq.n	8005048 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e03e      	b.n	80050c6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2202      	movs	r2, #2
 800504c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <HAL_TIM_Encoder_Start+0xc4>
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b04      	cmp	r3, #4
 8005072:	d008      	beq.n	8005086 <HAL_TIM_Encoder_Start+0xd4>
 8005074:	e00f      	b.n	8005096 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2201      	movs	r2, #1
 800507c:	2100      	movs	r1, #0
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fcc2 	bl	8005a08 <TIM_CCxChannelCmd>
      break;
 8005084:	e016      	b.n	80050b4 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2201      	movs	r2, #1
 800508c:	2104      	movs	r1, #4
 800508e:	4618      	mov	r0, r3
 8005090:	f000 fcba 	bl	8005a08 <TIM_CCxChannelCmd>
      break;
 8005094:	e00e      	b.n	80050b4 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2201      	movs	r2, #1
 800509c:	2100      	movs	r1, #0
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 fcb2 	bl	8005a08 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2201      	movs	r2, #1
 80050aa:	2104      	movs	r1, #4
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 fcab 	bl	8005a08 <TIM_CCxChannelCmd>
      break;
 80050b2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0201 	orr.w	r2, r2, #1
 80050c2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b082      	sub	sp, #8
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
 80050d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <HAL_TIM_Encoder_Stop+0x18>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d008      	beq.n	80050f6 <HAL_TIM_Encoder_Stop+0x28>
 80050e4:	e00f      	b.n	8005106 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2200      	movs	r2, #0
 80050ec:	2100      	movs	r1, #0
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fc8a 	bl	8005a08 <TIM_CCxChannelCmd>
      break;
 80050f4:	e016      	b.n	8005124 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2200      	movs	r2, #0
 80050fc:	2104      	movs	r1, #4
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fc82 	bl	8005a08 <TIM_CCxChannelCmd>
      break;
 8005104:	e00e      	b.n	8005124 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2200      	movs	r2, #0
 800510c:	2100      	movs	r1, #0
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fc7a 	bl	8005a08 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2200      	movs	r2, #0
 800511a:	2104      	movs	r1, #4
 800511c:	4618      	mov	r0, r3
 800511e:	f000 fc73 	bl	8005a08 <TIM_CCxChannelCmd>
      break;
 8005122:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6a1a      	ldr	r2, [r3, #32]
 800512a:	f241 1311 	movw	r3, #4369	; 0x1111
 800512e:	4013      	ands	r3, r2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10f      	bne.n	8005154 <HAL_TIM_Encoder_Stop+0x86>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6a1a      	ldr	r2, [r3, #32]
 800513a:	f240 4344 	movw	r3, #1092	; 0x444
 800513e:	4013      	ands	r3, r2
 8005140:	2b00      	cmp	r3, #0
 8005142:	d107      	bne.n	8005154 <HAL_TIM_Encoder_Stop+0x86>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 0201 	bic.w	r2, r2, #1
 8005152:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d002      	beq.n	8005160 <HAL_TIM_Encoder_Stop+0x92>
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b04      	cmp	r3, #4
 800515e:	d148      	bne.n	80051f2 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d104      	bne.n	8005170 <HAL_TIM_Encoder_Stop+0xa2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800516e:	e023      	b.n	80051b8 <HAL_TIM_Encoder_Stop+0xea>
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	2b04      	cmp	r3, #4
 8005174:	d104      	bne.n	8005180 <HAL_TIM_Encoder_Stop+0xb2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800517e:	e01b      	b.n	80051b8 <HAL_TIM_Encoder_Stop+0xea>
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	2b08      	cmp	r3, #8
 8005184:	d104      	bne.n	8005190 <HAL_TIM_Encoder_Stop+0xc2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800518e:	e013      	b.n	80051b8 <HAL_TIM_Encoder_Stop+0xea>
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	2b0c      	cmp	r3, #12
 8005194:	d104      	bne.n	80051a0 <HAL_TIM_Encoder_Stop+0xd2>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800519e:	e00b      	b.n	80051b8 <HAL_TIM_Encoder_Stop+0xea>
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	2b10      	cmp	r3, #16
 80051a4:	d104      	bne.n	80051b0 <HAL_TIM_Encoder_Stop+0xe2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051ae:	e003      	b.n	80051b8 <HAL_TIM_Encoder_Stop+0xea>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d104      	bne.n	80051c8 <HAL_TIM_Encoder_Stop+0xfa>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051c6:	e024      	b.n	8005212 <HAL_TIM_Encoder_Stop+0x144>
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	d104      	bne.n	80051d8 <HAL_TIM_Encoder_Stop+0x10a>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051d6:	e01c      	b.n	8005212 <HAL_TIM_Encoder_Stop+0x144>
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d104      	bne.n	80051e8 <HAL_TIM_Encoder_Stop+0x11a>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051e6:	e014      	b.n	8005212 <HAL_TIM_Encoder_Stop+0x144>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80051f0:	e00f      	b.n	8005212 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005228:	2300      	movs	r3, #0
 800522a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005232:	2b01      	cmp	r3, #1
 8005234:	d101      	bne.n	800523a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005236:	2302      	movs	r3, #2
 8005238:	e0ff      	b.n	800543a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b14      	cmp	r3, #20
 8005246:	f200 80f0 	bhi.w	800542a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800524a:	a201      	add	r2, pc, #4	; (adr r2, 8005250 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800524c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005250:	080052a5 	.word	0x080052a5
 8005254:	0800542b 	.word	0x0800542b
 8005258:	0800542b 	.word	0x0800542b
 800525c:	0800542b 	.word	0x0800542b
 8005260:	080052e5 	.word	0x080052e5
 8005264:	0800542b 	.word	0x0800542b
 8005268:	0800542b 	.word	0x0800542b
 800526c:	0800542b 	.word	0x0800542b
 8005270:	08005327 	.word	0x08005327
 8005274:	0800542b 	.word	0x0800542b
 8005278:	0800542b 	.word	0x0800542b
 800527c:	0800542b 	.word	0x0800542b
 8005280:	08005367 	.word	0x08005367
 8005284:	0800542b 	.word	0x0800542b
 8005288:	0800542b 	.word	0x0800542b
 800528c:	0800542b 	.word	0x0800542b
 8005290:	080053a9 	.word	0x080053a9
 8005294:	0800542b 	.word	0x0800542b
 8005298:	0800542b 	.word	0x0800542b
 800529c:	0800542b 	.word	0x0800542b
 80052a0:	080053e9 	.word	0x080053e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68b9      	ldr	r1, [r7, #8]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 f92e 	bl	800550c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699a      	ldr	r2, [r3, #24]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0208 	orr.w	r2, r2, #8
 80052be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	699a      	ldr	r2, [r3, #24]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0204 	bic.w	r2, r2, #4
 80052ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6999      	ldr	r1, [r3, #24]
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	691a      	ldr	r2, [r3, #16]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	619a      	str	r2, [r3, #24]
      break;
 80052e2:	e0a5      	b.n	8005430 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68b9      	ldr	r1, [r7, #8]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 f98a 	bl	8005604 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699a      	ldr	r2, [r3, #24]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699a      	ldr	r2, [r3, #24]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800530e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6999      	ldr	r1, [r3, #24]
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	021a      	lsls	r2, r3, #8
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	619a      	str	r2, [r3, #24]
      break;
 8005324:	e084      	b.n	8005430 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68b9      	ldr	r1, [r7, #8]
 800532c:	4618      	mov	r0, r3
 800532e:	f000 f9e3 	bl	80056f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	69da      	ldr	r2, [r3, #28]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f042 0208 	orr.w	r2, r2, #8
 8005340:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	69da      	ldr	r2, [r3, #28]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 0204 	bic.w	r2, r2, #4
 8005350:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	69d9      	ldr	r1, [r3, #28]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	691a      	ldr	r2, [r3, #16]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	61da      	str	r2, [r3, #28]
      break;
 8005364:	e064      	b.n	8005430 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68b9      	ldr	r1, [r7, #8]
 800536c:	4618      	mov	r0, r3
 800536e:	f000 fa3b 	bl	80057e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	69da      	ldr	r2, [r3, #28]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005380:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	69da      	ldr	r2, [r3, #28]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005390:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	69d9      	ldr	r1, [r3, #28]
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	021a      	lsls	r2, r3, #8
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	61da      	str	r2, [r3, #28]
      break;
 80053a6:	e043      	b.n	8005430 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68b9      	ldr	r1, [r7, #8]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 fa78 	bl	80058a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0208 	orr.w	r2, r2, #8
 80053c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0204 	bic.w	r2, r2, #4
 80053d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	691a      	ldr	r2, [r3, #16]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80053e6:	e023      	b.n	8005430 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68b9      	ldr	r1, [r7, #8]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 fab0 	bl	8005954 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005402:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005412:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	021a      	lsls	r2, r3, #8
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005428:	e002      	b.n	8005430 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	75fb      	strb	r3, [r7, #23]
      break;
 800542e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005438:	7dfb      	ldrb	r3, [r7, #23]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3718      	adds	r7, #24
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop

08005444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a2a      	ldr	r2, [pc, #168]	; (8005500 <TIM_Base_SetConfig+0xbc>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d003      	beq.n	8005464 <TIM_Base_SetConfig+0x20>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005462:	d108      	bne.n	8005476 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	4313      	orrs	r3, r2
 8005474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a21      	ldr	r2, [pc, #132]	; (8005500 <TIM_Base_SetConfig+0xbc>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00b      	beq.n	8005496 <TIM_Base_SetConfig+0x52>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005484:	d007      	beq.n	8005496 <TIM_Base_SetConfig+0x52>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a1e      	ldr	r2, [pc, #120]	; (8005504 <TIM_Base_SetConfig+0xc0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d003      	beq.n	8005496 <TIM_Base_SetConfig+0x52>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a1d      	ldr	r2, [pc, #116]	; (8005508 <TIM_Base_SetConfig+0xc4>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d108      	bne.n	80054a8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800549c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	689a      	ldr	r2, [r3, #8]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a0c      	ldr	r2, [pc, #48]	; (8005500 <TIM_Base_SetConfig+0xbc>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d007      	beq.n	80054e4 <TIM_Base_SetConfig+0xa0>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a0b      	ldr	r2, [pc, #44]	; (8005504 <TIM_Base_SetConfig+0xc0>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d003      	beq.n	80054e4 <TIM_Base_SetConfig+0xa0>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a0a      	ldr	r2, [pc, #40]	; (8005508 <TIM_Base_SetConfig+0xc4>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d103      	bne.n	80054ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	691a      	ldr	r2, [r3, #16]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	615a      	str	r2, [r3, #20]
}
 80054f2:	bf00      	nop
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	40012c00 	.word	0x40012c00
 8005504:	40014000 	.word	0x40014000
 8005508:	40014400 	.word	0x40014400

0800550c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	f023 0201 	bic.w	r2, r3, #1
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800553a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f023 0303 	bic.w	r3, r3, #3
 8005546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4313      	orrs	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f023 0302 	bic.w	r3, r3, #2
 8005558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	4313      	orrs	r3, r2
 8005562:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a24      	ldr	r2, [pc, #144]	; (80055f8 <TIM_OC1_SetConfig+0xec>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d007      	beq.n	800557c <TIM_OC1_SetConfig+0x70>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a23      	ldr	r2, [pc, #140]	; (80055fc <TIM_OC1_SetConfig+0xf0>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d003      	beq.n	800557c <TIM_OC1_SetConfig+0x70>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a22      	ldr	r2, [pc, #136]	; (8005600 <TIM_OC1_SetConfig+0xf4>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d10c      	bne.n	8005596 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f023 0308 	bic.w	r3, r3, #8
 8005582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	4313      	orrs	r3, r2
 800558c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f023 0304 	bic.w	r3, r3, #4
 8005594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a17      	ldr	r2, [pc, #92]	; (80055f8 <TIM_OC1_SetConfig+0xec>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d007      	beq.n	80055ae <TIM_OC1_SetConfig+0xa2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a16      	ldr	r2, [pc, #88]	; (80055fc <TIM_OC1_SetConfig+0xf0>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d003      	beq.n	80055ae <TIM_OC1_SetConfig+0xa2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a15      	ldr	r2, [pc, #84]	; (8005600 <TIM_OC1_SetConfig+0xf4>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d111      	bne.n	80055d2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	621a      	str	r2, [r3, #32]
}
 80055ec:	bf00      	nop
 80055ee:	371c      	adds	r7, #28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	40012c00 	.word	0x40012c00
 80055fc:	40014000 	.word	0x40014000
 8005600:	40014400 	.word	0x40014400

08005604 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	f023 0210 	bic.w	r2, r3, #16
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800563e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	021b      	lsls	r3, r3, #8
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	4313      	orrs	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f023 0320 	bic.w	r3, r3, #32
 8005652:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	011b      	lsls	r3, r3, #4
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4313      	orrs	r3, r2
 800565e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a22      	ldr	r2, [pc, #136]	; (80056ec <TIM_OC2_SetConfig+0xe8>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d10d      	bne.n	8005684 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800566e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	011b      	lsls	r3, r3, #4
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	4313      	orrs	r3, r2
 800567a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005682:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a19      	ldr	r2, [pc, #100]	; (80056ec <TIM_OC2_SetConfig+0xe8>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d007      	beq.n	800569c <TIM_OC2_SetConfig+0x98>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a18      	ldr	r2, [pc, #96]	; (80056f0 <TIM_OC2_SetConfig+0xec>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d003      	beq.n	800569c <TIM_OC2_SetConfig+0x98>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a17      	ldr	r2, [pc, #92]	; (80056f4 <TIM_OC2_SetConfig+0xf0>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d113      	bne.n	80056c4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	621a      	str	r2, [r3, #32]
}
 80056de:	bf00      	nop
 80056e0:	371c      	adds	r7, #28
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	40012c00 	.word	0x40012c00
 80056f0:	40014000 	.word	0x40014000
 80056f4:	40014400 	.word	0x40014400

080056f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f023 0303 	bic.w	r3, r3, #3
 8005732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	4313      	orrs	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005744:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	021b      	lsls	r3, r3, #8
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	4313      	orrs	r3, r2
 8005750:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a21      	ldr	r2, [pc, #132]	; (80057dc <TIM_OC3_SetConfig+0xe4>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d10d      	bne.n	8005776 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005760:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	021b      	lsls	r3, r3, #8
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	4313      	orrs	r3, r2
 800576c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005774:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a18      	ldr	r2, [pc, #96]	; (80057dc <TIM_OC3_SetConfig+0xe4>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d007      	beq.n	800578e <TIM_OC3_SetConfig+0x96>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a17      	ldr	r2, [pc, #92]	; (80057e0 <TIM_OC3_SetConfig+0xe8>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d003      	beq.n	800578e <TIM_OC3_SetConfig+0x96>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a16      	ldr	r2, [pc, #88]	; (80057e4 <TIM_OC3_SetConfig+0xec>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d113      	bne.n	80057b6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800579c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	011b      	lsls	r3, r3, #4
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	621a      	str	r2, [r3, #32]
}
 80057d0:	bf00      	nop
 80057d2:	371c      	adds	r7, #28
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	40012c00 	.word	0x40012c00
 80057e0:	40014000 	.word	0x40014000
 80057e4:	40014400 	.word	0x40014400

080057e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800581a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	021b      	lsls	r3, r3, #8
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	4313      	orrs	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005836:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	031b      	lsls	r3, r3, #12
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	4313      	orrs	r3, r2
 8005842:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a14      	ldr	r2, [pc, #80]	; (8005898 <TIM_OC4_SetConfig+0xb0>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d007      	beq.n	800585c <TIM_OC4_SetConfig+0x74>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a13      	ldr	r2, [pc, #76]	; (800589c <TIM_OC4_SetConfig+0xb4>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d003      	beq.n	800585c <TIM_OC4_SetConfig+0x74>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a12      	ldr	r2, [pc, #72]	; (80058a0 <TIM_OC4_SetConfig+0xb8>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d109      	bne.n	8005870 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005862:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	019b      	lsls	r3, r3, #6
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	4313      	orrs	r3, r2
 800586e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	621a      	str	r2, [r3, #32]
}
 800588a:	bf00      	nop
 800588c:	371c      	adds	r7, #28
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	40012c00 	.word	0x40012c00
 800589c:	40014000 	.word	0x40014000
 80058a0:	40014400 	.word	0x40014400

080058a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80058e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	041b      	lsls	r3, r3, #16
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a13      	ldr	r2, [pc, #76]	; (8005948 <TIM_OC5_SetConfig+0xa4>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d007      	beq.n	800590e <TIM_OC5_SetConfig+0x6a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a12      	ldr	r2, [pc, #72]	; (800594c <TIM_OC5_SetConfig+0xa8>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d003      	beq.n	800590e <TIM_OC5_SetConfig+0x6a>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a11      	ldr	r2, [pc, #68]	; (8005950 <TIM_OC5_SetConfig+0xac>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d109      	bne.n	8005922 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005914:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	021b      	lsls	r3, r3, #8
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	4313      	orrs	r3, r2
 8005920:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	621a      	str	r2, [r3, #32]
}
 800593c:	bf00      	nop
 800593e:	371c      	adds	r7, #28
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr
 8005948:	40012c00 	.word	0x40012c00
 800594c:	40014000 	.word	0x40014000
 8005950:	40014400 	.word	0x40014400

08005954 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800597a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	021b      	lsls	r3, r3, #8
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	4313      	orrs	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800599a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	051b      	lsls	r3, r3, #20
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a14      	ldr	r2, [pc, #80]	; (80059fc <TIM_OC6_SetConfig+0xa8>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d007      	beq.n	80059c0 <TIM_OC6_SetConfig+0x6c>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a13      	ldr	r2, [pc, #76]	; (8005a00 <TIM_OC6_SetConfig+0xac>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d003      	beq.n	80059c0 <TIM_OC6_SetConfig+0x6c>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a12      	ldr	r2, [pc, #72]	; (8005a04 <TIM_OC6_SetConfig+0xb0>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d109      	bne.n	80059d4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	029b      	lsls	r3, r3, #10
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	621a      	str	r2, [r3, #32]
}
 80059ee:	bf00      	nop
 80059f0:	371c      	adds	r7, #28
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	40012c00 	.word	0x40012c00
 8005a00:	40014000 	.word	0x40014000
 8005a04:	40014400 	.word	0x40014400

08005a08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	f003 031f 	and.w	r3, r3, #31
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6a1a      	ldr	r2, [r3, #32]
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	43db      	mvns	r3, r3
 8005a2a:	401a      	ands	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6a1a      	ldr	r2, [r3, #32]
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f003 031f 	and.w	r3, r3, #31
 8005a3a:	6879      	ldr	r1, [r7, #4]
 8005a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a40:	431a      	orrs	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	621a      	str	r2, [r3, #32]
}
 8005a46:	bf00      	nop
 8005a48:	371c      	adds	r7, #28
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
	...

08005a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d101      	bne.n	8005a6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	e04f      	b.n	8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a21      	ldr	r2, [pc, #132]	; (8005b18 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d108      	bne.n	8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a9c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a14      	ldr	r2, [pc, #80]	; (8005b18 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d009      	beq.n	8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad4:	d004      	beq.n	8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a10      	ldr	r2, [pc, #64]	; (8005b1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d10c      	bne.n	8005afa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ae6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	40012c00 	.word	0x40012c00
 8005b1c:	40014000 	.word	0x40014000

08005b20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d101      	bne.n	8005b3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b38:	2302      	movs	r3, #2
 8005b3a:	e060      	b.n	8005bfe <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	041b      	lsls	r3, r3, #16
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a14      	ldr	r2, [pc, #80]	; (8005c0c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d115      	bne.n	8005bec <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bca:	051b      	lsls	r3, r3, #20
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	40012c00 	.word	0x40012c00

08005c10 <__errno>:
 8005c10:	4b01      	ldr	r3, [pc, #4]	; (8005c18 <__errno+0x8>)
 8005c12:	6818      	ldr	r0, [r3, #0]
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	200000a4 	.word	0x200000a4

08005c1c <__libc_init_array>:
 8005c1c:	b570      	push	{r4, r5, r6, lr}
 8005c1e:	4d0d      	ldr	r5, [pc, #52]	; (8005c54 <__libc_init_array+0x38>)
 8005c20:	4c0d      	ldr	r4, [pc, #52]	; (8005c58 <__libc_init_array+0x3c>)
 8005c22:	1b64      	subs	r4, r4, r5
 8005c24:	10a4      	asrs	r4, r4, #2
 8005c26:	2600      	movs	r6, #0
 8005c28:	42a6      	cmp	r6, r4
 8005c2a:	d109      	bne.n	8005c40 <__libc_init_array+0x24>
 8005c2c:	4d0b      	ldr	r5, [pc, #44]	; (8005c5c <__libc_init_array+0x40>)
 8005c2e:	4c0c      	ldr	r4, [pc, #48]	; (8005c60 <__libc_init_array+0x44>)
 8005c30:	f003 fa56 	bl	80090e0 <_init>
 8005c34:	1b64      	subs	r4, r4, r5
 8005c36:	10a4      	asrs	r4, r4, #2
 8005c38:	2600      	movs	r6, #0
 8005c3a:	42a6      	cmp	r6, r4
 8005c3c:	d105      	bne.n	8005c4a <__libc_init_array+0x2e>
 8005c3e:	bd70      	pop	{r4, r5, r6, pc}
 8005c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c44:	4798      	blx	r3
 8005c46:	3601      	adds	r6, #1
 8005c48:	e7ee      	b.n	8005c28 <__libc_init_array+0xc>
 8005c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c4e:	4798      	blx	r3
 8005c50:	3601      	adds	r6, #1
 8005c52:	e7f2      	b.n	8005c3a <__libc_init_array+0x1e>
 8005c54:	08009610 	.word	0x08009610
 8005c58:	08009610 	.word	0x08009610
 8005c5c:	08009610 	.word	0x08009610
 8005c60:	08009614 	.word	0x08009614

08005c64 <memset>:
 8005c64:	4402      	add	r2, r0
 8005c66:	4603      	mov	r3, r0
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d100      	bne.n	8005c6e <memset+0xa>
 8005c6c:	4770      	bx	lr
 8005c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c72:	e7f9      	b.n	8005c68 <memset+0x4>

08005c74 <__cvt>:
 8005c74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c78:	ec55 4b10 	vmov	r4, r5, d0
 8005c7c:	2d00      	cmp	r5, #0
 8005c7e:	460e      	mov	r6, r1
 8005c80:	4619      	mov	r1, r3
 8005c82:	462b      	mov	r3, r5
 8005c84:	bfbb      	ittet	lt
 8005c86:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005c8a:	461d      	movlt	r5, r3
 8005c8c:	2300      	movge	r3, #0
 8005c8e:	232d      	movlt	r3, #45	; 0x2d
 8005c90:	700b      	strb	r3, [r1, #0]
 8005c92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c94:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005c98:	4691      	mov	r9, r2
 8005c9a:	f023 0820 	bic.w	r8, r3, #32
 8005c9e:	bfbc      	itt	lt
 8005ca0:	4622      	movlt	r2, r4
 8005ca2:	4614      	movlt	r4, r2
 8005ca4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ca8:	d005      	beq.n	8005cb6 <__cvt+0x42>
 8005caa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005cae:	d100      	bne.n	8005cb2 <__cvt+0x3e>
 8005cb0:	3601      	adds	r6, #1
 8005cb2:	2102      	movs	r1, #2
 8005cb4:	e000      	b.n	8005cb8 <__cvt+0x44>
 8005cb6:	2103      	movs	r1, #3
 8005cb8:	ab03      	add	r3, sp, #12
 8005cba:	9301      	str	r3, [sp, #4]
 8005cbc:	ab02      	add	r3, sp, #8
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	ec45 4b10 	vmov	d0, r4, r5
 8005cc4:	4653      	mov	r3, sl
 8005cc6:	4632      	mov	r2, r6
 8005cc8:	f000 fcea 	bl	80066a0 <_dtoa_r>
 8005ccc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005cd0:	4607      	mov	r7, r0
 8005cd2:	d102      	bne.n	8005cda <__cvt+0x66>
 8005cd4:	f019 0f01 	tst.w	r9, #1
 8005cd8:	d022      	beq.n	8005d20 <__cvt+0xac>
 8005cda:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005cde:	eb07 0906 	add.w	r9, r7, r6
 8005ce2:	d110      	bne.n	8005d06 <__cvt+0x92>
 8005ce4:	783b      	ldrb	r3, [r7, #0]
 8005ce6:	2b30      	cmp	r3, #48	; 0x30
 8005ce8:	d10a      	bne.n	8005d00 <__cvt+0x8c>
 8005cea:	2200      	movs	r2, #0
 8005cec:	2300      	movs	r3, #0
 8005cee:	4620      	mov	r0, r4
 8005cf0:	4629      	mov	r1, r5
 8005cf2:	f7fa fee9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cf6:	b918      	cbnz	r0, 8005d00 <__cvt+0x8c>
 8005cf8:	f1c6 0601 	rsb	r6, r6, #1
 8005cfc:	f8ca 6000 	str.w	r6, [sl]
 8005d00:	f8da 3000 	ldr.w	r3, [sl]
 8005d04:	4499      	add	r9, r3
 8005d06:	2200      	movs	r2, #0
 8005d08:	2300      	movs	r3, #0
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	4629      	mov	r1, r5
 8005d0e:	f7fa fedb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d12:	b108      	cbz	r0, 8005d18 <__cvt+0xa4>
 8005d14:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d18:	2230      	movs	r2, #48	; 0x30
 8005d1a:	9b03      	ldr	r3, [sp, #12]
 8005d1c:	454b      	cmp	r3, r9
 8005d1e:	d307      	bcc.n	8005d30 <__cvt+0xbc>
 8005d20:	9b03      	ldr	r3, [sp, #12]
 8005d22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d24:	1bdb      	subs	r3, r3, r7
 8005d26:	4638      	mov	r0, r7
 8005d28:	6013      	str	r3, [r2, #0]
 8005d2a:	b004      	add	sp, #16
 8005d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d30:	1c59      	adds	r1, r3, #1
 8005d32:	9103      	str	r1, [sp, #12]
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	e7f0      	b.n	8005d1a <__cvt+0xa6>

08005d38 <__exponent>:
 8005d38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2900      	cmp	r1, #0
 8005d3e:	bfb8      	it	lt
 8005d40:	4249      	neglt	r1, r1
 8005d42:	f803 2b02 	strb.w	r2, [r3], #2
 8005d46:	bfb4      	ite	lt
 8005d48:	222d      	movlt	r2, #45	; 0x2d
 8005d4a:	222b      	movge	r2, #43	; 0x2b
 8005d4c:	2909      	cmp	r1, #9
 8005d4e:	7042      	strb	r2, [r0, #1]
 8005d50:	dd2a      	ble.n	8005da8 <__exponent+0x70>
 8005d52:	f10d 0407 	add.w	r4, sp, #7
 8005d56:	46a4      	mov	ip, r4
 8005d58:	270a      	movs	r7, #10
 8005d5a:	46a6      	mov	lr, r4
 8005d5c:	460a      	mov	r2, r1
 8005d5e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005d62:	fb07 1516 	mls	r5, r7, r6, r1
 8005d66:	3530      	adds	r5, #48	; 0x30
 8005d68:	2a63      	cmp	r2, #99	; 0x63
 8005d6a:	f104 34ff 	add.w	r4, r4, #4294967295
 8005d6e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005d72:	4631      	mov	r1, r6
 8005d74:	dcf1      	bgt.n	8005d5a <__exponent+0x22>
 8005d76:	3130      	adds	r1, #48	; 0x30
 8005d78:	f1ae 0502 	sub.w	r5, lr, #2
 8005d7c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005d80:	1c44      	adds	r4, r0, #1
 8005d82:	4629      	mov	r1, r5
 8005d84:	4561      	cmp	r1, ip
 8005d86:	d30a      	bcc.n	8005d9e <__exponent+0x66>
 8005d88:	f10d 0209 	add.w	r2, sp, #9
 8005d8c:	eba2 020e 	sub.w	r2, r2, lr
 8005d90:	4565      	cmp	r5, ip
 8005d92:	bf88      	it	hi
 8005d94:	2200      	movhi	r2, #0
 8005d96:	4413      	add	r3, r2
 8005d98:	1a18      	subs	r0, r3, r0
 8005d9a:	b003      	add	sp, #12
 8005d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005da2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005da6:	e7ed      	b.n	8005d84 <__exponent+0x4c>
 8005da8:	2330      	movs	r3, #48	; 0x30
 8005daa:	3130      	adds	r1, #48	; 0x30
 8005dac:	7083      	strb	r3, [r0, #2]
 8005dae:	70c1      	strb	r1, [r0, #3]
 8005db0:	1d03      	adds	r3, r0, #4
 8005db2:	e7f1      	b.n	8005d98 <__exponent+0x60>

08005db4 <_printf_float>:
 8005db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db8:	ed2d 8b02 	vpush	{d8}
 8005dbc:	b08d      	sub	sp, #52	; 0x34
 8005dbe:	460c      	mov	r4, r1
 8005dc0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005dc4:	4616      	mov	r6, r2
 8005dc6:	461f      	mov	r7, r3
 8005dc8:	4605      	mov	r5, r0
 8005dca:	f001 fa57 	bl	800727c <_localeconv_r>
 8005dce:	f8d0 a000 	ldr.w	sl, [r0]
 8005dd2:	4650      	mov	r0, sl
 8005dd4:	f7fa f9fc 	bl	80001d0 <strlen>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	930a      	str	r3, [sp, #40]	; 0x28
 8005ddc:	6823      	ldr	r3, [r4, #0]
 8005dde:	9305      	str	r3, [sp, #20]
 8005de0:	f8d8 3000 	ldr.w	r3, [r8]
 8005de4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005de8:	3307      	adds	r3, #7
 8005dea:	f023 0307 	bic.w	r3, r3, #7
 8005dee:	f103 0208 	add.w	r2, r3, #8
 8005df2:	f8c8 2000 	str.w	r2, [r8]
 8005df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005dfe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005e02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005e06:	9307      	str	r3, [sp, #28]
 8005e08:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e0c:	ee08 0a10 	vmov	s16, r0
 8005e10:	4b9f      	ldr	r3, [pc, #636]	; (8006090 <_printf_float+0x2dc>)
 8005e12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e16:	f04f 32ff 	mov.w	r2, #4294967295
 8005e1a:	f7fa fe87 	bl	8000b2c <__aeabi_dcmpun>
 8005e1e:	bb88      	cbnz	r0, 8005e84 <_printf_float+0xd0>
 8005e20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e24:	4b9a      	ldr	r3, [pc, #616]	; (8006090 <_printf_float+0x2dc>)
 8005e26:	f04f 32ff 	mov.w	r2, #4294967295
 8005e2a:	f7fa fe61 	bl	8000af0 <__aeabi_dcmple>
 8005e2e:	bb48      	cbnz	r0, 8005e84 <_printf_float+0xd0>
 8005e30:	2200      	movs	r2, #0
 8005e32:	2300      	movs	r3, #0
 8005e34:	4640      	mov	r0, r8
 8005e36:	4649      	mov	r1, r9
 8005e38:	f7fa fe50 	bl	8000adc <__aeabi_dcmplt>
 8005e3c:	b110      	cbz	r0, 8005e44 <_printf_float+0x90>
 8005e3e:	232d      	movs	r3, #45	; 0x2d
 8005e40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e44:	4b93      	ldr	r3, [pc, #588]	; (8006094 <_printf_float+0x2e0>)
 8005e46:	4894      	ldr	r0, [pc, #592]	; (8006098 <_printf_float+0x2e4>)
 8005e48:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005e4c:	bf94      	ite	ls
 8005e4e:	4698      	movls	r8, r3
 8005e50:	4680      	movhi	r8, r0
 8005e52:	2303      	movs	r3, #3
 8005e54:	6123      	str	r3, [r4, #16]
 8005e56:	9b05      	ldr	r3, [sp, #20]
 8005e58:	f023 0204 	bic.w	r2, r3, #4
 8005e5c:	6022      	str	r2, [r4, #0]
 8005e5e:	f04f 0900 	mov.w	r9, #0
 8005e62:	9700      	str	r7, [sp, #0]
 8005e64:	4633      	mov	r3, r6
 8005e66:	aa0b      	add	r2, sp, #44	; 0x2c
 8005e68:	4621      	mov	r1, r4
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	f000 f9d8 	bl	8006220 <_printf_common>
 8005e70:	3001      	adds	r0, #1
 8005e72:	f040 8090 	bne.w	8005f96 <_printf_float+0x1e2>
 8005e76:	f04f 30ff 	mov.w	r0, #4294967295
 8005e7a:	b00d      	add	sp, #52	; 0x34
 8005e7c:	ecbd 8b02 	vpop	{d8}
 8005e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e84:	4642      	mov	r2, r8
 8005e86:	464b      	mov	r3, r9
 8005e88:	4640      	mov	r0, r8
 8005e8a:	4649      	mov	r1, r9
 8005e8c:	f7fa fe4e 	bl	8000b2c <__aeabi_dcmpun>
 8005e90:	b140      	cbz	r0, 8005ea4 <_printf_float+0xf0>
 8005e92:	464b      	mov	r3, r9
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	bfbc      	itt	lt
 8005e98:	232d      	movlt	r3, #45	; 0x2d
 8005e9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005e9e:	487f      	ldr	r0, [pc, #508]	; (800609c <_printf_float+0x2e8>)
 8005ea0:	4b7f      	ldr	r3, [pc, #508]	; (80060a0 <_printf_float+0x2ec>)
 8005ea2:	e7d1      	b.n	8005e48 <_printf_float+0x94>
 8005ea4:	6863      	ldr	r3, [r4, #4]
 8005ea6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005eaa:	9206      	str	r2, [sp, #24]
 8005eac:	1c5a      	adds	r2, r3, #1
 8005eae:	d13f      	bne.n	8005f30 <_printf_float+0x17c>
 8005eb0:	2306      	movs	r3, #6
 8005eb2:	6063      	str	r3, [r4, #4]
 8005eb4:	9b05      	ldr	r3, [sp, #20]
 8005eb6:	6861      	ldr	r1, [r4, #4]
 8005eb8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	9303      	str	r3, [sp, #12]
 8005ec0:	ab0a      	add	r3, sp, #40	; 0x28
 8005ec2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005ec6:	ab09      	add	r3, sp, #36	; 0x24
 8005ec8:	ec49 8b10 	vmov	d0, r8, r9
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	6022      	str	r2, [r4, #0]
 8005ed0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	f7ff fecd 	bl	8005c74 <__cvt>
 8005eda:	9b06      	ldr	r3, [sp, #24]
 8005edc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ede:	2b47      	cmp	r3, #71	; 0x47
 8005ee0:	4680      	mov	r8, r0
 8005ee2:	d108      	bne.n	8005ef6 <_printf_float+0x142>
 8005ee4:	1cc8      	adds	r0, r1, #3
 8005ee6:	db02      	blt.n	8005eee <_printf_float+0x13a>
 8005ee8:	6863      	ldr	r3, [r4, #4]
 8005eea:	4299      	cmp	r1, r3
 8005eec:	dd41      	ble.n	8005f72 <_printf_float+0x1be>
 8005eee:	f1ab 0b02 	sub.w	fp, fp, #2
 8005ef2:	fa5f fb8b 	uxtb.w	fp, fp
 8005ef6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005efa:	d820      	bhi.n	8005f3e <_printf_float+0x18a>
 8005efc:	3901      	subs	r1, #1
 8005efe:	465a      	mov	r2, fp
 8005f00:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f04:	9109      	str	r1, [sp, #36]	; 0x24
 8005f06:	f7ff ff17 	bl	8005d38 <__exponent>
 8005f0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f0c:	1813      	adds	r3, r2, r0
 8005f0e:	2a01      	cmp	r2, #1
 8005f10:	4681      	mov	r9, r0
 8005f12:	6123      	str	r3, [r4, #16]
 8005f14:	dc02      	bgt.n	8005f1c <_printf_float+0x168>
 8005f16:	6822      	ldr	r2, [r4, #0]
 8005f18:	07d2      	lsls	r2, r2, #31
 8005f1a:	d501      	bpl.n	8005f20 <_printf_float+0x16c>
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	6123      	str	r3, [r4, #16]
 8005f20:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d09c      	beq.n	8005e62 <_printf_float+0xae>
 8005f28:	232d      	movs	r3, #45	; 0x2d
 8005f2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f2e:	e798      	b.n	8005e62 <_printf_float+0xae>
 8005f30:	9a06      	ldr	r2, [sp, #24]
 8005f32:	2a47      	cmp	r2, #71	; 0x47
 8005f34:	d1be      	bne.n	8005eb4 <_printf_float+0x100>
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1bc      	bne.n	8005eb4 <_printf_float+0x100>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e7b9      	b.n	8005eb2 <_printf_float+0xfe>
 8005f3e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005f42:	d118      	bne.n	8005f76 <_printf_float+0x1c2>
 8005f44:	2900      	cmp	r1, #0
 8005f46:	6863      	ldr	r3, [r4, #4]
 8005f48:	dd0b      	ble.n	8005f62 <_printf_float+0x1ae>
 8005f4a:	6121      	str	r1, [r4, #16]
 8005f4c:	b913      	cbnz	r3, 8005f54 <_printf_float+0x1a0>
 8005f4e:	6822      	ldr	r2, [r4, #0]
 8005f50:	07d0      	lsls	r0, r2, #31
 8005f52:	d502      	bpl.n	8005f5a <_printf_float+0x1a6>
 8005f54:	3301      	adds	r3, #1
 8005f56:	440b      	add	r3, r1
 8005f58:	6123      	str	r3, [r4, #16]
 8005f5a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005f5c:	f04f 0900 	mov.w	r9, #0
 8005f60:	e7de      	b.n	8005f20 <_printf_float+0x16c>
 8005f62:	b913      	cbnz	r3, 8005f6a <_printf_float+0x1b6>
 8005f64:	6822      	ldr	r2, [r4, #0]
 8005f66:	07d2      	lsls	r2, r2, #31
 8005f68:	d501      	bpl.n	8005f6e <_printf_float+0x1ba>
 8005f6a:	3302      	adds	r3, #2
 8005f6c:	e7f4      	b.n	8005f58 <_printf_float+0x1a4>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e7f2      	b.n	8005f58 <_printf_float+0x1a4>
 8005f72:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005f76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f78:	4299      	cmp	r1, r3
 8005f7a:	db05      	blt.n	8005f88 <_printf_float+0x1d4>
 8005f7c:	6823      	ldr	r3, [r4, #0]
 8005f7e:	6121      	str	r1, [r4, #16]
 8005f80:	07d8      	lsls	r0, r3, #31
 8005f82:	d5ea      	bpl.n	8005f5a <_printf_float+0x1a6>
 8005f84:	1c4b      	adds	r3, r1, #1
 8005f86:	e7e7      	b.n	8005f58 <_printf_float+0x1a4>
 8005f88:	2900      	cmp	r1, #0
 8005f8a:	bfd4      	ite	le
 8005f8c:	f1c1 0202 	rsble	r2, r1, #2
 8005f90:	2201      	movgt	r2, #1
 8005f92:	4413      	add	r3, r2
 8005f94:	e7e0      	b.n	8005f58 <_printf_float+0x1a4>
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	055a      	lsls	r2, r3, #21
 8005f9a:	d407      	bmi.n	8005fac <_printf_float+0x1f8>
 8005f9c:	6923      	ldr	r3, [r4, #16]
 8005f9e:	4642      	mov	r2, r8
 8005fa0:	4631      	mov	r1, r6
 8005fa2:	4628      	mov	r0, r5
 8005fa4:	47b8      	blx	r7
 8005fa6:	3001      	adds	r0, #1
 8005fa8:	d12c      	bne.n	8006004 <_printf_float+0x250>
 8005faa:	e764      	b.n	8005e76 <_printf_float+0xc2>
 8005fac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005fb0:	f240 80e0 	bls.w	8006174 <_printf_float+0x3c0>
 8005fb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fb8:	2200      	movs	r2, #0
 8005fba:	2300      	movs	r3, #0
 8005fbc:	f7fa fd84 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	d034      	beq.n	800602e <_printf_float+0x27a>
 8005fc4:	4a37      	ldr	r2, [pc, #220]	; (80060a4 <_printf_float+0x2f0>)
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	4631      	mov	r1, r6
 8005fca:	4628      	mov	r0, r5
 8005fcc:	47b8      	blx	r7
 8005fce:	3001      	adds	r0, #1
 8005fd0:	f43f af51 	beq.w	8005e76 <_printf_float+0xc2>
 8005fd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	db02      	blt.n	8005fe2 <_printf_float+0x22e>
 8005fdc:	6823      	ldr	r3, [r4, #0]
 8005fde:	07d8      	lsls	r0, r3, #31
 8005fe0:	d510      	bpl.n	8006004 <_printf_float+0x250>
 8005fe2:	ee18 3a10 	vmov	r3, s16
 8005fe6:	4652      	mov	r2, sl
 8005fe8:	4631      	mov	r1, r6
 8005fea:	4628      	mov	r0, r5
 8005fec:	47b8      	blx	r7
 8005fee:	3001      	adds	r0, #1
 8005ff0:	f43f af41 	beq.w	8005e76 <_printf_float+0xc2>
 8005ff4:	f04f 0800 	mov.w	r8, #0
 8005ff8:	f104 091a 	add.w	r9, r4, #26
 8005ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ffe:	3b01      	subs	r3, #1
 8006000:	4543      	cmp	r3, r8
 8006002:	dc09      	bgt.n	8006018 <_printf_float+0x264>
 8006004:	6823      	ldr	r3, [r4, #0]
 8006006:	079b      	lsls	r3, r3, #30
 8006008:	f100 8105 	bmi.w	8006216 <_printf_float+0x462>
 800600c:	68e0      	ldr	r0, [r4, #12]
 800600e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006010:	4298      	cmp	r0, r3
 8006012:	bfb8      	it	lt
 8006014:	4618      	movlt	r0, r3
 8006016:	e730      	b.n	8005e7a <_printf_float+0xc6>
 8006018:	2301      	movs	r3, #1
 800601a:	464a      	mov	r2, r9
 800601c:	4631      	mov	r1, r6
 800601e:	4628      	mov	r0, r5
 8006020:	47b8      	blx	r7
 8006022:	3001      	adds	r0, #1
 8006024:	f43f af27 	beq.w	8005e76 <_printf_float+0xc2>
 8006028:	f108 0801 	add.w	r8, r8, #1
 800602c:	e7e6      	b.n	8005ffc <_printf_float+0x248>
 800602e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006030:	2b00      	cmp	r3, #0
 8006032:	dc39      	bgt.n	80060a8 <_printf_float+0x2f4>
 8006034:	4a1b      	ldr	r2, [pc, #108]	; (80060a4 <_printf_float+0x2f0>)
 8006036:	2301      	movs	r3, #1
 8006038:	4631      	mov	r1, r6
 800603a:	4628      	mov	r0, r5
 800603c:	47b8      	blx	r7
 800603e:	3001      	adds	r0, #1
 8006040:	f43f af19 	beq.w	8005e76 <_printf_float+0xc2>
 8006044:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006048:	4313      	orrs	r3, r2
 800604a:	d102      	bne.n	8006052 <_printf_float+0x29e>
 800604c:	6823      	ldr	r3, [r4, #0]
 800604e:	07d9      	lsls	r1, r3, #31
 8006050:	d5d8      	bpl.n	8006004 <_printf_float+0x250>
 8006052:	ee18 3a10 	vmov	r3, s16
 8006056:	4652      	mov	r2, sl
 8006058:	4631      	mov	r1, r6
 800605a:	4628      	mov	r0, r5
 800605c:	47b8      	blx	r7
 800605e:	3001      	adds	r0, #1
 8006060:	f43f af09 	beq.w	8005e76 <_printf_float+0xc2>
 8006064:	f04f 0900 	mov.w	r9, #0
 8006068:	f104 0a1a 	add.w	sl, r4, #26
 800606c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800606e:	425b      	negs	r3, r3
 8006070:	454b      	cmp	r3, r9
 8006072:	dc01      	bgt.n	8006078 <_printf_float+0x2c4>
 8006074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006076:	e792      	b.n	8005f9e <_printf_float+0x1ea>
 8006078:	2301      	movs	r3, #1
 800607a:	4652      	mov	r2, sl
 800607c:	4631      	mov	r1, r6
 800607e:	4628      	mov	r0, r5
 8006080:	47b8      	blx	r7
 8006082:	3001      	adds	r0, #1
 8006084:	f43f aef7 	beq.w	8005e76 <_printf_float+0xc2>
 8006088:	f109 0901 	add.w	r9, r9, #1
 800608c:	e7ee      	b.n	800606c <_printf_float+0x2b8>
 800608e:	bf00      	nop
 8006090:	7fefffff 	.word	0x7fefffff
 8006094:	080091c4 	.word	0x080091c4
 8006098:	080091c8 	.word	0x080091c8
 800609c:	080091d0 	.word	0x080091d0
 80060a0:	080091cc 	.word	0x080091cc
 80060a4:	080091d4 	.word	0x080091d4
 80060a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060ac:	429a      	cmp	r2, r3
 80060ae:	bfa8      	it	ge
 80060b0:	461a      	movge	r2, r3
 80060b2:	2a00      	cmp	r2, #0
 80060b4:	4691      	mov	r9, r2
 80060b6:	dc37      	bgt.n	8006128 <_printf_float+0x374>
 80060b8:	f04f 0b00 	mov.w	fp, #0
 80060bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060c0:	f104 021a 	add.w	r2, r4, #26
 80060c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060c6:	9305      	str	r3, [sp, #20]
 80060c8:	eba3 0309 	sub.w	r3, r3, r9
 80060cc:	455b      	cmp	r3, fp
 80060ce:	dc33      	bgt.n	8006138 <_printf_float+0x384>
 80060d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060d4:	429a      	cmp	r2, r3
 80060d6:	db3b      	blt.n	8006150 <_printf_float+0x39c>
 80060d8:	6823      	ldr	r3, [r4, #0]
 80060da:	07da      	lsls	r2, r3, #31
 80060dc:	d438      	bmi.n	8006150 <_printf_float+0x39c>
 80060de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060e0:	9a05      	ldr	r2, [sp, #20]
 80060e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060e4:	1a9a      	subs	r2, r3, r2
 80060e6:	eba3 0901 	sub.w	r9, r3, r1
 80060ea:	4591      	cmp	r9, r2
 80060ec:	bfa8      	it	ge
 80060ee:	4691      	movge	r9, r2
 80060f0:	f1b9 0f00 	cmp.w	r9, #0
 80060f4:	dc35      	bgt.n	8006162 <_printf_float+0x3ae>
 80060f6:	f04f 0800 	mov.w	r8, #0
 80060fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060fe:	f104 0a1a 	add.w	sl, r4, #26
 8006102:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006106:	1a9b      	subs	r3, r3, r2
 8006108:	eba3 0309 	sub.w	r3, r3, r9
 800610c:	4543      	cmp	r3, r8
 800610e:	f77f af79 	ble.w	8006004 <_printf_float+0x250>
 8006112:	2301      	movs	r3, #1
 8006114:	4652      	mov	r2, sl
 8006116:	4631      	mov	r1, r6
 8006118:	4628      	mov	r0, r5
 800611a:	47b8      	blx	r7
 800611c:	3001      	adds	r0, #1
 800611e:	f43f aeaa 	beq.w	8005e76 <_printf_float+0xc2>
 8006122:	f108 0801 	add.w	r8, r8, #1
 8006126:	e7ec      	b.n	8006102 <_printf_float+0x34e>
 8006128:	4613      	mov	r3, r2
 800612a:	4631      	mov	r1, r6
 800612c:	4642      	mov	r2, r8
 800612e:	4628      	mov	r0, r5
 8006130:	47b8      	blx	r7
 8006132:	3001      	adds	r0, #1
 8006134:	d1c0      	bne.n	80060b8 <_printf_float+0x304>
 8006136:	e69e      	b.n	8005e76 <_printf_float+0xc2>
 8006138:	2301      	movs	r3, #1
 800613a:	4631      	mov	r1, r6
 800613c:	4628      	mov	r0, r5
 800613e:	9205      	str	r2, [sp, #20]
 8006140:	47b8      	blx	r7
 8006142:	3001      	adds	r0, #1
 8006144:	f43f ae97 	beq.w	8005e76 <_printf_float+0xc2>
 8006148:	9a05      	ldr	r2, [sp, #20]
 800614a:	f10b 0b01 	add.w	fp, fp, #1
 800614e:	e7b9      	b.n	80060c4 <_printf_float+0x310>
 8006150:	ee18 3a10 	vmov	r3, s16
 8006154:	4652      	mov	r2, sl
 8006156:	4631      	mov	r1, r6
 8006158:	4628      	mov	r0, r5
 800615a:	47b8      	blx	r7
 800615c:	3001      	adds	r0, #1
 800615e:	d1be      	bne.n	80060de <_printf_float+0x32a>
 8006160:	e689      	b.n	8005e76 <_printf_float+0xc2>
 8006162:	9a05      	ldr	r2, [sp, #20]
 8006164:	464b      	mov	r3, r9
 8006166:	4442      	add	r2, r8
 8006168:	4631      	mov	r1, r6
 800616a:	4628      	mov	r0, r5
 800616c:	47b8      	blx	r7
 800616e:	3001      	adds	r0, #1
 8006170:	d1c1      	bne.n	80060f6 <_printf_float+0x342>
 8006172:	e680      	b.n	8005e76 <_printf_float+0xc2>
 8006174:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006176:	2a01      	cmp	r2, #1
 8006178:	dc01      	bgt.n	800617e <_printf_float+0x3ca>
 800617a:	07db      	lsls	r3, r3, #31
 800617c:	d538      	bpl.n	80061f0 <_printf_float+0x43c>
 800617e:	2301      	movs	r3, #1
 8006180:	4642      	mov	r2, r8
 8006182:	4631      	mov	r1, r6
 8006184:	4628      	mov	r0, r5
 8006186:	47b8      	blx	r7
 8006188:	3001      	adds	r0, #1
 800618a:	f43f ae74 	beq.w	8005e76 <_printf_float+0xc2>
 800618e:	ee18 3a10 	vmov	r3, s16
 8006192:	4652      	mov	r2, sl
 8006194:	4631      	mov	r1, r6
 8006196:	4628      	mov	r0, r5
 8006198:	47b8      	blx	r7
 800619a:	3001      	adds	r0, #1
 800619c:	f43f ae6b 	beq.w	8005e76 <_printf_float+0xc2>
 80061a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80061a4:	2200      	movs	r2, #0
 80061a6:	2300      	movs	r3, #0
 80061a8:	f7fa fc8e 	bl	8000ac8 <__aeabi_dcmpeq>
 80061ac:	b9d8      	cbnz	r0, 80061e6 <_printf_float+0x432>
 80061ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061b0:	f108 0201 	add.w	r2, r8, #1
 80061b4:	3b01      	subs	r3, #1
 80061b6:	4631      	mov	r1, r6
 80061b8:	4628      	mov	r0, r5
 80061ba:	47b8      	blx	r7
 80061bc:	3001      	adds	r0, #1
 80061be:	d10e      	bne.n	80061de <_printf_float+0x42a>
 80061c0:	e659      	b.n	8005e76 <_printf_float+0xc2>
 80061c2:	2301      	movs	r3, #1
 80061c4:	4652      	mov	r2, sl
 80061c6:	4631      	mov	r1, r6
 80061c8:	4628      	mov	r0, r5
 80061ca:	47b8      	blx	r7
 80061cc:	3001      	adds	r0, #1
 80061ce:	f43f ae52 	beq.w	8005e76 <_printf_float+0xc2>
 80061d2:	f108 0801 	add.w	r8, r8, #1
 80061d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061d8:	3b01      	subs	r3, #1
 80061da:	4543      	cmp	r3, r8
 80061dc:	dcf1      	bgt.n	80061c2 <_printf_float+0x40e>
 80061de:	464b      	mov	r3, r9
 80061e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80061e4:	e6dc      	b.n	8005fa0 <_printf_float+0x1ec>
 80061e6:	f04f 0800 	mov.w	r8, #0
 80061ea:	f104 0a1a 	add.w	sl, r4, #26
 80061ee:	e7f2      	b.n	80061d6 <_printf_float+0x422>
 80061f0:	2301      	movs	r3, #1
 80061f2:	4642      	mov	r2, r8
 80061f4:	e7df      	b.n	80061b6 <_printf_float+0x402>
 80061f6:	2301      	movs	r3, #1
 80061f8:	464a      	mov	r2, r9
 80061fa:	4631      	mov	r1, r6
 80061fc:	4628      	mov	r0, r5
 80061fe:	47b8      	blx	r7
 8006200:	3001      	adds	r0, #1
 8006202:	f43f ae38 	beq.w	8005e76 <_printf_float+0xc2>
 8006206:	f108 0801 	add.w	r8, r8, #1
 800620a:	68e3      	ldr	r3, [r4, #12]
 800620c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800620e:	1a5b      	subs	r3, r3, r1
 8006210:	4543      	cmp	r3, r8
 8006212:	dcf0      	bgt.n	80061f6 <_printf_float+0x442>
 8006214:	e6fa      	b.n	800600c <_printf_float+0x258>
 8006216:	f04f 0800 	mov.w	r8, #0
 800621a:	f104 0919 	add.w	r9, r4, #25
 800621e:	e7f4      	b.n	800620a <_printf_float+0x456>

08006220 <_printf_common>:
 8006220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006224:	4616      	mov	r6, r2
 8006226:	4699      	mov	r9, r3
 8006228:	688a      	ldr	r2, [r1, #8]
 800622a:	690b      	ldr	r3, [r1, #16]
 800622c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006230:	4293      	cmp	r3, r2
 8006232:	bfb8      	it	lt
 8006234:	4613      	movlt	r3, r2
 8006236:	6033      	str	r3, [r6, #0]
 8006238:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800623c:	4607      	mov	r7, r0
 800623e:	460c      	mov	r4, r1
 8006240:	b10a      	cbz	r2, 8006246 <_printf_common+0x26>
 8006242:	3301      	adds	r3, #1
 8006244:	6033      	str	r3, [r6, #0]
 8006246:	6823      	ldr	r3, [r4, #0]
 8006248:	0699      	lsls	r1, r3, #26
 800624a:	bf42      	ittt	mi
 800624c:	6833      	ldrmi	r3, [r6, #0]
 800624e:	3302      	addmi	r3, #2
 8006250:	6033      	strmi	r3, [r6, #0]
 8006252:	6825      	ldr	r5, [r4, #0]
 8006254:	f015 0506 	ands.w	r5, r5, #6
 8006258:	d106      	bne.n	8006268 <_printf_common+0x48>
 800625a:	f104 0a19 	add.w	sl, r4, #25
 800625e:	68e3      	ldr	r3, [r4, #12]
 8006260:	6832      	ldr	r2, [r6, #0]
 8006262:	1a9b      	subs	r3, r3, r2
 8006264:	42ab      	cmp	r3, r5
 8006266:	dc26      	bgt.n	80062b6 <_printf_common+0x96>
 8006268:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800626c:	1e13      	subs	r3, r2, #0
 800626e:	6822      	ldr	r2, [r4, #0]
 8006270:	bf18      	it	ne
 8006272:	2301      	movne	r3, #1
 8006274:	0692      	lsls	r2, r2, #26
 8006276:	d42b      	bmi.n	80062d0 <_printf_common+0xb0>
 8006278:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800627c:	4649      	mov	r1, r9
 800627e:	4638      	mov	r0, r7
 8006280:	47c0      	blx	r8
 8006282:	3001      	adds	r0, #1
 8006284:	d01e      	beq.n	80062c4 <_printf_common+0xa4>
 8006286:	6823      	ldr	r3, [r4, #0]
 8006288:	68e5      	ldr	r5, [r4, #12]
 800628a:	6832      	ldr	r2, [r6, #0]
 800628c:	f003 0306 	and.w	r3, r3, #6
 8006290:	2b04      	cmp	r3, #4
 8006292:	bf08      	it	eq
 8006294:	1aad      	subeq	r5, r5, r2
 8006296:	68a3      	ldr	r3, [r4, #8]
 8006298:	6922      	ldr	r2, [r4, #16]
 800629a:	bf0c      	ite	eq
 800629c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062a0:	2500      	movne	r5, #0
 80062a2:	4293      	cmp	r3, r2
 80062a4:	bfc4      	itt	gt
 80062a6:	1a9b      	subgt	r3, r3, r2
 80062a8:	18ed      	addgt	r5, r5, r3
 80062aa:	2600      	movs	r6, #0
 80062ac:	341a      	adds	r4, #26
 80062ae:	42b5      	cmp	r5, r6
 80062b0:	d11a      	bne.n	80062e8 <_printf_common+0xc8>
 80062b2:	2000      	movs	r0, #0
 80062b4:	e008      	b.n	80062c8 <_printf_common+0xa8>
 80062b6:	2301      	movs	r3, #1
 80062b8:	4652      	mov	r2, sl
 80062ba:	4649      	mov	r1, r9
 80062bc:	4638      	mov	r0, r7
 80062be:	47c0      	blx	r8
 80062c0:	3001      	adds	r0, #1
 80062c2:	d103      	bne.n	80062cc <_printf_common+0xac>
 80062c4:	f04f 30ff 	mov.w	r0, #4294967295
 80062c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062cc:	3501      	adds	r5, #1
 80062ce:	e7c6      	b.n	800625e <_printf_common+0x3e>
 80062d0:	18e1      	adds	r1, r4, r3
 80062d2:	1c5a      	adds	r2, r3, #1
 80062d4:	2030      	movs	r0, #48	; 0x30
 80062d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062da:	4422      	add	r2, r4
 80062dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062e4:	3302      	adds	r3, #2
 80062e6:	e7c7      	b.n	8006278 <_printf_common+0x58>
 80062e8:	2301      	movs	r3, #1
 80062ea:	4622      	mov	r2, r4
 80062ec:	4649      	mov	r1, r9
 80062ee:	4638      	mov	r0, r7
 80062f0:	47c0      	blx	r8
 80062f2:	3001      	adds	r0, #1
 80062f4:	d0e6      	beq.n	80062c4 <_printf_common+0xa4>
 80062f6:	3601      	adds	r6, #1
 80062f8:	e7d9      	b.n	80062ae <_printf_common+0x8e>
	...

080062fc <_printf_i>:
 80062fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006300:	7e0f      	ldrb	r7, [r1, #24]
 8006302:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006304:	2f78      	cmp	r7, #120	; 0x78
 8006306:	4691      	mov	r9, r2
 8006308:	4680      	mov	r8, r0
 800630a:	460c      	mov	r4, r1
 800630c:	469a      	mov	sl, r3
 800630e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006312:	d807      	bhi.n	8006324 <_printf_i+0x28>
 8006314:	2f62      	cmp	r7, #98	; 0x62
 8006316:	d80a      	bhi.n	800632e <_printf_i+0x32>
 8006318:	2f00      	cmp	r7, #0
 800631a:	f000 80d8 	beq.w	80064ce <_printf_i+0x1d2>
 800631e:	2f58      	cmp	r7, #88	; 0x58
 8006320:	f000 80a3 	beq.w	800646a <_printf_i+0x16e>
 8006324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006328:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800632c:	e03a      	b.n	80063a4 <_printf_i+0xa8>
 800632e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006332:	2b15      	cmp	r3, #21
 8006334:	d8f6      	bhi.n	8006324 <_printf_i+0x28>
 8006336:	a101      	add	r1, pc, #4	; (adr r1, 800633c <_printf_i+0x40>)
 8006338:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800633c:	08006395 	.word	0x08006395
 8006340:	080063a9 	.word	0x080063a9
 8006344:	08006325 	.word	0x08006325
 8006348:	08006325 	.word	0x08006325
 800634c:	08006325 	.word	0x08006325
 8006350:	08006325 	.word	0x08006325
 8006354:	080063a9 	.word	0x080063a9
 8006358:	08006325 	.word	0x08006325
 800635c:	08006325 	.word	0x08006325
 8006360:	08006325 	.word	0x08006325
 8006364:	08006325 	.word	0x08006325
 8006368:	080064b5 	.word	0x080064b5
 800636c:	080063d9 	.word	0x080063d9
 8006370:	08006497 	.word	0x08006497
 8006374:	08006325 	.word	0x08006325
 8006378:	08006325 	.word	0x08006325
 800637c:	080064d7 	.word	0x080064d7
 8006380:	08006325 	.word	0x08006325
 8006384:	080063d9 	.word	0x080063d9
 8006388:	08006325 	.word	0x08006325
 800638c:	08006325 	.word	0x08006325
 8006390:	0800649f 	.word	0x0800649f
 8006394:	682b      	ldr	r3, [r5, #0]
 8006396:	1d1a      	adds	r2, r3, #4
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	602a      	str	r2, [r5, #0]
 800639c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063a4:	2301      	movs	r3, #1
 80063a6:	e0a3      	b.n	80064f0 <_printf_i+0x1f4>
 80063a8:	6820      	ldr	r0, [r4, #0]
 80063aa:	6829      	ldr	r1, [r5, #0]
 80063ac:	0606      	lsls	r6, r0, #24
 80063ae:	f101 0304 	add.w	r3, r1, #4
 80063b2:	d50a      	bpl.n	80063ca <_printf_i+0xce>
 80063b4:	680e      	ldr	r6, [r1, #0]
 80063b6:	602b      	str	r3, [r5, #0]
 80063b8:	2e00      	cmp	r6, #0
 80063ba:	da03      	bge.n	80063c4 <_printf_i+0xc8>
 80063bc:	232d      	movs	r3, #45	; 0x2d
 80063be:	4276      	negs	r6, r6
 80063c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063c4:	485e      	ldr	r0, [pc, #376]	; (8006540 <_printf_i+0x244>)
 80063c6:	230a      	movs	r3, #10
 80063c8:	e019      	b.n	80063fe <_printf_i+0x102>
 80063ca:	680e      	ldr	r6, [r1, #0]
 80063cc:	602b      	str	r3, [r5, #0]
 80063ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80063d2:	bf18      	it	ne
 80063d4:	b236      	sxthne	r6, r6
 80063d6:	e7ef      	b.n	80063b8 <_printf_i+0xbc>
 80063d8:	682b      	ldr	r3, [r5, #0]
 80063da:	6820      	ldr	r0, [r4, #0]
 80063dc:	1d19      	adds	r1, r3, #4
 80063de:	6029      	str	r1, [r5, #0]
 80063e0:	0601      	lsls	r1, r0, #24
 80063e2:	d501      	bpl.n	80063e8 <_printf_i+0xec>
 80063e4:	681e      	ldr	r6, [r3, #0]
 80063e6:	e002      	b.n	80063ee <_printf_i+0xf2>
 80063e8:	0646      	lsls	r6, r0, #25
 80063ea:	d5fb      	bpl.n	80063e4 <_printf_i+0xe8>
 80063ec:	881e      	ldrh	r6, [r3, #0]
 80063ee:	4854      	ldr	r0, [pc, #336]	; (8006540 <_printf_i+0x244>)
 80063f0:	2f6f      	cmp	r7, #111	; 0x6f
 80063f2:	bf0c      	ite	eq
 80063f4:	2308      	moveq	r3, #8
 80063f6:	230a      	movne	r3, #10
 80063f8:	2100      	movs	r1, #0
 80063fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063fe:	6865      	ldr	r5, [r4, #4]
 8006400:	60a5      	str	r5, [r4, #8]
 8006402:	2d00      	cmp	r5, #0
 8006404:	bfa2      	ittt	ge
 8006406:	6821      	ldrge	r1, [r4, #0]
 8006408:	f021 0104 	bicge.w	r1, r1, #4
 800640c:	6021      	strge	r1, [r4, #0]
 800640e:	b90e      	cbnz	r6, 8006414 <_printf_i+0x118>
 8006410:	2d00      	cmp	r5, #0
 8006412:	d04d      	beq.n	80064b0 <_printf_i+0x1b4>
 8006414:	4615      	mov	r5, r2
 8006416:	fbb6 f1f3 	udiv	r1, r6, r3
 800641a:	fb03 6711 	mls	r7, r3, r1, r6
 800641e:	5dc7      	ldrb	r7, [r0, r7]
 8006420:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006424:	4637      	mov	r7, r6
 8006426:	42bb      	cmp	r3, r7
 8006428:	460e      	mov	r6, r1
 800642a:	d9f4      	bls.n	8006416 <_printf_i+0x11a>
 800642c:	2b08      	cmp	r3, #8
 800642e:	d10b      	bne.n	8006448 <_printf_i+0x14c>
 8006430:	6823      	ldr	r3, [r4, #0]
 8006432:	07de      	lsls	r6, r3, #31
 8006434:	d508      	bpl.n	8006448 <_printf_i+0x14c>
 8006436:	6923      	ldr	r3, [r4, #16]
 8006438:	6861      	ldr	r1, [r4, #4]
 800643a:	4299      	cmp	r1, r3
 800643c:	bfde      	ittt	le
 800643e:	2330      	movle	r3, #48	; 0x30
 8006440:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006444:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006448:	1b52      	subs	r2, r2, r5
 800644a:	6122      	str	r2, [r4, #16]
 800644c:	f8cd a000 	str.w	sl, [sp]
 8006450:	464b      	mov	r3, r9
 8006452:	aa03      	add	r2, sp, #12
 8006454:	4621      	mov	r1, r4
 8006456:	4640      	mov	r0, r8
 8006458:	f7ff fee2 	bl	8006220 <_printf_common>
 800645c:	3001      	adds	r0, #1
 800645e:	d14c      	bne.n	80064fa <_printf_i+0x1fe>
 8006460:	f04f 30ff 	mov.w	r0, #4294967295
 8006464:	b004      	add	sp, #16
 8006466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800646a:	4835      	ldr	r0, [pc, #212]	; (8006540 <_printf_i+0x244>)
 800646c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006470:	6829      	ldr	r1, [r5, #0]
 8006472:	6823      	ldr	r3, [r4, #0]
 8006474:	f851 6b04 	ldr.w	r6, [r1], #4
 8006478:	6029      	str	r1, [r5, #0]
 800647a:	061d      	lsls	r5, r3, #24
 800647c:	d514      	bpl.n	80064a8 <_printf_i+0x1ac>
 800647e:	07df      	lsls	r7, r3, #31
 8006480:	bf44      	itt	mi
 8006482:	f043 0320 	orrmi.w	r3, r3, #32
 8006486:	6023      	strmi	r3, [r4, #0]
 8006488:	b91e      	cbnz	r6, 8006492 <_printf_i+0x196>
 800648a:	6823      	ldr	r3, [r4, #0]
 800648c:	f023 0320 	bic.w	r3, r3, #32
 8006490:	6023      	str	r3, [r4, #0]
 8006492:	2310      	movs	r3, #16
 8006494:	e7b0      	b.n	80063f8 <_printf_i+0xfc>
 8006496:	6823      	ldr	r3, [r4, #0]
 8006498:	f043 0320 	orr.w	r3, r3, #32
 800649c:	6023      	str	r3, [r4, #0]
 800649e:	2378      	movs	r3, #120	; 0x78
 80064a0:	4828      	ldr	r0, [pc, #160]	; (8006544 <_printf_i+0x248>)
 80064a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064a6:	e7e3      	b.n	8006470 <_printf_i+0x174>
 80064a8:	0659      	lsls	r1, r3, #25
 80064aa:	bf48      	it	mi
 80064ac:	b2b6      	uxthmi	r6, r6
 80064ae:	e7e6      	b.n	800647e <_printf_i+0x182>
 80064b0:	4615      	mov	r5, r2
 80064b2:	e7bb      	b.n	800642c <_printf_i+0x130>
 80064b4:	682b      	ldr	r3, [r5, #0]
 80064b6:	6826      	ldr	r6, [r4, #0]
 80064b8:	6961      	ldr	r1, [r4, #20]
 80064ba:	1d18      	adds	r0, r3, #4
 80064bc:	6028      	str	r0, [r5, #0]
 80064be:	0635      	lsls	r5, r6, #24
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	d501      	bpl.n	80064c8 <_printf_i+0x1cc>
 80064c4:	6019      	str	r1, [r3, #0]
 80064c6:	e002      	b.n	80064ce <_printf_i+0x1d2>
 80064c8:	0670      	lsls	r0, r6, #25
 80064ca:	d5fb      	bpl.n	80064c4 <_printf_i+0x1c8>
 80064cc:	8019      	strh	r1, [r3, #0]
 80064ce:	2300      	movs	r3, #0
 80064d0:	6123      	str	r3, [r4, #16]
 80064d2:	4615      	mov	r5, r2
 80064d4:	e7ba      	b.n	800644c <_printf_i+0x150>
 80064d6:	682b      	ldr	r3, [r5, #0]
 80064d8:	1d1a      	adds	r2, r3, #4
 80064da:	602a      	str	r2, [r5, #0]
 80064dc:	681d      	ldr	r5, [r3, #0]
 80064de:	6862      	ldr	r2, [r4, #4]
 80064e0:	2100      	movs	r1, #0
 80064e2:	4628      	mov	r0, r5
 80064e4:	f7f9 fe7c 	bl	80001e0 <memchr>
 80064e8:	b108      	cbz	r0, 80064ee <_printf_i+0x1f2>
 80064ea:	1b40      	subs	r0, r0, r5
 80064ec:	6060      	str	r0, [r4, #4]
 80064ee:	6863      	ldr	r3, [r4, #4]
 80064f0:	6123      	str	r3, [r4, #16]
 80064f2:	2300      	movs	r3, #0
 80064f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064f8:	e7a8      	b.n	800644c <_printf_i+0x150>
 80064fa:	6923      	ldr	r3, [r4, #16]
 80064fc:	462a      	mov	r2, r5
 80064fe:	4649      	mov	r1, r9
 8006500:	4640      	mov	r0, r8
 8006502:	47d0      	blx	sl
 8006504:	3001      	adds	r0, #1
 8006506:	d0ab      	beq.n	8006460 <_printf_i+0x164>
 8006508:	6823      	ldr	r3, [r4, #0]
 800650a:	079b      	lsls	r3, r3, #30
 800650c:	d413      	bmi.n	8006536 <_printf_i+0x23a>
 800650e:	68e0      	ldr	r0, [r4, #12]
 8006510:	9b03      	ldr	r3, [sp, #12]
 8006512:	4298      	cmp	r0, r3
 8006514:	bfb8      	it	lt
 8006516:	4618      	movlt	r0, r3
 8006518:	e7a4      	b.n	8006464 <_printf_i+0x168>
 800651a:	2301      	movs	r3, #1
 800651c:	4632      	mov	r2, r6
 800651e:	4649      	mov	r1, r9
 8006520:	4640      	mov	r0, r8
 8006522:	47d0      	blx	sl
 8006524:	3001      	adds	r0, #1
 8006526:	d09b      	beq.n	8006460 <_printf_i+0x164>
 8006528:	3501      	adds	r5, #1
 800652a:	68e3      	ldr	r3, [r4, #12]
 800652c:	9903      	ldr	r1, [sp, #12]
 800652e:	1a5b      	subs	r3, r3, r1
 8006530:	42ab      	cmp	r3, r5
 8006532:	dcf2      	bgt.n	800651a <_printf_i+0x21e>
 8006534:	e7eb      	b.n	800650e <_printf_i+0x212>
 8006536:	2500      	movs	r5, #0
 8006538:	f104 0619 	add.w	r6, r4, #25
 800653c:	e7f5      	b.n	800652a <_printf_i+0x22e>
 800653e:	bf00      	nop
 8006540:	080091d6 	.word	0x080091d6
 8006544:	080091e7 	.word	0x080091e7

08006548 <siprintf>:
 8006548:	b40e      	push	{r1, r2, r3}
 800654a:	b500      	push	{lr}
 800654c:	b09c      	sub	sp, #112	; 0x70
 800654e:	ab1d      	add	r3, sp, #116	; 0x74
 8006550:	9002      	str	r0, [sp, #8]
 8006552:	9006      	str	r0, [sp, #24]
 8006554:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006558:	4809      	ldr	r0, [pc, #36]	; (8006580 <siprintf+0x38>)
 800655a:	9107      	str	r1, [sp, #28]
 800655c:	9104      	str	r1, [sp, #16]
 800655e:	4909      	ldr	r1, [pc, #36]	; (8006584 <siprintf+0x3c>)
 8006560:	f853 2b04 	ldr.w	r2, [r3], #4
 8006564:	9105      	str	r1, [sp, #20]
 8006566:	6800      	ldr	r0, [r0, #0]
 8006568:	9301      	str	r3, [sp, #4]
 800656a:	a902      	add	r1, sp, #8
 800656c:	f001 fb76 	bl	8007c5c <_svfiprintf_r>
 8006570:	9b02      	ldr	r3, [sp, #8]
 8006572:	2200      	movs	r2, #0
 8006574:	701a      	strb	r2, [r3, #0]
 8006576:	b01c      	add	sp, #112	; 0x70
 8006578:	f85d eb04 	ldr.w	lr, [sp], #4
 800657c:	b003      	add	sp, #12
 800657e:	4770      	bx	lr
 8006580:	200000a4 	.word	0x200000a4
 8006584:	ffff0208 	.word	0xffff0208

08006588 <quorem>:
 8006588:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800658c:	6903      	ldr	r3, [r0, #16]
 800658e:	690c      	ldr	r4, [r1, #16]
 8006590:	42a3      	cmp	r3, r4
 8006592:	4607      	mov	r7, r0
 8006594:	f2c0 8081 	blt.w	800669a <quorem+0x112>
 8006598:	3c01      	subs	r4, #1
 800659a:	f101 0814 	add.w	r8, r1, #20
 800659e:	f100 0514 	add.w	r5, r0, #20
 80065a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065a6:	9301      	str	r3, [sp, #4]
 80065a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80065ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065b0:	3301      	adds	r3, #1
 80065b2:	429a      	cmp	r2, r3
 80065b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80065b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80065bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80065c0:	d331      	bcc.n	8006626 <quorem+0x9e>
 80065c2:	f04f 0e00 	mov.w	lr, #0
 80065c6:	4640      	mov	r0, r8
 80065c8:	46ac      	mov	ip, r5
 80065ca:	46f2      	mov	sl, lr
 80065cc:	f850 2b04 	ldr.w	r2, [r0], #4
 80065d0:	b293      	uxth	r3, r2
 80065d2:	fb06 e303 	mla	r3, r6, r3, lr
 80065d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80065da:	b29b      	uxth	r3, r3
 80065dc:	ebaa 0303 	sub.w	r3, sl, r3
 80065e0:	f8dc a000 	ldr.w	sl, [ip]
 80065e4:	0c12      	lsrs	r2, r2, #16
 80065e6:	fa13 f38a 	uxtah	r3, r3, sl
 80065ea:	fb06 e202 	mla	r2, r6, r2, lr
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	9b00      	ldr	r3, [sp, #0]
 80065f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80065f6:	b292      	uxth	r2, r2
 80065f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80065fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006600:	f8bd 3000 	ldrh.w	r3, [sp]
 8006604:	4581      	cmp	r9, r0
 8006606:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800660a:	f84c 3b04 	str.w	r3, [ip], #4
 800660e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006612:	d2db      	bcs.n	80065cc <quorem+0x44>
 8006614:	f855 300b 	ldr.w	r3, [r5, fp]
 8006618:	b92b      	cbnz	r3, 8006626 <quorem+0x9e>
 800661a:	9b01      	ldr	r3, [sp, #4]
 800661c:	3b04      	subs	r3, #4
 800661e:	429d      	cmp	r5, r3
 8006620:	461a      	mov	r2, r3
 8006622:	d32e      	bcc.n	8006682 <quorem+0xfa>
 8006624:	613c      	str	r4, [r7, #16]
 8006626:	4638      	mov	r0, r7
 8006628:	f001 f8c4 	bl	80077b4 <__mcmp>
 800662c:	2800      	cmp	r0, #0
 800662e:	db24      	blt.n	800667a <quorem+0xf2>
 8006630:	3601      	adds	r6, #1
 8006632:	4628      	mov	r0, r5
 8006634:	f04f 0c00 	mov.w	ip, #0
 8006638:	f858 2b04 	ldr.w	r2, [r8], #4
 800663c:	f8d0 e000 	ldr.w	lr, [r0]
 8006640:	b293      	uxth	r3, r2
 8006642:	ebac 0303 	sub.w	r3, ip, r3
 8006646:	0c12      	lsrs	r2, r2, #16
 8006648:	fa13 f38e 	uxtah	r3, r3, lr
 800664c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006650:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006654:	b29b      	uxth	r3, r3
 8006656:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800665a:	45c1      	cmp	r9, r8
 800665c:	f840 3b04 	str.w	r3, [r0], #4
 8006660:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006664:	d2e8      	bcs.n	8006638 <quorem+0xb0>
 8006666:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800666a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800666e:	b922      	cbnz	r2, 800667a <quorem+0xf2>
 8006670:	3b04      	subs	r3, #4
 8006672:	429d      	cmp	r5, r3
 8006674:	461a      	mov	r2, r3
 8006676:	d30a      	bcc.n	800668e <quorem+0x106>
 8006678:	613c      	str	r4, [r7, #16]
 800667a:	4630      	mov	r0, r6
 800667c:	b003      	add	sp, #12
 800667e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006682:	6812      	ldr	r2, [r2, #0]
 8006684:	3b04      	subs	r3, #4
 8006686:	2a00      	cmp	r2, #0
 8006688:	d1cc      	bne.n	8006624 <quorem+0x9c>
 800668a:	3c01      	subs	r4, #1
 800668c:	e7c7      	b.n	800661e <quorem+0x96>
 800668e:	6812      	ldr	r2, [r2, #0]
 8006690:	3b04      	subs	r3, #4
 8006692:	2a00      	cmp	r2, #0
 8006694:	d1f0      	bne.n	8006678 <quorem+0xf0>
 8006696:	3c01      	subs	r4, #1
 8006698:	e7eb      	b.n	8006672 <quorem+0xea>
 800669a:	2000      	movs	r0, #0
 800669c:	e7ee      	b.n	800667c <quorem+0xf4>
	...

080066a0 <_dtoa_r>:
 80066a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a4:	ed2d 8b04 	vpush	{d8-d9}
 80066a8:	ec57 6b10 	vmov	r6, r7, d0
 80066ac:	b093      	sub	sp, #76	; 0x4c
 80066ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80066b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80066b4:	9106      	str	r1, [sp, #24]
 80066b6:	ee10 aa10 	vmov	sl, s0
 80066ba:	4604      	mov	r4, r0
 80066bc:	9209      	str	r2, [sp, #36]	; 0x24
 80066be:	930c      	str	r3, [sp, #48]	; 0x30
 80066c0:	46bb      	mov	fp, r7
 80066c2:	b975      	cbnz	r5, 80066e2 <_dtoa_r+0x42>
 80066c4:	2010      	movs	r0, #16
 80066c6:	f000 fddd 	bl	8007284 <malloc>
 80066ca:	4602      	mov	r2, r0
 80066cc:	6260      	str	r0, [r4, #36]	; 0x24
 80066ce:	b920      	cbnz	r0, 80066da <_dtoa_r+0x3a>
 80066d0:	4ba7      	ldr	r3, [pc, #668]	; (8006970 <_dtoa_r+0x2d0>)
 80066d2:	21ea      	movs	r1, #234	; 0xea
 80066d4:	48a7      	ldr	r0, [pc, #668]	; (8006974 <_dtoa_r+0x2d4>)
 80066d6:	f001 fbd1 	bl	8007e7c <__assert_func>
 80066da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80066de:	6005      	str	r5, [r0, #0]
 80066e0:	60c5      	str	r5, [r0, #12]
 80066e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066e4:	6819      	ldr	r1, [r3, #0]
 80066e6:	b151      	cbz	r1, 80066fe <_dtoa_r+0x5e>
 80066e8:	685a      	ldr	r2, [r3, #4]
 80066ea:	604a      	str	r2, [r1, #4]
 80066ec:	2301      	movs	r3, #1
 80066ee:	4093      	lsls	r3, r2
 80066f0:	608b      	str	r3, [r1, #8]
 80066f2:	4620      	mov	r0, r4
 80066f4:	f000 fe1c 	bl	8007330 <_Bfree>
 80066f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066fa:	2200      	movs	r2, #0
 80066fc:	601a      	str	r2, [r3, #0]
 80066fe:	1e3b      	subs	r3, r7, #0
 8006700:	bfaa      	itet	ge
 8006702:	2300      	movge	r3, #0
 8006704:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006708:	f8c8 3000 	strge.w	r3, [r8]
 800670c:	4b9a      	ldr	r3, [pc, #616]	; (8006978 <_dtoa_r+0x2d8>)
 800670e:	bfbc      	itt	lt
 8006710:	2201      	movlt	r2, #1
 8006712:	f8c8 2000 	strlt.w	r2, [r8]
 8006716:	ea33 030b 	bics.w	r3, r3, fp
 800671a:	d11b      	bne.n	8006754 <_dtoa_r+0xb4>
 800671c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800671e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006722:	6013      	str	r3, [r2, #0]
 8006724:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006728:	4333      	orrs	r3, r6
 800672a:	f000 8592 	beq.w	8007252 <_dtoa_r+0xbb2>
 800672e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006730:	b963      	cbnz	r3, 800674c <_dtoa_r+0xac>
 8006732:	4b92      	ldr	r3, [pc, #584]	; (800697c <_dtoa_r+0x2dc>)
 8006734:	e022      	b.n	800677c <_dtoa_r+0xdc>
 8006736:	4b92      	ldr	r3, [pc, #584]	; (8006980 <_dtoa_r+0x2e0>)
 8006738:	9301      	str	r3, [sp, #4]
 800673a:	3308      	adds	r3, #8
 800673c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800673e:	6013      	str	r3, [r2, #0]
 8006740:	9801      	ldr	r0, [sp, #4]
 8006742:	b013      	add	sp, #76	; 0x4c
 8006744:	ecbd 8b04 	vpop	{d8-d9}
 8006748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800674c:	4b8b      	ldr	r3, [pc, #556]	; (800697c <_dtoa_r+0x2dc>)
 800674e:	9301      	str	r3, [sp, #4]
 8006750:	3303      	adds	r3, #3
 8006752:	e7f3      	b.n	800673c <_dtoa_r+0x9c>
 8006754:	2200      	movs	r2, #0
 8006756:	2300      	movs	r3, #0
 8006758:	4650      	mov	r0, sl
 800675a:	4659      	mov	r1, fp
 800675c:	f7fa f9b4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006760:	ec4b ab19 	vmov	d9, sl, fp
 8006764:	4680      	mov	r8, r0
 8006766:	b158      	cbz	r0, 8006780 <_dtoa_r+0xe0>
 8006768:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800676a:	2301      	movs	r3, #1
 800676c:	6013      	str	r3, [r2, #0]
 800676e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 856b 	beq.w	800724c <_dtoa_r+0xbac>
 8006776:	4883      	ldr	r0, [pc, #524]	; (8006984 <_dtoa_r+0x2e4>)
 8006778:	6018      	str	r0, [r3, #0]
 800677a:	1e43      	subs	r3, r0, #1
 800677c:	9301      	str	r3, [sp, #4]
 800677e:	e7df      	b.n	8006740 <_dtoa_r+0xa0>
 8006780:	ec4b ab10 	vmov	d0, sl, fp
 8006784:	aa10      	add	r2, sp, #64	; 0x40
 8006786:	a911      	add	r1, sp, #68	; 0x44
 8006788:	4620      	mov	r0, r4
 800678a:	f001 f8b9 	bl	8007900 <__d2b>
 800678e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006792:	ee08 0a10 	vmov	s16, r0
 8006796:	2d00      	cmp	r5, #0
 8006798:	f000 8084 	beq.w	80068a4 <_dtoa_r+0x204>
 800679c:	ee19 3a90 	vmov	r3, s19
 80067a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80067a8:	4656      	mov	r6, sl
 80067aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80067ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80067b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80067b6:	4b74      	ldr	r3, [pc, #464]	; (8006988 <_dtoa_r+0x2e8>)
 80067b8:	2200      	movs	r2, #0
 80067ba:	4630      	mov	r0, r6
 80067bc:	4639      	mov	r1, r7
 80067be:	f7f9 fd63 	bl	8000288 <__aeabi_dsub>
 80067c2:	a365      	add	r3, pc, #404	; (adr r3, 8006958 <_dtoa_r+0x2b8>)
 80067c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c8:	f7f9 ff16 	bl	80005f8 <__aeabi_dmul>
 80067cc:	a364      	add	r3, pc, #400	; (adr r3, 8006960 <_dtoa_r+0x2c0>)
 80067ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d2:	f7f9 fd5b 	bl	800028c <__adddf3>
 80067d6:	4606      	mov	r6, r0
 80067d8:	4628      	mov	r0, r5
 80067da:	460f      	mov	r7, r1
 80067dc:	f7f9 fea2 	bl	8000524 <__aeabi_i2d>
 80067e0:	a361      	add	r3, pc, #388	; (adr r3, 8006968 <_dtoa_r+0x2c8>)
 80067e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e6:	f7f9 ff07 	bl	80005f8 <__aeabi_dmul>
 80067ea:	4602      	mov	r2, r0
 80067ec:	460b      	mov	r3, r1
 80067ee:	4630      	mov	r0, r6
 80067f0:	4639      	mov	r1, r7
 80067f2:	f7f9 fd4b 	bl	800028c <__adddf3>
 80067f6:	4606      	mov	r6, r0
 80067f8:	460f      	mov	r7, r1
 80067fa:	f7fa f9ad 	bl	8000b58 <__aeabi_d2iz>
 80067fe:	2200      	movs	r2, #0
 8006800:	9000      	str	r0, [sp, #0]
 8006802:	2300      	movs	r3, #0
 8006804:	4630      	mov	r0, r6
 8006806:	4639      	mov	r1, r7
 8006808:	f7fa f968 	bl	8000adc <__aeabi_dcmplt>
 800680c:	b150      	cbz	r0, 8006824 <_dtoa_r+0x184>
 800680e:	9800      	ldr	r0, [sp, #0]
 8006810:	f7f9 fe88 	bl	8000524 <__aeabi_i2d>
 8006814:	4632      	mov	r2, r6
 8006816:	463b      	mov	r3, r7
 8006818:	f7fa f956 	bl	8000ac8 <__aeabi_dcmpeq>
 800681c:	b910      	cbnz	r0, 8006824 <_dtoa_r+0x184>
 800681e:	9b00      	ldr	r3, [sp, #0]
 8006820:	3b01      	subs	r3, #1
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	9b00      	ldr	r3, [sp, #0]
 8006826:	2b16      	cmp	r3, #22
 8006828:	d85a      	bhi.n	80068e0 <_dtoa_r+0x240>
 800682a:	9a00      	ldr	r2, [sp, #0]
 800682c:	4b57      	ldr	r3, [pc, #348]	; (800698c <_dtoa_r+0x2ec>)
 800682e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006836:	ec51 0b19 	vmov	r0, r1, d9
 800683a:	f7fa f94f 	bl	8000adc <__aeabi_dcmplt>
 800683e:	2800      	cmp	r0, #0
 8006840:	d050      	beq.n	80068e4 <_dtoa_r+0x244>
 8006842:	9b00      	ldr	r3, [sp, #0]
 8006844:	3b01      	subs	r3, #1
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	2300      	movs	r3, #0
 800684a:	930b      	str	r3, [sp, #44]	; 0x2c
 800684c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800684e:	1b5d      	subs	r5, r3, r5
 8006850:	1e6b      	subs	r3, r5, #1
 8006852:	9305      	str	r3, [sp, #20]
 8006854:	bf45      	ittet	mi
 8006856:	f1c5 0301 	rsbmi	r3, r5, #1
 800685a:	9304      	strmi	r3, [sp, #16]
 800685c:	2300      	movpl	r3, #0
 800685e:	2300      	movmi	r3, #0
 8006860:	bf4c      	ite	mi
 8006862:	9305      	strmi	r3, [sp, #20]
 8006864:	9304      	strpl	r3, [sp, #16]
 8006866:	9b00      	ldr	r3, [sp, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	db3d      	blt.n	80068e8 <_dtoa_r+0x248>
 800686c:	9b05      	ldr	r3, [sp, #20]
 800686e:	9a00      	ldr	r2, [sp, #0]
 8006870:	920a      	str	r2, [sp, #40]	; 0x28
 8006872:	4413      	add	r3, r2
 8006874:	9305      	str	r3, [sp, #20]
 8006876:	2300      	movs	r3, #0
 8006878:	9307      	str	r3, [sp, #28]
 800687a:	9b06      	ldr	r3, [sp, #24]
 800687c:	2b09      	cmp	r3, #9
 800687e:	f200 8089 	bhi.w	8006994 <_dtoa_r+0x2f4>
 8006882:	2b05      	cmp	r3, #5
 8006884:	bfc4      	itt	gt
 8006886:	3b04      	subgt	r3, #4
 8006888:	9306      	strgt	r3, [sp, #24]
 800688a:	9b06      	ldr	r3, [sp, #24]
 800688c:	f1a3 0302 	sub.w	r3, r3, #2
 8006890:	bfcc      	ite	gt
 8006892:	2500      	movgt	r5, #0
 8006894:	2501      	movle	r5, #1
 8006896:	2b03      	cmp	r3, #3
 8006898:	f200 8087 	bhi.w	80069aa <_dtoa_r+0x30a>
 800689c:	e8df f003 	tbb	[pc, r3]
 80068a0:	59383a2d 	.word	0x59383a2d
 80068a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80068a8:	441d      	add	r5, r3
 80068aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80068ae:	2b20      	cmp	r3, #32
 80068b0:	bfc1      	itttt	gt
 80068b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80068b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80068ba:	fa0b f303 	lslgt.w	r3, fp, r3
 80068be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80068c2:	bfda      	itte	le
 80068c4:	f1c3 0320 	rsble	r3, r3, #32
 80068c8:	fa06 f003 	lslle.w	r0, r6, r3
 80068cc:	4318      	orrgt	r0, r3
 80068ce:	f7f9 fe19 	bl	8000504 <__aeabi_ui2d>
 80068d2:	2301      	movs	r3, #1
 80068d4:	4606      	mov	r6, r0
 80068d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80068da:	3d01      	subs	r5, #1
 80068dc:	930e      	str	r3, [sp, #56]	; 0x38
 80068de:	e76a      	b.n	80067b6 <_dtoa_r+0x116>
 80068e0:	2301      	movs	r3, #1
 80068e2:	e7b2      	b.n	800684a <_dtoa_r+0x1aa>
 80068e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80068e6:	e7b1      	b.n	800684c <_dtoa_r+0x1ac>
 80068e8:	9b04      	ldr	r3, [sp, #16]
 80068ea:	9a00      	ldr	r2, [sp, #0]
 80068ec:	1a9b      	subs	r3, r3, r2
 80068ee:	9304      	str	r3, [sp, #16]
 80068f0:	4253      	negs	r3, r2
 80068f2:	9307      	str	r3, [sp, #28]
 80068f4:	2300      	movs	r3, #0
 80068f6:	930a      	str	r3, [sp, #40]	; 0x28
 80068f8:	e7bf      	b.n	800687a <_dtoa_r+0x1da>
 80068fa:	2300      	movs	r3, #0
 80068fc:	9308      	str	r3, [sp, #32]
 80068fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006900:	2b00      	cmp	r3, #0
 8006902:	dc55      	bgt.n	80069b0 <_dtoa_r+0x310>
 8006904:	2301      	movs	r3, #1
 8006906:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800690a:	461a      	mov	r2, r3
 800690c:	9209      	str	r2, [sp, #36]	; 0x24
 800690e:	e00c      	b.n	800692a <_dtoa_r+0x28a>
 8006910:	2301      	movs	r3, #1
 8006912:	e7f3      	b.n	80068fc <_dtoa_r+0x25c>
 8006914:	2300      	movs	r3, #0
 8006916:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006918:	9308      	str	r3, [sp, #32]
 800691a:	9b00      	ldr	r3, [sp, #0]
 800691c:	4413      	add	r3, r2
 800691e:	9302      	str	r3, [sp, #8]
 8006920:	3301      	adds	r3, #1
 8006922:	2b01      	cmp	r3, #1
 8006924:	9303      	str	r3, [sp, #12]
 8006926:	bfb8      	it	lt
 8006928:	2301      	movlt	r3, #1
 800692a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800692c:	2200      	movs	r2, #0
 800692e:	6042      	str	r2, [r0, #4]
 8006930:	2204      	movs	r2, #4
 8006932:	f102 0614 	add.w	r6, r2, #20
 8006936:	429e      	cmp	r6, r3
 8006938:	6841      	ldr	r1, [r0, #4]
 800693a:	d93d      	bls.n	80069b8 <_dtoa_r+0x318>
 800693c:	4620      	mov	r0, r4
 800693e:	f000 fcb7 	bl	80072b0 <_Balloc>
 8006942:	9001      	str	r0, [sp, #4]
 8006944:	2800      	cmp	r0, #0
 8006946:	d13b      	bne.n	80069c0 <_dtoa_r+0x320>
 8006948:	4b11      	ldr	r3, [pc, #68]	; (8006990 <_dtoa_r+0x2f0>)
 800694a:	4602      	mov	r2, r0
 800694c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006950:	e6c0      	b.n	80066d4 <_dtoa_r+0x34>
 8006952:	2301      	movs	r3, #1
 8006954:	e7df      	b.n	8006916 <_dtoa_r+0x276>
 8006956:	bf00      	nop
 8006958:	636f4361 	.word	0x636f4361
 800695c:	3fd287a7 	.word	0x3fd287a7
 8006960:	8b60c8b3 	.word	0x8b60c8b3
 8006964:	3fc68a28 	.word	0x3fc68a28
 8006968:	509f79fb 	.word	0x509f79fb
 800696c:	3fd34413 	.word	0x3fd34413
 8006970:	08009205 	.word	0x08009205
 8006974:	0800921c 	.word	0x0800921c
 8006978:	7ff00000 	.word	0x7ff00000
 800697c:	08009201 	.word	0x08009201
 8006980:	080091f8 	.word	0x080091f8
 8006984:	080091d5 	.word	0x080091d5
 8006988:	3ff80000 	.word	0x3ff80000
 800698c:	08009310 	.word	0x08009310
 8006990:	08009277 	.word	0x08009277
 8006994:	2501      	movs	r5, #1
 8006996:	2300      	movs	r3, #0
 8006998:	9306      	str	r3, [sp, #24]
 800699a:	9508      	str	r5, [sp, #32]
 800699c:	f04f 33ff 	mov.w	r3, #4294967295
 80069a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80069a4:	2200      	movs	r2, #0
 80069a6:	2312      	movs	r3, #18
 80069a8:	e7b0      	b.n	800690c <_dtoa_r+0x26c>
 80069aa:	2301      	movs	r3, #1
 80069ac:	9308      	str	r3, [sp, #32]
 80069ae:	e7f5      	b.n	800699c <_dtoa_r+0x2fc>
 80069b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80069b6:	e7b8      	b.n	800692a <_dtoa_r+0x28a>
 80069b8:	3101      	adds	r1, #1
 80069ba:	6041      	str	r1, [r0, #4]
 80069bc:	0052      	lsls	r2, r2, #1
 80069be:	e7b8      	b.n	8006932 <_dtoa_r+0x292>
 80069c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069c2:	9a01      	ldr	r2, [sp, #4]
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	9b03      	ldr	r3, [sp, #12]
 80069c8:	2b0e      	cmp	r3, #14
 80069ca:	f200 809d 	bhi.w	8006b08 <_dtoa_r+0x468>
 80069ce:	2d00      	cmp	r5, #0
 80069d0:	f000 809a 	beq.w	8006b08 <_dtoa_r+0x468>
 80069d4:	9b00      	ldr	r3, [sp, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	dd32      	ble.n	8006a40 <_dtoa_r+0x3a0>
 80069da:	4ab7      	ldr	r2, [pc, #732]	; (8006cb8 <_dtoa_r+0x618>)
 80069dc:	f003 030f 	and.w	r3, r3, #15
 80069e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80069e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069e8:	9b00      	ldr	r3, [sp, #0]
 80069ea:	05d8      	lsls	r0, r3, #23
 80069ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 80069f0:	d516      	bpl.n	8006a20 <_dtoa_r+0x380>
 80069f2:	4bb2      	ldr	r3, [pc, #712]	; (8006cbc <_dtoa_r+0x61c>)
 80069f4:	ec51 0b19 	vmov	r0, r1, d9
 80069f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80069fc:	f7f9 ff26 	bl	800084c <__aeabi_ddiv>
 8006a00:	f007 070f 	and.w	r7, r7, #15
 8006a04:	4682      	mov	sl, r0
 8006a06:	468b      	mov	fp, r1
 8006a08:	2503      	movs	r5, #3
 8006a0a:	4eac      	ldr	r6, [pc, #688]	; (8006cbc <_dtoa_r+0x61c>)
 8006a0c:	b957      	cbnz	r7, 8006a24 <_dtoa_r+0x384>
 8006a0e:	4642      	mov	r2, r8
 8006a10:	464b      	mov	r3, r9
 8006a12:	4650      	mov	r0, sl
 8006a14:	4659      	mov	r1, fp
 8006a16:	f7f9 ff19 	bl	800084c <__aeabi_ddiv>
 8006a1a:	4682      	mov	sl, r0
 8006a1c:	468b      	mov	fp, r1
 8006a1e:	e028      	b.n	8006a72 <_dtoa_r+0x3d2>
 8006a20:	2502      	movs	r5, #2
 8006a22:	e7f2      	b.n	8006a0a <_dtoa_r+0x36a>
 8006a24:	07f9      	lsls	r1, r7, #31
 8006a26:	d508      	bpl.n	8006a3a <_dtoa_r+0x39a>
 8006a28:	4640      	mov	r0, r8
 8006a2a:	4649      	mov	r1, r9
 8006a2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a30:	f7f9 fde2 	bl	80005f8 <__aeabi_dmul>
 8006a34:	3501      	adds	r5, #1
 8006a36:	4680      	mov	r8, r0
 8006a38:	4689      	mov	r9, r1
 8006a3a:	107f      	asrs	r7, r7, #1
 8006a3c:	3608      	adds	r6, #8
 8006a3e:	e7e5      	b.n	8006a0c <_dtoa_r+0x36c>
 8006a40:	f000 809b 	beq.w	8006b7a <_dtoa_r+0x4da>
 8006a44:	9b00      	ldr	r3, [sp, #0]
 8006a46:	4f9d      	ldr	r7, [pc, #628]	; (8006cbc <_dtoa_r+0x61c>)
 8006a48:	425e      	negs	r6, r3
 8006a4a:	4b9b      	ldr	r3, [pc, #620]	; (8006cb8 <_dtoa_r+0x618>)
 8006a4c:	f006 020f 	and.w	r2, r6, #15
 8006a50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a58:	ec51 0b19 	vmov	r0, r1, d9
 8006a5c:	f7f9 fdcc 	bl	80005f8 <__aeabi_dmul>
 8006a60:	1136      	asrs	r6, r6, #4
 8006a62:	4682      	mov	sl, r0
 8006a64:	468b      	mov	fp, r1
 8006a66:	2300      	movs	r3, #0
 8006a68:	2502      	movs	r5, #2
 8006a6a:	2e00      	cmp	r6, #0
 8006a6c:	d17a      	bne.n	8006b64 <_dtoa_r+0x4c4>
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1d3      	bne.n	8006a1a <_dtoa_r+0x37a>
 8006a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 8082 	beq.w	8006b7e <_dtoa_r+0x4de>
 8006a7a:	4b91      	ldr	r3, [pc, #580]	; (8006cc0 <_dtoa_r+0x620>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	4650      	mov	r0, sl
 8006a80:	4659      	mov	r1, fp
 8006a82:	f7fa f82b 	bl	8000adc <__aeabi_dcmplt>
 8006a86:	2800      	cmp	r0, #0
 8006a88:	d079      	beq.n	8006b7e <_dtoa_r+0x4de>
 8006a8a:	9b03      	ldr	r3, [sp, #12]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d076      	beq.n	8006b7e <_dtoa_r+0x4de>
 8006a90:	9b02      	ldr	r3, [sp, #8]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	dd36      	ble.n	8006b04 <_dtoa_r+0x464>
 8006a96:	9b00      	ldr	r3, [sp, #0]
 8006a98:	4650      	mov	r0, sl
 8006a9a:	4659      	mov	r1, fp
 8006a9c:	1e5f      	subs	r7, r3, #1
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	4b88      	ldr	r3, [pc, #544]	; (8006cc4 <_dtoa_r+0x624>)
 8006aa2:	f7f9 fda9 	bl	80005f8 <__aeabi_dmul>
 8006aa6:	9e02      	ldr	r6, [sp, #8]
 8006aa8:	4682      	mov	sl, r0
 8006aaa:	468b      	mov	fp, r1
 8006aac:	3501      	adds	r5, #1
 8006aae:	4628      	mov	r0, r5
 8006ab0:	f7f9 fd38 	bl	8000524 <__aeabi_i2d>
 8006ab4:	4652      	mov	r2, sl
 8006ab6:	465b      	mov	r3, fp
 8006ab8:	f7f9 fd9e 	bl	80005f8 <__aeabi_dmul>
 8006abc:	4b82      	ldr	r3, [pc, #520]	; (8006cc8 <_dtoa_r+0x628>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f7f9 fbe4 	bl	800028c <__adddf3>
 8006ac4:	46d0      	mov	r8, sl
 8006ac6:	46d9      	mov	r9, fp
 8006ac8:	4682      	mov	sl, r0
 8006aca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006ace:	2e00      	cmp	r6, #0
 8006ad0:	d158      	bne.n	8006b84 <_dtoa_r+0x4e4>
 8006ad2:	4b7e      	ldr	r3, [pc, #504]	; (8006ccc <_dtoa_r+0x62c>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	4640      	mov	r0, r8
 8006ad8:	4649      	mov	r1, r9
 8006ada:	f7f9 fbd5 	bl	8000288 <__aeabi_dsub>
 8006ade:	4652      	mov	r2, sl
 8006ae0:	465b      	mov	r3, fp
 8006ae2:	4680      	mov	r8, r0
 8006ae4:	4689      	mov	r9, r1
 8006ae6:	f7fa f817 	bl	8000b18 <__aeabi_dcmpgt>
 8006aea:	2800      	cmp	r0, #0
 8006aec:	f040 8295 	bne.w	800701a <_dtoa_r+0x97a>
 8006af0:	4652      	mov	r2, sl
 8006af2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006af6:	4640      	mov	r0, r8
 8006af8:	4649      	mov	r1, r9
 8006afa:	f7f9 ffef 	bl	8000adc <__aeabi_dcmplt>
 8006afe:	2800      	cmp	r0, #0
 8006b00:	f040 8289 	bne.w	8007016 <_dtoa_r+0x976>
 8006b04:	ec5b ab19 	vmov	sl, fp, d9
 8006b08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f2c0 8148 	blt.w	8006da0 <_dtoa_r+0x700>
 8006b10:	9a00      	ldr	r2, [sp, #0]
 8006b12:	2a0e      	cmp	r2, #14
 8006b14:	f300 8144 	bgt.w	8006da0 <_dtoa_r+0x700>
 8006b18:	4b67      	ldr	r3, [pc, #412]	; (8006cb8 <_dtoa_r+0x618>)
 8006b1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f280 80d5 	bge.w	8006cd4 <_dtoa_r+0x634>
 8006b2a:	9b03      	ldr	r3, [sp, #12]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f300 80d1 	bgt.w	8006cd4 <_dtoa_r+0x634>
 8006b32:	f040 826f 	bne.w	8007014 <_dtoa_r+0x974>
 8006b36:	4b65      	ldr	r3, [pc, #404]	; (8006ccc <_dtoa_r+0x62c>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	4640      	mov	r0, r8
 8006b3c:	4649      	mov	r1, r9
 8006b3e:	f7f9 fd5b 	bl	80005f8 <__aeabi_dmul>
 8006b42:	4652      	mov	r2, sl
 8006b44:	465b      	mov	r3, fp
 8006b46:	f7f9 ffdd 	bl	8000b04 <__aeabi_dcmpge>
 8006b4a:	9e03      	ldr	r6, [sp, #12]
 8006b4c:	4637      	mov	r7, r6
 8006b4e:	2800      	cmp	r0, #0
 8006b50:	f040 8245 	bne.w	8006fde <_dtoa_r+0x93e>
 8006b54:	9d01      	ldr	r5, [sp, #4]
 8006b56:	2331      	movs	r3, #49	; 0x31
 8006b58:	f805 3b01 	strb.w	r3, [r5], #1
 8006b5c:	9b00      	ldr	r3, [sp, #0]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	e240      	b.n	8006fe6 <_dtoa_r+0x946>
 8006b64:	07f2      	lsls	r2, r6, #31
 8006b66:	d505      	bpl.n	8006b74 <_dtoa_r+0x4d4>
 8006b68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b6c:	f7f9 fd44 	bl	80005f8 <__aeabi_dmul>
 8006b70:	3501      	adds	r5, #1
 8006b72:	2301      	movs	r3, #1
 8006b74:	1076      	asrs	r6, r6, #1
 8006b76:	3708      	adds	r7, #8
 8006b78:	e777      	b.n	8006a6a <_dtoa_r+0x3ca>
 8006b7a:	2502      	movs	r5, #2
 8006b7c:	e779      	b.n	8006a72 <_dtoa_r+0x3d2>
 8006b7e:	9f00      	ldr	r7, [sp, #0]
 8006b80:	9e03      	ldr	r6, [sp, #12]
 8006b82:	e794      	b.n	8006aae <_dtoa_r+0x40e>
 8006b84:	9901      	ldr	r1, [sp, #4]
 8006b86:	4b4c      	ldr	r3, [pc, #304]	; (8006cb8 <_dtoa_r+0x618>)
 8006b88:	4431      	add	r1, r6
 8006b8a:	910d      	str	r1, [sp, #52]	; 0x34
 8006b8c:	9908      	ldr	r1, [sp, #32]
 8006b8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006b92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b96:	2900      	cmp	r1, #0
 8006b98:	d043      	beq.n	8006c22 <_dtoa_r+0x582>
 8006b9a:	494d      	ldr	r1, [pc, #308]	; (8006cd0 <_dtoa_r+0x630>)
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	f7f9 fe55 	bl	800084c <__aeabi_ddiv>
 8006ba2:	4652      	mov	r2, sl
 8006ba4:	465b      	mov	r3, fp
 8006ba6:	f7f9 fb6f 	bl	8000288 <__aeabi_dsub>
 8006baa:	9d01      	ldr	r5, [sp, #4]
 8006bac:	4682      	mov	sl, r0
 8006bae:	468b      	mov	fp, r1
 8006bb0:	4649      	mov	r1, r9
 8006bb2:	4640      	mov	r0, r8
 8006bb4:	f7f9 ffd0 	bl	8000b58 <__aeabi_d2iz>
 8006bb8:	4606      	mov	r6, r0
 8006bba:	f7f9 fcb3 	bl	8000524 <__aeabi_i2d>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	4640      	mov	r0, r8
 8006bc4:	4649      	mov	r1, r9
 8006bc6:	f7f9 fb5f 	bl	8000288 <__aeabi_dsub>
 8006bca:	3630      	adds	r6, #48	; 0x30
 8006bcc:	f805 6b01 	strb.w	r6, [r5], #1
 8006bd0:	4652      	mov	r2, sl
 8006bd2:	465b      	mov	r3, fp
 8006bd4:	4680      	mov	r8, r0
 8006bd6:	4689      	mov	r9, r1
 8006bd8:	f7f9 ff80 	bl	8000adc <__aeabi_dcmplt>
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	d163      	bne.n	8006ca8 <_dtoa_r+0x608>
 8006be0:	4642      	mov	r2, r8
 8006be2:	464b      	mov	r3, r9
 8006be4:	4936      	ldr	r1, [pc, #216]	; (8006cc0 <_dtoa_r+0x620>)
 8006be6:	2000      	movs	r0, #0
 8006be8:	f7f9 fb4e 	bl	8000288 <__aeabi_dsub>
 8006bec:	4652      	mov	r2, sl
 8006bee:	465b      	mov	r3, fp
 8006bf0:	f7f9 ff74 	bl	8000adc <__aeabi_dcmplt>
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	f040 80b5 	bne.w	8006d64 <_dtoa_r+0x6c4>
 8006bfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bfc:	429d      	cmp	r5, r3
 8006bfe:	d081      	beq.n	8006b04 <_dtoa_r+0x464>
 8006c00:	4b30      	ldr	r3, [pc, #192]	; (8006cc4 <_dtoa_r+0x624>)
 8006c02:	2200      	movs	r2, #0
 8006c04:	4650      	mov	r0, sl
 8006c06:	4659      	mov	r1, fp
 8006c08:	f7f9 fcf6 	bl	80005f8 <__aeabi_dmul>
 8006c0c:	4b2d      	ldr	r3, [pc, #180]	; (8006cc4 <_dtoa_r+0x624>)
 8006c0e:	4682      	mov	sl, r0
 8006c10:	468b      	mov	fp, r1
 8006c12:	4640      	mov	r0, r8
 8006c14:	4649      	mov	r1, r9
 8006c16:	2200      	movs	r2, #0
 8006c18:	f7f9 fcee 	bl	80005f8 <__aeabi_dmul>
 8006c1c:	4680      	mov	r8, r0
 8006c1e:	4689      	mov	r9, r1
 8006c20:	e7c6      	b.n	8006bb0 <_dtoa_r+0x510>
 8006c22:	4650      	mov	r0, sl
 8006c24:	4659      	mov	r1, fp
 8006c26:	f7f9 fce7 	bl	80005f8 <__aeabi_dmul>
 8006c2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c2c:	9d01      	ldr	r5, [sp, #4]
 8006c2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c30:	4682      	mov	sl, r0
 8006c32:	468b      	mov	fp, r1
 8006c34:	4649      	mov	r1, r9
 8006c36:	4640      	mov	r0, r8
 8006c38:	f7f9 ff8e 	bl	8000b58 <__aeabi_d2iz>
 8006c3c:	4606      	mov	r6, r0
 8006c3e:	f7f9 fc71 	bl	8000524 <__aeabi_i2d>
 8006c42:	3630      	adds	r6, #48	; 0x30
 8006c44:	4602      	mov	r2, r0
 8006c46:	460b      	mov	r3, r1
 8006c48:	4640      	mov	r0, r8
 8006c4a:	4649      	mov	r1, r9
 8006c4c:	f7f9 fb1c 	bl	8000288 <__aeabi_dsub>
 8006c50:	f805 6b01 	strb.w	r6, [r5], #1
 8006c54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c56:	429d      	cmp	r5, r3
 8006c58:	4680      	mov	r8, r0
 8006c5a:	4689      	mov	r9, r1
 8006c5c:	f04f 0200 	mov.w	r2, #0
 8006c60:	d124      	bne.n	8006cac <_dtoa_r+0x60c>
 8006c62:	4b1b      	ldr	r3, [pc, #108]	; (8006cd0 <_dtoa_r+0x630>)
 8006c64:	4650      	mov	r0, sl
 8006c66:	4659      	mov	r1, fp
 8006c68:	f7f9 fb10 	bl	800028c <__adddf3>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	4640      	mov	r0, r8
 8006c72:	4649      	mov	r1, r9
 8006c74:	f7f9 ff50 	bl	8000b18 <__aeabi_dcmpgt>
 8006c78:	2800      	cmp	r0, #0
 8006c7a:	d173      	bne.n	8006d64 <_dtoa_r+0x6c4>
 8006c7c:	4652      	mov	r2, sl
 8006c7e:	465b      	mov	r3, fp
 8006c80:	4913      	ldr	r1, [pc, #76]	; (8006cd0 <_dtoa_r+0x630>)
 8006c82:	2000      	movs	r0, #0
 8006c84:	f7f9 fb00 	bl	8000288 <__aeabi_dsub>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	4640      	mov	r0, r8
 8006c8e:	4649      	mov	r1, r9
 8006c90:	f7f9 ff24 	bl	8000adc <__aeabi_dcmplt>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	f43f af35 	beq.w	8006b04 <_dtoa_r+0x464>
 8006c9a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006c9c:	1e6b      	subs	r3, r5, #1
 8006c9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ca0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ca4:	2b30      	cmp	r3, #48	; 0x30
 8006ca6:	d0f8      	beq.n	8006c9a <_dtoa_r+0x5fa>
 8006ca8:	9700      	str	r7, [sp, #0]
 8006caa:	e049      	b.n	8006d40 <_dtoa_r+0x6a0>
 8006cac:	4b05      	ldr	r3, [pc, #20]	; (8006cc4 <_dtoa_r+0x624>)
 8006cae:	f7f9 fca3 	bl	80005f8 <__aeabi_dmul>
 8006cb2:	4680      	mov	r8, r0
 8006cb4:	4689      	mov	r9, r1
 8006cb6:	e7bd      	b.n	8006c34 <_dtoa_r+0x594>
 8006cb8:	08009310 	.word	0x08009310
 8006cbc:	080092e8 	.word	0x080092e8
 8006cc0:	3ff00000 	.word	0x3ff00000
 8006cc4:	40240000 	.word	0x40240000
 8006cc8:	401c0000 	.word	0x401c0000
 8006ccc:	40140000 	.word	0x40140000
 8006cd0:	3fe00000 	.word	0x3fe00000
 8006cd4:	9d01      	ldr	r5, [sp, #4]
 8006cd6:	4656      	mov	r6, sl
 8006cd8:	465f      	mov	r7, fp
 8006cda:	4642      	mov	r2, r8
 8006cdc:	464b      	mov	r3, r9
 8006cde:	4630      	mov	r0, r6
 8006ce0:	4639      	mov	r1, r7
 8006ce2:	f7f9 fdb3 	bl	800084c <__aeabi_ddiv>
 8006ce6:	f7f9 ff37 	bl	8000b58 <__aeabi_d2iz>
 8006cea:	4682      	mov	sl, r0
 8006cec:	f7f9 fc1a 	bl	8000524 <__aeabi_i2d>
 8006cf0:	4642      	mov	r2, r8
 8006cf2:	464b      	mov	r3, r9
 8006cf4:	f7f9 fc80 	bl	80005f8 <__aeabi_dmul>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	4639      	mov	r1, r7
 8006d00:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006d04:	f7f9 fac0 	bl	8000288 <__aeabi_dsub>
 8006d08:	f805 6b01 	strb.w	r6, [r5], #1
 8006d0c:	9e01      	ldr	r6, [sp, #4]
 8006d0e:	9f03      	ldr	r7, [sp, #12]
 8006d10:	1bae      	subs	r6, r5, r6
 8006d12:	42b7      	cmp	r7, r6
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	d135      	bne.n	8006d86 <_dtoa_r+0x6e6>
 8006d1a:	f7f9 fab7 	bl	800028c <__adddf3>
 8006d1e:	4642      	mov	r2, r8
 8006d20:	464b      	mov	r3, r9
 8006d22:	4606      	mov	r6, r0
 8006d24:	460f      	mov	r7, r1
 8006d26:	f7f9 fef7 	bl	8000b18 <__aeabi_dcmpgt>
 8006d2a:	b9d0      	cbnz	r0, 8006d62 <_dtoa_r+0x6c2>
 8006d2c:	4642      	mov	r2, r8
 8006d2e:	464b      	mov	r3, r9
 8006d30:	4630      	mov	r0, r6
 8006d32:	4639      	mov	r1, r7
 8006d34:	f7f9 fec8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d38:	b110      	cbz	r0, 8006d40 <_dtoa_r+0x6a0>
 8006d3a:	f01a 0f01 	tst.w	sl, #1
 8006d3e:	d110      	bne.n	8006d62 <_dtoa_r+0x6c2>
 8006d40:	4620      	mov	r0, r4
 8006d42:	ee18 1a10 	vmov	r1, s16
 8006d46:	f000 faf3 	bl	8007330 <_Bfree>
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	9800      	ldr	r0, [sp, #0]
 8006d4e:	702b      	strb	r3, [r5, #0]
 8006d50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d52:	3001      	adds	r0, #1
 8006d54:	6018      	str	r0, [r3, #0]
 8006d56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f43f acf1 	beq.w	8006740 <_dtoa_r+0xa0>
 8006d5e:	601d      	str	r5, [r3, #0]
 8006d60:	e4ee      	b.n	8006740 <_dtoa_r+0xa0>
 8006d62:	9f00      	ldr	r7, [sp, #0]
 8006d64:	462b      	mov	r3, r5
 8006d66:	461d      	mov	r5, r3
 8006d68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d6c:	2a39      	cmp	r2, #57	; 0x39
 8006d6e:	d106      	bne.n	8006d7e <_dtoa_r+0x6de>
 8006d70:	9a01      	ldr	r2, [sp, #4]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d1f7      	bne.n	8006d66 <_dtoa_r+0x6c6>
 8006d76:	9901      	ldr	r1, [sp, #4]
 8006d78:	2230      	movs	r2, #48	; 0x30
 8006d7a:	3701      	adds	r7, #1
 8006d7c:	700a      	strb	r2, [r1, #0]
 8006d7e:	781a      	ldrb	r2, [r3, #0]
 8006d80:	3201      	adds	r2, #1
 8006d82:	701a      	strb	r2, [r3, #0]
 8006d84:	e790      	b.n	8006ca8 <_dtoa_r+0x608>
 8006d86:	4ba6      	ldr	r3, [pc, #664]	; (8007020 <_dtoa_r+0x980>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f7f9 fc35 	bl	80005f8 <__aeabi_dmul>
 8006d8e:	2200      	movs	r2, #0
 8006d90:	2300      	movs	r3, #0
 8006d92:	4606      	mov	r6, r0
 8006d94:	460f      	mov	r7, r1
 8006d96:	f7f9 fe97 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	d09d      	beq.n	8006cda <_dtoa_r+0x63a>
 8006d9e:	e7cf      	b.n	8006d40 <_dtoa_r+0x6a0>
 8006da0:	9a08      	ldr	r2, [sp, #32]
 8006da2:	2a00      	cmp	r2, #0
 8006da4:	f000 80d7 	beq.w	8006f56 <_dtoa_r+0x8b6>
 8006da8:	9a06      	ldr	r2, [sp, #24]
 8006daa:	2a01      	cmp	r2, #1
 8006dac:	f300 80ba 	bgt.w	8006f24 <_dtoa_r+0x884>
 8006db0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006db2:	2a00      	cmp	r2, #0
 8006db4:	f000 80b2 	beq.w	8006f1c <_dtoa_r+0x87c>
 8006db8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006dbc:	9e07      	ldr	r6, [sp, #28]
 8006dbe:	9d04      	ldr	r5, [sp, #16]
 8006dc0:	9a04      	ldr	r2, [sp, #16]
 8006dc2:	441a      	add	r2, r3
 8006dc4:	9204      	str	r2, [sp, #16]
 8006dc6:	9a05      	ldr	r2, [sp, #20]
 8006dc8:	2101      	movs	r1, #1
 8006dca:	441a      	add	r2, r3
 8006dcc:	4620      	mov	r0, r4
 8006dce:	9205      	str	r2, [sp, #20]
 8006dd0:	f000 fb66 	bl	80074a0 <__i2b>
 8006dd4:	4607      	mov	r7, r0
 8006dd6:	2d00      	cmp	r5, #0
 8006dd8:	dd0c      	ble.n	8006df4 <_dtoa_r+0x754>
 8006dda:	9b05      	ldr	r3, [sp, #20]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	dd09      	ble.n	8006df4 <_dtoa_r+0x754>
 8006de0:	42ab      	cmp	r3, r5
 8006de2:	9a04      	ldr	r2, [sp, #16]
 8006de4:	bfa8      	it	ge
 8006de6:	462b      	movge	r3, r5
 8006de8:	1ad2      	subs	r2, r2, r3
 8006dea:	9204      	str	r2, [sp, #16]
 8006dec:	9a05      	ldr	r2, [sp, #20]
 8006dee:	1aed      	subs	r5, r5, r3
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	9305      	str	r3, [sp, #20]
 8006df4:	9b07      	ldr	r3, [sp, #28]
 8006df6:	b31b      	cbz	r3, 8006e40 <_dtoa_r+0x7a0>
 8006df8:	9b08      	ldr	r3, [sp, #32]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f000 80af 	beq.w	8006f5e <_dtoa_r+0x8be>
 8006e00:	2e00      	cmp	r6, #0
 8006e02:	dd13      	ble.n	8006e2c <_dtoa_r+0x78c>
 8006e04:	4639      	mov	r1, r7
 8006e06:	4632      	mov	r2, r6
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f000 fc09 	bl	8007620 <__pow5mult>
 8006e0e:	ee18 2a10 	vmov	r2, s16
 8006e12:	4601      	mov	r1, r0
 8006e14:	4607      	mov	r7, r0
 8006e16:	4620      	mov	r0, r4
 8006e18:	f000 fb58 	bl	80074cc <__multiply>
 8006e1c:	ee18 1a10 	vmov	r1, s16
 8006e20:	4680      	mov	r8, r0
 8006e22:	4620      	mov	r0, r4
 8006e24:	f000 fa84 	bl	8007330 <_Bfree>
 8006e28:	ee08 8a10 	vmov	s16, r8
 8006e2c:	9b07      	ldr	r3, [sp, #28]
 8006e2e:	1b9a      	subs	r2, r3, r6
 8006e30:	d006      	beq.n	8006e40 <_dtoa_r+0x7a0>
 8006e32:	ee18 1a10 	vmov	r1, s16
 8006e36:	4620      	mov	r0, r4
 8006e38:	f000 fbf2 	bl	8007620 <__pow5mult>
 8006e3c:	ee08 0a10 	vmov	s16, r0
 8006e40:	2101      	movs	r1, #1
 8006e42:	4620      	mov	r0, r4
 8006e44:	f000 fb2c 	bl	80074a0 <__i2b>
 8006e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	4606      	mov	r6, r0
 8006e4e:	f340 8088 	ble.w	8006f62 <_dtoa_r+0x8c2>
 8006e52:	461a      	mov	r2, r3
 8006e54:	4601      	mov	r1, r0
 8006e56:	4620      	mov	r0, r4
 8006e58:	f000 fbe2 	bl	8007620 <__pow5mult>
 8006e5c:	9b06      	ldr	r3, [sp, #24]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	4606      	mov	r6, r0
 8006e62:	f340 8081 	ble.w	8006f68 <_dtoa_r+0x8c8>
 8006e66:	f04f 0800 	mov.w	r8, #0
 8006e6a:	6933      	ldr	r3, [r6, #16]
 8006e6c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006e70:	6918      	ldr	r0, [r3, #16]
 8006e72:	f000 fac5 	bl	8007400 <__hi0bits>
 8006e76:	f1c0 0020 	rsb	r0, r0, #32
 8006e7a:	9b05      	ldr	r3, [sp, #20]
 8006e7c:	4418      	add	r0, r3
 8006e7e:	f010 001f 	ands.w	r0, r0, #31
 8006e82:	f000 8092 	beq.w	8006faa <_dtoa_r+0x90a>
 8006e86:	f1c0 0320 	rsb	r3, r0, #32
 8006e8a:	2b04      	cmp	r3, #4
 8006e8c:	f340 808a 	ble.w	8006fa4 <_dtoa_r+0x904>
 8006e90:	f1c0 001c 	rsb	r0, r0, #28
 8006e94:	9b04      	ldr	r3, [sp, #16]
 8006e96:	4403      	add	r3, r0
 8006e98:	9304      	str	r3, [sp, #16]
 8006e9a:	9b05      	ldr	r3, [sp, #20]
 8006e9c:	4403      	add	r3, r0
 8006e9e:	4405      	add	r5, r0
 8006ea0:	9305      	str	r3, [sp, #20]
 8006ea2:	9b04      	ldr	r3, [sp, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	dd07      	ble.n	8006eb8 <_dtoa_r+0x818>
 8006ea8:	ee18 1a10 	vmov	r1, s16
 8006eac:	461a      	mov	r2, r3
 8006eae:	4620      	mov	r0, r4
 8006eb0:	f000 fc10 	bl	80076d4 <__lshift>
 8006eb4:	ee08 0a10 	vmov	s16, r0
 8006eb8:	9b05      	ldr	r3, [sp, #20]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	dd05      	ble.n	8006eca <_dtoa_r+0x82a>
 8006ebe:	4631      	mov	r1, r6
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	f000 fc06 	bl	80076d4 <__lshift>
 8006ec8:	4606      	mov	r6, r0
 8006eca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d06e      	beq.n	8006fae <_dtoa_r+0x90e>
 8006ed0:	ee18 0a10 	vmov	r0, s16
 8006ed4:	4631      	mov	r1, r6
 8006ed6:	f000 fc6d 	bl	80077b4 <__mcmp>
 8006eda:	2800      	cmp	r0, #0
 8006edc:	da67      	bge.n	8006fae <_dtoa_r+0x90e>
 8006ede:	9b00      	ldr	r3, [sp, #0]
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	ee18 1a10 	vmov	r1, s16
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	220a      	movs	r2, #10
 8006eea:	2300      	movs	r3, #0
 8006eec:	4620      	mov	r0, r4
 8006eee:	f000 fa41 	bl	8007374 <__multadd>
 8006ef2:	9b08      	ldr	r3, [sp, #32]
 8006ef4:	ee08 0a10 	vmov	s16, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 81b1 	beq.w	8007260 <_dtoa_r+0xbc0>
 8006efe:	2300      	movs	r3, #0
 8006f00:	4639      	mov	r1, r7
 8006f02:	220a      	movs	r2, #10
 8006f04:	4620      	mov	r0, r4
 8006f06:	f000 fa35 	bl	8007374 <__multadd>
 8006f0a:	9b02      	ldr	r3, [sp, #8]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	4607      	mov	r7, r0
 8006f10:	f300 808e 	bgt.w	8007030 <_dtoa_r+0x990>
 8006f14:	9b06      	ldr	r3, [sp, #24]
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	dc51      	bgt.n	8006fbe <_dtoa_r+0x91e>
 8006f1a:	e089      	b.n	8007030 <_dtoa_r+0x990>
 8006f1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006f22:	e74b      	b.n	8006dbc <_dtoa_r+0x71c>
 8006f24:	9b03      	ldr	r3, [sp, #12]
 8006f26:	1e5e      	subs	r6, r3, #1
 8006f28:	9b07      	ldr	r3, [sp, #28]
 8006f2a:	42b3      	cmp	r3, r6
 8006f2c:	bfbf      	itttt	lt
 8006f2e:	9b07      	ldrlt	r3, [sp, #28]
 8006f30:	9607      	strlt	r6, [sp, #28]
 8006f32:	1af2      	sublt	r2, r6, r3
 8006f34:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006f36:	bfb6      	itet	lt
 8006f38:	189b      	addlt	r3, r3, r2
 8006f3a:	1b9e      	subge	r6, r3, r6
 8006f3c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006f3e:	9b03      	ldr	r3, [sp, #12]
 8006f40:	bfb8      	it	lt
 8006f42:	2600      	movlt	r6, #0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	bfb7      	itett	lt
 8006f48:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006f4c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006f50:	1a9d      	sublt	r5, r3, r2
 8006f52:	2300      	movlt	r3, #0
 8006f54:	e734      	b.n	8006dc0 <_dtoa_r+0x720>
 8006f56:	9e07      	ldr	r6, [sp, #28]
 8006f58:	9d04      	ldr	r5, [sp, #16]
 8006f5a:	9f08      	ldr	r7, [sp, #32]
 8006f5c:	e73b      	b.n	8006dd6 <_dtoa_r+0x736>
 8006f5e:	9a07      	ldr	r2, [sp, #28]
 8006f60:	e767      	b.n	8006e32 <_dtoa_r+0x792>
 8006f62:	9b06      	ldr	r3, [sp, #24]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	dc18      	bgt.n	8006f9a <_dtoa_r+0x8fa>
 8006f68:	f1ba 0f00 	cmp.w	sl, #0
 8006f6c:	d115      	bne.n	8006f9a <_dtoa_r+0x8fa>
 8006f6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f72:	b993      	cbnz	r3, 8006f9a <_dtoa_r+0x8fa>
 8006f74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006f78:	0d1b      	lsrs	r3, r3, #20
 8006f7a:	051b      	lsls	r3, r3, #20
 8006f7c:	b183      	cbz	r3, 8006fa0 <_dtoa_r+0x900>
 8006f7e:	9b04      	ldr	r3, [sp, #16]
 8006f80:	3301      	adds	r3, #1
 8006f82:	9304      	str	r3, [sp, #16]
 8006f84:	9b05      	ldr	r3, [sp, #20]
 8006f86:	3301      	adds	r3, #1
 8006f88:	9305      	str	r3, [sp, #20]
 8006f8a:	f04f 0801 	mov.w	r8, #1
 8006f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f47f af6a 	bne.w	8006e6a <_dtoa_r+0x7ca>
 8006f96:	2001      	movs	r0, #1
 8006f98:	e76f      	b.n	8006e7a <_dtoa_r+0x7da>
 8006f9a:	f04f 0800 	mov.w	r8, #0
 8006f9e:	e7f6      	b.n	8006f8e <_dtoa_r+0x8ee>
 8006fa0:	4698      	mov	r8, r3
 8006fa2:	e7f4      	b.n	8006f8e <_dtoa_r+0x8ee>
 8006fa4:	f43f af7d 	beq.w	8006ea2 <_dtoa_r+0x802>
 8006fa8:	4618      	mov	r0, r3
 8006faa:	301c      	adds	r0, #28
 8006fac:	e772      	b.n	8006e94 <_dtoa_r+0x7f4>
 8006fae:	9b03      	ldr	r3, [sp, #12]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	dc37      	bgt.n	8007024 <_dtoa_r+0x984>
 8006fb4:	9b06      	ldr	r3, [sp, #24]
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	dd34      	ble.n	8007024 <_dtoa_r+0x984>
 8006fba:	9b03      	ldr	r3, [sp, #12]
 8006fbc:	9302      	str	r3, [sp, #8]
 8006fbe:	9b02      	ldr	r3, [sp, #8]
 8006fc0:	b96b      	cbnz	r3, 8006fde <_dtoa_r+0x93e>
 8006fc2:	4631      	mov	r1, r6
 8006fc4:	2205      	movs	r2, #5
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	f000 f9d4 	bl	8007374 <__multadd>
 8006fcc:	4601      	mov	r1, r0
 8006fce:	4606      	mov	r6, r0
 8006fd0:	ee18 0a10 	vmov	r0, s16
 8006fd4:	f000 fbee 	bl	80077b4 <__mcmp>
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	f73f adbb 	bgt.w	8006b54 <_dtoa_r+0x4b4>
 8006fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fe0:	9d01      	ldr	r5, [sp, #4]
 8006fe2:	43db      	mvns	r3, r3
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	f04f 0800 	mov.w	r8, #0
 8006fea:	4631      	mov	r1, r6
 8006fec:	4620      	mov	r0, r4
 8006fee:	f000 f99f 	bl	8007330 <_Bfree>
 8006ff2:	2f00      	cmp	r7, #0
 8006ff4:	f43f aea4 	beq.w	8006d40 <_dtoa_r+0x6a0>
 8006ff8:	f1b8 0f00 	cmp.w	r8, #0
 8006ffc:	d005      	beq.n	800700a <_dtoa_r+0x96a>
 8006ffe:	45b8      	cmp	r8, r7
 8007000:	d003      	beq.n	800700a <_dtoa_r+0x96a>
 8007002:	4641      	mov	r1, r8
 8007004:	4620      	mov	r0, r4
 8007006:	f000 f993 	bl	8007330 <_Bfree>
 800700a:	4639      	mov	r1, r7
 800700c:	4620      	mov	r0, r4
 800700e:	f000 f98f 	bl	8007330 <_Bfree>
 8007012:	e695      	b.n	8006d40 <_dtoa_r+0x6a0>
 8007014:	2600      	movs	r6, #0
 8007016:	4637      	mov	r7, r6
 8007018:	e7e1      	b.n	8006fde <_dtoa_r+0x93e>
 800701a:	9700      	str	r7, [sp, #0]
 800701c:	4637      	mov	r7, r6
 800701e:	e599      	b.n	8006b54 <_dtoa_r+0x4b4>
 8007020:	40240000 	.word	0x40240000
 8007024:	9b08      	ldr	r3, [sp, #32]
 8007026:	2b00      	cmp	r3, #0
 8007028:	f000 80ca 	beq.w	80071c0 <_dtoa_r+0xb20>
 800702c:	9b03      	ldr	r3, [sp, #12]
 800702e:	9302      	str	r3, [sp, #8]
 8007030:	2d00      	cmp	r5, #0
 8007032:	dd05      	ble.n	8007040 <_dtoa_r+0x9a0>
 8007034:	4639      	mov	r1, r7
 8007036:	462a      	mov	r2, r5
 8007038:	4620      	mov	r0, r4
 800703a:	f000 fb4b 	bl	80076d4 <__lshift>
 800703e:	4607      	mov	r7, r0
 8007040:	f1b8 0f00 	cmp.w	r8, #0
 8007044:	d05b      	beq.n	80070fe <_dtoa_r+0xa5e>
 8007046:	6879      	ldr	r1, [r7, #4]
 8007048:	4620      	mov	r0, r4
 800704a:	f000 f931 	bl	80072b0 <_Balloc>
 800704e:	4605      	mov	r5, r0
 8007050:	b928      	cbnz	r0, 800705e <_dtoa_r+0x9be>
 8007052:	4b87      	ldr	r3, [pc, #540]	; (8007270 <_dtoa_r+0xbd0>)
 8007054:	4602      	mov	r2, r0
 8007056:	f240 21ea 	movw	r1, #746	; 0x2ea
 800705a:	f7ff bb3b 	b.w	80066d4 <_dtoa_r+0x34>
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	3202      	adds	r2, #2
 8007062:	0092      	lsls	r2, r2, #2
 8007064:	f107 010c 	add.w	r1, r7, #12
 8007068:	300c      	adds	r0, #12
 800706a:	f000 f913 	bl	8007294 <memcpy>
 800706e:	2201      	movs	r2, #1
 8007070:	4629      	mov	r1, r5
 8007072:	4620      	mov	r0, r4
 8007074:	f000 fb2e 	bl	80076d4 <__lshift>
 8007078:	9b01      	ldr	r3, [sp, #4]
 800707a:	f103 0901 	add.w	r9, r3, #1
 800707e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007082:	4413      	add	r3, r2
 8007084:	9305      	str	r3, [sp, #20]
 8007086:	f00a 0301 	and.w	r3, sl, #1
 800708a:	46b8      	mov	r8, r7
 800708c:	9304      	str	r3, [sp, #16]
 800708e:	4607      	mov	r7, r0
 8007090:	4631      	mov	r1, r6
 8007092:	ee18 0a10 	vmov	r0, s16
 8007096:	f7ff fa77 	bl	8006588 <quorem>
 800709a:	4641      	mov	r1, r8
 800709c:	9002      	str	r0, [sp, #8]
 800709e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80070a2:	ee18 0a10 	vmov	r0, s16
 80070a6:	f000 fb85 	bl	80077b4 <__mcmp>
 80070aa:	463a      	mov	r2, r7
 80070ac:	9003      	str	r0, [sp, #12]
 80070ae:	4631      	mov	r1, r6
 80070b0:	4620      	mov	r0, r4
 80070b2:	f000 fb9b 	bl	80077ec <__mdiff>
 80070b6:	68c2      	ldr	r2, [r0, #12]
 80070b8:	f109 3bff 	add.w	fp, r9, #4294967295
 80070bc:	4605      	mov	r5, r0
 80070be:	bb02      	cbnz	r2, 8007102 <_dtoa_r+0xa62>
 80070c0:	4601      	mov	r1, r0
 80070c2:	ee18 0a10 	vmov	r0, s16
 80070c6:	f000 fb75 	bl	80077b4 <__mcmp>
 80070ca:	4602      	mov	r2, r0
 80070cc:	4629      	mov	r1, r5
 80070ce:	4620      	mov	r0, r4
 80070d0:	9207      	str	r2, [sp, #28]
 80070d2:	f000 f92d 	bl	8007330 <_Bfree>
 80070d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80070da:	ea43 0102 	orr.w	r1, r3, r2
 80070de:	9b04      	ldr	r3, [sp, #16]
 80070e0:	430b      	orrs	r3, r1
 80070e2:	464d      	mov	r5, r9
 80070e4:	d10f      	bne.n	8007106 <_dtoa_r+0xa66>
 80070e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80070ea:	d02a      	beq.n	8007142 <_dtoa_r+0xaa2>
 80070ec:	9b03      	ldr	r3, [sp, #12]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	dd02      	ble.n	80070f8 <_dtoa_r+0xa58>
 80070f2:	9b02      	ldr	r3, [sp, #8]
 80070f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80070f8:	f88b a000 	strb.w	sl, [fp]
 80070fc:	e775      	b.n	8006fea <_dtoa_r+0x94a>
 80070fe:	4638      	mov	r0, r7
 8007100:	e7ba      	b.n	8007078 <_dtoa_r+0x9d8>
 8007102:	2201      	movs	r2, #1
 8007104:	e7e2      	b.n	80070cc <_dtoa_r+0xa2c>
 8007106:	9b03      	ldr	r3, [sp, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	db04      	blt.n	8007116 <_dtoa_r+0xa76>
 800710c:	9906      	ldr	r1, [sp, #24]
 800710e:	430b      	orrs	r3, r1
 8007110:	9904      	ldr	r1, [sp, #16]
 8007112:	430b      	orrs	r3, r1
 8007114:	d122      	bne.n	800715c <_dtoa_r+0xabc>
 8007116:	2a00      	cmp	r2, #0
 8007118:	ddee      	ble.n	80070f8 <_dtoa_r+0xa58>
 800711a:	ee18 1a10 	vmov	r1, s16
 800711e:	2201      	movs	r2, #1
 8007120:	4620      	mov	r0, r4
 8007122:	f000 fad7 	bl	80076d4 <__lshift>
 8007126:	4631      	mov	r1, r6
 8007128:	ee08 0a10 	vmov	s16, r0
 800712c:	f000 fb42 	bl	80077b4 <__mcmp>
 8007130:	2800      	cmp	r0, #0
 8007132:	dc03      	bgt.n	800713c <_dtoa_r+0xa9c>
 8007134:	d1e0      	bne.n	80070f8 <_dtoa_r+0xa58>
 8007136:	f01a 0f01 	tst.w	sl, #1
 800713a:	d0dd      	beq.n	80070f8 <_dtoa_r+0xa58>
 800713c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007140:	d1d7      	bne.n	80070f2 <_dtoa_r+0xa52>
 8007142:	2339      	movs	r3, #57	; 0x39
 8007144:	f88b 3000 	strb.w	r3, [fp]
 8007148:	462b      	mov	r3, r5
 800714a:	461d      	mov	r5, r3
 800714c:	3b01      	subs	r3, #1
 800714e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007152:	2a39      	cmp	r2, #57	; 0x39
 8007154:	d071      	beq.n	800723a <_dtoa_r+0xb9a>
 8007156:	3201      	adds	r2, #1
 8007158:	701a      	strb	r2, [r3, #0]
 800715a:	e746      	b.n	8006fea <_dtoa_r+0x94a>
 800715c:	2a00      	cmp	r2, #0
 800715e:	dd07      	ble.n	8007170 <_dtoa_r+0xad0>
 8007160:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007164:	d0ed      	beq.n	8007142 <_dtoa_r+0xaa2>
 8007166:	f10a 0301 	add.w	r3, sl, #1
 800716a:	f88b 3000 	strb.w	r3, [fp]
 800716e:	e73c      	b.n	8006fea <_dtoa_r+0x94a>
 8007170:	9b05      	ldr	r3, [sp, #20]
 8007172:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007176:	4599      	cmp	r9, r3
 8007178:	d047      	beq.n	800720a <_dtoa_r+0xb6a>
 800717a:	ee18 1a10 	vmov	r1, s16
 800717e:	2300      	movs	r3, #0
 8007180:	220a      	movs	r2, #10
 8007182:	4620      	mov	r0, r4
 8007184:	f000 f8f6 	bl	8007374 <__multadd>
 8007188:	45b8      	cmp	r8, r7
 800718a:	ee08 0a10 	vmov	s16, r0
 800718e:	f04f 0300 	mov.w	r3, #0
 8007192:	f04f 020a 	mov.w	r2, #10
 8007196:	4641      	mov	r1, r8
 8007198:	4620      	mov	r0, r4
 800719a:	d106      	bne.n	80071aa <_dtoa_r+0xb0a>
 800719c:	f000 f8ea 	bl	8007374 <__multadd>
 80071a0:	4680      	mov	r8, r0
 80071a2:	4607      	mov	r7, r0
 80071a4:	f109 0901 	add.w	r9, r9, #1
 80071a8:	e772      	b.n	8007090 <_dtoa_r+0x9f0>
 80071aa:	f000 f8e3 	bl	8007374 <__multadd>
 80071ae:	4639      	mov	r1, r7
 80071b0:	4680      	mov	r8, r0
 80071b2:	2300      	movs	r3, #0
 80071b4:	220a      	movs	r2, #10
 80071b6:	4620      	mov	r0, r4
 80071b8:	f000 f8dc 	bl	8007374 <__multadd>
 80071bc:	4607      	mov	r7, r0
 80071be:	e7f1      	b.n	80071a4 <_dtoa_r+0xb04>
 80071c0:	9b03      	ldr	r3, [sp, #12]
 80071c2:	9302      	str	r3, [sp, #8]
 80071c4:	9d01      	ldr	r5, [sp, #4]
 80071c6:	ee18 0a10 	vmov	r0, s16
 80071ca:	4631      	mov	r1, r6
 80071cc:	f7ff f9dc 	bl	8006588 <quorem>
 80071d0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80071d4:	9b01      	ldr	r3, [sp, #4]
 80071d6:	f805 ab01 	strb.w	sl, [r5], #1
 80071da:	1aea      	subs	r2, r5, r3
 80071dc:	9b02      	ldr	r3, [sp, #8]
 80071de:	4293      	cmp	r3, r2
 80071e0:	dd09      	ble.n	80071f6 <_dtoa_r+0xb56>
 80071e2:	ee18 1a10 	vmov	r1, s16
 80071e6:	2300      	movs	r3, #0
 80071e8:	220a      	movs	r2, #10
 80071ea:	4620      	mov	r0, r4
 80071ec:	f000 f8c2 	bl	8007374 <__multadd>
 80071f0:	ee08 0a10 	vmov	s16, r0
 80071f4:	e7e7      	b.n	80071c6 <_dtoa_r+0xb26>
 80071f6:	9b02      	ldr	r3, [sp, #8]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	bfc8      	it	gt
 80071fc:	461d      	movgt	r5, r3
 80071fe:	9b01      	ldr	r3, [sp, #4]
 8007200:	bfd8      	it	le
 8007202:	2501      	movle	r5, #1
 8007204:	441d      	add	r5, r3
 8007206:	f04f 0800 	mov.w	r8, #0
 800720a:	ee18 1a10 	vmov	r1, s16
 800720e:	2201      	movs	r2, #1
 8007210:	4620      	mov	r0, r4
 8007212:	f000 fa5f 	bl	80076d4 <__lshift>
 8007216:	4631      	mov	r1, r6
 8007218:	ee08 0a10 	vmov	s16, r0
 800721c:	f000 faca 	bl	80077b4 <__mcmp>
 8007220:	2800      	cmp	r0, #0
 8007222:	dc91      	bgt.n	8007148 <_dtoa_r+0xaa8>
 8007224:	d102      	bne.n	800722c <_dtoa_r+0xb8c>
 8007226:	f01a 0f01 	tst.w	sl, #1
 800722a:	d18d      	bne.n	8007148 <_dtoa_r+0xaa8>
 800722c:	462b      	mov	r3, r5
 800722e:	461d      	mov	r5, r3
 8007230:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007234:	2a30      	cmp	r2, #48	; 0x30
 8007236:	d0fa      	beq.n	800722e <_dtoa_r+0xb8e>
 8007238:	e6d7      	b.n	8006fea <_dtoa_r+0x94a>
 800723a:	9a01      	ldr	r2, [sp, #4]
 800723c:	429a      	cmp	r2, r3
 800723e:	d184      	bne.n	800714a <_dtoa_r+0xaaa>
 8007240:	9b00      	ldr	r3, [sp, #0]
 8007242:	3301      	adds	r3, #1
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	2331      	movs	r3, #49	; 0x31
 8007248:	7013      	strb	r3, [r2, #0]
 800724a:	e6ce      	b.n	8006fea <_dtoa_r+0x94a>
 800724c:	4b09      	ldr	r3, [pc, #36]	; (8007274 <_dtoa_r+0xbd4>)
 800724e:	f7ff ba95 	b.w	800677c <_dtoa_r+0xdc>
 8007252:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007254:	2b00      	cmp	r3, #0
 8007256:	f47f aa6e 	bne.w	8006736 <_dtoa_r+0x96>
 800725a:	4b07      	ldr	r3, [pc, #28]	; (8007278 <_dtoa_r+0xbd8>)
 800725c:	f7ff ba8e 	b.w	800677c <_dtoa_r+0xdc>
 8007260:	9b02      	ldr	r3, [sp, #8]
 8007262:	2b00      	cmp	r3, #0
 8007264:	dcae      	bgt.n	80071c4 <_dtoa_r+0xb24>
 8007266:	9b06      	ldr	r3, [sp, #24]
 8007268:	2b02      	cmp	r3, #2
 800726a:	f73f aea8 	bgt.w	8006fbe <_dtoa_r+0x91e>
 800726e:	e7a9      	b.n	80071c4 <_dtoa_r+0xb24>
 8007270:	08009277 	.word	0x08009277
 8007274:	080091d4 	.word	0x080091d4
 8007278:	080091f8 	.word	0x080091f8

0800727c <_localeconv_r>:
 800727c:	4800      	ldr	r0, [pc, #0]	; (8007280 <_localeconv_r+0x4>)
 800727e:	4770      	bx	lr
 8007280:	200001f8 	.word	0x200001f8

08007284 <malloc>:
 8007284:	4b02      	ldr	r3, [pc, #8]	; (8007290 <malloc+0xc>)
 8007286:	4601      	mov	r1, r0
 8007288:	6818      	ldr	r0, [r3, #0]
 800728a:	f000 bc17 	b.w	8007abc <_malloc_r>
 800728e:	bf00      	nop
 8007290:	200000a4 	.word	0x200000a4

08007294 <memcpy>:
 8007294:	440a      	add	r2, r1
 8007296:	4291      	cmp	r1, r2
 8007298:	f100 33ff 	add.w	r3, r0, #4294967295
 800729c:	d100      	bne.n	80072a0 <memcpy+0xc>
 800729e:	4770      	bx	lr
 80072a0:	b510      	push	{r4, lr}
 80072a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072aa:	4291      	cmp	r1, r2
 80072ac:	d1f9      	bne.n	80072a2 <memcpy+0xe>
 80072ae:	bd10      	pop	{r4, pc}

080072b0 <_Balloc>:
 80072b0:	b570      	push	{r4, r5, r6, lr}
 80072b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80072b4:	4604      	mov	r4, r0
 80072b6:	460d      	mov	r5, r1
 80072b8:	b976      	cbnz	r6, 80072d8 <_Balloc+0x28>
 80072ba:	2010      	movs	r0, #16
 80072bc:	f7ff ffe2 	bl	8007284 <malloc>
 80072c0:	4602      	mov	r2, r0
 80072c2:	6260      	str	r0, [r4, #36]	; 0x24
 80072c4:	b920      	cbnz	r0, 80072d0 <_Balloc+0x20>
 80072c6:	4b18      	ldr	r3, [pc, #96]	; (8007328 <_Balloc+0x78>)
 80072c8:	4818      	ldr	r0, [pc, #96]	; (800732c <_Balloc+0x7c>)
 80072ca:	2166      	movs	r1, #102	; 0x66
 80072cc:	f000 fdd6 	bl	8007e7c <__assert_func>
 80072d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072d4:	6006      	str	r6, [r0, #0]
 80072d6:	60c6      	str	r6, [r0, #12]
 80072d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80072da:	68f3      	ldr	r3, [r6, #12]
 80072dc:	b183      	cbz	r3, 8007300 <_Balloc+0x50>
 80072de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80072e6:	b9b8      	cbnz	r0, 8007318 <_Balloc+0x68>
 80072e8:	2101      	movs	r1, #1
 80072ea:	fa01 f605 	lsl.w	r6, r1, r5
 80072ee:	1d72      	adds	r2, r6, #5
 80072f0:	0092      	lsls	r2, r2, #2
 80072f2:	4620      	mov	r0, r4
 80072f4:	f000 fb60 	bl	80079b8 <_calloc_r>
 80072f8:	b160      	cbz	r0, 8007314 <_Balloc+0x64>
 80072fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80072fe:	e00e      	b.n	800731e <_Balloc+0x6e>
 8007300:	2221      	movs	r2, #33	; 0x21
 8007302:	2104      	movs	r1, #4
 8007304:	4620      	mov	r0, r4
 8007306:	f000 fb57 	bl	80079b8 <_calloc_r>
 800730a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800730c:	60f0      	str	r0, [r6, #12]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1e4      	bne.n	80072de <_Balloc+0x2e>
 8007314:	2000      	movs	r0, #0
 8007316:	bd70      	pop	{r4, r5, r6, pc}
 8007318:	6802      	ldr	r2, [r0, #0]
 800731a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800731e:	2300      	movs	r3, #0
 8007320:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007324:	e7f7      	b.n	8007316 <_Balloc+0x66>
 8007326:	bf00      	nop
 8007328:	08009205 	.word	0x08009205
 800732c:	08009288 	.word	0x08009288

08007330 <_Bfree>:
 8007330:	b570      	push	{r4, r5, r6, lr}
 8007332:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007334:	4605      	mov	r5, r0
 8007336:	460c      	mov	r4, r1
 8007338:	b976      	cbnz	r6, 8007358 <_Bfree+0x28>
 800733a:	2010      	movs	r0, #16
 800733c:	f7ff ffa2 	bl	8007284 <malloc>
 8007340:	4602      	mov	r2, r0
 8007342:	6268      	str	r0, [r5, #36]	; 0x24
 8007344:	b920      	cbnz	r0, 8007350 <_Bfree+0x20>
 8007346:	4b09      	ldr	r3, [pc, #36]	; (800736c <_Bfree+0x3c>)
 8007348:	4809      	ldr	r0, [pc, #36]	; (8007370 <_Bfree+0x40>)
 800734a:	218a      	movs	r1, #138	; 0x8a
 800734c:	f000 fd96 	bl	8007e7c <__assert_func>
 8007350:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007354:	6006      	str	r6, [r0, #0]
 8007356:	60c6      	str	r6, [r0, #12]
 8007358:	b13c      	cbz	r4, 800736a <_Bfree+0x3a>
 800735a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800735c:	6862      	ldr	r2, [r4, #4]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007364:	6021      	str	r1, [r4, #0]
 8007366:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800736a:	bd70      	pop	{r4, r5, r6, pc}
 800736c:	08009205 	.word	0x08009205
 8007370:	08009288 	.word	0x08009288

08007374 <__multadd>:
 8007374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007378:	690d      	ldr	r5, [r1, #16]
 800737a:	4607      	mov	r7, r0
 800737c:	460c      	mov	r4, r1
 800737e:	461e      	mov	r6, r3
 8007380:	f101 0c14 	add.w	ip, r1, #20
 8007384:	2000      	movs	r0, #0
 8007386:	f8dc 3000 	ldr.w	r3, [ip]
 800738a:	b299      	uxth	r1, r3
 800738c:	fb02 6101 	mla	r1, r2, r1, r6
 8007390:	0c1e      	lsrs	r6, r3, #16
 8007392:	0c0b      	lsrs	r3, r1, #16
 8007394:	fb02 3306 	mla	r3, r2, r6, r3
 8007398:	b289      	uxth	r1, r1
 800739a:	3001      	adds	r0, #1
 800739c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80073a0:	4285      	cmp	r5, r0
 80073a2:	f84c 1b04 	str.w	r1, [ip], #4
 80073a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80073aa:	dcec      	bgt.n	8007386 <__multadd+0x12>
 80073ac:	b30e      	cbz	r6, 80073f2 <__multadd+0x7e>
 80073ae:	68a3      	ldr	r3, [r4, #8]
 80073b0:	42ab      	cmp	r3, r5
 80073b2:	dc19      	bgt.n	80073e8 <__multadd+0x74>
 80073b4:	6861      	ldr	r1, [r4, #4]
 80073b6:	4638      	mov	r0, r7
 80073b8:	3101      	adds	r1, #1
 80073ba:	f7ff ff79 	bl	80072b0 <_Balloc>
 80073be:	4680      	mov	r8, r0
 80073c0:	b928      	cbnz	r0, 80073ce <__multadd+0x5a>
 80073c2:	4602      	mov	r2, r0
 80073c4:	4b0c      	ldr	r3, [pc, #48]	; (80073f8 <__multadd+0x84>)
 80073c6:	480d      	ldr	r0, [pc, #52]	; (80073fc <__multadd+0x88>)
 80073c8:	21b5      	movs	r1, #181	; 0xb5
 80073ca:	f000 fd57 	bl	8007e7c <__assert_func>
 80073ce:	6922      	ldr	r2, [r4, #16]
 80073d0:	3202      	adds	r2, #2
 80073d2:	f104 010c 	add.w	r1, r4, #12
 80073d6:	0092      	lsls	r2, r2, #2
 80073d8:	300c      	adds	r0, #12
 80073da:	f7ff ff5b 	bl	8007294 <memcpy>
 80073de:	4621      	mov	r1, r4
 80073e0:	4638      	mov	r0, r7
 80073e2:	f7ff ffa5 	bl	8007330 <_Bfree>
 80073e6:	4644      	mov	r4, r8
 80073e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80073ec:	3501      	adds	r5, #1
 80073ee:	615e      	str	r6, [r3, #20]
 80073f0:	6125      	str	r5, [r4, #16]
 80073f2:	4620      	mov	r0, r4
 80073f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073f8:	08009277 	.word	0x08009277
 80073fc:	08009288 	.word	0x08009288

08007400 <__hi0bits>:
 8007400:	0c03      	lsrs	r3, r0, #16
 8007402:	041b      	lsls	r3, r3, #16
 8007404:	b9d3      	cbnz	r3, 800743c <__hi0bits+0x3c>
 8007406:	0400      	lsls	r0, r0, #16
 8007408:	2310      	movs	r3, #16
 800740a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800740e:	bf04      	itt	eq
 8007410:	0200      	lsleq	r0, r0, #8
 8007412:	3308      	addeq	r3, #8
 8007414:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007418:	bf04      	itt	eq
 800741a:	0100      	lsleq	r0, r0, #4
 800741c:	3304      	addeq	r3, #4
 800741e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007422:	bf04      	itt	eq
 8007424:	0080      	lsleq	r0, r0, #2
 8007426:	3302      	addeq	r3, #2
 8007428:	2800      	cmp	r0, #0
 800742a:	db05      	blt.n	8007438 <__hi0bits+0x38>
 800742c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007430:	f103 0301 	add.w	r3, r3, #1
 8007434:	bf08      	it	eq
 8007436:	2320      	moveq	r3, #32
 8007438:	4618      	mov	r0, r3
 800743a:	4770      	bx	lr
 800743c:	2300      	movs	r3, #0
 800743e:	e7e4      	b.n	800740a <__hi0bits+0xa>

08007440 <__lo0bits>:
 8007440:	6803      	ldr	r3, [r0, #0]
 8007442:	f013 0207 	ands.w	r2, r3, #7
 8007446:	4601      	mov	r1, r0
 8007448:	d00b      	beq.n	8007462 <__lo0bits+0x22>
 800744a:	07da      	lsls	r2, r3, #31
 800744c:	d423      	bmi.n	8007496 <__lo0bits+0x56>
 800744e:	0798      	lsls	r0, r3, #30
 8007450:	bf49      	itett	mi
 8007452:	085b      	lsrmi	r3, r3, #1
 8007454:	089b      	lsrpl	r3, r3, #2
 8007456:	2001      	movmi	r0, #1
 8007458:	600b      	strmi	r3, [r1, #0]
 800745a:	bf5c      	itt	pl
 800745c:	600b      	strpl	r3, [r1, #0]
 800745e:	2002      	movpl	r0, #2
 8007460:	4770      	bx	lr
 8007462:	b298      	uxth	r0, r3
 8007464:	b9a8      	cbnz	r0, 8007492 <__lo0bits+0x52>
 8007466:	0c1b      	lsrs	r3, r3, #16
 8007468:	2010      	movs	r0, #16
 800746a:	b2da      	uxtb	r2, r3
 800746c:	b90a      	cbnz	r2, 8007472 <__lo0bits+0x32>
 800746e:	3008      	adds	r0, #8
 8007470:	0a1b      	lsrs	r3, r3, #8
 8007472:	071a      	lsls	r2, r3, #28
 8007474:	bf04      	itt	eq
 8007476:	091b      	lsreq	r3, r3, #4
 8007478:	3004      	addeq	r0, #4
 800747a:	079a      	lsls	r2, r3, #30
 800747c:	bf04      	itt	eq
 800747e:	089b      	lsreq	r3, r3, #2
 8007480:	3002      	addeq	r0, #2
 8007482:	07da      	lsls	r2, r3, #31
 8007484:	d403      	bmi.n	800748e <__lo0bits+0x4e>
 8007486:	085b      	lsrs	r3, r3, #1
 8007488:	f100 0001 	add.w	r0, r0, #1
 800748c:	d005      	beq.n	800749a <__lo0bits+0x5a>
 800748e:	600b      	str	r3, [r1, #0]
 8007490:	4770      	bx	lr
 8007492:	4610      	mov	r0, r2
 8007494:	e7e9      	b.n	800746a <__lo0bits+0x2a>
 8007496:	2000      	movs	r0, #0
 8007498:	4770      	bx	lr
 800749a:	2020      	movs	r0, #32
 800749c:	4770      	bx	lr
	...

080074a0 <__i2b>:
 80074a0:	b510      	push	{r4, lr}
 80074a2:	460c      	mov	r4, r1
 80074a4:	2101      	movs	r1, #1
 80074a6:	f7ff ff03 	bl	80072b0 <_Balloc>
 80074aa:	4602      	mov	r2, r0
 80074ac:	b928      	cbnz	r0, 80074ba <__i2b+0x1a>
 80074ae:	4b05      	ldr	r3, [pc, #20]	; (80074c4 <__i2b+0x24>)
 80074b0:	4805      	ldr	r0, [pc, #20]	; (80074c8 <__i2b+0x28>)
 80074b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80074b6:	f000 fce1 	bl	8007e7c <__assert_func>
 80074ba:	2301      	movs	r3, #1
 80074bc:	6144      	str	r4, [r0, #20]
 80074be:	6103      	str	r3, [r0, #16]
 80074c0:	bd10      	pop	{r4, pc}
 80074c2:	bf00      	nop
 80074c4:	08009277 	.word	0x08009277
 80074c8:	08009288 	.word	0x08009288

080074cc <__multiply>:
 80074cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d0:	4691      	mov	r9, r2
 80074d2:	690a      	ldr	r2, [r1, #16]
 80074d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80074d8:	429a      	cmp	r2, r3
 80074da:	bfb8      	it	lt
 80074dc:	460b      	movlt	r3, r1
 80074de:	460c      	mov	r4, r1
 80074e0:	bfbc      	itt	lt
 80074e2:	464c      	movlt	r4, r9
 80074e4:	4699      	movlt	r9, r3
 80074e6:	6927      	ldr	r7, [r4, #16]
 80074e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80074ec:	68a3      	ldr	r3, [r4, #8]
 80074ee:	6861      	ldr	r1, [r4, #4]
 80074f0:	eb07 060a 	add.w	r6, r7, sl
 80074f4:	42b3      	cmp	r3, r6
 80074f6:	b085      	sub	sp, #20
 80074f8:	bfb8      	it	lt
 80074fa:	3101      	addlt	r1, #1
 80074fc:	f7ff fed8 	bl	80072b0 <_Balloc>
 8007500:	b930      	cbnz	r0, 8007510 <__multiply+0x44>
 8007502:	4602      	mov	r2, r0
 8007504:	4b44      	ldr	r3, [pc, #272]	; (8007618 <__multiply+0x14c>)
 8007506:	4845      	ldr	r0, [pc, #276]	; (800761c <__multiply+0x150>)
 8007508:	f240 115d 	movw	r1, #349	; 0x15d
 800750c:	f000 fcb6 	bl	8007e7c <__assert_func>
 8007510:	f100 0514 	add.w	r5, r0, #20
 8007514:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007518:	462b      	mov	r3, r5
 800751a:	2200      	movs	r2, #0
 800751c:	4543      	cmp	r3, r8
 800751e:	d321      	bcc.n	8007564 <__multiply+0x98>
 8007520:	f104 0314 	add.w	r3, r4, #20
 8007524:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007528:	f109 0314 	add.w	r3, r9, #20
 800752c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007530:	9202      	str	r2, [sp, #8]
 8007532:	1b3a      	subs	r2, r7, r4
 8007534:	3a15      	subs	r2, #21
 8007536:	f022 0203 	bic.w	r2, r2, #3
 800753a:	3204      	adds	r2, #4
 800753c:	f104 0115 	add.w	r1, r4, #21
 8007540:	428f      	cmp	r7, r1
 8007542:	bf38      	it	cc
 8007544:	2204      	movcc	r2, #4
 8007546:	9201      	str	r2, [sp, #4]
 8007548:	9a02      	ldr	r2, [sp, #8]
 800754a:	9303      	str	r3, [sp, #12]
 800754c:	429a      	cmp	r2, r3
 800754e:	d80c      	bhi.n	800756a <__multiply+0x9e>
 8007550:	2e00      	cmp	r6, #0
 8007552:	dd03      	ble.n	800755c <__multiply+0x90>
 8007554:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007558:	2b00      	cmp	r3, #0
 800755a:	d05a      	beq.n	8007612 <__multiply+0x146>
 800755c:	6106      	str	r6, [r0, #16]
 800755e:	b005      	add	sp, #20
 8007560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007564:	f843 2b04 	str.w	r2, [r3], #4
 8007568:	e7d8      	b.n	800751c <__multiply+0x50>
 800756a:	f8b3 a000 	ldrh.w	sl, [r3]
 800756e:	f1ba 0f00 	cmp.w	sl, #0
 8007572:	d024      	beq.n	80075be <__multiply+0xf2>
 8007574:	f104 0e14 	add.w	lr, r4, #20
 8007578:	46a9      	mov	r9, r5
 800757a:	f04f 0c00 	mov.w	ip, #0
 800757e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007582:	f8d9 1000 	ldr.w	r1, [r9]
 8007586:	fa1f fb82 	uxth.w	fp, r2
 800758a:	b289      	uxth	r1, r1
 800758c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007590:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007594:	f8d9 2000 	ldr.w	r2, [r9]
 8007598:	4461      	add	r1, ip
 800759a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800759e:	fb0a c20b 	mla	r2, sl, fp, ip
 80075a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80075a6:	b289      	uxth	r1, r1
 80075a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80075ac:	4577      	cmp	r7, lr
 80075ae:	f849 1b04 	str.w	r1, [r9], #4
 80075b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80075b6:	d8e2      	bhi.n	800757e <__multiply+0xb2>
 80075b8:	9a01      	ldr	r2, [sp, #4]
 80075ba:	f845 c002 	str.w	ip, [r5, r2]
 80075be:	9a03      	ldr	r2, [sp, #12]
 80075c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80075c4:	3304      	adds	r3, #4
 80075c6:	f1b9 0f00 	cmp.w	r9, #0
 80075ca:	d020      	beq.n	800760e <__multiply+0x142>
 80075cc:	6829      	ldr	r1, [r5, #0]
 80075ce:	f104 0c14 	add.w	ip, r4, #20
 80075d2:	46ae      	mov	lr, r5
 80075d4:	f04f 0a00 	mov.w	sl, #0
 80075d8:	f8bc b000 	ldrh.w	fp, [ip]
 80075dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80075e0:	fb09 220b 	mla	r2, r9, fp, r2
 80075e4:	4492      	add	sl, r2
 80075e6:	b289      	uxth	r1, r1
 80075e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80075ec:	f84e 1b04 	str.w	r1, [lr], #4
 80075f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80075f4:	f8be 1000 	ldrh.w	r1, [lr]
 80075f8:	0c12      	lsrs	r2, r2, #16
 80075fa:	fb09 1102 	mla	r1, r9, r2, r1
 80075fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007602:	4567      	cmp	r7, ip
 8007604:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007608:	d8e6      	bhi.n	80075d8 <__multiply+0x10c>
 800760a:	9a01      	ldr	r2, [sp, #4]
 800760c:	50a9      	str	r1, [r5, r2]
 800760e:	3504      	adds	r5, #4
 8007610:	e79a      	b.n	8007548 <__multiply+0x7c>
 8007612:	3e01      	subs	r6, #1
 8007614:	e79c      	b.n	8007550 <__multiply+0x84>
 8007616:	bf00      	nop
 8007618:	08009277 	.word	0x08009277
 800761c:	08009288 	.word	0x08009288

08007620 <__pow5mult>:
 8007620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007624:	4615      	mov	r5, r2
 8007626:	f012 0203 	ands.w	r2, r2, #3
 800762a:	4606      	mov	r6, r0
 800762c:	460f      	mov	r7, r1
 800762e:	d007      	beq.n	8007640 <__pow5mult+0x20>
 8007630:	4c25      	ldr	r4, [pc, #148]	; (80076c8 <__pow5mult+0xa8>)
 8007632:	3a01      	subs	r2, #1
 8007634:	2300      	movs	r3, #0
 8007636:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800763a:	f7ff fe9b 	bl	8007374 <__multadd>
 800763e:	4607      	mov	r7, r0
 8007640:	10ad      	asrs	r5, r5, #2
 8007642:	d03d      	beq.n	80076c0 <__pow5mult+0xa0>
 8007644:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007646:	b97c      	cbnz	r4, 8007668 <__pow5mult+0x48>
 8007648:	2010      	movs	r0, #16
 800764a:	f7ff fe1b 	bl	8007284 <malloc>
 800764e:	4602      	mov	r2, r0
 8007650:	6270      	str	r0, [r6, #36]	; 0x24
 8007652:	b928      	cbnz	r0, 8007660 <__pow5mult+0x40>
 8007654:	4b1d      	ldr	r3, [pc, #116]	; (80076cc <__pow5mult+0xac>)
 8007656:	481e      	ldr	r0, [pc, #120]	; (80076d0 <__pow5mult+0xb0>)
 8007658:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800765c:	f000 fc0e 	bl	8007e7c <__assert_func>
 8007660:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007664:	6004      	str	r4, [r0, #0]
 8007666:	60c4      	str	r4, [r0, #12]
 8007668:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800766c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007670:	b94c      	cbnz	r4, 8007686 <__pow5mult+0x66>
 8007672:	f240 2171 	movw	r1, #625	; 0x271
 8007676:	4630      	mov	r0, r6
 8007678:	f7ff ff12 	bl	80074a0 <__i2b>
 800767c:	2300      	movs	r3, #0
 800767e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007682:	4604      	mov	r4, r0
 8007684:	6003      	str	r3, [r0, #0]
 8007686:	f04f 0900 	mov.w	r9, #0
 800768a:	07eb      	lsls	r3, r5, #31
 800768c:	d50a      	bpl.n	80076a4 <__pow5mult+0x84>
 800768e:	4639      	mov	r1, r7
 8007690:	4622      	mov	r2, r4
 8007692:	4630      	mov	r0, r6
 8007694:	f7ff ff1a 	bl	80074cc <__multiply>
 8007698:	4639      	mov	r1, r7
 800769a:	4680      	mov	r8, r0
 800769c:	4630      	mov	r0, r6
 800769e:	f7ff fe47 	bl	8007330 <_Bfree>
 80076a2:	4647      	mov	r7, r8
 80076a4:	106d      	asrs	r5, r5, #1
 80076a6:	d00b      	beq.n	80076c0 <__pow5mult+0xa0>
 80076a8:	6820      	ldr	r0, [r4, #0]
 80076aa:	b938      	cbnz	r0, 80076bc <__pow5mult+0x9c>
 80076ac:	4622      	mov	r2, r4
 80076ae:	4621      	mov	r1, r4
 80076b0:	4630      	mov	r0, r6
 80076b2:	f7ff ff0b 	bl	80074cc <__multiply>
 80076b6:	6020      	str	r0, [r4, #0]
 80076b8:	f8c0 9000 	str.w	r9, [r0]
 80076bc:	4604      	mov	r4, r0
 80076be:	e7e4      	b.n	800768a <__pow5mult+0x6a>
 80076c0:	4638      	mov	r0, r7
 80076c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076c6:	bf00      	nop
 80076c8:	080093d8 	.word	0x080093d8
 80076cc:	08009205 	.word	0x08009205
 80076d0:	08009288 	.word	0x08009288

080076d4 <__lshift>:
 80076d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076d8:	460c      	mov	r4, r1
 80076da:	6849      	ldr	r1, [r1, #4]
 80076dc:	6923      	ldr	r3, [r4, #16]
 80076de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076e2:	68a3      	ldr	r3, [r4, #8]
 80076e4:	4607      	mov	r7, r0
 80076e6:	4691      	mov	r9, r2
 80076e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076ec:	f108 0601 	add.w	r6, r8, #1
 80076f0:	42b3      	cmp	r3, r6
 80076f2:	db0b      	blt.n	800770c <__lshift+0x38>
 80076f4:	4638      	mov	r0, r7
 80076f6:	f7ff fddb 	bl	80072b0 <_Balloc>
 80076fa:	4605      	mov	r5, r0
 80076fc:	b948      	cbnz	r0, 8007712 <__lshift+0x3e>
 80076fe:	4602      	mov	r2, r0
 8007700:	4b2a      	ldr	r3, [pc, #168]	; (80077ac <__lshift+0xd8>)
 8007702:	482b      	ldr	r0, [pc, #172]	; (80077b0 <__lshift+0xdc>)
 8007704:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007708:	f000 fbb8 	bl	8007e7c <__assert_func>
 800770c:	3101      	adds	r1, #1
 800770e:	005b      	lsls	r3, r3, #1
 8007710:	e7ee      	b.n	80076f0 <__lshift+0x1c>
 8007712:	2300      	movs	r3, #0
 8007714:	f100 0114 	add.w	r1, r0, #20
 8007718:	f100 0210 	add.w	r2, r0, #16
 800771c:	4618      	mov	r0, r3
 800771e:	4553      	cmp	r3, sl
 8007720:	db37      	blt.n	8007792 <__lshift+0xbe>
 8007722:	6920      	ldr	r0, [r4, #16]
 8007724:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007728:	f104 0314 	add.w	r3, r4, #20
 800772c:	f019 091f 	ands.w	r9, r9, #31
 8007730:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007734:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007738:	d02f      	beq.n	800779a <__lshift+0xc6>
 800773a:	f1c9 0e20 	rsb	lr, r9, #32
 800773e:	468a      	mov	sl, r1
 8007740:	f04f 0c00 	mov.w	ip, #0
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	fa02 f209 	lsl.w	r2, r2, r9
 800774a:	ea42 020c 	orr.w	r2, r2, ip
 800774e:	f84a 2b04 	str.w	r2, [sl], #4
 8007752:	f853 2b04 	ldr.w	r2, [r3], #4
 8007756:	4298      	cmp	r0, r3
 8007758:	fa22 fc0e 	lsr.w	ip, r2, lr
 800775c:	d8f2      	bhi.n	8007744 <__lshift+0x70>
 800775e:	1b03      	subs	r3, r0, r4
 8007760:	3b15      	subs	r3, #21
 8007762:	f023 0303 	bic.w	r3, r3, #3
 8007766:	3304      	adds	r3, #4
 8007768:	f104 0215 	add.w	r2, r4, #21
 800776c:	4290      	cmp	r0, r2
 800776e:	bf38      	it	cc
 8007770:	2304      	movcc	r3, #4
 8007772:	f841 c003 	str.w	ip, [r1, r3]
 8007776:	f1bc 0f00 	cmp.w	ip, #0
 800777a:	d001      	beq.n	8007780 <__lshift+0xac>
 800777c:	f108 0602 	add.w	r6, r8, #2
 8007780:	3e01      	subs	r6, #1
 8007782:	4638      	mov	r0, r7
 8007784:	612e      	str	r6, [r5, #16]
 8007786:	4621      	mov	r1, r4
 8007788:	f7ff fdd2 	bl	8007330 <_Bfree>
 800778c:	4628      	mov	r0, r5
 800778e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007792:	f842 0f04 	str.w	r0, [r2, #4]!
 8007796:	3301      	adds	r3, #1
 8007798:	e7c1      	b.n	800771e <__lshift+0x4a>
 800779a:	3904      	subs	r1, #4
 800779c:	f853 2b04 	ldr.w	r2, [r3], #4
 80077a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80077a4:	4298      	cmp	r0, r3
 80077a6:	d8f9      	bhi.n	800779c <__lshift+0xc8>
 80077a8:	e7ea      	b.n	8007780 <__lshift+0xac>
 80077aa:	bf00      	nop
 80077ac:	08009277 	.word	0x08009277
 80077b0:	08009288 	.word	0x08009288

080077b4 <__mcmp>:
 80077b4:	b530      	push	{r4, r5, lr}
 80077b6:	6902      	ldr	r2, [r0, #16]
 80077b8:	690c      	ldr	r4, [r1, #16]
 80077ba:	1b12      	subs	r2, r2, r4
 80077bc:	d10e      	bne.n	80077dc <__mcmp+0x28>
 80077be:	f100 0314 	add.w	r3, r0, #20
 80077c2:	3114      	adds	r1, #20
 80077c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80077c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80077cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80077d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80077d4:	42a5      	cmp	r5, r4
 80077d6:	d003      	beq.n	80077e0 <__mcmp+0x2c>
 80077d8:	d305      	bcc.n	80077e6 <__mcmp+0x32>
 80077da:	2201      	movs	r2, #1
 80077dc:	4610      	mov	r0, r2
 80077de:	bd30      	pop	{r4, r5, pc}
 80077e0:	4283      	cmp	r3, r0
 80077e2:	d3f3      	bcc.n	80077cc <__mcmp+0x18>
 80077e4:	e7fa      	b.n	80077dc <__mcmp+0x28>
 80077e6:	f04f 32ff 	mov.w	r2, #4294967295
 80077ea:	e7f7      	b.n	80077dc <__mcmp+0x28>

080077ec <__mdiff>:
 80077ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f0:	460c      	mov	r4, r1
 80077f2:	4606      	mov	r6, r0
 80077f4:	4611      	mov	r1, r2
 80077f6:	4620      	mov	r0, r4
 80077f8:	4690      	mov	r8, r2
 80077fa:	f7ff ffdb 	bl	80077b4 <__mcmp>
 80077fe:	1e05      	subs	r5, r0, #0
 8007800:	d110      	bne.n	8007824 <__mdiff+0x38>
 8007802:	4629      	mov	r1, r5
 8007804:	4630      	mov	r0, r6
 8007806:	f7ff fd53 	bl	80072b0 <_Balloc>
 800780a:	b930      	cbnz	r0, 800781a <__mdiff+0x2e>
 800780c:	4b3a      	ldr	r3, [pc, #232]	; (80078f8 <__mdiff+0x10c>)
 800780e:	4602      	mov	r2, r0
 8007810:	f240 2132 	movw	r1, #562	; 0x232
 8007814:	4839      	ldr	r0, [pc, #228]	; (80078fc <__mdiff+0x110>)
 8007816:	f000 fb31 	bl	8007e7c <__assert_func>
 800781a:	2301      	movs	r3, #1
 800781c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007820:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007824:	bfa4      	itt	ge
 8007826:	4643      	movge	r3, r8
 8007828:	46a0      	movge	r8, r4
 800782a:	4630      	mov	r0, r6
 800782c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007830:	bfa6      	itte	ge
 8007832:	461c      	movge	r4, r3
 8007834:	2500      	movge	r5, #0
 8007836:	2501      	movlt	r5, #1
 8007838:	f7ff fd3a 	bl	80072b0 <_Balloc>
 800783c:	b920      	cbnz	r0, 8007848 <__mdiff+0x5c>
 800783e:	4b2e      	ldr	r3, [pc, #184]	; (80078f8 <__mdiff+0x10c>)
 8007840:	4602      	mov	r2, r0
 8007842:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007846:	e7e5      	b.n	8007814 <__mdiff+0x28>
 8007848:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800784c:	6926      	ldr	r6, [r4, #16]
 800784e:	60c5      	str	r5, [r0, #12]
 8007850:	f104 0914 	add.w	r9, r4, #20
 8007854:	f108 0514 	add.w	r5, r8, #20
 8007858:	f100 0e14 	add.w	lr, r0, #20
 800785c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007860:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007864:	f108 0210 	add.w	r2, r8, #16
 8007868:	46f2      	mov	sl, lr
 800786a:	2100      	movs	r1, #0
 800786c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007870:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007874:	fa1f f883 	uxth.w	r8, r3
 8007878:	fa11 f18b 	uxtah	r1, r1, fp
 800787c:	0c1b      	lsrs	r3, r3, #16
 800787e:	eba1 0808 	sub.w	r8, r1, r8
 8007882:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007886:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800788a:	fa1f f888 	uxth.w	r8, r8
 800788e:	1419      	asrs	r1, r3, #16
 8007890:	454e      	cmp	r6, r9
 8007892:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007896:	f84a 3b04 	str.w	r3, [sl], #4
 800789a:	d8e7      	bhi.n	800786c <__mdiff+0x80>
 800789c:	1b33      	subs	r3, r6, r4
 800789e:	3b15      	subs	r3, #21
 80078a0:	f023 0303 	bic.w	r3, r3, #3
 80078a4:	3304      	adds	r3, #4
 80078a6:	3415      	adds	r4, #21
 80078a8:	42a6      	cmp	r6, r4
 80078aa:	bf38      	it	cc
 80078ac:	2304      	movcc	r3, #4
 80078ae:	441d      	add	r5, r3
 80078b0:	4473      	add	r3, lr
 80078b2:	469e      	mov	lr, r3
 80078b4:	462e      	mov	r6, r5
 80078b6:	4566      	cmp	r6, ip
 80078b8:	d30e      	bcc.n	80078d8 <__mdiff+0xec>
 80078ba:	f10c 0203 	add.w	r2, ip, #3
 80078be:	1b52      	subs	r2, r2, r5
 80078c0:	f022 0203 	bic.w	r2, r2, #3
 80078c4:	3d03      	subs	r5, #3
 80078c6:	45ac      	cmp	ip, r5
 80078c8:	bf38      	it	cc
 80078ca:	2200      	movcc	r2, #0
 80078cc:	441a      	add	r2, r3
 80078ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80078d2:	b17b      	cbz	r3, 80078f4 <__mdiff+0x108>
 80078d4:	6107      	str	r7, [r0, #16]
 80078d6:	e7a3      	b.n	8007820 <__mdiff+0x34>
 80078d8:	f856 8b04 	ldr.w	r8, [r6], #4
 80078dc:	fa11 f288 	uxtah	r2, r1, r8
 80078e0:	1414      	asrs	r4, r2, #16
 80078e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80078e6:	b292      	uxth	r2, r2
 80078e8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80078ec:	f84e 2b04 	str.w	r2, [lr], #4
 80078f0:	1421      	asrs	r1, r4, #16
 80078f2:	e7e0      	b.n	80078b6 <__mdiff+0xca>
 80078f4:	3f01      	subs	r7, #1
 80078f6:	e7ea      	b.n	80078ce <__mdiff+0xe2>
 80078f8:	08009277 	.word	0x08009277
 80078fc:	08009288 	.word	0x08009288

08007900 <__d2b>:
 8007900:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007904:	4689      	mov	r9, r1
 8007906:	2101      	movs	r1, #1
 8007908:	ec57 6b10 	vmov	r6, r7, d0
 800790c:	4690      	mov	r8, r2
 800790e:	f7ff fccf 	bl	80072b0 <_Balloc>
 8007912:	4604      	mov	r4, r0
 8007914:	b930      	cbnz	r0, 8007924 <__d2b+0x24>
 8007916:	4602      	mov	r2, r0
 8007918:	4b25      	ldr	r3, [pc, #148]	; (80079b0 <__d2b+0xb0>)
 800791a:	4826      	ldr	r0, [pc, #152]	; (80079b4 <__d2b+0xb4>)
 800791c:	f240 310a 	movw	r1, #778	; 0x30a
 8007920:	f000 faac 	bl	8007e7c <__assert_func>
 8007924:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007928:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800792c:	bb35      	cbnz	r5, 800797c <__d2b+0x7c>
 800792e:	2e00      	cmp	r6, #0
 8007930:	9301      	str	r3, [sp, #4]
 8007932:	d028      	beq.n	8007986 <__d2b+0x86>
 8007934:	4668      	mov	r0, sp
 8007936:	9600      	str	r6, [sp, #0]
 8007938:	f7ff fd82 	bl	8007440 <__lo0bits>
 800793c:	9900      	ldr	r1, [sp, #0]
 800793e:	b300      	cbz	r0, 8007982 <__d2b+0x82>
 8007940:	9a01      	ldr	r2, [sp, #4]
 8007942:	f1c0 0320 	rsb	r3, r0, #32
 8007946:	fa02 f303 	lsl.w	r3, r2, r3
 800794a:	430b      	orrs	r3, r1
 800794c:	40c2      	lsrs	r2, r0
 800794e:	6163      	str	r3, [r4, #20]
 8007950:	9201      	str	r2, [sp, #4]
 8007952:	9b01      	ldr	r3, [sp, #4]
 8007954:	61a3      	str	r3, [r4, #24]
 8007956:	2b00      	cmp	r3, #0
 8007958:	bf14      	ite	ne
 800795a:	2202      	movne	r2, #2
 800795c:	2201      	moveq	r2, #1
 800795e:	6122      	str	r2, [r4, #16]
 8007960:	b1d5      	cbz	r5, 8007998 <__d2b+0x98>
 8007962:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007966:	4405      	add	r5, r0
 8007968:	f8c9 5000 	str.w	r5, [r9]
 800796c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007970:	f8c8 0000 	str.w	r0, [r8]
 8007974:	4620      	mov	r0, r4
 8007976:	b003      	add	sp, #12
 8007978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800797c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007980:	e7d5      	b.n	800792e <__d2b+0x2e>
 8007982:	6161      	str	r1, [r4, #20]
 8007984:	e7e5      	b.n	8007952 <__d2b+0x52>
 8007986:	a801      	add	r0, sp, #4
 8007988:	f7ff fd5a 	bl	8007440 <__lo0bits>
 800798c:	9b01      	ldr	r3, [sp, #4]
 800798e:	6163      	str	r3, [r4, #20]
 8007990:	2201      	movs	r2, #1
 8007992:	6122      	str	r2, [r4, #16]
 8007994:	3020      	adds	r0, #32
 8007996:	e7e3      	b.n	8007960 <__d2b+0x60>
 8007998:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800799c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80079a0:	f8c9 0000 	str.w	r0, [r9]
 80079a4:	6918      	ldr	r0, [r3, #16]
 80079a6:	f7ff fd2b 	bl	8007400 <__hi0bits>
 80079aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80079ae:	e7df      	b.n	8007970 <__d2b+0x70>
 80079b0:	08009277 	.word	0x08009277
 80079b4:	08009288 	.word	0x08009288

080079b8 <_calloc_r>:
 80079b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079ba:	fba1 2402 	umull	r2, r4, r1, r2
 80079be:	b94c      	cbnz	r4, 80079d4 <_calloc_r+0x1c>
 80079c0:	4611      	mov	r1, r2
 80079c2:	9201      	str	r2, [sp, #4]
 80079c4:	f000 f87a 	bl	8007abc <_malloc_r>
 80079c8:	9a01      	ldr	r2, [sp, #4]
 80079ca:	4605      	mov	r5, r0
 80079cc:	b930      	cbnz	r0, 80079dc <_calloc_r+0x24>
 80079ce:	4628      	mov	r0, r5
 80079d0:	b003      	add	sp, #12
 80079d2:	bd30      	pop	{r4, r5, pc}
 80079d4:	220c      	movs	r2, #12
 80079d6:	6002      	str	r2, [r0, #0]
 80079d8:	2500      	movs	r5, #0
 80079da:	e7f8      	b.n	80079ce <_calloc_r+0x16>
 80079dc:	4621      	mov	r1, r4
 80079de:	f7fe f941 	bl	8005c64 <memset>
 80079e2:	e7f4      	b.n	80079ce <_calloc_r+0x16>

080079e4 <_free_r>:
 80079e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079e6:	2900      	cmp	r1, #0
 80079e8:	d044      	beq.n	8007a74 <_free_r+0x90>
 80079ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079ee:	9001      	str	r0, [sp, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f1a1 0404 	sub.w	r4, r1, #4
 80079f6:	bfb8      	it	lt
 80079f8:	18e4      	addlt	r4, r4, r3
 80079fa:	f000 fa9b 	bl	8007f34 <__malloc_lock>
 80079fe:	4a1e      	ldr	r2, [pc, #120]	; (8007a78 <_free_r+0x94>)
 8007a00:	9801      	ldr	r0, [sp, #4]
 8007a02:	6813      	ldr	r3, [r2, #0]
 8007a04:	b933      	cbnz	r3, 8007a14 <_free_r+0x30>
 8007a06:	6063      	str	r3, [r4, #4]
 8007a08:	6014      	str	r4, [r2, #0]
 8007a0a:	b003      	add	sp, #12
 8007a0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a10:	f000 ba96 	b.w	8007f40 <__malloc_unlock>
 8007a14:	42a3      	cmp	r3, r4
 8007a16:	d908      	bls.n	8007a2a <_free_r+0x46>
 8007a18:	6825      	ldr	r5, [r4, #0]
 8007a1a:	1961      	adds	r1, r4, r5
 8007a1c:	428b      	cmp	r3, r1
 8007a1e:	bf01      	itttt	eq
 8007a20:	6819      	ldreq	r1, [r3, #0]
 8007a22:	685b      	ldreq	r3, [r3, #4]
 8007a24:	1949      	addeq	r1, r1, r5
 8007a26:	6021      	streq	r1, [r4, #0]
 8007a28:	e7ed      	b.n	8007a06 <_free_r+0x22>
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	b10b      	cbz	r3, 8007a34 <_free_r+0x50>
 8007a30:	42a3      	cmp	r3, r4
 8007a32:	d9fa      	bls.n	8007a2a <_free_r+0x46>
 8007a34:	6811      	ldr	r1, [r2, #0]
 8007a36:	1855      	adds	r5, r2, r1
 8007a38:	42a5      	cmp	r5, r4
 8007a3a:	d10b      	bne.n	8007a54 <_free_r+0x70>
 8007a3c:	6824      	ldr	r4, [r4, #0]
 8007a3e:	4421      	add	r1, r4
 8007a40:	1854      	adds	r4, r2, r1
 8007a42:	42a3      	cmp	r3, r4
 8007a44:	6011      	str	r1, [r2, #0]
 8007a46:	d1e0      	bne.n	8007a0a <_free_r+0x26>
 8007a48:	681c      	ldr	r4, [r3, #0]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	6053      	str	r3, [r2, #4]
 8007a4e:	4421      	add	r1, r4
 8007a50:	6011      	str	r1, [r2, #0]
 8007a52:	e7da      	b.n	8007a0a <_free_r+0x26>
 8007a54:	d902      	bls.n	8007a5c <_free_r+0x78>
 8007a56:	230c      	movs	r3, #12
 8007a58:	6003      	str	r3, [r0, #0]
 8007a5a:	e7d6      	b.n	8007a0a <_free_r+0x26>
 8007a5c:	6825      	ldr	r5, [r4, #0]
 8007a5e:	1961      	adds	r1, r4, r5
 8007a60:	428b      	cmp	r3, r1
 8007a62:	bf04      	itt	eq
 8007a64:	6819      	ldreq	r1, [r3, #0]
 8007a66:	685b      	ldreq	r3, [r3, #4]
 8007a68:	6063      	str	r3, [r4, #4]
 8007a6a:	bf04      	itt	eq
 8007a6c:	1949      	addeq	r1, r1, r5
 8007a6e:	6021      	streq	r1, [r4, #0]
 8007a70:	6054      	str	r4, [r2, #4]
 8007a72:	e7ca      	b.n	8007a0a <_free_r+0x26>
 8007a74:	b003      	add	sp, #12
 8007a76:	bd30      	pop	{r4, r5, pc}
 8007a78:	20000460 	.word	0x20000460

08007a7c <sbrk_aligned>:
 8007a7c:	b570      	push	{r4, r5, r6, lr}
 8007a7e:	4e0e      	ldr	r6, [pc, #56]	; (8007ab8 <sbrk_aligned+0x3c>)
 8007a80:	460c      	mov	r4, r1
 8007a82:	6831      	ldr	r1, [r6, #0]
 8007a84:	4605      	mov	r5, r0
 8007a86:	b911      	cbnz	r1, 8007a8e <sbrk_aligned+0x12>
 8007a88:	f000 f9e8 	bl	8007e5c <_sbrk_r>
 8007a8c:	6030      	str	r0, [r6, #0]
 8007a8e:	4621      	mov	r1, r4
 8007a90:	4628      	mov	r0, r5
 8007a92:	f000 f9e3 	bl	8007e5c <_sbrk_r>
 8007a96:	1c43      	adds	r3, r0, #1
 8007a98:	d00a      	beq.n	8007ab0 <sbrk_aligned+0x34>
 8007a9a:	1cc4      	adds	r4, r0, #3
 8007a9c:	f024 0403 	bic.w	r4, r4, #3
 8007aa0:	42a0      	cmp	r0, r4
 8007aa2:	d007      	beq.n	8007ab4 <sbrk_aligned+0x38>
 8007aa4:	1a21      	subs	r1, r4, r0
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	f000 f9d8 	bl	8007e5c <_sbrk_r>
 8007aac:	3001      	adds	r0, #1
 8007aae:	d101      	bne.n	8007ab4 <sbrk_aligned+0x38>
 8007ab0:	f04f 34ff 	mov.w	r4, #4294967295
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	bd70      	pop	{r4, r5, r6, pc}
 8007ab8:	20000464 	.word	0x20000464

08007abc <_malloc_r>:
 8007abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ac0:	1ccd      	adds	r5, r1, #3
 8007ac2:	f025 0503 	bic.w	r5, r5, #3
 8007ac6:	3508      	adds	r5, #8
 8007ac8:	2d0c      	cmp	r5, #12
 8007aca:	bf38      	it	cc
 8007acc:	250c      	movcc	r5, #12
 8007ace:	2d00      	cmp	r5, #0
 8007ad0:	4607      	mov	r7, r0
 8007ad2:	db01      	blt.n	8007ad8 <_malloc_r+0x1c>
 8007ad4:	42a9      	cmp	r1, r5
 8007ad6:	d905      	bls.n	8007ae4 <_malloc_r+0x28>
 8007ad8:	230c      	movs	r3, #12
 8007ada:	603b      	str	r3, [r7, #0]
 8007adc:	2600      	movs	r6, #0
 8007ade:	4630      	mov	r0, r6
 8007ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ae4:	4e2e      	ldr	r6, [pc, #184]	; (8007ba0 <_malloc_r+0xe4>)
 8007ae6:	f000 fa25 	bl	8007f34 <__malloc_lock>
 8007aea:	6833      	ldr	r3, [r6, #0]
 8007aec:	461c      	mov	r4, r3
 8007aee:	bb34      	cbnz	r4, 8007b3e <_malloc_r+0x82>
 8007af0:	4629      	mov	r1, r5
 8007af2:	4638      	mov	r0, r7
 8007af4:	f7ff ffc2 	bl	8007a7c <sbrk_aligned>
 8007af8:	1c43      	adds	r3, r0, #1
 8007afa:	4604      	mov	r4, r0
 8007afc:	d14d      	bne.n	8007b9a <_malloc_r+0xde>
 8007afe:	6834      	ldr	r4, [r6, #0]
 8007b00:	4626      	mov	r6, r4
 8007b02:	2e00      	cmp	r6, #0
 8007b04:	d140      	bne.n	8007b88 <_malloc_r+0xcc>
 8007b06:	6823      	ldr	r3, [r4, #0]
 8007b08:	4631      	mov	r1, r6
 8007b0a:	4638      	mov	r0, r7
 8007b0c:	eb04 0803 	add.w	r8, r4, r3
 8007b10:	f000 f9a4 	bl	8007e5c <_sbrk_r>
 8007b14:	4580      	cmp	r8, r0
 8007b16:	d13a      	bne.n	8007b8e <_malloc_r+0xd2>
 8007b18:	6821      	ldr	r1, [r4, #0]
 8007b1a:	3503      	adds	r5, #3
 8007b1c:	1a6d      	subs	r5, r5, r1
 8007b1e:	f025 0503 	bic.w	r5, r5, #3
 8007b22:	3508      	adds	r5, #8
 8007b24:	2d0c      	cmp	r5, #12
 8007b26:	bf38      	it	cc
 8007b28:	250c      	movcc	r5, #12
 8007b2a:	4629      	mov	r1, r5
 8007b2c:	4638      	mov	r0, r7
 8007b2e:	f7ff ffa5 	bl	8007a7c <sbrk_aligned>
 8007b32:	3001      	adds	r0, #1
 8007b34:	d02b      	beq.n	8007b8e <_malloc_r+0xd2>
 8007b36:	6823      	ldr	r3, [r4, #0]
 8007b38:	442b      	add	r3, r5
 8007b3a:	6023      	str	r3, [r4, #0]
 8007b3c:	e00e      	b.n	8007b5c <_malloc_r+0xa0>
 8007b3e:	6822      	ldr	r2, [r4, #0]
 8007b40:	1b52      	subs	r2, r2, r5
 8007b42:	d41e      	bmi.n	8007b82 <_malloc_r+0xc6>
 8007b44:	2a0b      	cmp	r2, #11
 8007b46:	d916      	bls.n	8007b76 <_malloc_r+0xba>
 8007b48:	1961      	adds	r1, r4, r5
 8007b4a:	42a3      	cmp	r3, r4
 8007b4c:	6025      	str	r5, [r4, #0]
 8007b4e:	bf18      	it	ne
 8007b50:	6059      	strne	r1, [r3, #4]
 8007b52:	6863      	ldr	r3, [r4, #4]
 8007b54:	bf08      	it	eq
 8007b56:	6031      	streq	r1, [r6, #0]
 8007b58:	5162      	str	r2, [r4, r5]
 8007b5a:	604b      	str	r3, [r1, #4]
 8007b5c:	4638      	mov	r0, r7
 8007b5e:	f104 060b 	add.w	r6, r4, #11
 8007b62:	f000 f9ed 	bl	8007f40 <__malloc_unlock>
 8007b66:	f026 0607 	bic.w	r6, r6, #7
 8007b6a:	1d23      	adds	r3, r4, #4
 8007b6c:	1af2      	subs	r2, r6, r3
 8007b6e:	d0b6      	beq.n	8007ade <_malloc_r+0x22>
 8007b70:	1b9b      	subs	r3, r3, r6
 8007b72:	50a3      	str	r3, [r4, r2]
 8007b74:	e7b3      	b.n	8007ade <_malloc_r+0x22>
 8007b76:	6862      	ldr	r2, [r4, #4]
 8007b78:	42a3      	cmp	r3, r4
 8007b7a:	bf0c      	ite	eq
 8007b7c:	6032      	streq	r2, [r6, #0]
 8007b7e:	605a      	strne	r2, [r3, #4]
 8007b80:	e7ec      	b.n	8007b5c <_malloc_r+0xa0>
 8007b82:	4623      	mov	r3, r4
 8007b84:	6864      	ldr	r4, [r4, #4]
 8007b86:	e7b2      	b.n	8007aee <_malloc_r+0x32>
 8007b88:	4634      	mov	r4, r6
 8007b8a:	6876      	ldr	r6, [r6, #4]
 8007b8c:	e7b9      	b.n	8007b02 <_malloc_r+0x46>
 8007b8e:	230c      	movs	r3, #12
 8007b90:	603b      	str	r3, [r7, #0]
 8007b92:	4638      	mov	r0, r7
 8007b94:	f000 f9d4 	bl	8007f40 <__malloc_unlock>
 8007b98:	e7a1      	b.n	8007ade <_malloc_r+0x22>
 8007b9a:	6025      	str	r5, [r4, #0]
 8007b9c:	e7de      	b.n	8007b5c <_malloc_r+0xa0>
 8007b9e:	bf00      	nop
 8007ba0:	20000460 	.word	0x20000460

08007ba4 <__ssputs_r>:
 8007ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba8:	688e      	ldr	r6, [r1, #8]
 8007baa:	429e      	cmp	r6, r3
 8007bac:	4682      	mov	sl, r0
 8007bae:	460c      	mov	r4, r1
 8007bb0:	4690      	mov	r8, r2
 8007bb2:	461f      	mov	r7, r3
 8007bb4:	d838      	bhi.n	8007c28 <__ssputs_r+0x84>
 8007bb6:	898a      	ldrh	r2, [r1, #12]
 8007bb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007bbc:	d032      	beq.n	8007c24 <__ssputs_r+0x80>
 8007bbe:	6825      	ldr	r5, [r4, #0]
 8007bc0:	6909      	ldr	r1, [r1, #16]
 8007bc2:	eba5 0901 	sub.w	r9, r5, r1
 8007bc6:	6965      	ldr	r5, [r4, #20]
 8007bc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	444b      	add	r3, r9
 8007bd4:	106d      	asrs	r5, r5, #1
 8007bd6:	429d      	cmp	r5, r3
 8007bd8:	bf38      	it	cc
 8007bda:	461d      	movcc	r5, r3
 8007bdc:	0553      	lsls	r3, r2, #21
 8007bde:	d531      	bpl.n	8007c44 <__ssputs_r+0xa0>
 8007be0:	4629      	mov	r1, r5
 8007be2:	f7ff ff6b 	bl	8007abc <_malloc_r>
 8007be6:	4606      	mov	r6, r0
 8007be8:	b950      	cbnz	r0, 8007c00 <__ssputs_r+0x5c>
 8007bea:	230c      	movs	r3, #12
 8007bec:	f8ca 3000 	str.w	r3, [sl]
 8007bf0:	89a3      	ldrh	r3, [r4, #12]
 8007bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bf6:	81a3      	strh	r3, [r4, #12]
 8007bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c00:	6921      	ldr	r1, [r4, #16]
 8007c02:	464a      	mov	r2, r9
 8007c04:	f7ff fb46 	bl	8007294 <memcpy>
 8007c08:	89a3      	ldrh	r3, [r4, #12]
 8007c0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c12:	81a3      	strh	r3, [r4, #12]
 8007c14:	6126      	str	r6, [r4, #16]
 8007c16:	6165      	str	r5, [r4, #20]
 8007c18:	444e      	add	r6, r9
 8007c1a:	eba5 0509 	sub.w	r5, r5, r9
 8007c1e:	6026      	str	r6, [r4, #0]
 8007c20:	60a5      	str	r5, [r4, #8]
 8007c22:	463e      	mov	r6, r7
 8007c24:	42be      	cmp	r6, r7
 8007c26:	d900      	bls.n	8007c2a <__ssputs_r+0x86>
 8007c28:	463e      	mov	r6, r7
 8007c2a:	6820      	ldr	r0, [r4, #0]
 8007c2c:	4632      	mov	r2, r6
 8007c2e:	4641      	mov	r1, r8
 8007c30:	f000 f966 	bl	8007f00 <memmove>
 8007c34:	68a3      	ldr	r3, [r4, #8]
 8007c36:	1b9b      	subs	r3, r3, r6
 8007c38:	60a3      	str	r3, [r4, #8]
 8007c3a:	6823      	ldr	r3, [r4, #0]
 8007c3c:	4433      	add	r3, r6
 8007c3e:	6023      	str	r3, [r4, #0]
 8007c40:	2000      	movs	r0, #0
 8007c42:	e7db      	b.n	8007bfc <__ssputs_r+0x58>
 8007c44:	462a      	mov	r2, r5
 8007c46:	f000 f981 	bl	8007f4c <_realloc_r>
 8007c4a:	4606      	mov	r6, r0
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	d1e1      	bne.n	8007c14 <__ssputs_r+0x70>
 8007c50:	6921      	ldr	r1, [r4, #16]
 8007c52:	4650      	mov	r0, sl
 8007c54:	f7ff fec6 	bl	80079e4 <_free_r>
 8007c58:	e7c7      	b.n	8007bea <__ssputs_r+0x46>
	...

08007c5c <_svfiprintf_r>:
 8007c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c60:	4698      	mov	r8, r3
 8007c62:	898b      	ldrh	r3, [r1, #12]
 8007c64:	061b      	lsls	r3, r3, #24
 8007c66:	b09d      	sub	sp, #116	; 0x74
 8007c68:	4607      	mov	r7, r0
 8007c6a:	460d      	mov	r5, r1
 8007c6c:	4614      	mov	r4, r2
 8007c6e:	d50e      	bpl.n	8007c8e <_svfiprintf_r+0x32>
 8007c70:	690b      	ldr	r3, [r1, #16]
 8007c72:	b963      	cbnz	r3, 8007c8e <_svfiprintf_r+0x32>
 8007c74:	2140      	movs	r1, #64	; 0x40
 8007c76:	f7ff ff21 	bl	8007abc <_malloc_r>
 8007c7a:	6028      	str	r0, [r5, #0]
 8007c7c:	6128      	str	r0, [r5, #16]
 8007c7e:	b920      	cbnz	r0, 8007c8a <_svfiprintf_r+0x2e>
 8007c80:	230c      	movs	r3, #12
 8007c82:	603b      	str	r3, [r7, #0]
 8007c84:	f04f 30ff 	mov.w	r0, #4294967295
 8007c88:	e0d1      	b.n	8007e2e <_svfiprintf_r+0x1d2>
 8007c8a:	2340      	movs	r3, #64	; 0x40
 8007c8c:	616b      	str	r3, [r5, #20]
 8007c8e:	2300      	movs	r3, #0
 8007c90:	9309      	str	r3, [sp, #36]	; 0x24
 8007c92:	2320      	movs	r3, #32
 8007c94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c98:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c9c:	2330      	movs	r3, #48	; 0x30
 8007c9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007e48 <_svfiprintf_r+0x1ec>
 8007ca2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ca6:	f04f 0901 	mov.w	r9, #1
 8007caa:	4623      	mov	r3, r4
 8007cac:	469a      	mov	sl, r3
 8007cae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cb2:	b10a      	cbz	r2, 8007cb8 <_svfiprintf_r+0x5c>
 8007cb4:	2a25      	cmp	r2, #37	; 0x25
 8007cb6:	d1f9      	bne.n	8007cac <_svfiprintf_r+0x50>
 8007cb8:	ebba 0b04 	subs.w	fp, sl, r4
 8007cbc:	d00b      	beq.n	8007cd6 <_svfiprintf_r+0x7a>
 8007cbe:	465b      	mov	r3, fp
 8007cc0:	4622      	mov	r2, r4
 8007cc2:	4629      	mov	r1, r5
 8007cc4:	4638      	mov	r0, r7
 8007cc6:	f7ff ff6d 	bl	8007ba4 <__ssputs_r>
 8007cca:	3001      	adds	r0, #1
 8007ccc:	f000 80aa 	beq.w	8007e24 <_svfiprintf_r+0x1c8>
 8007cd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cd2:	445a      	add	r2, fp
 8007cd4:	9209      	str	r2, [sp, #36]	; 0x24
 8007cd6:	f89a 3000 	ldrb.w	r3, [sl]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	f000 80a2 	beq.w	8007e24 <_svfiprintf_r+0x1c8>
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cea:	f10a 0a01 	add.w	sl, sl, #1
 8007cee:	9304      	str	r3, [sp, #16]
 8007cf0:	9307      	str	r3, [sp, #28]
 8007cf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cf6:	931a      	str	r3, [sp, #104]	; 0x68
 8007cf8:	4654      	mov	r4, sl
 8007cfa:	2205      	movs	r2, #5
 8007cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d00:	4851      	ldr	r0, [pc, #324]	; (8007e48 <_svfiprintf_r+0x1ec>)
 8007d02:	f7f8 fa6d 	bl	80001e0 <memchr>
 8007d06:	9a04      	ldr	r2, [sp, #16]
 8007d08:	b9d8      	cbnz	r0, 8007d42 <_svfiprintf_r+0xe6>
 8007d0a:	06d0      	lsls	r0, r2, #27
 8007d0c:	bf44      	itt	mi
 8007d0e:	2320      	movmi	r3, #32
 8007d10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d14:	0711      	lsls	r1, r2, #28
 8007d16:	bf44      	itt	mi
 8007d18:	232b      	movmi	r3, #43	; 0x2b
 8007d1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d1e:	f89a 3000 	ldrb.w	r3, [sl]
 8007d22:	2b2a      	cmp	r3, #42	; 0x2a
 8007d24:	d015      	beq.n	8007d52 <_svfiprintf_r+0xf6>
 8007d26:	9a07      	ldr	r2, [sp, #28]
 8007d28:	4654      	mov	r4, sl
 8007d2a:	2000      	movs	r0, #0
 8007d2c:	f04f 0c0a 	mov.w	ip, #10
 8007d30:	4621      	mov	r1, r4
 8007d32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d36:	3b30      	subs	r3, #48	; 0x30
 8007d38:	2b09      	cmp	r3, #9
 8007d3a:	d94e      	bls.n	8007dda <_svfiprintf_r+0x17e>
 8007d3c:	b1b0      	cbz	r0, 8007d6c <_svfiprintf_r+0x110>
 8007d3e:	9207      	str	r2, [sp, #28]
 8007d40:	e014      	b.n	8007d6c <_svfiprintf_r+0x110>
 8007d42:	eba0 0308 	sub.w	r3, r0, r8
 8007d46:	fa09 f303 	lsl.w	r3, r9, r3
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	9304      	str	r3, [sp, #16]
 8007d4e:	46a2      	mov	sl, r4
 8007d50:	e7d2      	b.n	8007cf8 <_svfiprintf_r+0x9c>
 8007d52:	9b03      	ldr	r3, [sp, #12]
 8007d54:	1d19      	adds	r1, r3, #4
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	9103      	str	r1, [sp, #12]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	bfbb      	ittet	lt
 8007d5e:	425b      	neglt	r3, r3
 8007d60:	f042 0202 	orrlt.w	r2, r2, #2
 8007d64:	9307      	strge	r3, [sp, #28]
 8007d66:	9307      	strlt	r3, [sp, #28]
 8007d68:	bfb8      	it	lt
 8007d6a:	9204      	strlt	r2, [sp, #16]
 8007d6c:	7823      	ldrb	r3, [r4, #0]
 8007d6e:	2b2e      	cmp	r3, #46	; 0x2e
 8007d70:	d10c      	bne.n	8007d8c <_svfiprintf_r+0x130>
 8007d72:	7863      	ldrb	r3, [r4, #1]
 8007d74:	2b2a      	cmp	r3, #42	; 0x2a
 8007d76:	d135      	bne.n	8007de4 <_svfiprintf_r+0x188>
 8007d78:	9b03      	ldr	r3, [sp, #12]
 8007d7a:	1d1a      	adds	r2, r3, #4
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	9203      	str	r2, [sp, #12]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	bfb8      	it	lt
 8007d84:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d88:	3402      	adds	r4, #2
 8007d8a:	9305      	str	r3, [sp, #20]
 8007d8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007e58 <_svfiprintf_r+0x1fc>
 8007d90:	7821      	ldrb	r1, [r4, #0]
 8007d92:	2203      	movs	r2, #3
 8007d94:	4650      	mov	r0, sl
 8007d96:	f7f8 fa23 	bl	80001e0 <memchr>
 8007d9a:	b140      	cbz	r0, 8007dae <_svfiprintf_r+0x152>
 8007d9c:	2340      	movs	r3, #64	; 0x40
 8007d9e:	eba0 000a 	sub.w	r0, r0, sl
 8007da2:	fa03 f000 	lsl.w	r0, r3, r0
 8007da6:	9b04      	ldr	r3, [sp, #16]
 8007da8:	4303      	orrs	r3, r0
 8007daa:	3401      	adds	r4, #1
 8007dac:	9304      	str	r3, [sp, #16]
 8007dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007db2:	4826      	ldr	r0, [pc, #152]	; (8007e4c <_svfiprintf_r+0x1f0>)
 8007db4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007db8:	2206      	movs	r2, #6
 8007dba:	f7f8 fa11 	bl	80001e0 <memchr>
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	d038      	beq.n	8007e34 <_svfiprintf_r+0x1d8>
 8007dc2:	4b23      	ldr	r3, [pc, #140]	; (8007e50 <_svfiprintf_r+0x1f4>)
 8007dc4:	bb1b      	cbnz	r3, 8007e0e <_svfiprintf_r+0x1b2>
 8007dc6:	9b03      	ldr	r3, [sp, #12]
 8007dc8:	3307      	adds	r3, #7
 8007dca:	f023 0307 	bic.w	r3, r3, #7
 8007dce:	3308      	adds	r3, #8
 8007dd0:	9303      	str	r3, [sp, #12]
 8007dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dd4:	4433      	add	r3, r6
 8007dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8007dd8:	e767      	b.n	8007caa <_svfiprintf_r+0x4e>
 8007dda:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dde:	460c      	mov	r4, r1
 8007de0:	2001      	movs	r0, #1
 8007de2:	e7a5      	b.n	8007d30 <_svfiprintf_r+0xd4>
 8007de4:	2300      	movs	r3, #0
 8007de6:	3401      	adds	r4, #1
 8007de8:	9305      	str	r3, [sp, #20]
 8007dea:	4619      	mov	r1, r3
 8007dec:	f04f 0c0a 	mov.w	ip, #10
 8007df0:	4620      	mov	r0, r4
 8007df2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007df6:	3a30      	subs	r2, #48	; 0x30
 8007df8:	2a09      	cmp	r2, #9
 8007dfa:	d903      	bls.n	8007e04 <_svfiprintf_r+0x1a8>
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d0c5      	beq.n	8007d8c <_svfiprintf_r+0x130>
 8007e00:	9105      	str	r1, [sp, #20]
 8007e02:	e7c3      	b.n	8007d8c <_svfiprintf_r+0x130>
 8007e04:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e08:	4604      	mov	r4, r0
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e7f0      	b.n	8007df0 <_svfiprintf_r+0x194>
 8007e0e:	ab03      	add	r3, sp, #12
 8007e10:	9300      	str	r3, [sp, #0]
 8007e12:	462a      	mov	r2, r5
 8007e14:	4b0f      	ldr	r3, [pc, #60]	; (8007e54 <_svfiprintf_r+0x1f8>)
 8007e16:	a904      	add	r1, sp, #16
 8007e18:	4638      	mov	r0, r7
 8007e1a:	f7fd ffcb 	bl	8005db4 <_printf_float>
 8007e1e:	1c42      	adds	r2, r0, #1
 8007e20:	4606      	mov	r6, r0
 8007e22:	d1d6      	bne.n	8007dd2 <_svfiprintf_r+0x176>
 8007e24:	89ab      	ldrh	r3, [r5, #12]
 8007e26:	065b      	lsls	r3, r3, #25
 8007e28:	f53f af2c 	bmi.w	8007c84 <_svfiprintf_r+0x28>
 8007e2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e2e:	b01d      	add	sp, #116	; 0x74
 8007e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e34:	ab03      	add	r3, sp, #12
 8007e36:	9300      	str	r3, [sp, #0]
 8007e38:	462a      	mov	r2, r5
 8007e3a:	4b06      	ldr	r3, [pc, #24]	; (8007e54 <_svfiprintf_r+0x1f8>)
 8007e3c:	a904      	add	r1, sp, #16
 8007e3e:	4638      	mov	r0, r7
 8007e40:	f7fe fa5c 	bl	80062fc <_printf_i>
 8007e44:	e7eb      	b.n	8007e1e <_svfiprintf_r+0x1c2>
 8007e46:	bf00      	nop
 8007e48:	080093e4 	.word	0x080093e4
 8007e4c:	080093ee 	.word	0x080093ee
 8007e50:	08005db5 	.word	0x08005db5
 8007e54:	08007ba5 	.word	0x08007ba5
 8007e58:	080093ea 	.word	0x080093ea

08007e5c <_sbrk_r>:
 8007e5c:	b538      	push	{r3, r4, r5, lr}
 8007e5e:	4d06      	ldr	r5, [pc, #24]	; (8007e78 <_sbrk_r+0x1c>)
 8007e60:	2300      	movs	r3, #0
 8007e62:	4604      	mov	r4, r0
 8007e64:	4608      	mov	r0, r1
 8007e66:	602b      	str	r3, [r5, #0]
 8007e68:	f7fa f994 	bl	8002194 <_sbrk>
 8007e6c:	1c43      	adds	r3, r0, #1
 8007e6e:	d102      	bne.n	8007e76 <_sbrk_r+0x1a>
 8007e70:	682b      	ldr	r3, [r5, #0]
 8007e72:	b103      	cbz	r3, 8007e76 <_sbrk_r+0x1a>
 8007e74:	6023      	str	r3, [r4, #0]
 8007e76:	bd38      	pop	{r3, r4, r5, pc}
 8007e78:	20000468 	.word	0x20000468

08007e7c <__assert_func>:
 8007e7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e7e:	4614      	mov	r4, r2
 8007e80:	461a      	mov	r2, r3
 8007e82:	4b09      	ldr	r3, [pc, #36]	; (8007ea8 <__assert_func+0x2c>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4605      	mov	r5, r0
 8007e88:	68d8      	ldr	r0, [r3, #12]
 8007e8a:	b14c      	cbz	r4, 8007ea0 <__assert_func+0x24>
 8007e8c:	4b07      	ldr	r3, [pc, #28]	; (8007eac <__assert_func+0x30>)
 8007e8e:	9100      	str	r1, [sp, #0]
 8007e90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e94:	4906      	ldr	r1, [pc, #24]	; (8007eb0 <__assert_func+0x34>)
 8007e96:	462b      	mov	r3, r5
 8007e98:	f000 f80e 	bl	8007eb8 <fiprintf>
 8007e9c:	f000 faac 	bl	80083f8 <abort>
 8007ea0:	4b04      	ldr	r3, [pc, #16]	; (8007eb4 <__assert_func+0x38>)
 8007ea2:	461c      	mov	r4, r3
 8007ea4:	e7f3      	b.n	8007e8e <__assert_func+0x12>
 8007ea6:	bf00      	nop
 8007ea8:	200000a4 	.word	0x200000a4
 8007eac:	080093f5 	.word	0x080093f5
 8007eb0:	08009402 	.word	0x08009402
 8007eb4:	08009430 	.word	0x08009430

08007eb8 <fiprintf>:
 8007eb8:	b40e      	push	{r1, r2, r3}
 8007eba:	b503      	push	{r0, r1, lr}
 8007ebc:	4601      	mov	r1, r0
 8007ebe:	ab03      	add	r3, sp, #12
 8007ec0:	4805      	ldr	r0, [pc, #20]	; (8007ed8 <fiprintf+0x20>)
 8007ec2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ec6:	6800      	ldr	r0, [r0, #0]
 8007ec8:	9301      	str	r3, [sp, #4]
 8007eca:	f000 f897 	bl	8007ffc <_vfiprintf_r>
 8007ece:	b002      	add	sp, #8
 8007ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ed4:	b003      	add	sp, #12
 8007ed6:	4770      	bx	lr
 8007ed8:	200000a4 	.word	0x200000a4

08007edc <__ascii_mbtowc>:
 8007edc:	b082      	sub	sp, #8
 8007ede:	b901      	cbnz	r1, 8007ee2 <__ascii_mbtowc+0x6>
 8007ee0:	a901      	add	r1, sp, #4
 8007ee2:	b142      	cbz	r2, 8007ef6 <__ascii_mbtowc+0x1a>
 8007ee4:	b14b      	cbz	r3, 8007efa <__ascii_mbtowc+0x1e>
 8007ee6:	7813      	ldrb	r3, [r2, #0]
 8007ee8:	600b      	str	r3, [r1, #0]
 8007eea:	7812      	ldrb	r2, [r2, #0]
 8007eec:	1e10      	subs	r0, r2, #0
 8007eee:	bf18      	it	ne
 8007ef0:	2001      	movne	r0, #1
 8007ef2:	b002      	add	sp, #8
 8007ef4:	4770      	bx	lr
 8007ef6:	4610      	mov	r0, r2
 8007ef8:	e7fb      	b.n	8007ef2 <__ascii_mbtowc+0x16>
 8007efa:	f06f 0001 	mvn.w	r0, #1
 8007efe:	e7f8      	b.n	8007ef2 <__ascii_mbtowc+0x16>

08007f00 <memmove>:
 8007f00:	4288      	cmp	r0, r1
 8007f02:	b510      	push	{r4, lr}
 8007f04:	eb01 0402 	add.w	r4, r1, r2
 8007f08:	d902      	bls.n	8007f10 <memmove+0x10>
 8007f0a:	4284      	cmp	r4, r0
 8007f0c:	4623      	mov	r3, r4
 8007f0e:	d807      	bhi.n	8007f20 <memmove+0x20>
 8007f10:	1e43      	subs	r3, r0, #1
 8007f12:	42a1      	cmp	r1, r4
 8007f14:	d008      	beq.n	8007f28 <memmove+0x28>
 8007f16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f1e:	e7f8      	b.n	8007f12 <memmove+0x12>
 8007f20:	4402      	add	r2, r0
 8007f22:	4601      	mov	r1, r0
 8007f24:	428a      	cmp	r2, r1
 8007f26:	d100      	bne.n	8007f2a <memmove+0x2a>
 8007f28:	bd10      	pop	{r4, pc}
 8007f2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f32:	e7f7      	b.n	8007f24 <memmove+0x24>

08007f34 <__malloc_lock>:
 8007f34:	4801      	ldr	r0, [pc, #4]	; (8007f3c <__malloc_lock+0x8>)
 8007f36:	f000 bc1f 	b.w	8008778 <__retarget_lock_acquire_recursive>
 8007f3a:	bf00      	nop
 8007f3c:	2000046c 	.word	0x2000046c

08007f40 <__malloc_unlock>:
 8007f40:	4801      	ldr	r0, [pc, #4]	; (8007f48 <__malloc_unlock+0x8>)
 8007f42:	f000 bc1a 	b.w	800877a <__retarget_lock_release_recursive>
 8007f46:	bf00      	nop
 8007f48:	2000046c 	.word	0x2000046c

08007f4c <_realloc_r>:
 8007f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f50:	4680      	mov	r8, r0
 8007f52:	4614      	mov	r4, r2
 8007f54:	460e      	mov	r6, r1
 8007f56:	b921      	cbnz	r1, 8007f62 <_realloc_r+0x16>
 8007f58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f5c:	4611      	mov	r1, r2
 8007f5e:	f7ff bdad 	b.w	8007abc <_malloc_r>
 8007f62:	b92a      	cbnz	r2, 8007f70 <_realloc_r+0x24>
 8007f64:	f7ff fd3e 	bl	80079e4 <_free_r>
 8007f68:	4625      	mov	r5, r4
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f70:	f000 fc6a 	bl	8008848 <_malloc_usable_size_r>
 8007f74:	4284      	cmp	r4, r0
 8007f76:	4607      	mov	r7, r0
 8007f78:	d802      	bhi.n	8007f80 <_realloc_r+0x34>
 8007f7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f7e:	d812      	bhi.n	8007fa6 <_realloc_r+0x5a>
 8007f80:	4621      	mov	r1, r4
 8007f82:	4640      	mov	r0, r8
 8007f84:	f7ff fd9a 	bl	8007abc <_malloc_r>
 8007f88:	4605      	mov	r5, r0
 8007f8a:	2800      	cmp	r0, #0
 8007f8c:	d0ed      	beq.n	8007f6a <_realloc_r+0x1e>
 8007f8e:	42bc      	cmp	r4, r7
 8007f90:	4622      	mov	r2, r4
 8007f92:	4631      	mov	r1, r6
 8007f94:	bf28      	it	cs
 8007f96:	463a      	movcs	r2, r7
 8007f98:	f7ff f97c 	bl	8007294 <memcpy>
 8007f9c:	4631      	mov	r1, r6
 8007f9e:	4640      	mov	r0, r8
 8007fa0:	f7ff fd20 	bl	80079e4 <_free_r>
 8007fa4:	e7e1      	b.n	8007f6a <_realloc_r+0x1e>
 8007fa6:	4635      	mov	r5, r6
 8007fa8:	e7df      	b.n	8007f6a <_realloc_r+0x1e>

08007faa <__sfputc_r>:
 8007faa:	6893      	ldr	r3, [r2, #8]
 8007fac:	3b01      	subs	r3, #1
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	b410      	push	{r4}
 8007fb2:	6093      	str	r3, [r2, #8]
 8007fb4:	da08      	bge.n	8007fc8 <__sfputc_r+0x1e>
 8007fb6:	6994      	ldr	r4, [r2, #24]
 8007fb8:	42a3      	cmp	r3, r4
 8007fba:	db01      	blt.n	8007fc0 <__sfputc_r+0x16>
 8007fbc:	290a      	cmp	r1, #10
 8007fbe:	d103      	bne.n	8007fc8 <__sfputc_r+0x1e>
 8007fc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fc4:	f000 b94a 	b.w	800825c <__swbuf_r>
 8007fc8:	6813      	ldr	r3, [r2, #0]
 8007fca:	1c58      	adds	r0, r3, #1
 8007fcc:	6010      	str	r0, [r2, #0]
 8007fce:	7019      	strb	r1, [r3, #0]
 8007fd0:	4608      	mov	r0, r1
 8007fd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <__sfputs_r>:
 8007fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fda:	4606      	mov	r6, r0
 8007fdc:	460f      	mov	r7, r1
 8007fde:	4614      	mov	r4, r2
 8007fe0:	18d5      	adds	r5, r2, r3
 8007fe2:	42ac      	cmp	r4, r5
 8007fe4:	d101      	bne.n	8007fea <__sfputs_r+0x12>
 8007fe6:	2000      	movs	r0, #0
 8007fe8:	e007      	b.n	8007ffa <__sfputs_r+0x22>
 8007fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fee:	463a      	mov	r2, r7
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	f7ff ffda 	bl	8007faa <__sfputc_r>
 8007ff6:	1c43      	adds	r3, r0, #1
 8007ff8:	d1f3      	bne.n	8007fe2 <__sfputs_r+0xa>
 8007ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ffc <_vfiprintf_r>:
 8007ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008000:	460d      	mov	r5, r1
 8008002:	b09d      	sub	sp, #116	; 0x74
 8008004:	4614      	mov	r4, r2
 8008006:	4698      	mov	r8, r3
 8008008:	4606      	mov	r6, r0
 800800a:	b118      	cbz	r0, 8008014 <_vfiprintf_r+0x18>
 800800c:	6983      	ldr	r3, [r0, #24]
 800800e:	b90b      	cbnz	r3, 8008014 <_vfiprintf_r+0x18>
 8008010:	f000 fb14 	bl	800863c <__sinit>
 8008014:	4b89      	ldr	r3, [pc, #548]	; (800823c <_vfiprintf_r+0x240>)
 8008016:	429d      	cmp	r5, r3
 8008018:	d11b      	bne.n	8008052 <_vfiprintf_r+0x56>
 800801a:	6875      	ldr	r5, [r6, #4]
 800801c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800801e:	07d9      	lsls	r1, r3, #31
 8008020:	d405      	bmi.n	800802e <_vfiprintf_r+0x32>
 8008022:	89ab      	ldrh	r3, [r5, #12]
 8008024:	059a      	lsls	r2, r3, #22
 8008026:	d402      	bmi.n	800802e <_vfiprintf_r+0x32>
 8008028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800802a:	f000 fba5 	bl	8008778 <__retarget_lock_acquire_recursive>
 800802e:	89ab      	ldrh	r3, [r5, #12]
 8008030:	071b      	lsls	r3, r3, #28
 8008032:	d501      	bpl.n	8008038 <_vfiprintf_r+0x3c>
 8008034:	692b      	ldr	r3, [r5, #16]
 8008036:	b9eb      	cbnz	r3, 8008074 <_vfiprintf_r+0x78>
 8008038:	4629      	mov	r1, r5
 800803a:	4630      	mov	r0, r6
 800803c:	f000 f96e 	bl	800831c <__swsetup_r>
 8008040:	b1c0      	cbz	r0, 8008074 <_vfiprintf_r+0x78>
 8008042:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008044:	07dc      	lsls	r4, r3, #31
 8008046:	d50e      	bpl.n	8008066 <_vfiprintf_r+0x6a>
 8008048:	f04f 30ff 	mov.w	r0, #4294967295
 800804c:	b01d      	add	sp, #116	; 0x74
 800804e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008052:	4b7b      	ldr	r3, [pc, #492]	; (8008240 <_vfiprintf_r+0x244>)
 8008054:	429d      	cmp	r5, r3
 8008056:	d101      	bne.n	800805c <_vfiprintf_r+0x60>
 8008058:	68b5      	ldr	r5, [r6, #8]
 800805a:	e7df      	b.n	800801c <_vfiprintf_r+0x20>
 800805c:	4b79      	ldr	r3, [pc, #484]	; (8008244 <_vfiprintf_r+0x248>)
 800805e:	429d      	cmp	r5, r3
 8008060:	bf08      	it	eq
 8008062:	68f5      	ldreq	r5, [r6, #12]
 8008064:	e7da      	b.n	800801c <_vfiprintf_r+0x20>
 8008066:	89ab      	ldrh	r3, [r5, #12]
 8008068:	0598      	lsls	r0, r3, #22
 800806a:	d4ed      	bmi.n	8008048 <_vfiprintf_r+0x4c>
 800806c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800806e:	f000 fb84 	bl	800877a <__retarget_lock_release_recursive>
 8008072:	e7e9      	b.n	8008048 <_vfiprintf_r+0x4c>
 8008074:	2300      	movs	r3, #0
 8008076:	9309      	str	r3, [sp, #36]	; 0x24
 8008078:	2320      	movs	r3, #32
 800807a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800807e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008082:	2330      	movs	r3, #48	; 0x30
 8008084:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008248 <_vfiprintf_r+0x24c>
 8008088:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800808c:	f04f 0901 	mov.w	r9, #1
 8008090:	4623      	mov	r3, r4
 8008092:	469a      	mov	sl, r3
 8008094:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008098:	b10a      	cbz	r2, 800809e <_vfiprintf_r+0xa2>
 800809a:	2a25      	cmp	r2, #37	; 0x25
 800809c:	d1f9      	bne.n	8008092 <_vfiprintf_r+0x96>
 800809e:	ebba 0b04 	subs.w	fp, sl, r4
 80080a2:	d00b      	beq.n	80080bc <_vfiprintf_r+0xc0>
 80080a4:	465b      	mov	r3, fp
 80080a6:	4622      	mov	r2, r4
 80080a8:	4629      	mov	r1, r5
 80080aa:	4630      	mov	r0, r6
 80080ac:	f7ff ff94 	bl	8007fd8 <__sfputs_r>
 80080b0:	3001      	adds	r0, #1
 80080b2:	f000 80aa 	beq.w	800820a <_vfiprintf_r+0x20e>
 80080b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080b8:	445a      	add	r2, fp
 80080ba:	9209      	str	r2, [sp, #36]	; 0x24
 80080bc:	f89a 3000 	ldrb.w	r3, [sl]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f000 80a2 	beq.w	800820a <_vfiprintf_r+0x20e>
 80080c6:	2300      	movs	r3, #0
 80080c8:	f04f 32ff 	mov.w	r2, #4294967295
 80080cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080d0:	f10a 0a01 	add.w	sl, sl, #1
 80080d4:	9304      	str	r3, [sp, #16]
 80080d6:	9307      	str	r3, [sp, #28]
 80080d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080dc:	931a      	str	r3, [sp, #104]	; 0x68
 80080de:	4654      	mov	r4, sl
 80080e0:	2205      	movs	r2, #5
 80080e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080e6:	4858      	ldr	r0, [pc, #352]	; (8008248 <_vfiprintf_r+0x24c>)
 80080e8:	f7f8 f87a 	bl	80001e0 <memchr>
 80080ec:	9a04      	ldr	r2, [sp, #16]
 80080ee:	b9d8      	cbnz	r0, 8008128 <_vfiprintf_r+0x12c>
 80080f0:	06d1      	lsls	r1, r2, #27
 80080f2:	bf44      	itt	mi
 80080f4:	2320      	movmi	r3, #32
 80080f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080fa:	0713      	lsls	r3, r2, #28
 80080fc:	bf44      	itt	mi
 80080fe:	232b      	movmi	r3, #43	; 0x2b
 8008100:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008104:	f89a 3000 	ldrb.w	r3, [sl]
 8008108:	2b2a      	cmp	r3, #42	; 0x2a
 800810a:	d015      	beq.n	8008138 <_vfiprintf_r+0x13c>
 800810c:	9a07      	ldr	r2, [sp, #28]
 800810e:	4654      	mov	r4, sl
 8008110:	2000      	movs	r0, #0
 8008112:	f04f 0c0a 	mov.w	ip, #10
 8008116:	4621      	mov	r1, r4
 8008118:	f811 3b01 	ldrb.w	r3, [r1], #1
 800811c:	3b30      	subs	r3, #48	; 0x30
 800811e:	2b09      	cmp	r3, #9
 8008120:	d94e      	bls.n	80081c0 <_vfiprintf_r+0x1c4>
 8008122:	b1b0      	cbz	r0, 8008152 <_vfiprintf_r+0x156>
 8008124:	9207      	str	r2, [sp, #28]
 8008126:	e014      	b.n	8008152 <_vfiprintf_r+0x156>
 8008128:	eba0 0308 	sub.w	r3, r0, r8
 800812c:	fa09 f303 	lsl.w	r3, r9, r3
 8008130:	4313      	orrs	r3, r2
 8008132:	9304      	str	r3, [sp, #16]
 8008134:	46a2      	mov	sl, r4
 8008136:	e7d2      	b.n	80080de <_vfiprintf_r+0xe2>
 8008138:	9b03      	ldr	r3, [sp, #12]
 800813a:	1d19      	adds	r1, r3, #4
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	9103      	str	r1, [sp, #12]
 8008140:	2b00      	cmp	r3, #0
 8008142:	bfbb      	ittet	lt
 8008144:	425b      	neglt	r3, r3
 8008146:	f042 0202 	orrlt.w	r2, r2, #2
 800814a:	9307      	strge	r3, [sp, #28]
 800814c:	9307      	strlt	r3, [sp, #28]
 800814e:	bfb8      	it	lt
 8008150:	9204      	strlt	r2, [sp, #16]
 8008152:	7823      	ldrb	r3, [r4, #0]
 8008154:	2b2e      	cmp	r3, #46	; 0x2e
 8008156:	d10c      	bne.n	8008172 <_vfiprintf_r+0x176>
 8008158:	7863      	ldrb	r3, [r4, #1]
 800815a:	2b2a      	cmp	r3, #42	; 0x2a
 800815c:	d135      	bne.n	80081ca <_vfiprintf_r+0x1ce>
 800815e:	9b03      	ldr	r3, [sp, #12]
 8008160:	1d1a      	adds	r2, r3, #4
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	9203      	str	r2, [sp, #12]
 8008166:	2b00      	cmp	r3, #0
 8008168:	bfb8      	it	lt
 800816a:	f04f 33ff 	movlt.w	r3, #4294967295
 800816e:	3402      	adds	r4, #2
 8008170:	9305      	str	r3, [sp, #20]
 8008172:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008258 <_vfiprintf_r+0x25c>
 8008176:	7821      	ldrb	r1, [r4, #0]
 8008178:	2203      	movs	r2, #3
 800817a:	4650      	mov	r0, sl
 800817c:	f7f8 f830 	bl	80001e0 <memchr>
 8008180:	b140      	cbz	r0, 8008194 <_vfiprintf_r+0x198>
 8008182:	2340      	movs	r3, #64	; 0x40
 8008184:	eba0 000a 	sub.w	r0, r0, sl
 8008188:	fa03 f000 	lsl.w	r0, r3, r0
 800818c:	9b04      	ldr	r3, [sp, #16]
 800818e:	4303      	orrs	r3, r0
 8008190:	3401      	adds	r4, #1
 8008192:	9304      	str	r3, [sp, #16]
 8008194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008198:	482c      	ldr	r0, [pc, #176]	; (800824c <_vfiprintf_r+0x250>)
 800819a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800819e:	2206      	movs	r2, #6
 80081a0:	f7f8 f81e 	bl	80001e0 <memchr>
 80081a4:	2800      	cmp	r0, #0
 80081a6:	d03f      	beq.n	8008228 <_vfiprintf_r+0x22c>
 80081a8:	4b29      	ldr	r3, [pc, #164]	; (8008250 <_vfiprintf_r+0x254>)
 80081aa:	bb1b      	cbnz	r3, 80081f4 <_vfiprintf_r+0x1f8>
 80081ac:	9b03      	ldr	r3, [sp, #12]
 80081ae:	3307      	adds	r3, #7
 80081b0:	f023 0307 	bic.w	r3, r3, #7
 80081b4:	3308      	adds	r3, #8
 80081b6:	9303      	str	r3, [sp, #12]
 80081b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ba:	443b      	add	r3, r7
 80081bc:	9309      	str	r3, [sp, #36]	; 0x24
 80081be:	e767      	b.n	8008090 <_vfiprintf_r+0x94>
 80081c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80081c4:	460c      	mov	r4, r1
 80081c6:	2001      	movs	r0, #1
 80081c8:	e7a5      	b.n	8008116 <_vfiprintf_r+0x11a>
 80081ca:	2300      	movs	r3, #0
 80081cc:	3401      	adds	r4, #1
 80081ce:	9305      	str	r3, [sp, #20]
 80081d0:	4619      	mov	r1, r3
 80081d2:	f04f 0c0a 	mov.w	ip, #10
 80081d6:	4620      	mov	r0, r4
 80081d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081dc:	3a30      	subs	r2, #48	; 0x30
 80081de:	2a09      	cmp	r2, #9
 80081e0:	d903      	bls.n	80081ea <_vfiprintf_r+0x1ee>
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d0c5      	beq.n	8008172 <_vfiprintf_r+0x176>
 80081e6:	9105      	str	r1, [sp, #20]
 80081e8:	e7c3      	b.n	8008172 <_vfiprintf_r+0x176>
 80081ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80081ee:	4604      	mov	r4, r0
 80081f0:	2301      	movs	r3, #1
 80081f2:	e7f0      	b.n	80081d6 <_vfiprintf_r+0x1da>
 80081f4:	ab03      	add	r3, sp, #12
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	462a      	mov	r2, r5
 80081fa:	4b16      	ldr	r3, [pc, #88]	; (8008254 <_vfiprintf_r+0x258>)
 80081fc:	a904      	add	r1, sp, #16
 80081fe:	4630      	mov	r0, r6
 8008200:	f7fd fdd8 	bl	8005db4 <_printf_float>
 8008204:	4607      	mov	r7, r0
 8008206:	1c78      	adds	r0, r7, #1
 8008208:	d1d6      	bne.n	80081b8 <_vfiprintf_r+0x1bc>
 800820a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800820c:	07d9      	lsls	r1, r3, #31
 800820e:	d405      	bmi.n	800821c <_vfiprintf_r+0x220>
 8008210:	89ab      	ldrh	r3, [r5, #12]
 8008212:	059a      	lsls	r2, r3, #22
 8008214:	d402      	bmi.n	800821c <_vfiprintf_r+0x220>
 8008216:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008218:	f000 faaf 	bl	800877a <__retarget_lock_release_recursive>
 800821c:	89ab      	ldrh	r3, [r5, #12]
 800821e:	065b      	lsls	r3, r3, #25
 8008220:	f53f af12 	bmi.w	8008048 <_vfiprintf_r+0x4c>
 8008224:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008226:	e711      	b.n	800804c <_vfiprintf_r+0x50>
 8008228:	ab03      	add	r3, sp, #12
 800822a:	9300      	str	r3, [sp, #0]
 800822c:	462a      	mov	r2, r5
 800822e:	4b09      	ldr	r3, [pc, #36]	; (8008254 <_vfiprintf_r+0x258>)
 8008230:	a904      	add	r1, sp, #16
 8008232:	4630      	mov	r0, r6
 8008234:	f7fe f862 	bl	80062fc <_printf_i>
 8008238:	e7e4      	b.n	8008204 <_vfiprintf_r+0x208>
 800823a:	bf00      	nop
 800823c:	0800955c 	.word	0x0800955c
 8008240:	0800957c 	.word	0x0800957c
 8008244:	0800953c 	.word	0x0800953c
 8008248:	080093e4 	.word	0x080093e4
 800824c:	080093ee 	.word	0x080093ee
 8008250:	08005db5 	.word	0x08005db5
 8008254:	08007fd9 	.word	0x08007fd9
 8008258:	080093ea 	.word	0x080093ea

0800825c <__swbuf_r>:
 800825c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825e:	460e      	mov	r6, r1
 8008260:	4614      	mov	r4, r2
 8008262:	4605      	mov	r5, r0
 8008264:	b118      	cbz	r0, 800826e <__swbuf_r+0x12>
 8008266:	6983      	ldr	r3, [r0, #24]
 8008268:	b90b      	cbnz	r3, 800826e <__swbuf_r+0x12>
 800826a:	f000 f9e7 	bl	800863c <__sinit>
 800826e:	4b21      	ldr	r3, [pc, #132]	; (80082f4 <__swbuf_r+0x98>)
 8008270:	429c      	cmp	r4, r3
 8008272:	d12b      	bne.n	80082cc <__swbuf_r+0x70>
 8008274:	686c      	ldr	r4, [r5, #4]
 8008276:	69a3      	ldr	r3, [r4, #24]
 8008278:	60a3      	str	r3, [r4, #8]
 800827a:	89a3      	ldrh	r3, [r4, #12]
 800827c:	071a      	lsls	r2, r3, #28
 800827e:	d52f      	bpl.n	80082e0 <__swbuf_r+0x84>
 8008280:	6923      	ldr	r3, [r4, #16]
 8008282:	b36b      	cbz	r3, 80082e0 <__swbuf_r+0x84>
 8008284:	6923      	ldr	r3, [r4, #16]
 8008286:	6820      	ldr	r0, [r4, #0]
 8008288:	1ac0      	subs	r0, r0, r3
 800828a:	6963      	ldr	r3, [r4, #20]
 800828c:	b2f6      	uxtb	r6, r6
 800828e:	4283      	cmp	r3, r0
 8008290:	4637      	mov	r7, r6
 8008292:	dc04      	bgt.n	800829e <__swbuf_r+0x42>
 8008294:	4621      	mov	r1, r4
 8008296:	4628      	mov	r0, r5
 8008298:	f000 f93c 	bl	8008514 <_fflush_r>
 800829c:	bb30      	cbnz	r0, 80082ec <__swbuf_r+0x90>
 800829e:	68a3      	ldr	r3, [r4, #8]
 80082a0:	3b01      	subs	r3, #1
 80082a2:	60a3      	str	r3, [r4, #8]
 80082a4:	6823      	ldr	r3, [r4, #0]
 80082a6:	1c5a      	adds	r2, r3, #1
 80082a8:	6022      	str	r2, [r4, #0]
 80082aa:	701e      	strb	r6, [r3, #0]
 80082ac:	6963      	ldr	r3, [r4, #20]
 80082ae:	3001      	adds	r0, #1
 80082b0:	4283      	cmp	r3, r0
 80082b2:	d004      	beq.n	80082be <__swbuf_r+0x62>
 80082b4:	89a3      	ldrh	r3, [r4, #12]
 80082b6:	07db      	lsls	r3, r3, #31
 80082b8:	d506      	bpl.n	80082c8 <__swbuf_r+0x6c>
 80082ba:	2e0a      	cmp	r6, #10
 80082bc:	d104      	bne.n	80082c8 <__swbuf_r+0x6c>
 80082be:	4621      	mov	r1, r4
 80082c0:	4628      	mov	r0, r5
 80082c2:	f000 f927 	bl	8008514 <_fflush_r>
 80082c6:	b988      	cbnz	r0, 80082ec <__swbuf_r+0x90>
 80082c8:	4638      	mov	r0, r7
 80082ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082cc:	4b0a      	ldr	r3, [pc, #40]	; (80082f8 <__swbuf_r+0x9c>)
 80082ce:	429c      	cmp	r4, r3
 80082d0:	d101      	bne.n	80082d6 <__swbuf_r+0x7a>
 80082d2:	68ac      	ldr	r4, [r5, #8]
 80082d4:	e7cf      	b.n	8008276 <__swbuf_r+0x1a>
 80082d6:	4b09      	ldr	r3, [pc, #36]	; (80082fc <__swbuf_r+0xa0>)
 80082d8:	429c      	cmp	r4, r3
 80082da:	bf08      	it	eq
 80082dc:	68ec      	ldreq	r4, [r5, #12]
 80082de:	e7ca      	b.n	8008276 <__swbuf_r+0x1a>
 80082e0:	4621      	mov	r1, r4
 80082e2:	4628      	mov	r0, r5
 80082e4:	f000 f81a 	bl	800831c <__swsetup_r>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	d0cb      	beq.n	8008284 <__swbuf_r+0x28>
 80082ec:	f04f 37ff 	mov.w	r7, #4294967295
 80082f0:	e7ea      	b.n	80082c8 <__swbuf_r+0x6c>
 80082f2:	bf00      	nop
 80082f4:	0800955c 	.word	0x0800955c
 80082f8:	0800957c 	.word	0x0800957c
 80082fc:	0800953c 	.word	0x0800953c

08008300 <__ascii_wctomb>:
 8008300:	b149      	cbz	r1, 8008316 <__ascii_wctomb+0x16>
 8008302:	2aff      	cmp	r2, #255	; 0xff
 8008304:	bf85      	ittet	hi
 8008306:	238a      	movhi	r3, #138	; 0x8a
 8008308:	6003      	strhi	r3, [r0, #0]
 800830a:	700a      	strbls	r2, [r1, #0]
 800830c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008310:	bf98      	it	ls
 8008312:	2001      	movls	r0, #1
 8008314:	4770      	bx	lr
 8008316:	4608      	mov	r0, r1
 8008318:	4770      	bx	lr
	...

0800831c <__swsetup_r>:
 800831c:	4b32      	ldr	r3, [pc, #200]	; (80083e8 <__swsetup_r+0xcc>)
 800831e:	b570      	push	{r4, r5, r6, lr}
 8008320:	681d      	ldr	r5, [r3, #0]
 8008322:	4606      	mov	r6, r0
 8008324:	460c      	mov	r4, r1
 8008326:	b125      	cbz	r5, 8008332 <__swsetup_r+0x16>
 8008328:	69ab      	ldr	r3, [r5, #24]
 800832a:	b913      	cbnz	r3, 8008332 <__swsetup_r+0x16>
 800832c:	4628      	mov	r0, r5
 800832e:	f000 f985 	bl	800863c <__sinit>
 8008332:	4b2e      	ldr	r3, [pc, #184]	; (80083ec <__swsetup_r+0xd0>)
 8008334:	429c      	cmp	r4, r3
 8008336:	d10f      	bne.n	8008358 <__swsetup_r+0x3c>
 8008338:	686c      	ldr	r4, [r5, #4]
 800833a:	89a3      	ldrh	r3, [r4, #12]
 800833c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008340:	0719      	lsls	r1, r3, #28
 8008342:	d42c      	bmi.n	800839e <__swsetup_r+0x82>
 8008344:	06dd      	lsls	r5, r3, #27
 8008346:	d411      	bmi.n	800836c <__swsetup_r+0x50>
 8008348:	2309      	movs	r3, #9
 800834a:	6033      	str	r3, [r6, #0]
 800834c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008350:	81a3      	strh	r3, [r4, #12]
 8008352:	f04f 30ff 	mov.w	r0, #4294967295
 8008356:	e03e      	b.n	80083d6 <__swsetup_r+0xba>
 8008358:	4b25      	ldr	r3, [pc, #148]	; (80083f0 <__swsetup_r+0xd4>)
 800835a:	429c      	cmp	r4, r3
 800835c:	d101      	bne.n	8008362 <__swsetup_r+0x46>
 800835e:	68ac      	ldr	r4, [r5, #8]
 8008360:	e7eb      	b.n	800833a <__swsetup_r+0x1e>
 8008362:	4b24      	ldr	r3, [pc, #144]	; (80083f4 <__swsetup_r+0xd8>)
 8008364:	429c      	cmp	r4, r3
 8008366:	bf08      	it	eq
 8008368:	68ec      	ldreq	r4, [r5, #12]
 800836a:	e7e6      	b.n	800833a <__swsetup_r+0x1e>
 800836c:	0758      	lsls	r0, r3, #29
 800836e:	d512      	bpl.n	8008396 <__swsetup_r+0x7a>
 8008370:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008372:	b141      	cbz	r1, 8008386 <__swsetup_r+0x6a>
 8008374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008378:	4299      	cmp	r1, r3
 800837a:	d002      	beq.n	8008382 <__swsetup_r+0x66>
 800837c:	4630      	mov	r0, r6
 800837e:	f7ff fb31 	bl	80079e4 <_free_r>
 8008382:	2300      	movs	r3, #0
 8008384:	6363      	str	r3, [r4, #52]	; 0x34
 8008386:	89a3      	ldrh	r3, [r4, #12]
 8008388:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800838c:	81a3      	strh	r3, [r4, #12]
 800838e:	2300      	movs	r3, #0
 8008390:	6063      	str	r3, [r4, #4]
 8008392:	6923      	ldr	r3, [r4, #16]
 8008394:	6023      	str	r3, [r4, #0]
 8008396:	89a3      	ldrh	r3, [r4, #12]
 8008398:	f043 0308 	orr.w	r3, r3, #8
 800839c:	81a3      	strh	r3, [r4, #12]
 800839e:	6923      	ldr	r3, [r4, #16]
 80083a0:	b94b      	cbnz	r3, 80083b6 <__swsetup_r+0x9a>
 80083a2:	89a3      	ldrh	r3, [r4, #12]
 80083a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80083a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083ac:	d003      	beq.n	80083b6 <__swsetup_r+0x9a>
 80083ae:	4621      	mov	r1, r4
 80083b0:	4630      	mov	r0, r6
 80083b2:	f000 fa09 	bl	80087c8 <__smakebuf_r>
 80083b6:	89a0      	ldrh	r0, [r4, #12]
 80083b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083bc:	f010 0301 	ands.w	r3, r0, #1
 80083c0:	d00a      	beq.n	80083d8 <__swsetup_r+0xbc>
 80083c2:	2300      	movs	r3, #0
 80083c4:	60a3      	str	r3, [r4, #8]
 80083c6:	6963      	ldr	r3, [r4, #20]
 80083c8:	425b      	negs	r3, r3
 80083ca:	61a3      	str	r3, [r4, #24]
 80083cc:	6923      	ldr	r3, [r4, #16]
 80083ce:	b943      	cbnz	r3, 80083e2 <__swsetup_r+0xc6>
 80083d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083d4:	d1ba      	bne.n	800834c <__swsetup_r+0x30>
 80083d6:	bd70      	pop	{r4, r5, r6, pc}
 80083d8:	0781      	lsls	r1, r0, #30
 80083da:	bf58      	it	pl
 80083dc:	6963      	ldrpl	r3, [r4, #20]
 80083de:	60a3      	str	r3, [r4, #8]
 80083e0:	e7f4      	b.n	80083cc <__swsetup_r+0xb0>
 80083e2:	2000      	movs	r0, #0
 80083e4:	e7f7      	b.n	80083d6 <__swsetup_r+0xba>
 80083e6:	bf00      	nop
 80083e8:	200000a4 	.word	0x200000a4
 80083ec:	0800955c 	.word	0x0800955c
 80083f0:	0800957c 	.word	0x0800957c
 80083f4:	0800953c 	.word	0x0800953c

080083f8 <abort>:
 80083f8:	b508      	push	{r3, lr}
 80083fa:	2006      	movs	r0, #6
 80083fc:	f000 fa54 	bl	80088a8 <raise>
 8008400:	2001      	movs	r0, #1
 8008402:	f7f9 fe50 	bl	80020a6 <_exit>
	...

08008408 <__sflush_r>:
 8008408:	898a      	ldrh	r2, [r1, #12]
 800840a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800840e:	4605      	mov	r5, r0
 8008410:	0710      	lsls	r0, r2, #28
 8008412:	460c      	mov	r4, r1
 8008414:	d458      	bmi.n	80084c8 <__sflush_r+0xc0>
 8008416:	684b      	ldr	r3, [r1, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	dc05      	bgt.n	8008428 <__sflush_r+0x20>
 800841c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800841e:	2b00      	cmp	r3, #0
 8008420:	dc02      	bgt.n	8008428 <__sflush_r+0x20>
 8008422:	2000      	movs	r0, #0
 8008424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008428:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800842a:	2e00      	cmp	r6, #0
 800842c:	d0f9      	beq.n	8008422 <__sflush_r+0x1a>
 800842e:	2300      	movs	r3, #0
 8008430:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008434:	682f      	ldr	r7, [r5, #0]
 8008436:	602b      	str	r3, [r5, #0]
 8008438:	d032      	beq.n	80084a0 <__sflush_r+0x98>
 800843a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800843c:	89a3      	ldrh	r3, [r4, #12]
 800843e:	075a      	lsls	r2, r3, #29
 8008440:	d505      	bpl.n	800844e <__sflush_r+0x46>
 8008442:	6863      	ldr	r3, [r4, #4]
 8008444:	1ac0      	subs	r0, r0, r3
 8008446:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008448:	b10b      	cbz	r3, 800844e <__sflush_r+0x46>
 800844a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800844c:	1ac0      	subs	r0, r0, r3
 800844e:	2300      	movs	r3, #0
 8008450:	4602      	mov	r2, r0
 8008452:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008454:	6a21      	ldr	r1, [r4, #32]
 8008456:	4628      	mov	r0, r5
 8008458:	47b0      	blx	r6
 800845a:	1c43      	adds	r3, r0, #1
 800845c:	89a3      	ldrh	r3, [r4, #12]
 800845e:	d106      	bne.n	800846e <__sflush_r+0x66>
 8008460:	6829      	ldr	r1, [r5, #0]
 8008462:	291d      	cmp	r1, #29
 8008464:	d82c      	bhi.n	80084c0 <__sflush_r+0xb8>
 8008466:	4a2a      	ldr	r2, [pc, #168]	; (8008510 <__sflush_r+0x108>)
 8008468:	40ca      	lsrs	r2, r1
 800846a:	07d6      	lsls	r6, r2, #31
 800846c:	d528      	bpl.n	80084c0 <__sflush_r+0xb8>
 800846e:	2200      	movs	r2, #0
 8008470:	6062      	str	r2, [r4, #4]
 8008472:	04d9      	lsls	r1, r3, #19
 8008474:	6922      	ldr	r2, [r4, #16]
 8008476:	6022      	str	r2, [r4, #0]
 8008478:	d504      	bpl.n	8008484 <__sflush_r+0x7c>
 800847a:	1c42      	adds	r2, r0, #1
 800847c:	d101      	bne.n	8008482 <__sflush_r+0x7a>
 800847e:	682b      	ldr	r3, [r5, #0]
 8008480:	b903      	cbnz	r3, 8008484 <__sflush_r+0x7c>
 8008482:	6560      	str	r0, [r4, #84]	; 0x54
 8008484:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008486:	602f      	str	r7, [r5, #0]
 8008488:	2900      	cmp	r1, #0
 800848a:	d0ca      	beq.n	8008422 <__sflush_r+0x1a>
 800848c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008490:	4299      	cmp	r1, r3
 8008492:	d002      	beq.n	800849a <__sflush_r+0x92>
 8008494:	4628      	mov	r0, r5
 8008496:	f7ff faa5 	bl	80079e4 <_free_r>
 800849a:	2000      	movs	r0, #0
 800849c:	6360      	str	r0, [r4, #52]	; 0x34
 800849e:	e7c1      	b.n	8008424 <__sflush_r+0x1c>
 80084a0:	6a21      	ldr	r1, [r4, #32]
 80084a2:	2301      	movs	r3, #1
 80084a4:	4628      	mov	r0, r5
 80084a6:	47b0      	blx	r6
 80084a8:	1c41      	adds	r1, r0, #1
 80084aa:	d1c7      	bne.n	800843c <__sflush_r+0x34>
 80084ac:	682b      	ldr	r3, [r5, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d0c4      	beq.n	800843c <__sflush_r+0x34>
 80084b2:	2b1d      	cmp	r3, #29
 80084b4:	d001      	beq.n	80084ba <__sflush_r+0xb2>
 80084b6:	2b16      	cmp	r3, #22
 80084b8:	d101      	bne.n	80084be <__sflush_r+0xb6>
 80084ba:	602f      	str	r7, [r5, #0]
 80084bc:	e7b1      	b.n	8008422 <__sflush_r+0x1a>
 80084be:	89a3      	ldrh	r3, [r4, #12]
 80084c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084c4:	81a3      	strh	r3, [r4, #12]
 80084c6:	e7ad      	b.n	8008424 <__sflush_r+0x1c>
 80084c8:	690f      	ldr	r7, [r1, #16]
 80084ca:	2f00      	cmp	r7, #0
 80084cc:	d0a9      	beq.n	8008422 <__sflush_r+0x1a>
 80084ce:	0793      	lsls	r3, r2, #30
 80084d0:	680e      	ldr	r6, [r1, #0]
 80084d2:	bf08      	it	eq
 80084d4:	694b      	ldreq	r3, [r1, #20]
 80084d6:	600f      	str	r7, [r1, #0]
 80084d8:	bf18      	it	ne
 80084da:	2300      	movne	r3, #0
 80084dc:	eba6 0807 	sub.w	r8, r6, r7
 80084e0:	608b      	str	r3, [r1, #8]
 80084e2:	f1b8 0f00 	cmp.w	r8, #0
 80084e6:	dd9c      	ble.n	8008422 <__sflush_r+0x1a>
 80084e8:	6a21      	ldr	r1, [r4, #32]
 80084ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80084ec:	4643      	mov	r3, r8
 80084ee:	463a      	mov	r2, r7
 80084f0:	4628      	mov	r0, r5
 80084f2:	47b0      	blx	r6
 80084f4:	2800      	cmp	r0, #0
 80084f6:	dc06      	bgt.n	8008506 <__sflush_r+0xfe>
 80084f8:	89a3      	ldrh	r3, [r4, #12]
 80084fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084fe:	81a3      	strh	r3, [r4, #12]
 8008500:	f04f 30ff 	mov.w	r0, #4294967295
 8008504:	e78e      	b.n	8008424 <__sflush_r+0x1c>
 8008506:	4407      	add	r7, r0
 8008508:	eba8 0800 	sub.w	r8, r8, r0
 800850c:	e7e9      	b.n	80084e2 <__sflush_r+0xda>
 800850e:	bf00      	nop
 8008510:	20400001 	.word	0x20400001

08008514 <_fflush_r>:
 8008514:	b538      	push	{r3, r4, r5, lr}
 8008516:	690b      	ldr	r3, [r1, #16]
 8008518:	4605      	mov	r5, r0
 800851a:	460c      	mov	r4, r1
 800851c:	b913      	cbnz	r3, 8008524 <_fflush_r+0x10>
 800851e:	2500      	movs	r5, #0
 8008520:	4628      	mov	r0, r5
 8008522:	bd38      	pop	{r3, r4, r5, pc}
 8008524:	b118      	cbz	r0, 800852e <_fflush_r+0x1a>
 8008526:	6983      	ldr	r3, [r0, #24]
 8008528:	b90b      	cbnz	r3, 800852e <_fflush_r+0x1a>
 800852a:	f000 f887 	bl	800863c <__sinit>
 800852e:	4b14      	ldr	r3, [pc, #80]	; (8008580 <_fflush_r+0x6c>)
 8008530:	429c      	cmp	r4, r3
 8008532:	d11b      	bne.n	800856c <_fflush_r+0x58>
 8008534:	686c      	ldr	r4, [r5, #4]
 8008536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d0ef      	beq.n	800851e <_fflush_r+0xa>
 800853e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008540:	07d0      	lsls	r0, r2, #31
 8008542:	d404      	bmi.n	800854e <_fflush_r+0x3a>
 8008544:	0599      	lsls	r1, r3, #22
 8008546:	d402      	bmi.n	800854e <_fflush_r+0x3a>
 8008548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800854a:	f000 f915 	bl	8008778 <__retarget_lock_acquire_recursive>
 800854e:	4628      	mov	r0, r5
 8008550:	4621      	mov	r1, r4
 8008552:	f7ff ff59 	bl	8008408 <__sflush_r>
 8008556:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008558:	07da      	lsls	r2, r3, #31
 800855a:	4605      	mov	r5, r0
 800855c:	d4e0      	bmi.n	8008520 <_fflush_r+0xc>
 800855e:	89a3      	ldrh	r3, [r4, #12]
 8008560:	059b      	lsls	r3, r3, #22
 8008562:	d4dd      	bmi.n	8008520 <_fflush_r+0xc>
 8008564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008566:	f000 f908 	bl	800877a <__retarget_lock_release_recursive>
 800856a:	e7d9      	b.n	8008520 <_fflush_r+0xc>
 800856c:	4b05      	ldr	r3, [pc, #20]	; (8008584 <_fflush_r+0x70>)
 800856e:	429c      	cmp	r4, r3
 8008570:	d101      	bne.n	8008576 <_fflush_r+0x62>
 8008572:	68ac      	ldr	r4, [r5, #8]
 8008574:	e7df      	b.n	8008536 <_fflush_r+0x22>
 8008576:	4b04      	ldr	r3, [pc, #16]	; (8008588 <_fflush_r+0x74>)
 8008578:	429c      	cmp	r4, r3
 800857a:	bf08      	it	eq
 800857c:	68ec      	ldreq	r4, [r5, #12]
 800857e:	e7da      	b.n	8008536 <_fflush_r+0x22>
 8008580:	0800955c 	.word	0x0800955c
 8008584:	0800957c 	.word	0x0800957c
 8008588:	0800953c 	.word	0x0800953c

0800858c <std>:
 800858c:	2300      	movs	r3, #0
 800858e:	b510      	push	{r4, lr}
 8008590:	4604      	mov	r4, r0
 8008592:	e9c0 3300 	strd	r3, r3, [r0]
 8008596:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800859a:	6083      	str	r3, [r0, #8]
 800859c:	8181      	strh	r1, [r0, #12]
 800859e:	6643      	str	r3, [r0, #100]	; 0x64
 80085a0:	81c2      	strh	r2, [r0, #14]
 80085a2:	6183      	str	r3, [r0, #24]
 80085a4:	4619      	mov	r1, r3
 80085a6:	2208      	movs	r2, #8
 80085a8:	305c      	adds	r0, #92	; 0x5c
 80085aa:	f7fd fb5b 	bl	8005c64 <memset>
 80085ae:	4b05      	ldr	r3, [pc, #20]	; (80085c4 <std+0x38>)
 80085b0:	6263      	str	r3, [r4, #36]	; 0x24
 80085b2:	4b05      	ldr	r3, [pc, #20]	; (80085c8 <std+0x3c>)
 80085b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80085b6:	4b05      	ldr	r3, [pc, #20]	; (80085cc <std+0x40>)
 80085b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80085ba:	4b05      	ldr	r3, [pc, #20]	; (80085d0 <std+0x44>)
 80085bc:	6224      	str	r4, [r4, #32]
 80085be:	6323      	str	r3, [r4, #48]	; 0x30
 80085c0:	bd10      	pop	{r4, pc}
 80085c2:	bf00      	nop
 80085c4:	080088e1 	.word	0x080088e1
 80085c8:	08008903 	.word	0x08008903
 80085cc:	0800893b 	.word	0x0800893b
 80085d0:	0800895f 	.word	0x0800895f

080085d4 <_cleanup_r>:
 80085d4:	4901      	ldr	r1, [pc, #4]	; (80085dc <_cleanup_r+0x8>)
 80085d6:	f000 b8af 	b.w	8008738 <_fwalk_reent>
 80085da:	bf00      	nop
 80085dc:	08008515 	.word	0x08008515

080085e0 <__sfmoreglue>:
 80085e0:	b570      	push	{r4, r5, r6, lr}
 80085e2:	2268      	movs	r2, #104	; 0x68
 80085e4:	1e4d      	subs	r5, r1, #1
 80085e6:	4355      	muls	r5, r2
 80085e8:	460e      	mov	r6, r1
 80085ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80085ee:	f7ff fa65 	bl	8007abc <_malloc_r>
 80085f2:	4604      	mov	r4, r0
 80085f4:	b140      	cbz	r0, 8008608 <__sfmoreglue+0x28>
 80085f6:	2100      	movs	r1, #0
 80085f8:	e9c0 1600 	strd	r1, r6, [r0]
 80085fc:	300c      	adds	r0, #12
 80085fe:	60a0      	str	r0, [r4, #8]
 8008600:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008604:	f7fd fb2e 	bl	8005c64 <memset>
 8008608:	4620      	mov	r0, r4
 800860a:	bd70      	pop	{r4, r5, r6, pc}

0800860c <__sfp_lock_acquire>:
 800860c:	4801      	ldr	r0, [pc, #4]	; (8008614 <__sfp_lock_acquire+0x8>)
 800860e:	f000 b8b3 	b.w	8008778 <__retarget_lock_acquire_recursive>
 8008612:	bf00      	nop
 8008614:	2000046d 	.word	0x2000046d

08008618 <__sfp_lock_release>:
 8008618:	4801      	ldr	r0, [pc, #4]	; (8008620 <__sfp_lock_release+0x8>)
 800861a:	f000 b8ae 	b.w	800877a <__retarget_lock_release_recursive>
 800861e:	bf00      	nop
 8008620:	2000046d 	.word	0x2000046d

08008624 <__sinit_lock_acquire>:
 8008624:	4801      	ldr	r0, [pc, #4]	; (800862c <__sinit_lock_acquire+0x8>)
 8008626:	f000 b8a7 	b.w	8008778 <__retarget_lock_acquire_recursive>
 800862a:	bf00      	nop
 800862c:	2000046e 	.word	0x2000046e

08008630 <__sinit_lock_release>:
 8008630:	4801      	ldr	r0, [pc, #4]	; (8008638 <__sinit_lock_release+0x8>)
 8008632:	f000 b8a2 	b.w	800877a <__retarget_lock_release_recursive>
 8008636:	bf00      	nop
 8008638:	2000046e 	.word	0x2000046e

0800863c <__sinit>:
 800863c:	b510      	push	{r4, lr}
 800863e:	4604      	mov	r4, r0
 8008640:	f7ff fff0 	bl	8008624 <__sinit_lock_acquire>
 8008644:	69a3      	ldr	r3, [r4, #24]
 8008646:	b11b      	cbz	r3, 8008650 <__sinit+0x14>
 8008648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800864c:	f7ff bff0 	b.w	8008630 <__sinit_lock_release>
 8008650:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008654:	6523      	str	r3, [r4, #80]	; 0x50
 8008656:	4b13      	ldr	r3, [pc, #76]	; (80086a4 <__sinit+0x68>)
 8008658:	4a13      	ldr	r2, [pc, #76]	; (80086a8 <__sinit+0x6c>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	62a2      	str	r2, [r4, #40]	; 0x28
 800865e:	42a3      	cmp	r3, r4
 8008660:	bf04      	itt	eq
 8008662:	2301      	moveq	r3, #1
 8008664:	61a3      	streq	r3, [r4, #24]
 8008666:	4620      	mov	r0, r4
 8008668:	f000 f820 	bl	80086ac <__sfp>
 800866c:	6060      	str	r0, [r4, #4]
 800866e:	4620      	mov	r0, r4
 8008670:	f000 f81c 	bl	80086ac <__sfp>
 8008674:	60a0      	str	r0, [r4, #8]
 8008676:	4620      	mov	r0, r4
 8008678:	f000 f818 	bl	80086ac <__sfp>
 800867c:	2200      	movs	r2, #0
 800867e:	60e0      	str	r0, [r4, #12]
 8008680:	2104      	movs	r1, #4
 8008682:	6860      	ldr	r0, [r4, #4]
 8008684:	f7ff ff82 	bl	800858c <std>
 8008688:	68a0      	ldr	r0, [r4, #8]
 800868a:	2201      	movs	r2, #1
 800868c:	2109      	movs	r1, #9
 800868e:	f7ff ff7d 	bl	800858c <std>
 8008692:	68e0      	ldr	r0, [r4, #12]
 8008694:	2202      	movs	r2, #2
 8008696:	2112      	movs	r1, #18
 8008698:	f7ff ff78 	bl	800858c <std>
 800869c:	2301      	movs	r3, #1
 800869e:	61a3      	str	r3, [r4, #24]
 80086a0:	e7d2      	b.n	8008648 <__sinit+0xc>
 80086a2:	bf00      	nop
 80086a4:	080091c0 	.word	0x080091c0
 80086a8:	080085d5 	.word	0x080085d5

080086ac <__sfp>:
 80086ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ae:	4607      	mov	r7, r0
 80086b0:	f7ff ffac 	bl	800860c <__sfp_lock_acquire>
 80086b4:	4b1e      	ldr	r3, [pc, #120]	; (8008730 <__sfp+0x84>)
 80086b6:	681e      	ldr	r6, [r3, #0]
 80086b8:	69b3      	ldr	r3, [r6, #24]
 80086ba:	b913      	cbnz	r3, 80086c2 <__sfp+0x16>
 80086bc:	4630      	mov	r0, r6
 80086be:	f7ff ffbd 	bl	800863c <__sinit>
 80086c2:	3648      	adds	r6, #72	; 0x48
 80086c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80086c8:	3b01      	subs	r3, #1
 80086ca:	d503      	bpl.n	80086d4 <__sfp+0x28>
 80086cc:	6833      	ldr	r3, [r6, #0]
 80086ce:	b30b      	cbz	r3, 8008714 <__sfp+0x68>
 80086d0:	6836      	ldr	r6, [r6, #0]
 80086d2:	e7f7      	b.n	80086c4 <__sfp+0x18>
 80086d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80086d8:	b9d5      	cbnz	r5, 8008710 <__sfp+0x64>
 80086da:	4b16      	ldr	r3, [pc, #88]	; (8008734 <__sfp+0x88>)
 80086dc:	60e3      	str	r3, [r4, #12]
 80086de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086e2:	6665      	str	r5, [r4, #100]	; 0x64
 80086e4:	f000 f847 	bl	8008776 <__retarget_lock_init_recursive>
 80086e8:	f7ff ff96 	bl	8008618 <__sfp_lock_release>
 80086ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80086f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80086f4:	6025      	str	r5, [r4, #0]
 80086f6:	61a5      	str	r5, [r4, #24]
 80086f8:	2208      	movs	r2, #8
 80086fa:	4629      	mov	r1, r5
 80086fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008700:	f7fd fab0 	bl	8005c64 <memset>
 8008704:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008708:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800870c:	4620      	mov	r0, r4
 800870e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008710:	3468      	adds	r4, #104	; 0x68
 8008712:	e7d9      	b.n	80086c8 <__sfp+0x1c>
 8008714:	2104      	movs	r1, #4
 8008716:	4638      	mov	r0, r7
 8008718:	f7ff ff62 	bl	80085e0 <__sfmoreglue>
 800871c:	4604      	mov	r4, r0
 800871e:	6030      	str	r0, [r6, #0]
 8008720:	2800      	cmp	r0, #0
 8008722:	d1d5      	bne.n	80086d0 <__sfp+0x24>
 8008724:	f7ff ff78 	bl	8008618 <__sfp_lock_release>
 8008728:	230c      	movs	r3, #12
 800872a:	603b      	str	r3, [r7, #0]
 800872c:	e7ee      	b.n	800870c <__sfp+0x60>
 800872e:	bf00      	nop
 8008730:	080091c0 	.word	0x080091c0
 8008734:	ffff0001 	.word	0xffff0001

08008738 <_fwalk_reent>:
 8008738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800873c:	4606      	mov	r6, r0
 800873e:	4688      	mov	r8, r1
 8008740:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008744:	2700      	movs	r7, #0
 8008746:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800874a:	f1b9 0901 	subs.w	r9, r9, #1
 800874e:	d505      	bpl.n	800875c <_fwalk_reent+0x24>
 8008750:	6824      	ldr	r4, [r4, #0]
 8008752:	2c00      	cmp	r4, #0
 8008754:	d1f7      	bne.n	8008746 <_fwalk_reent+0xe>
 8008756:	4638      	mov	r0, r7
 8008758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800875c:	89ab      	ldrh	r3, [r5, #12]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d907      	bls.n	8008772 <_fwalk_reent+0x3a>
 8008762:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008766:	3301      	adds	r3, #1
 8008768:	d003      	beq.n	8008772 <_fwalk_reent+0x3a>
 800876a:	4629      	mov	r1, r5
 800876c:	4630      	mov	r0, r6
 800876e:	47c0      	blx	r8
 8008770:	4307      	orrs	r7, r0
 8008772:	3568      	adds	r5, #104	; 0x68
 8008774:	e7e9      	b.n	800874a <_fwalk_reent+0x12>

08008776 <__retarget_lock_init_recursive>:
 8008776:	4770      	bx	lr

08008778 <__retarget_lock_acquire_recursive>:
 8008778:	4770      	bx	lr

0800877a <__retarget_lock_release_recursive>:
 800877a:	4770      	bx	lr

0800877c <__swhatbuf_r>:
 800877c:	b570      	push	{r4, r5, r6, lr}
 800877e:	460e      	mov	r6, r1
 8008780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008784:	2900      	cmp	r1, #0
 8008786:	b096      	sub	sp, #88	; 0x58
 8008788:	4614      	mov	r4, r2
 800878a:	461d      	mov	r5, r3
 800878c:	da08      	bge.n	80087a0 <__swhatbuf_r+0x24>
 800878e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	602a      	str	r2, [r5, #0]
 8008796:	061a      	lsls	r2, r3, #24
 8008798:	d410      	bmi.n	80087bc <__swhatbuf_r+0x40>
 800879a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800879e:	e00e      	b.n	80087be <__swhatbuf_r+0x42>
 80087a0:	466a      	mov	r2, sp
 80087a2:	f000 f903 	bl	80089ac <_fstat_r>
 80087a6:	2800      	cmp	r0, #0
 80087a8:	dbf1      	blt.n	800878e <__swhatbuf_r+0x12>
 80087aa:	9a01      	ldr	r2, [sp, #4]
 80087ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80087b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80087b4:	425a      	negs	r2, r3
 80087b6:	415a      	adcs	r2, r3
 80087b8:	602a      	str	r2, [r5, #0]
 80087ba:	e7ee      	b.n	800879a <__swhatbuf_r+0x1e>
 80087bc:	2340      	movs	r3, #64	; 0x40
 80087be:	2000      	movs	r0, #0
 80087c0:	6023      	str	r3, [r4, #0]
 80087c2:	b016      	add	sp, #88	; 0x58
 80087c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080087c8 <__smakebuf_r>:
 80087c8:	898b      	ldrh	r3, [r1, #12]
 80087ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80087cc:	079d      	lsls	r5, r3, #30
 80087ce:	4606      	mov	r6, r0
 80087d0:	460c      	mov	r4, r1
 80087d2:	d507      	bpl.n	80087e4 <__smakebuf_r+0x1c>
 80087d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80087d8:	6023      	str	r3, [r4, #0]
 80087da:	6123      	str	r3, [r4, #16]
 80087dc:	2301      	movs	r3, #1
 80087de:	6163      	str	r3, [r4, #20]
 80087e0:	b002      	add	sp, #8
 80087e2:	bd70      	pop	{r4, r5, r6, pc}
 80087e4:	ab01      	add	r3, sp, #4
 80087e6:	466a      	mov	r2, sp
 80087e8:	f7ff ffc8 	bl	800877c <__swhatbuf_r>
 80087ec:	9900      	ldr	r1, [sp, #0]
 80087ee:	4605      	mov	r5, r0
 80087f0:	4630      	mov	r0, r6
 80087f2:	f7ff f963 	bl	8007abc <_malloc_r>
 80087f6:	b948      	cbnz	r0, 800880c <__smakebuf_r+0x44>
 80087f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087fc:	059a      	lsls	r2, r3, #22
 80087fe:	d4ef      	bmi.n	80087e0 <__smakebuf_r+0x18>
 8008800:	f023 0303 	bic.w	r3, r3, #3
 8008804:	f043 0302 	orr.w	r3, r3, #2
 8008808:	81a3      	strh	r3, [r4, #12]
 800880a:	e7e3      	b.n	80087d4 <__smakebuf_r+0xc>
 800880c:	4b0d      	ldr	r3, [pc, #52]	; (8008844 <__smakebuf_r+0x7c>)
 800880e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	6020      	str	r0, [r4, #0]
 8008814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008818:	81a3      	strh	r3, [r4, #12]
 800881a:	9b00      	ldr	r3, [sp, #0]
 800881c:	6163      	str	r3, [r4, #20]
 800881e:	9b01      	ldr	r3, [sp, #4]
 8008820:	6120      	str	r0, [r4, #16]
 8008822:	b15b      	cbz	r3, 800883c <__smakebuf_r+0x74>
 8008824:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008828:	4630      	mov	r0, r6
 800882a:	f000 f8d1 	bl	80089d0 <_isatty_r>
 800882e:	b128      	cbz	r0, 800883c <__smakebuf_r+0x74>
 8008830:	89a3      	ldrh	r3, [r4, #12]
 8008832:	f023 0303 	bic.w	r3, r3, #3
 8008836:	f043 0301 	orr.w	r3, r3, #1
 800883a:	81a3      	strh	r3, [r4, #12]
 800883c:	89a0      	ldrh	r0, [r4, #12]
 800883e:	4305      	orrs	r5, r0
 8008840:	81a5      	strh	r5, [r4, #12]
 8008842:	e7cd      	b.n	80087e0 <__smakebuf_r+0x18>
 8008844:	080085d5 	.word	0x080085d5

08008848 <_malloc_usable_size_r>:
 8008848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800884c:	1f18      	subs	r0, r3, #4
 800884e:	2b00      	cmp	r3, #0
 8008850:	bfbc      	itt	lt
 8008852:	580b      	ldrlt	r3, [r1, r0]
 8008854:	18c0      	addlt	r0, r0, r3
 8008856:	4770      	bx	lr

08008858 <_raise_r>:
 8008858:	291f      	cmp	r1, #31
 800885a:	b538      	push	{r3, r4, r5, lr}
 800885c:	4604      	mov	r4, r0
 800885e:	460d      	mov	r5, r1
 8008860:	d904      	bls.n	800886c <_raise_r+0x14>
 8008862:	2316      	movs	r3, #22
 8008864:	6003      	str	r3, [r0, #0]
 8008866:	f04f 30ff 	mov.w	r0, #4294967295
 800886a:	bd38      	pop	{r3, r4, r5, pc}
 800886c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800886e:	b112      	cbz	r2, 8008876 <_raise_r+0x1e>
 8008870:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008874:	b94b      	cbnz	r3, 800888a <_raise_r+0x32>
 8008876:	4620      	mov	r0, r4
 8008878:	f000 f830 	bl	80088dc <_getpid_r>
 800887c:	462a      	mov	r2, r5
 800887e:	4601      	mov	r1, r0
 8008880:	4620      	mov	r0, r4
 8008882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008886:	f000 b817 	b.w	80088b8 <_kill_r>
 800888a:	2b01      	cmp	r3, #1
 800888c:	d00a      	beq.n	80088a4 <_raise_r+0x4c>
 800888e:	1c59      	adds	r1, r3, #1
 8008890:	d103      	bne.n	800889a <_raise_r+0x42>
 8008892:	2316      	movs	r3, #22
 8008894:	6003      	str	r3, [r0, #0]
 8008896:	2001      	movs	r0, #1
 8008898:	e7e7      	b.n	800886a <_raise_r+0x12>
 800889a:	2400      	movs	r4, #0
 800889c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80088a0:	4628      	mov	r0, r5
 80088a2:	4798      	blx	r3
 80088a4:	2000      	movs	r0, #0
 80088a6:	e7e0      	b.n	800886a <_raise_r+0x12>

080088a8 <raise>:
 80088a8:	4b02      	ldr	r3, [pc, #8]	; (80088b4 <raise+0xc>)
 80088aa:	4601      	mov	r1, r0
 80088ac:	6818      	ldr	r0, [r3, #0]
 80088ae:	f7ff bfd3 	b.w	8008858 <_raise_r>
 80088b2:	bf00      	nop
 80088b4:	200000a4 	.word	0x200000a4

080088b8 <_kill_r>:
 80088b8:	b538      	push	{r3, r4, r5, lr}
 80088ba:	4d07      	ldr	r5, [pc, #28]	; (80088d8 <_kill_r+0x20>)
 80088bc:	2300      	movs	r3, #0
 80088be:	4604      	mov	r4, r0
 80088c0:	4608      	mov	r0, r1
 80088c2:	4611      	mov	r1, r2
 80088c4:	602b      	str	r3, [r5, #0]
 80088c6:	f7f9 fbde 	bl	8002086 <_kill>
 80088ca:	1c43      	adds	r3, r0, #1
 80088cc:	d102      	bne.n	80088d4 <_kill_r+0x1c>
 80088ce:	682b      	ldr	r3, [r5, #0]
 80088d0:	b103      	cbz	r3, 80088d4 <_kill_r+0x1c>
 80088d2:	6023      	str	r3, [r4, #0]
 80088d4:	bd38      	pop	{r3, r4, r5, pc}
 80088d6:	bf00      	nop
 80088d8:	20000468 	.word	0x20000468

080088dc <_getpid_r>:
 80088dc:	f7f9 bbcb 	b.w	8002076 <_getpid>

080088e0 <__sread>:
 80088e0:	b510      	push	{r4, lr}
 80088e2:	460c      	mov	r4, r1
 80088e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088e8:	f000 f894 	bl	8008a14 <_read_r>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	bfab      	itete	ge
 80088f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088f2:	89a3      	ldrhlt	r3, [r4, #12]
 80088f4:	181b      	addge	r3, r3, r0
 80088f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088fa:	bfac      	ite	ge
 80088fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80088fe:	81a3      	strhlt	r3, [r4, #12]
 8008900:	bd10      	pop	{r4, pc}

08008902 <__swrite>:
 8008902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008906:	461f      	mov	r7, r3
 8008908:	898b      	ldrh	r3, [r1, #12]
 800890a:	05db      	lsls	r3, r3, #23
 800890c:	4605      	mov	r5, r0
 800890e:	460c      	mov	r4, r1
 8008910:	4616      	mov	r6, r2
 8008912:	d505      	bpl.n	8008920 <__swrite+0x1e>
 8008914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008918:	2302      	movs	r3, #2
 800891a:	2200      	movs	r2, #0
 800891c:	f000 f868 	bl	80089f0 <_lseek_r>
 8008920:	89a3      	ldrh	r3, [r4, #12]
 8008922:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008926:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800892a:	81a3      	strh	r3, [r4, #12]
 800892c:	4632      	mov	r2, r6
 800892e:	463b      	mov	r3, r7
 8008930:	4628      	mov	r0, r5
 8008932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008936:	f000 b817 	b.w	8008968 <_write_r>

0800893a <__sseek>:
 800893a:	b510      	push	{r4, lr}
 800893c:	460c      	mov	r4, r1
 800893e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008942:	f000 f855 	bl	80089f0 <_lseek_r>
 8008946:	1c43      	adds	r3, r0, #1
 8008948:	89a3      	ldrh	r3, [r4, #12]
 800894a:	bf15      	itete	ne
 800894c:	6560      	strne	r0, [r4, #84]	; 0x54
 800894e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008952:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008956:	81a3      	strheq	r3, [r4, #12]
 8008958:	bf18      	it	ne
 800895a:	81a3      	strhne	r3, [r4, #12]
 800895c:	bd10      	pop	{r4, pc}

0800895e <__sclose>:
 800895e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008962:	f000 b813 	b.w	800898c <_close_r>
	...

08008968 <_write_r>:
 8008968:	b538      	push	{r3, r4, r5, lr}
 800896a:	4d07      	ldr	r5, [pc, #28]	; (8008988 <_write_r+0x20>)
 800896c:	4604      	mov	r4, r0
 800896e:	4608      	mov	r0, r1
 8008970:	4611      	mov	r1, r2
 8008972:	2200      	movs	r2, #0
 8008974:	602a      	str	r2, [r5, #0]
 8008976:	461a      	mov	r2, r3
 8008978:	f7f9 fbbc 	bl	80020f4 <_write>
 800897c:	1c43      	adds	r3, r0, #1
 800897e:	d102      	bne.n	8008986 <_write_r+0x1e>
 8008980:	682b      	ldr	r3, [r5, #0]
 8008982:	b103      	cbz	r3, 8008986 <_write_r+0x1e>
 8008984:	6023      	str	r3, [r4, #0]
 8008986:	bd38      	pop	{r3, r4, r5, pc}
 8008988:	20000468 	.word	0x20000468

0800898c <_close_r>:
 800898c:	b538      	push	{r3, r4, r5, lr}
 800898e:	4d06      	ldr	r5, [pc, #24]	; (80089a8 <_close_r+0x1c>)
 8008990:	2300      	movs	r3, #0
 8008992:	4604      	mov	r4, r0
 8008994:	4608      	mov	r0, r1
 8008996:	602b      	str	r3, [r5, #0]
 8008998:	f7f9 fbc8 	bl	800212c <_close>
 800899c:	1c43      	adds	r3, r0, #1
 800899e:	d102      	bne.n	80089a6 <_close_r+0x1a>
 80089a0:	682b      	ldr	r3, [r5, #0]
 80089a2:	b103      	cbz	r3, 80089a6 <_close_r+0x1a>
 80089a4:	6023      	str	r3, [r4, #0]
 80089a6:	bd38      	pop	{r3, r4, r5, pc}
 80089a8:	20000468 	.word	0x20000468

080089ac <_fstat_r>:
 80089ac:	b538      	push	{r3, r4, r5, lr}
 80089ae:	4d07      	ldr	r5, [pc, #28]	; (80089cc <_fstat_r+0x20>)
 80089b0:	2300      	movs	r3, #0
 80089b2:	4604      	mov	r4, r0
 80089b4:	4608      	mov	r0, r1
 80089b6:	4611      	mov	r1, r2
 80089b8:	602b      	str	r3, [r5, #0]
 80089ba:	f7f9 fbc3 	bl	8002144 <_fstat>
 80089be:	1c43      	adds	r3, r0, #1
 80089c0:	d102      	bne.n	80089c8 <_fstat_r+0x1c>
 80089c2:	682b      	ldr	r3, [r5, #0]
 80089c4:	b103      	cbz	r3, 80089c8 <_fstat_r+0x1c>
 80089c6:	6023      	str	r3, [r4, #0]
 80089c8:	bd38      	pop	{r3, r4, r5, pc}
 80089ca:	bf00      	nop
 80089cc:	20000468 	.word	0x20000468

080089d0 <_isatty_r>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	4d06      	ldr	r5, [pc, #24]	; (80089ec <_isatty_r+0x1c>)
 80089d4:	2300      	movs	r3, #0
 80089d6:	4604      	mov	r4, r0
 80089d8:	4608      	mov	r0, r1
 80089da:	602b      	str	r3, [r5, #0]
 80089dc:	f7f9 fbc2 	bl	8002164 <_isatty>
 80089e0:	1c43      	adds	r3, r0, #1
 80089e2:	d102      	bne.n	80089ea <_isatty_r+0x1a>
 80089e4:	682b      	ldr	r3, [r5, #0]
 80089e6:	b103      	cbz	r3, 80089ea <_isatty_r+0x1a>
 80089e8:	6023      	str	r3, [r4, #0]
 80089ea:	bd38      	pop	{r3, r4, r5, pc}
 80089ec:	20000468 	.word	0x20000468

080089f0 <_lseek_r>:
 80089f0:	b538      	push	{r3, r4, r5, lr}
 80089f2:	4d07      	ldr	r5, [pc, #28]	; (8008a10 <_lseek_r+0x20>)
 80089f4:	4604      	mov	r4, r0
 80089f6:	4608      	mov	r0, r1
 80089f8:	4611      	mov	r1, r2
 80089fa:	2200      	movs	r2, #0
 80089fc:	602a      	str	r2, [r5, #0]
 80089fe:	461a      	mov	r2, r3
 8008a00:	f7f9 fbbb 	bl	800217a <_lseek>
 8008a04:	1c43      	adds	r3, r0, #1
 8008a06:	d102      	bne.n	8008a0e <_lseek_r+0x1e>
 8008a08:	682b      	ldr	r3, [r5, #0]
 8008a0a:	b103      	cbz	r3, 8008a0e <_lseek_r+0x1e>
 8008a0c:	6023      	str	r3, [r4, #0]
 8008a0e:	bd38      	pop	{r3, r4, r5, pc}
 8008a10:	20000468 	.word	0x20000468

08008a14 <_read_r>:
 8008a14:	b538      	push	{r3, r4, r5, lr}
 8008a16:	4d07      	ldr	r5, [pc, #28]	; (8008a34 <_read_r+0x20>)
 8008a18:	4604      	mov	r4, r0
 8008a1a:	4608      	mov	r0, r1
 8008a1c:	4611      	mov	r1, r2
 8008a1e:	2200      	movs	r2, #0
 8008a20:	602a      	str	r2, [r5, #0]
 8008a22:	461a      	mov	r2, r3
 8008a24:	f7f9 fb49 	bl	80020ba <_read>
 8008a28:	1c43      	adds	r3, r0, #1
 8008a2a:	d102      	bne.n	8008a32 <_read_r+0x1e>
 8008a2c:	682b      	ldr	r3, [r5, #0]
 8008a2e:	b103      	cbz	r3, 8008a32 <_read_r+0x1e>
 8008a30:	6023      	str	r3, [r4, #0]
 8008a32:	bd38      	pop	{r3, r4, r5, pc}
 8008a34:	20000468 	.word	0x20000468

08008a38 <atan>:
 8008a38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a3c:	ec55 4b10 	vmov	r4, r5, d0
 8008a40:	4bc3      	ldr	r3, [pc, #780]	; (8008d50 <atan+0x318>)
 8008a42:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008a46:	429e      	cmp	r6, r3
 8008a48:	46ab      	mov	fp, r5
 8008a4a:	dd18      	ble.n	8008a7e <atan+0x46>
 8008a4c:	4bc1      	ldr	r3, [pc, #772]	; (8008d54 <atan+0x31c>)
 8008a4e:	429e      	cmp	r6, r3
 8008a50:	dc01      	bgt.n	8008a56 <atan+0x1e>
 8008a52:	d109      	bne.n	8008a68 <atan+0x30>
 8008a54:	b144      	cbz	r4, 8008a68 <atan+0x30>
 8008a56:	4622      	mov	r2, r4
 8008a58:	462b      	mov	r3, r5
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	4629      	mov	r1, r5
 8008a5e:	f7f7 fc15 	bl	800028c <__adddf3>
 8008a62:	4604      	mov	r4, r0
 8008a64:	460d      	mov	r5, r1
 8008a66:	e006      	b.n	8008a76 <atan+0x3e>
 8008a68:	f1bb 0f00 	cmp.w	fp, #0
 8008a6c:	f300 8131 	bgt.w	8008cd2 <atan+0x29a>
 8008a70:	a59b      	add	r5, pc, #620	; (adr r5, 8008ce0 <atan+0x2a8>)
 8008a72:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008a76:	ec45 4b10 	vmov	d0, r4, r5
 8008a7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a7e:	4bb6      	ldr	r3, [pc, #728]	; (8008d58 <atan+0x320>)
 8008a80:	429e      	cmp	r6, r3
 8008a82:	dc14      	bgt.n	8008aae <atan+0x76>
 8008a84:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008a88:	429e      	cmp	r6, r3
 8008a8a:	dc0d      	bgt.n	8008aa8 <atan+0x70>
 8008a8c:	a396      	add	r3, pc, #600	; (adr r3, 8008ce8 <atan+0x2b0>)
 8008a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a92:	ee10 0a10 	vmov	r0, s0
 8008a96:	4629      	mov	r1, r5
 8008a98:	f7f7 fbf8 	bl	800028c <__adddf3>
 8008a9c:	4baf      	ldr	r3, [pc, #700]	; (8008d5c <atan+0x324>)
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f7f8 f83a 	bl	8000b18 <__aeabi_dcmpgt>
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	d1e6      	bne.n	8008a76 <atan+0x3e>
 8008aa8:	f04f 3aff 	mov.w	sl, #4294967295
 8008aac:	e02b      	b.n	8008b06 <atan+0xce>
 8008aae:	f000 f963 	bl	8008d78 <fabs>
 8008ab2:	4bab      	ldr	r3, [pc, #684]	; (8008d60 <atan+0x328>)
 8008ab4:	429e      	cmp	r6, r3
 8008ab6:	ec55 4b10 	vmov	r4, r5, d0
 8008aba:	f300 80bf 	bgt.w	8008c3c <atan+0x204>
 8008abe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008ac2:	429e      	cmp	r6, r3
 8008ac4:	f300 80a0 	bgt.w	8008c08 <atan+0x1d0>
 8008ac8:	ee10 2a10 	vmov	r2, s0
 8008acc:	ee10 0a10 	vmov	r0, s0
 8008ad0:	462b      	mov	r3, r5
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	f7f7 fbda 	bl	800028c <__adddf3>
 8008ad8:	4ba0      	ldr	r3, [pc, #640]	; (8008d5c <atan+0x324>)
 8008ada:	2200      	movs	r2, #0
 8008adc:	f7f7 fbd4 	bl	8000288 <__aeabi_dsub>
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	4606      	mov	r6, r0
 8008ae4:	460f      	mov	r7, r1
 8008ae6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008aea:	4620      	mov	r0, r4
 8008aec:	4629      	mov	r1, r5
 8008aee:	f7f7 fbcd 	bl	800028c <__adddf3>
 8008af2:	4602      	mov	r2, r0
 8008af4:	460b      	mov	r3, r1
 8008af6:	4630      	mov	r0, r6
 8008af8:	4639      	mov	r1, r7
 8008afa:	f7f7 fea7 	bl	800084c <__aeabi_ddiv>
 8008afe:	f04f 0a00 	mov.w	sl, #0
 8008b02:	4604      	mov	r4, r0
 8008b04:	460d      	mov	r5, r1
 8008b06:	4622      	mov	r2, r4
 8008b08:	462b      	mov	r3, r5
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	4629      	mov	r1, r5
 8008b0e:	f7f7 fd73 	bl	80005f8 <__aeabi_dmul>
 8008b12:	4602      	mov	r2, r0
 8008b14:	460b      	mov	r3, r1
 8008b16:	4680      	mov	r8, r0
 8008b18:	4689      	mov	r9, r1
 8008b1a:	f7f7 fd6d 	bl	80005f8 <__aeabi_dmul>
 8008b1e:	a374      	add	r3, pc, #464	; (adr r3, 8008cf0 <atan+0x2b8>)
 8008b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b24:	4606      	mov	r6, r0
 8008b26:	460f      	mov	r7, r1
 8008b28:	f7f7 fd66 	bl	80005f8 <__aeabi_dmul>
 8008b2c:	a372      	add	r3, pc, #456	; (adr r3, 8008cf8 <atan+0x2c0>)
 8008b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b32:	f7f7 fbab 	bl	800028c <__adddf3>
 8008b36:	4632      	mov	r2, r6
 8008b38:	463b      	mov	r3, r7
 8008b3a:	f7f7 fd5d 	bl	80005f8 <__aeabi_dmul>
 8008b3e:	a370      	add	r3, pc, #448	; (adr r3, 8008d00 <atan+0x2c8>)
 8008b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b44:	f7f7 fba2 	bl	800028c <__adddf3>
 8008b48:	4632      	mov	r2, r6
 8008b4a:	463b      	mov	r3, r7
 8008b4c:	f7f7 fd54 	bl	80005f8 <__aeabi_dmul>
 8008b50:	a36d      	add	r3, pc, #436	; (adr r3, 8008d08 <atan+0x2d0>)
 8008b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b56:	f7f7 fb99 	bl	800028c <__adddf3>
 8008b5a:	4632      	mov	r2, r6
 8008b5c:	463b      	mov	r3, r7
 8008b5e:	f7f7 fd4b 	bl	80005f8 <__aeabi_dmul>
 8008b62:	a36b      	add	r3, pc, #428	; (adr r3, 8008d10 <atan+0x2d8>)
 8008b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b68:	f7f7 fb90 	bl	800028c <__adddf3>
 8008b6c:	4632      	mov	r2, r6
 8008b6e:	463b      	mov	r3, r7
 8008b70:	f7f7 fd42 	bl	80005f8 <__aeabi_dmul>
 8008b74:	a368      	add	r3, pc, #416	; (adr r3, 8008d18 <atan+0x2e0>)
 8008b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7a:	f7f7 fb87 	bl	800028c <__adddf3>
 8008b7e:	4642      	mov	r2, r8
 8008b80:	464b      	mov	r3, r9
 8008b82:	f7f7 fd39 	bl	80005f8 <__aeabi_dmul>
 8008b86:	a366      	add	r3, pc, #408	; (adr r3, 8008d20 <atan+0x2e8>)
 8008b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8c:	4680      	mov	r8, r0
 8008b8e:	4689      	mov	r9, r1
 8008b90:	4630      	mov	r0, r6
 8008b92:	4639      	mov	r1, r7
 8008b94:	f7f7 fd30 	bl	80005f8 <__aeabi_dmul>
 8008b98:	a363      	add	r3, pc, #396	; (adr r3, 8008d28 <atan+0x2f0>)
 8008b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9e:	f7f7 fb73 	bl	8000288 <__aeabi_dsub>
 8008ba2:	4632      	mov	r2, r6
 8008ba4:	463b      	mov	r3, r7
 8008ba6:	f7f7 fd27 	bl	80005f8 <__aeabi_dmul>
 8008baa:	a361      	add	r3, pc, #388	; (adr r3, 8008d30 <atan+0x2f8>)
 8008bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb0:	f7f7 fb6a 	bl	8000288 <__aeabi_dsub>
 8008bb4:	4632      	mov	r2, r6
 8008bb6:	463b      	mov	r3, r7
 8008bb8:	f7f7 fd1e 	bl	80005f8 <__aeabi_dmul>
 8008bbc:	a35e      	add	r3, pc, #376	; (adr r3, 8008d38 <atan+0x300>)
 8008bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc2:	f7f7 fb61 	bl	8000288 <__aeabi_dsub>
 8008bc6:	4632      	mov	r2, r6
 8008bc8:	463b      	mov	r3, r7
 8008bca:	f7f7 fd15 	bl	80005f8 <__aeabi_dmul>
 8008bce:	a35c      	add	r3, pc, #368	; (adr r3, 8008d40 <atan+0x308>)
 8008bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd4:	f7f7 fb58 	bl	8000288 <__aeabi_dsub>
 8008bd8:	4632      	mov	r2, r6
 8008bda:	463b      	mov	r3, r7
 8008bdc:	f7f7 fd0c 	bl	80005f8 <__aeabi_dmul>
 8008be0:	4602      	mov	r2, r0
 8008be2:	460b      	mov	r3, r1
 8008be4:	4640      	mov	r0, r8
 8008be6:	4649      	mov	r1, r9
 8008be8:	f7f7 fb50 	bl	800028c <__adddf3>
 8008bec:	4622      	mov	r2, r4
 8008bee:	462b      	mov	r3, r5
 8008bf0:	f7f7 fd02 	bl	80005f8 <__aeabi_dmul>
 8008bf4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	d14b      	bne.n	8008c96 <atan+0x25e>
 8008bfe:	4620      	mov	r0, r4
 8008c00:	4629      	mov	r1, r5
 8008c02:	f7f7 fb41 	bl	8000288 <__aeabi_dsub>
 8008c06:	e72c      	b.n	8008a62 <atan+0x2a>
 8008c08:	ee10 0a10 	vmov	r0, s0
 8008c0c:	4b53      	ldr	r3, [pc, #332]	; (8008d5c <atan+0x324>)
 8008c0e:	2200      	movs	r2, #0
 8008c10:	4629      	mov	r1, r5
 8008c12:	f7f7 fb39 	bl	8000288 <__aeabi_dsub>
 8008c16:	4b51      	ldr	r3, [pc, #324]	; (8008d5c <atan+0x324>)
 8008c18:	4606      	mov	r6, r0
 8008c1a:	460f      	mov	r7, r1
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	4620      	mov	r0, r4
 8008c20:	4629      	mov	r1, r5
 8008c22:	f7f7 fb33 	bl	800028c <__adddf3>
 8008c26:	4602      	mov	r2, r0
 8008c28:	460b      	mov	r3, r1
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	4639      	mov	r1, r7
 8008c2e:	f7f7 fe0d 	bl	800084c <__aeabi_ddiv>
 8008c32:	f04f 0a01 	mov.w	sl, #1
 8008c36:	4604      	mov	r4, r0
 8008c38:	460d      	mov	r5, r1
 8008c3a:	e764      	b.n	8008b06 <atan+0xce>
 8008c3c:	4b49      	ldr	r3, [pc, #292]	; (8008d64 <atan+0x32c>)
 8008c3e:	429e      	cmp	r6, r3
 8008c40:	da1d      	bge.n	8008c7e <atan+0x246>
 8008c42:	ee10 0a10 	vmov	r0, s0
 8008c46:	4b48      	ldr	r3, [pc, #288]	; (8008d68 <atan+0x330>)
 8008c48:	2200      	movs	r2, #0
 8008c4a:	4629      	mov	r1, r5
 8008c4c:	f7f7 fb1c 	bl	8000288 <__aeabi_dsub>
 8008c50:	4b45      	ldr	r3, [pc, #276]	; (8008d68 <atan+0x330>)
 8008c52:	4606      	mov	r6, r0
 8008c54:	460f      	mov	r7, r1
 8008c56:	2200      	movs	r2, #0
 8008c58:	4620      	mov	r0, r4
 8008c5a:	4629      	mov	r1, r5
 8008c5c:	f7f7 fccc 	bl	80005f8 <__aeabi_dmul>
 8008c60:	4b3e      	ldr	r3, [pc, #248]	; (8008d5c <atan+0x324>)
 8008c62:	2200      	movs	r2, #0
 8008c64:	f7f7 fb12 	bl	800028c <__adddf3>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	4639      	mov	r1, r7
 8008c70:	f7f7 fdec 	bl	800084c <__aeabi_ddiv>
 8008c74:	f04f 0a02 	mov.w	sl, #2
 8008c78:	4604      	mov	r4, r0
 8008c7a:	460d      	mov	r5, r1
 8008c7c:	e743      	b.n	8008b06 <atan+0xce>
 8008c7e:	462b      	mov	r3, r5
 8008c80:	ee10 2a10 	vmov	r2, s0
 8008c84:	4939      	ldr	r1, [pc, #228]	; (8008d6c <atan+0x334>)
 8008c86:	2000      	movs	r0, #0
 8008c88:	f7f7 fde0 	bl	800084c <__aeabi_ddiv>
 8008c8c:	f04f 0a03 	mov.w	sl, #3
 8008c90:	4604      	mov	r4, r0
 8008c92:	460d      	mov	r5, r1
 8008c94:	e737      	b.n	8008b06 <atan+0xce>
 8008c96:	4b36      	ldr	r3, [pc, #216]	; (8008d70 <atan+0x338>)
 8008c98:	4e36      	ldr	r6, [pc, #216]	; (8008d74 <atan+0x33c>)
 8008c9a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008c9e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008ca2:	e9da 2300 	ldrd	r2, r3, [sl]
 8008ca6:	f7f7 faef 	bl	8000288 <__aeabi_dsub>
 8008caa:	4622      	mov	r2, r4
 8008cac:	462b      	mov	r3, r5
 8008cae:	f7f7 faeb 	bl	8000288 <__aeabi_dsub>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008cba:	f7f7 fae5 	bl	8000288 <__aeabi_dsub>
 8008cbe:	f1bb 0f00 	cmp.w	fp, #0
 8008cc2:	4604      	mov	r4, r0
 8008cc4:	460d      	mov	r5, r1
 8008cc6:	f6bf aed6 	bge.w	8008a76 <atan+0x3e>
 8008cca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008cce:	461d      	mov	r5, r3
 8008cd0:	e6d1      	b.n	8008a76 <atan+0x3e>
 8008cd2:	a51d      	add	r5, pc, #116	; (adr r5, 8008d48 <atan+0x310>)
 8008cd4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008cd8:	e6cd      	b.n	8008a76 <atan+0x3e>
 8008cda:	bf00      	nop
 8008cdc:	f3af 8000 	nop.w
 8008ce0:	54442d18 	.word	0x54442d18
 8008ce4:	bff921fb 	.word	0xbff921fb
 8008ce8:	8800759c 	.word	0x8800759c
 8008cec:	7e37e43c 	.word	0x7e37e43c
 8008cf0:	e322da11 	.word	0xe322da11
 8008cf4:	3f90ad3a 	.word	0x3f90ad3a
 8008cf8:	24760deb 	.word	0x24760deb
 8008cfc:	3fa97b4b 	.word	0x3fa97b4b
 8008d00:	a0d03d51 	.word	0xa0d03d51
 8008d04:	3fb10d66 	.word	0x3fb10d66
 8008d08:	c54c206e 	.word	0xc54c206e
 8008d0c:	3fb745cd 	.word	0x3fb745cd
 8008d10:	920083ff 	.word	0x920083ff
 8008d14:	3fc24924 	.word	0x3fc24924
 8008d18:	5555550d 	.word	0x5555550d
 8008d1c:	3fd55555 	.word	0x3fd55555
 8008d20:	2c6a6c2f 	.word	0x2c6a6c2f
 8008d24:	bfa2b444 	.word	0xbfa2b444
 8008d28:	52defd9a 	.word	0x52defd9a
 8008d2c:	3fadde2d 	.word	0x3fadde2d
 8008d30:	af749a6d 	.word	0xaf749a6d
 8008d34:	3fb3b0f2 	.word	0x3fb3b0f2
 8008d38:	fe231671 	.word	0xfe231671
 8008d3c:	3fbc71c6 	.word	0x3fbc71c6
 8008d40:	9998ebc4 	.word	0x9998ebc4
 8008d44:	3fc99999 	.word	0x3fc99999
 8008d48:	54442d18 	.word	0x54442d18
 8008d4c:	3ff921fb 	.word	0x3ff921fb
 8008d50:	440fffff 	.word	0x440fffff
 8008d54:	7ff00000 	.word	0x7ff00000
 8008d58:	3fdbffff 	.word	0x3fdbffff
 8008d5c:	3ff00000 	.word	0x3ff00000
 8008d60:	3ff2ffff 	.word	0x3ff2ffff
 8008d64:	40038000 	.word	0x40038000
 8008d68:	3ff80000 	.word	0x3ff80000
 8008d6c:	bff00000 	.word	0xbff00000
 8008d70:	080095c0 	.word	0x080095c0
 8008d74:	080095a0 	.word	0x080095a0

08008d78 <fabs>:
 8008d78:	ec51 0b10 	vmov	r0, r1, d0
 8008d7c:	ee10 2a10 	vmov	r2, s0
 8008d80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008d84:	ec43 2b10 	vmov	d0, r2, r3
 8008d88:	4770      	bx	lr

08008d8a <atan2>:
 8008d8a:	f000 b82d 	b.w	8008de8 <__ieee754_atan2>

08008d8e <sqrt>:
 8008d8e:	b538      	push	{r3, r4, r5, lr}
 8008d90:	ed2d 8b02 	vpush	{d8}
 8008d94:	ec55 4b10 	vmov	r4, r5, d0
 8008d98:	f000 f8f0 	bl	8008f7c <__ieee754_sqrt>
 8008d9c:	4622      	mov	r2, r4
 8008d9e:	462b      	mov	r3, r5
 8008da0:	4620      	mov	r0, r4
 8008da2:	4629      	mov	r1, r5
 8008da4:	eeb0 8a40 	vmov.f32	s16, s0
 8008da8:	eef0 8a60 	vmov.f32	s17, s1
 8008dac:	f7f7 febe 	bl	8000b2c <__aeabi_dcmpun>
 8008db0:	b990      	cbnz	r0, 8008dd8 <sqrt+0x4a>
 8008db2:	2200      	movs	r2, #0
 8008db4:	2300      	movs	r3, #0
 8008db6:	4620      	mov	r0, r4
 8008db8:	4629      	mov	r1, r5
 8008dba:	f7f7 fe8f 	bl	8000adc <__aeabi_dcmplt>
 8008dbe:	b158      	cbz	r0, 8008dd8 <sqrt+0x4a>
 8008dc0:	f7fc ff26 	bl	8005c10 <__errno>
 8008dc4:	2321      	movs	r3, #33	; 0x21
 8008dc6:	6003      	str	r3, [r0, #0]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	2300      	movs	r3, #0
 8008dcc:	4610      	mov	r0, r2
 8008dce:	4619      	mov	r1, r3
 8008dd0:	f7f7 fd3c 	bl	800084c <__aeabi_ddiv>
 8008dd4:	ec41 0b18 	vmov	d8, r0, r1
 8008dd8:	eeb0 0a48 	vmov.f32	s0, s16
 8008ddc:	eef0 0a68 	vmov.f32	s1, s17
 8008de0:	ecbd 8b02 	vpop	{d8}
 8008de4:	bd38      	pop	{r3, r4, r5, pc}
	...

08008de8 <__ieee754_atan2>:
 8008de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dec:	ec57 6b11 	vmov	r6, r7, d1
 8008df0:	4273      	negs	r3, r6
 8008df2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8008f78 <__ieee754_atan2+0x190>
 8008df6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8008dfa:	4333      	orrs	r3, r6
 8008dfc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008e00:	4573      	cmp	r3, lr
 8008e02:	ec51 0b10 	vmov	r0, r1, d0
 8008e06:	ee11 8a10 	vmov	r8, s2
 8008e0a:	d80a      	bhi.n	8008e22 <__ieee754_atan2+0x3a>
 8008e0c:	4244      	negs	r4, r0
 8008e0e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008e12:	4304      	orrs	r4, r0
 8008e14:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008e18:	4574      	cmp	r4, lr
 8008e1a:	ee10 9a10 	vmov	r9, s0
 8008e1e:	468c      	mov	ip, r1
 8008e20:	d907      	bls.n	8008e32 <__ieee754_atan2+0x4a>
 8008e22:	4632      	mov	r2, r6
 8008e24:	463b      	mov	r3, r7
 8008e26:	f7f7 fa31 	bl	800028c <__adddf3>
 8008e2a:	ec41 0b10 	vmov	d0, r0, r1
 8008e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e32:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008e36:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008e3a:	4334      	orrs	r4, r6
 8008e3c:	d103      	bne.n	8008e46 <__ieee754_atan2+0x5e>
 8008e3e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e42:	f7ff bdf9 	b.w	8008a38 <atan>
 8008e46:	17bc      	asrs	r4, r7, #30
 8008e48:	f004 0402 	and.w	r4, r4, #2
 8008e4c:	ea53 0909 	orrs.w	r9, r3, r9
 8008e50:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008e54:	d107      	bne.n	8008e66 <__ieee754_atan2+0x7e>
 8008e56:	2c02      	cmp	r4, #2
 8008e58:	d060      	beq.n	8008f1c <__ieee754_atan2+0x134>
 8008e5a:	2c03      	cmp	r4, #3
 8008e5c:	d1e5      	bne.n	8008e2a <__ieee754_atan2+0x42>
 8008e5e:	a142      	add	r1, pc, #264	; (adr r1, 8008f68 <__ieee754_atan2+0x180>)
 8008e60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e64:	e7e1      	b.n	8008e2a <__ieee754_atan2+0x42>
 8008e66:	ea52 0808 	orrs.w	r8, r2, r8
 8008e6a:	d106      	bne.n	8008e7a <__ieee754_atan2+0x92>
 8008e6c:	f1bc 0f00 	cmp.w	ip, #0
 8008e70:	da5f      	bge.n	8008f32 <__ieee754_atan2+0x14a>
 8008e72:	a13f      	add	r1, pc, #252	; (adr r1, 8008f70 <__ieee754_atan2+0x188>)
 8008e74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e78:	e7d7      	b.n	8008e2a <__ieee754_atan2+0x42>
 8008e7a:	4572      	cmp	r2, lr
 8008e7c:	d10f      	bne.n	8008e9e <__ieee754_atan2+0xb6>
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	f104 34ff 	add.w	r4, r4, #4294967295
 8008e84:	d107      	bne.n	8008e96 <__ieee754_atan2+0xae>
 8008e86:	2c02      	cmp	r4, #2
 8008e88:	d84c      	bhi.n	8008f24 <__ieee754_atan2+0x13c>
 8008e8a:	4b35      	ldr	r3, [pc, #212]	; (8008f60 <__ieee754_atan2+0x178>)
 8008e8c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008e90:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008e94:	e7c9      	b.n	8008e2a <__ieee754_atan2+0x42>
 8008e96:	2c02      	cmp	r4, #2
 8008e98:	d848      	bhi.n	8008f2c <__ieee754_atan2+0x144>
 8008e9a:	4b32      	ldr	r3, [pc, #200]	; (8008f64 <__ieee754_atan2+0x17c>)
 8008e9c:	e7f6      	b.n	8008e8c <__ieee754_atan2+0xa4>
 8008e9e:	4573      	cmp	r3, lr
 8008ea0:	d0e4      	beq.n	8008e6c <__ieee754_atan2+0x84>
 8008ea2:	1a9b      	subs	r3, r3, r2
 8008ea4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008ea8:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008eac:	da1e      	bge.n	8008eec <__ieee754_atan2+0x104>
 8008eae:	2f00      	cmp	r7, #0
 8008eb0:	da01      	bge.n	8008eb6 <__ieee754_atan2+0xce>
 8008eb2:	323c      	adds	r2, #60	; 0x3c
 8008eb4:	db1e      	blt.n	8008ef4 <__ieee754_atan2+0x10c>
 8008eb6:	4632      	mov	r2, r6
 8008eb8:	463b      	mov	r3, r7
 8008eba:	f7f7 fcc7 	bl	800084c <__aeabi_ddiv>
 8008ebe:	ec41 0b10 	vmov	d0, r0, r1
 8008ec2:	f7ff ff59 	bl	8008d78 <fabs>
 8008ec6:	f7ff fdb7 	bl	8008a38 <atan>
 8008eca:	ec51 0b10 	vmov	r0, r1, d0
 8008ece:	2c01      	cmp	r4, #1
 8008ed0:	d013      	beq.n	8008efa <__ieee754_atan2+0x112>
 8008ed2:	2c02      	cmp	r4, #2
 8008ed4:	d015      	beq.n	8008f02 <__ieee754_atan2+0x11a>
 8008ed6:	2c00      	cmp	r4, #0
 8008ed8:	d0a7      	beq.n	8008e2a <__ieee754_atan2+0x42>
 8008eda:	a319      	add	r3, pc, #100	; (adr r3, 8008f40 <__ieee754_atan2+0x158>)
 8008edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee0:	f7f7 f9d2 	bl	8000288 <__aeabi_dsub>
 8008ee4:	a318      	add	r3, pc, #96	; (adr r3, 8008f48 <__ieee754_atan2+0x160>)
 8008ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eea:	e014      	b.n	8008f16 <__ieee754_atan2+0x12e>
 8008eec:	a118      	add	r1, pc, #96	; (adr r1, 8008f50 <__ieee754_atan2+0x168>)
 8008eee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ef2:	e7ec      	b.n	8008ece <__ieee754_atan2+0xe6>
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	2100      	movs	r1, #0
 8008ef8:	e7e9      	b.n	8008ece <__ieee754_atan2+0xe6>
 8008efa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008efe:	4619      	mov	r1, r3
 8008f00:	e793      	b.n	8008e2a <__ieee754_atan2+0x42>
 8008f02:	a30f      	add	r3, pc, #60	; (adr r3, 8008f40 <__ieee754_atan2+0x158>)
 8008f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f08:	f7f7 f9be 	bl	8000288 <__aeabi_dsub>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	460b      	mov	r3, r1
 8008f10:	a10d      	add	r1, pc, #52	; (adr r1, 8008f48 <__ieee754_atan2+0x160>)
 8008f12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f16:	f7f7 f9b7 	bl	8000288 <__aeabi_dsub>
 8008f1a:	e786      	b.n	8008e2a <__ieee754_atan2+0x42>
 8008f1c:	a10a      	add	r1, pc, #40	; (adr r1, 8008f48 <__ieee754_atan2+0x160>)
 8008f1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f22:	e782      	b.n	8008e2a <__ieee754_atan2+0x42>
 8008f24:	a10c      	add	r1, pc, #48	; (adr r1, 8008f58 <__ieee754_atan2+0x170>)
 8008f26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f2a:	e77e      	b.n	8008e2a <__ieee754_atan2+0x42>
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	2100      	movs	r1, #0
 8008f30:	e77b      	b.n	8008e2a <__ieee754_atan2+0x42>
 8008f32:	a107      	add	r1, pc, #28	; (adr r1, 8008f50 <__ieee754_atan2+0x168>)
 8008f34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f38:	e777      	b.n	8008e2a <__ieee754_atan2+0x42>
 8008f3a:	bf00      	nop
 8008f3c:	f3af 8000 	nop.w
 8008f40:	33145c07 	.word	0x33145c07
 8008f44:	3ca1a626 	.word	0x3ca1a626
 8008f48:	54442d18 	.word	0x54442d18
 8008f4c:	400921fb 	.word	0x400921fb
 8008f50:	54442d18 	.word	0x54442d18
 8008f54:	3ff921fb 	.word	0x3ff921fb
 8008f58:	54442d18 	.word	0x54442d18
 8008f5c:	3fe921fb 	.word	0x3fe921fb
 8008f60:	080095e0 	.word	0x080095e0
 8008f64:	080095f8 	.word	0x080095f8
 8008f68:	54442d18 	.word	0x54442d18
 8008f6c:	c00921fb 	.word	0xc00921fb
 8008f70:	54442d18 	.word	0x54442d18
 8008f74:	bff921fb 	.word	0xbff921fb
 8008f78:	7ff00000 	.word	0x7ff00000

08008f7c <__ieee754_sqrt>:
 8008f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f80:	ec55 4b10 	vmov	r4, r5, d0
 8008f84:	4e55      	ldr	r6, [pc, #340]	; (80090dc <__ieee754_sqrt+0x160>)
 8008f86:	43ae      	bics	r6, r5
 8008f88:	ee10 0a10 	vmov	r0, s0
 8008f8c:	ee10 3a10 	vmov	r3, s0
 8008f90:	462a      	mov	r2, r5
 8008f92:	4629      	mov	r1, r5
 8008f94:	d110      	bne.n	8008fb8 <__ieee754_sqrt+0x3c>
 8008f96:	ee10 2a10 	vmov	r2, s0
 8008f9a:	462b      	mov	r3, r5
 8008f9c:	f7f7 fb2c 	bl	80005f8 <__aeabi_dmul>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	4620      	mov	r0, r4
 8008fa6:	4629      	mov	r1, r5
 8008fa8:	f7f7 f970 	bl	800028c <__adddf3>
 8008fac:	4604      	mov	r4, r0
 8008fae:	460d      	mov	r5, r1
 8008fb0:	ec45 4b10 	vmov	d0, r4, r5
 8008fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fb8:	2d00      	cmp	r5, #0
 8008fba:	dc10      	bgt.n	8008fde <__ieee754_sqrt+0x62>
 8008fbc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008fc0:	4330      	orrs	r0, r6
 8008fc2:	d0f5      	beq.n	8008fb0 <__ieee754_sqrt+0x34>
 8008fc4:	b15d      	cbz	r5, 8008fde <__ieee754_sqrt+0x62>
 8008fc6:	ee10 2a10 	vmov	r2, s0
 8008fca:	462b      	mov	r3, r5
 8008fcc:	ee10 0a10 	vmov	r0, s0
 8008fd0:	f7f7 f95a 	bl	8000288 <__aeabi_dsub>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	f7f7 fc38 	bl	800084c <__aeabi_ddiv>
 8008fdc:	e7e6      	b.n	8008fac <__ieee754_sqrt+0x30>
 8008fde:	1512      	asrs	r2, r2, #20
 8008fe0:	d074      	beq.n	80090cc <__ieee754_sqrt+0x150>
 8008fe2:	07d4      	lsls	r4, r2, #31
 8008fe4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008fe8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008fec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008ff0:	bf5e      	ittt	pl
 8008ff2:	0fda      	lsrpl	r2, r3, #31
 8008ff4:	005b      	lslpl	r3, r3, #1
 8008ff6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008ffa:	2400      	movs	r4, #0
 8008ffc:	0fda      	lsrs	r2, r3, #31
 8008ffe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009002:	107f      	asrs	r7, r7, #1
 8009004:	005b      	lsls	r3, r3, #1
 8009006:	2516      	movs	r5, #22
 8009008:	4620      	mov	r0, r4
 800900a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800900e:	1886      	adds	r6, r0, r2
 8009010:	428e      	cmp	r6, r1
 8009012:	bfde      	ittt	le
 8009014:	1b89      	suble	r1, r1, r6
 8009016:	18b0      	addle	r0, r6, r2
 8009018:	18a4      	addle	r4, r4, r2
 800901a:	0049      	lsls	r1, r1, #1
 800901c:	3d01      	subs	r5, #1
 800901e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009022:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009026:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800902a:	d1f0      	bne.n	800900e <__ieee754_sqrt+0x92>
 800902c:	462a      	mov	r2, r5
 800902e:	f04f 0e20 	mov.w	lr, #32
 8009032:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009036:	4281      	cmp	r1, r0
 8009038:	eb06 0c05 	add.w	ip, r6, r5
 800903c:	dc02      	bgt.n	8009044 <__ieee754_sqrt+0xc8>
 800903e:	d113      	bne.n	8009068 <__ieee754_sqrt+0xec>
 8009040:	459c      	cmp	ip, r3
 8009042:	d811      	bhi.n	8009068 <__ieee754_sqrt+0xec>
 8009044:	f1bc 0f00 	cmp.w	ip, #0
 8009048:	eb0c 0506 	add.w	r5, ip, r6
 800904c:	da43      	bge.n	80090d6 <__ieee754_sqrt+0x15a>
 800904e:	2d00      	cmp	r5, #0
 8009050:	db41      	blt.n	80090d6 <__ieee754_sqrt+0x15a>
 8009052:	f100 0801 	add.w	r8, r0, #1
 8009056:	1a09      	subs	r1, r1, r0
 8009058:	459c      	cmp	ip, r3
 800905a:	bf88      	it	hi
 800905c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009060:	eba3 030c 	sub.w	r3, r3, ip
 8009064:	4432      	add	r2, r6
 8009066:	4640      	mov	r0, r8
 8009068:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800906c:	f1be 0e01 	subs.w	lr, lr, #1
 8009070:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009074:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009078:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800907c:	d1db      	bne.n	8009036 <__ieee754_sqrt+0xba>
 800907e:	430b      	orrs	r3, r1
 8009080:	d006      	beq.n	8009090 <__ieee754_sqrt+0x114>
 8009082:	1c50      	adds	r0, r2, #1
 8009084:	bf13      	iteet	ne
 8009086:	3201      	addne	r2, #1
 8009088:	3401      	addeq	r4, #1
 800908a:	4672      	moveq	r2, lr
 800908c:	f022 0201 	bicne.w	r2, r2, #1
 8009090:	1063      	asrs	r3, r4, #1
 8009092:	0852      	lsrs	r2, r2, #1
 8009094:	07e1      	lsls	r1, r4, #31
 8009096:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800909a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800909e:	bf48      	it	mi
 80090a0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80090a4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80090a8:	4614      	mov	r4, r2
 80090aa:	e781      	b.n	8008fb0 <__ieee754_sqrt+0x34>
 80090ac:	0ad9      	lsrs	r1, r3, #11
 80090ae:	3815      	subs	r0, #21
 80090b0:	055b      	lsls	r3, r3, #21
 80090b2:	2900      	cmp	r1, #0
 80090b4:	d0fa      	beq.n	80090ac <__ieee754_sqrt+0x130>
 80090b6:	02cd      	lsls	r5, r1, #11
 80090b8:	d50a      	bpl.n	80090d0 <__ieee754_sqrt+0x154>
 80090ba:	f1c2 0420 	rsb	r4, r2, #32
 80090be:	fa23 f404 	lsr.w	r4, r3, r4
 80090c2:	1e55      	subs	r5, r2, #1
 80090c4:	4093      	lsls	r3, r2
 80090c6:	4321      	orrs	r1, r4
 80090c8:	1b42      	subs	r2, r0, r5
 80090ca:	e78a      	b.n	8008fe2 <__ieee754_sqrt+0x66>
 80090cc:	4610      	mov	r0, r2
 80090ce:	e7f0      	b.n	80090b2 <__ieee754_sqrt+0x136>
 80090d0:	0049      	lsls	r1, r1, #1
 80090d2:	3201      	adds	r2, #1
 80090d4:	e7ef      	b.n	80090b6 <__ieee754_sqrt+0x13a>
 80090d6:	4680      	mov	r8, r0
 80090d8:	e7bd      	b.n	8009056 <__ieee754_sqrt+0xda>
 80090da:	bf00      	nop
 80090dc:	7ff00000 	.word	0x7ff00000

080090e0 <_init>:
 80090e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090e2:	bf00      	nop
 80090e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090e6:	bc08      	pop	{r3}
 80090e8:	469e      	mov	lr, r3
 80090ea:	4770      	bx	lr

080090ec <_fini>:
 80090ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ee:	bf00      	nop
 80090f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090f2:	bc08      	pop	{r3}
 80090f4:	469e      	mov	lr, r3
 80090f6:	4770      	bx	lr

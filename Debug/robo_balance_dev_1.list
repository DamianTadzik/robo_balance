
robo_balance_dev_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f38  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  080090c8  080090c8  000190c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095e0  080095e0  00020274  2**0
                  CONTENTS
  4 .ARM          00000000  080095e0  080095e0  00020274  2**0
                  CONTENTS
  5 .preinit_array 00000000  080095e0  080095e0  00020274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095e0  080095e0  000195e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095e4  080095e4  000195e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  080095e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000278  0800985c  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  0800985c  00020470  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 12 .debug_info   000111c0  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028c6  00000000  00000000  00031464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  00033d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  00034e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004161  00000000  00000000  00035d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014102  00000000  00000000  00039ee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9d20  00000000  00000000  0004dfeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00117d0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057f8  00000000  00000000  00117d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000278 	.word	0x20000278
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080090b0 	.word	0x080090b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000027c 	.word	0x2000027c
 80001cc:	080090b0 	.word	0x080090b0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	4b2d      	ldr	r3, [pc, #180]	; (8000c74 <MX_GPIO_Init+0xcc>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	4a2c      	ldr	r2, [pc, #176]	; (8000c74 <MX_GPIO_Init+0xcc>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bca:	4b2a      	ldr	r3, [pc, #168]	; (8000c74 <MX_GPIO_Init+0xcc>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	4b27      	ldr	r3, [pc, #156]	; (8000c74 <MX_GPIO_Init+0xcc>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	4a26      	ldr	r2, [pc, #152]	; (8000c74 <MX_GPIO_Init+0xcc>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be2:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <MX_GPIO_Init+0xcc>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2108      	movs	r1, #8
 8000bf2:	4821      	ldr	r0, [pc, #132]	; (8000c78 <MX_GPIO_Init+0xd0>)
 8000bf4:	f002 f842 	bl	8002c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BTN_OK_Pin|BTN_NO_Pin|BTN_LE_Pin;
 8000bf8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000bfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bfe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c08:	f107 030c 	add.w	r3, r7, #12
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c12:	f001 fec9 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000c16:	2308      	movs	r3, #8
 8000c18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4812      	ldr	r0, [pc, #72]	; (8000c78 <MX_GPIO_Init+0xd0>)
 8000c2e:	f001 febb 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_RI_Pin;
 8000c32:	2320      	movs	r3, #32
 8000c34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c36:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_RI_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	4619      	mov	r1, r3
 8000c46:	480c      	ldr	r0, [pc, #48]	; (8000c78 <MX_GPIO_Init+0xd0>)
 8000c48:	f001 feae 	bl	80029a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 12, 0);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	210c      	movs	r1, #12
 8000c50:	2017      	movs	r0, #23
 8000c52:	f001 fe72 	bl	800293a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c56:	2017      	movs	r0, #23
 8000c58:	f001 fe8b 	bl	8002972 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 12, 0);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	210c      	movs	r1, #12
 8000c60:	2028      	movs	r0, #40	; 0x28
 8000c62:	f001 fe6a 	bl	800293a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c66:	2028      	movs	r0, #40	; 0x28
 8000c68:	f001 fe83 	bl	8002972 <HAL_NVIC_EnableIRQ>

}
 8000c6c:	bf00      	nop
 8000c6e:	3720      	adds	r7, #32
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40021000 	.word	0x40021000
 8000c78:	48000400 	.word	0x48000400

08000c7c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af02      	add	r7, sp, #8
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	f023 030f 	bic.w	r3, r3, #15
 8000c8c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	011b      	lsls	r3, r3, #4
 8000c92:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	f043 030c 	orr.w	r3, r3, #12
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ca0:	f043 0308 	orr.w	r3, r3, #8
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000ca8:	7bbb      	ldrb	r3, [r7, #14]
 8000caa:	f043 030c 	orr.w	r3, r3, #12
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000cb2:	7bbb      	ldrb	r3, [r7, #14]
 8000cb4:	f043 0308 	orr.w	r3, r3, #8
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000cbc:	f107 0208 	add.w	r2, r7, #8
 8000cc0:	2364      	movs	r3, #100	; 0x64
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	214e      	movs	r1, #78	; 0x4e
 8000cc8:	4803      	ldr	r0, [pc, #12]	; (8000cd8 <lcd_send_cmd+0x5c>)
 8000cca:	f002 f8b1 	bl	8002e30 <HAL_I2C_Master_Transmit>
}
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000294 	.word	0x20000294

08000cdc <lcd_send_data>:

void lcd_send_data (char data)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af02      	add	r7, sp, #8
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f023 030f 	bic.w	r3, r3, #15
 8000cec:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	011b      	lsls	r3, r3, #4
 8000cf2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
 8000cf6:	f043 030d 	orr.w	r3, r3, #13
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	f043 0309 	orr.w	r3, r3, #9
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000d08:	7bbb      	ldrb	r3, [r7, #14]
 8000d0a:	f043 030d 	orr.w	r3, r3, #13
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000d12:	7bbb      	ldrb	r3, [r7, #14]
 8000d14:	f043 0309 	orr.w	r3, r3, #9
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000d1c:	f107 0208 	add.w	r2, r7, #8
 8000d20:	2364      	movs	r3, #100	; 0x64
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	2304      	movs	r3, #4
 8000d26:	214e      	movs	r1, #78	; 0x4e
 8000d28:	4803      	ldr	r0, [pc, #12]	; (8000d38 <lcd_send_data+0x5c>)
 8000d2a:	f002 f881 	bl	8002e30 <HAL_I2C_Master_Transmit>
}
 8000d2e:	bf00      	nop
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000294 	.word	0x20000294

08000d3c <lcd_clear>:

void lcd_clear (void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000d42:	2080      	movs	r0, #128	; 0x80
 8000d44:	f7ff ff9a 	bl	8000c7c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000d48:	2300      	movs	r3, #0
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	e005      	b.n	8000d5a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000d4e:	2020      	movs	r0, #32
 8000d50:	f7ff ffc4 	bl	8000cdc <lcd_send_data>
	for (int i=0; i<70; i++)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3301      	adds	r3, #1
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b45      	cmp	r3, #69	; 0x45
 8000d5e:	ddf6      	ble.n	8000d4e <lcd_clear+0x12>
	}
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
 8000d72:	6039      	str	r1, [r7, #0]
    switch (row)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d003      	beq.n	8000d82 <lcd_put_cur+0x18>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d005      	beq.n	8000d8c <lcd_put_cur+0x22>
 8000d80:	e009      	b.n	8000d96 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d88:	603b      	str	r3, [r7, #0]
            break;
 8000d8a:	e004      	b.n	8000d96 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d92:	603b      	str	r3, [r7, #0]
            break;
 8000d94:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff ff6e 	bl	8000c7c <lcd_send_cmd>
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <lcd_init>:


void lcd_init (void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000dac:	2032      	movs	r0, #50	; 0x32
 8000dae:	f001 fcc5 	bl	800273c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000db2:	2030      	movs	r0, #48	; 0x30
 8000db4:	f7ff ff62 	bl	8000c7c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000db8:	2005      	movs	r0, #5
 8000dba:	f001 fcbf 	bl	800273c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000dbe:	2030      	movs	r0, #48	; 0x30
 8000dc0:	f7ff ff5c 	bl	8000c7c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f001 fcb9 	bl	800273c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000dca:	2030      	movs	r0, #48	; 0x30
 8000dcc:	f7ff ff56 	bl	8000c7c <lcd_send_cmd>
	HAL_Delay(10);
 8000dd0:	200a      	movs	r0, #10
 8000dd2:	f001 fcb3 	bl	800273c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000dd6:	2020      	movs	r0, #32
 8000dd8:	f7ff ff50 	bl	8000c7c <lcd_send_cmd>
	HAL_Delay(10);
 8000ddc:	200a      	movs	r0, #10
 8000dde:	f001 fcad 	bl	800273c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000de2:	2028      	movs	r0, #40	; 0x28
 8000de4:	f7ff ff4a 	bl	8000c7c <lcd_send_cmd>
	HAL_Delay(1);
 8000de8:	2001      	movs	r0, #1
 8000dea:	f001 fca7 	bl	800273c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000dee:	2008      	movs	r0, #8
 8000df0:	f7ff ff44 	bl	8000c7c <lcd_send_cmd>
	HAL_Delay(1);
 8000df4:	2001      	movs	r0, #1
 8000df6:	f001 fca1 	bl	800273c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f7ff ff3e 	bl	8000c7c <lcd_send_cmd>
	HAL_Delay(1);
 8000e00:	2001      	movs	r0, #1
 8000e02:	f001 fc9b 	bl	800273c <HAL_Delay>
	HAL_Delay(1);
 8000e06:	2001      	movs	r0, #1
 8000e08:	f001 fc98 	bl	800273c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000e0c:	2006      	movs	r0, #6
 8000e0e:	f7ff ff35 	bl	8000c7c <lcd_send_cmd>
	HAL_Delay(1);
 8000e12:	2001      	movs	r0, #1
 8000e14:	f001 fc92 	bl	800273c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000e18:	200c      	movs	r0, #12
 8000e1a:	f7ff ff2f 	bl	8000c7c <lcd_send_cmd>
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000e2a:	e006      	b.n	8000e3a <lcd_send_string+0x18>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	1c5a      	adds	r2, r3, #1
 8000e30:	607a      	str	r2, [r7, #4]
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff51 	bl	8000cdc <lcd_send_data>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1f4      	bne.n	8000e2c <lcd_send_string+0xa>
}
 8000e42:	bf00      	nop
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e50:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e52:	4a1c      	ldr	r2, [pc, #112]	; (8000ec4 <MX_I2C1_Init+0x78>)
 8000e54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000e56:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e58:	4a1b      	ldr	r2, [pc, #108]	; (8000ec8 <MX_I2C1_Init+0x7c>)
 8000e5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e5c:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e80:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e86:	480e      	ldr	r0, [pc, #56]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e88:	f001 ff42 	bl	8002d10 <HAL_I2C_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e92:	f000 fcd5 	bl	8001840 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e96:	2100      	movs	r1, #0
 8000e98:	4809      	ldr	r0, [pc, #36]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000e9a:	f002 fd91 	bl	80039c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ea4:	f000 fccc 	bl	8001840 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_I2C1_Init+0x74>)
 8000eac:	f002 fdd3 	bl	8003a56 <HAL_I2CEx_ConfigDigitalFilter>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000eb6:	f000 fcc3 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000294 	.word	0x20000294
 8000ec4:	40005400 	.word	0x40005400
 8000ec8:	10707dbc 	.word	0x10707dbc

08000ecc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b09e      	sub	sp, #120	; 0x78
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	2254      	movs	r2, #84	; 0x54
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f004 fea1 	bl	8005c34 <memset>
  if(i2cHandle->Instance==I2C1)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a1e      	ldr	r2, [pc, #120]	; (8000f70 <HAL_I2C_MspInit+0xa4>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d135      	bne.n	8000f68 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000efc:	2340      	movs	r3, #64	; 0x40
 8000efe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f003 fc55 	bl	80047b8 <HAL_RCCEx_PeriphCLKConfig>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f14:	f000 fc94 	bl	8001840 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f18:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <HAL_I2C_MspInit+0xa8>)
 8000f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1c:	4a15      	ldr	r2, [pc, #84]	; (8000f74 <HAL_I2C_MspInit+0xa8>)
 8000f1e:	f043 0302 	orr.w	r3, r3, #2
 8000f22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f24:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <HAL_I2C_MspInit+0xa8>)
 8000f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f30:	23c0      	movs	r3, #192	; 0xc0
 8000f32:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f34:	2312      	movs	r3, #18
 8000f36:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f40:	2304      	movs	r3, #4
 8000f42:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f44:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480b      	ldr	r0, [pc, #44]	; (8000f78 <HAL_I2C_MspInit+0xac>)
 8000f4c:	f001 fd2c 	bl	80029a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <HAL_I2C_MspInit+0xa8>)
 8000f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f54:	4a07      	ldr	r2, [pc, #28]	; (8000f74 <HAL_I2C_MspInit+0xa8>)
 8000f56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f5a:	6593      	str	r3, [r2, #88]	; 0x58
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <HAL_I2C_MspInit+0xa8>)
 8000f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f68:	bf00      	nop
 8000f6a:	3778      	adds	r7, #120	; 0x78
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40005400 	.word	0x40005400
 8000f74:	40021000 	.word	0x40021000
 8000f78:	48000400 	.word	0x48000400

08000f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f80:	f001 fb67 	bl	8002652 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f84:	f000 f854 	bl	8001030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f88:	f7ff fe0e 	bl	8000ba8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f8c:	f7ff ff5e 	bl	8000e4c <MX_I2C1_Init>
  MX_TIM1_Init();
 8000f90:	f001 f930 	bl	80021f4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f94:	f001 f988 	bl	80022a8 <MX_TIM2_Init>
  MX_TIM15_Init();
 8000f98:	f001 f9da 	bl	8002350 <MX_TIM15_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_init();
 8000f9c:	f7ff ff04 	bl	8000da8 <lcd_init>
  lcd_put_cur(0, 0);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f7ff fee1 	bl	8000d6a <lcd_put_cur>
  lcd_send_string("Hello, world!");
 8000fa8:	481e      	ldr	r0, [pc, #120]	; (8001024 <main+0xa8>)
 8000faa:	f7ff ff3a 	bl	8000e22 <lcd_send_string>

  MPU6050_Init(&hi2c1);
 8000fae:	481e      	ldr	r0, [pc, #120]	; (8001028 <main+0xac>)
 8000fb0:	f000 fc4b 	bl	800184a <MPU6050_Init>
  HAL_Delay(1000);
 8000fb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fb8:	f001 fbc0 	bl	800273c <HAL_Delay>

  while (1)
  {
	  switch (current_state) {
 8000fbc:	4b1b      	ldr	r3, [pc, #108]	; (800102c <main+0xb0>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	2b07      	cmp	r3, #7
 8000fc4:	d82a      	bhi.n	800101c <main+0xa0>
 8000fc6:	a201      	add	r2, pc, #4	; (adr r2, 8000fcc <main+0x50>)
 8000fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fcc:	08001017 	.word	0x08001017
 8000fd0:	08000fed 	.word	0x08000fed
 8000fd4:	08000ff3 	.word	0x08000ff3
 8000fd8:	08000ff9 	.word	0x08000ff9
 8000fdc:	08000fff 	.word	0x08000fff
 8000fe0:	08001005 	.word	0x08001005
 8000fe4:	0800100b 	.word	0x0800100b
 8000fe8:	08001011 	.word	0x08001011
		case ENCODER_DISPLAY_state:
			stateENCODER();
 8000fec:	f000 f93e 	bl	800126c <stateENCODER>
			break;
 8000ff0:	e017      	b.n	8001022 <main+0xa6>
		case IMU_DISPLAY_state:
			stateIMU();
 8000ff2:	f000 f9eb 	bl	80013cc <stateIMU>
			break;
 8000ff6:	e014      	b.n	8001022 <main+0xa6>
		case HOME_state:
			stateHOME();
 8000ff8:	f000 fa64 	bl	80014c4 <stateHOME>
			break;
 8000ffc:	e011      	b.n	8001022 <main+0xa6>
		case EEPROM_RW_state:
			stateEEPROM();
 8000ffe:	f000 fac1 	bl	8001584 <stateEEPROM>
			break;
 8001002:	e00e      	b.n	8001022 <main+0xa6>
		case KP_state:
			stateKP();
 8001004:	f000 fb2a 	bl	800165c <stateKP>
			break;
 8001008:	e00b      	b.n	8001022 <main+0xa6>
		case KI_state:
			stateKI();
 800100a:	f000 fb7b 	bl	8001704 <stateKI>
			break;
 800100e:	e008      	b.n	8001022 <main+0xa6>
		case KD_state:
			stateKD();
 8001010:	f000 fbcc 	bl	80017ac <stateKD>
			break;
 8001014:	e005      	b.n	8001022 <main+0xa6>
		case BALANCE_state:
			stateBALANCE();
 8001016:	f000 f8dd 	bl	80011d4 <stateBALANCE>
			break;
 800101a:	e002      	b.n	8001022 <main+0xa6>
		default:
			stateNULL();
 800101c:	f000 f886 	bl	800112c <stateNULL>
			break;
 8001020:	bf00      	nop
	  switch (current_state) {
 8001022:	e7cb      	b.n	8000fbc <main+0x40>
 8001024:	080090c8 	.word	0x080090c8
 8001028:	20000294 	.word	0x20000294
 800102c:	20000000 	.word	0x20000000

08001030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b096      	sub	sp, #88	; 0x58
 8001034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	2244      	movs	r2, #68	; 0x44
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f004 fdf8 	bl	8005c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001044:	463b      	mov	r3, r7
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001052:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001056:	f002 fd59 	bl	8003b0c <HAL_PWREx_ControlVoltageScaling>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001060:	f000 fbee 	bl	8001840 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001064:	2302      	movs	r3, #2
 8001066:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001068:	f44f 7380 	mov.w	r3, #256	; 0x100
 800106c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800106e:	2310      	movs	r3, #16
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001072:	2302      	movs	r3, #2
 8001074:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001076:	2302      	movs	r3, #2
 8001078:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800107a:	2301      	movs	r3, #1
 800107c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800107e:	2310      	movs	r3, #16
 8001080:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001082:	2307      	movs	r3, #7
 8001084:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001086:	2302      	movs	r3, #2
 8001088:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800108a:	2304      	movs	r3, #4
 800108c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4618      	mov	r0, r3
 8001094:	f002 fd90 	bl	8003bb8 <HAL_RCC_OscConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800109e:	f000 fbcf 	bl	8001840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a2:	230f      	movs	r3, #15
 80010a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a6:	2303      	movs	r3, #3
 80010a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010b6:	463b      	mov	r3, r7
 80010b8:	2103      	movs	r1, #3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f003 f990 	bl	80043e0 <HAL_RCC_ClockConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010c6:	f000 fbbb 	bl	8001840 <Error_Handler>
  }
}
 80010ca:	bf00      	nop
 80010cc:	3758      	adds	r7, #88	; 0x58
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BTN_OK_Pin)
 80010de:	88fb      	ldrh	r3, [r7, #6]
 80010e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010e4:	d102      	bne.n	80010ec <HAL_GPIO_EXTI_Callback+0x18>
	{
		BTN.ok = BTN_pressed;
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <HAL_GPIO_EXTI_Callback+0x54>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == BTN_NO_Pin)
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010f2:	d102      	bne.n	80010fa <HAL_GPIO_EXTI_Callback+0x26>
	{
		BTN.no = BTN_pressed;
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <HAL_GPIO_EXTI_Callback+0x54>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	705a      	strb	r2, [r3, #1]
	}
	if (GPIO_Pin == BTN_LE_Pin)
 80010fa:	88fb      	ldrh	r3, [r7, #6]
 80010fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001100:	d105      	bne.n	800110e <HAL_GPIO_EXTI_Callback+0x3a>
	{
		BTN.left = BTN_pressed;
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <HAL_GPIO_EXTI_Callback+0x54>)
 8001104:	2201      	movs	r2, #1
 8001106:	709a      	strb	r2, [r3, #2]
		HAL_Delay(2); // XDDDD INTERRUPTS ALE CALLED TWICE WITHOUT THIS DUDE RIGHT HERE XD
 8001108:	2002      	movs	r0, #2
 800110a:	f001 fb17 	bl	800273c <HAL_Delay>
	}
	if (GPIO_Pin == BTN_RI_Pin)
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	2b20      	cmp	r3, #32
 8001112:	d105      	bne.n	8001120 <HAL_GPIO_EXTI_Callback+0x4c>
	{
		BTN.right = BTN_pressed;
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <HAL_GPIO_EXTI_Callback+0x54>)
 8001116:	2201      	movs	r2, #1
 8001118:	70da      	strb	r2, [r3, #3]
		HAL_Delay(2); // XDDDD INTERRUPTS ALE CALLED TWICE WITHOUT THIS DUDE RIGHT HERE XD
 800111a:	2002      	movs	r0, #2
 800111c:	f001 fb0e 	bl	800273c <HAL_Delay>
	}
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200002ec 	.word	0x200002ec

0800112c <stateNULL>:
void stateNULL(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 8001130:	4b22      	ldr	r3, [pc, #136]	; (80011bc <stateNULL+0x90>)
 8001132:	781a      	ldrb	r2, [r3, #0]
 8001134:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <stateNULL+0x94>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	429a      	cmp	r2, r3
 800113a:	d013      	beq.n	8001164 <stateNULL+0x38>
	{
		previous_state = current_state;
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <stateNULL+0x90>)
 800113e:	781a      	ldrb	r2, [r3, #0]
 8001140:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <stateNULL+0x94>)
 8001142:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001144:	f7ff fdfa 	bl	8000d3c <lcd_clear>
		lcd_put_cur(0, 0);
 8001148:	2100      	movs	r1, #0
 800114a:	2000      	movs	r0, #0
 800114c:	f7ff fe0d 	bl	8000d6a <lcd_put_cur>
		lcd_send_string("oops NULL state?");
 8001150:	481c      	ldr	r0, [pc, #112]	; (80011c4 <stateNULL+0x98>)
 8001152:	f7ff fe66 	bl	8000e22 <lcd_send_string>
		lcd_put_cur(1, 3);
 8001156:	2103      	movs	r1, #3
 8001158:	2001      	movs	r0, #1
 800115a:	f7ff fe06 	bl	8000d6a <lcd_put_cur>
		lcd_send_string("press ok");
 800115e:	481a      	ldr	r0, [pc, #104]	; (80011c8 <stateNULL+0x9c>)
 8001160:	f7ff fe5f 	bl	8000e22 <lcd_send_string>
	}
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001164:	2108      	movs	r1, #8
 8001166:	4819      	ldr	r0, [pc, #100]	; (80011cc <stateNULL+0xa0>)
 8001168:	f001 fda0 	bl	8002cac <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 800116c:	20c8      	movs	r0, #200	; 0xc8
 800116e:	f001 fae5 	bl	800273c <HAL_Delay>
	if (BTN.ok == BTN_pressed)
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <stateNULL+0xa4>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b01      	cmp	r3, #1
 800117a:	d105      	bne.n	8001188 <stateNULL+0x5c>
	{
		BTN.ok = BTN_not_pressed;
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <stateNULL+0xa4>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
		current_state = HOME_state;
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <stateNULL+0x90>)
 8001184:	2204      	movs	r2, #4
 8001186:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.no == BTN_pressed) BTN.no = BTN_not_pressed;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <stateNULL+0xa4>)
 800118a:	785b      	ldrb	r3, [r3, #1]
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b01      	cmp	r3, #1
 8001190:	d102      	bne.n	8001198 <stateNULL+0x6c>
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <stateNULL+0xa4>)
 8001194:	2200      	movs	r2, #0
 8001196:	705a      	strb	r2, [r3, #1]
	if (BTN.left == BTN_pressed) BTN.left = BTN_not_pressed;
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <stateNULL+0xa4>)
 800119a:	789b      	ldrb	r3, [r3, #2]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d102      	bne.n	80011a8 <stateNULL+0x7c>
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <stateNULL+0xa4>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	709a      	strb	r2, [r3, #2]
	if (BTN.right == BTN_pressed) BTN.right = BTN_not_pressed;
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <stateNULL+0xa4>)
 80011aa:	78db      	ldrb	r3, [r3, #3]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d102      	bne.n	80011b8 <stateNULL+0x8c>
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <stateNULL+0xa4>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	70da      	strb	r2, [r3, #3]
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000000 	.word	0x20000000
 80011c0:	200002e8 	.word	0x200002e8
 80011c4:	080090d8 	.word	0x080090d8
 80011c8:	080090ec 	.word	0x080090ec
 80011cc:	48000400 	.word	0x48000400
 80011d0:	200002ec 	.word	0x200002ec

080011d4 <stateBALANCE>:
void stateBALANCE(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 80011d8:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <stateBALANCE+0x84>)
 80011da:	781a      	ldrb	r2, [r3, #0]
 80011dc:	4b1f      	ldr	r3, [pc, #124]	; (800125c <stateBALANCE+0x88>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d013      	beq.n	800120c <stateBALANCE+0x38>
	{
		previous_state = current_state;
 80011e4:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <stateBALANCE+0x84>)
 80011e6:	781a      	ldrb	r2, [r3, #0]
 80011e8:	4b1c      	ldr	r3, [pc, #112]	; (800125c <stateBALANCE+0x88>)
 80011ea:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 80011ec:	f7ff fda6 	bl	8000d3c <lcd_clear>
		lcd_put_cur(0, 0);
 80011f0:	2100      	movs	r1, #0
 80011f2:	2000      	movs	r0, #0
 80011f4:	f7ff fdb9 	bl	8000d6a <lcd_put_cur>
		lcd_send_string("Balancing");
 80011f8:	4819      	ldr	r0, [pc, #100]	; (8001260 <stateBALANCE+0x8c>)
 80011fa:	f7ff fe12 	bl	8000e22 <lcd_send_string>
		lcd_put_cur(1, 0);
 80011fe:	2100      	movs	r1, #0
 8001200:	2001      	movs	r0, #1
 8001202:	f7ff fdb2 	bl	8000d6a <lcd_put_cur>
		lcd_send_string("press no to exit");
 8001206:	4817      	ldr	r0, [pc, #92]	; (8001264 <stateBALANCE+0x90>)
 8001208:	f7ff fe0b 	bl	8000e22 <lcd_send_string>
	}
//todo end this XD
	if (BTN.ok == BTN_pressed) BTN.ok = BTN_not_pressed;
 800120c:	4b16      	ldr	r3, [pc, #88]	; (8001268 <stateBALANCE+0x94>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b01      	cmp	r3, #1
 8001214:	d102      	bne.n	800121c <stateBALANCE+0x48>
 8001216:	4b14      	ldr	r3, [pc, #80]	; (8001268 <stateBALANCE+0x94>)
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
	if (BTN.no == BTN_pressed)
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <stateBALANCE+0x94>)
 800121e:	785b      	ldrb	r3, [r3, #1]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b01      	cmp	r3, #1
 8001224:	d105      	bne.n	8001232 <stateBALANCE+0x5e>
	{
		BTN.no = BTN_not_pressed;
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <stateBALANCE+0x94>)
 8001228:	2200      	movs	r2, #0
 800122a:	705a      	strb	r2, [r3, #1]
		current_state = HOME_state;
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <stateBALANCE+0x84>)
 800122e:	2204      	movs	r2, #4
 8001230:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.left == BTN_pressed) BTN.left = BTN_not_pressed;
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <stateBALANCE+0x94>)
 8001234:	789b      	ldrb	r3, [r3, #2]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b01      	cmp	r3, #1
 800123a:	d102      	bne.n	8001242 <stateBALANCE+0x6e>
 800123c:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <stateBALANCE+0x94>)
 800123e:	2200      	movs	r2, #0
 8001240:	709a      	strb	r2, [r3, #2]
	if (BTN.right == BTN_pressed) BTN.right = BTN_not_pressed;
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <stateBALANCE+0x94>)
 8001244:	78db      	ldrb	r3, [r3, #3]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b01      	cmp	r3, #1
 800124a:	d102      	bne.n	8001252 <stateBALANCE+0x7e>
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <stateBALANCE+0x94>)
 800124e:	2200      	movs	r2, #0
 8001250:	70da      	strb	r2, [r3, #3]
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000000 	.word	0x20000000
 800125c:	200002e8 	.word	0x200002e8
 8001260:	080090f8 	.word	0x080090f8
 8001264:	08009104 	.word	0x08009104
 8001268:	200002ec 	.word	0x200002ec

0800126c <stateENCODER>:
void stateENCODER(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 8001270:	4b49      	ldr	r3, [pc, #292]	; (8001398 <stateENCODER+0x12c>)
 8001272:	781a      	ldrb	r2, [r3, #0]
 8001274:	4b49      	ldr	r3, [pc, #292]	; (800139c <stateENCODER+0x130>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	429a      	cmp	r2, r3
 800127a:	d024      	beq.n	80012c6 <stateENCODER+0x5a>
	{
		previous_state = current_state;
 800127c:	4b46      	ldr	r3, [pc, #280]	; (8001398 <stateENCODER+0x12c>)
 800127e:	781a      	ldrb	r2, [r3, #0]
 8001280:	4b46      	ldr	r3, [pc, #280]	; (800139c <stateENCODER+0x130>)
 8001282:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001284:	f7ff fd5a 	bl	8000d3c <lcd_clear>
		lcd_put_cur(0, 0);
 8001288:	2100      	movs	r1, #0
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff fd6d 	bl	8000d6a <lcd_put_cur>
		lcd_send_string("ENCODER");
 8001290:	4843      	ldr	r0, [pc, #268]	; (80013a0 <stateENCODER+0x134>)
 8001292:	f7ff fdc6 	bl	8000e22 <lcd_send_string>
		lcd_put_cur(1, 15);
 8001296:	210f      	movs	r1, #15
 8001298:	2001      	movs	r0, #1
 800129a:	f7ff fd66 	bl	8000d6a <lcd_put_cur>
		lcd_send_data(LCD_RIGHT_ARROW);
 800129e:	207e      	movs	r0, #126	; 0x7e
 80012a0:	f7ff fd1c 	bl	8000cdc <lcd_send_data>
		HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);	// encoder timer start
 80012a4:	213c      	movs	r1, #60	; 0x3c
 80012a6:	483f      	ldr	r0, [pc, #252]	; (80013a4 <stateENCODER+0x138>)
 80012a8:	f003 fe6b 	bl	8004f82 <HAL_TIM_Encoder_Start>
		HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);	// encoder timer start
 80012ac:	213c      	movs	r1, #60	; 0x3c
 80012ae:	483e      	ldr	r0, [pc, #248]	; (80013a8 <stateENCODER+0x13c>)
 80012b0:	f003 fe67 	bl	8004f82 <HAL_TIM_Encoder_Start>
		TIM1->CNT = 32767;	// wartosc rejestru na srodek ustawiona
 80012b4:	4b3d      	ldr	r3, [pc, #244]	; (80013ac <stateENCODER+0x140>)
 80012b6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80012ba:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->CNT = 32767;
 80012bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012c0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80012c4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	// todo cyclic interrupt needed 10ms like
	encd_left = TIM2->CNT;
 80012c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	4b38      	ldr	r3, [pc, #224]	; (80013b0 <stateENCODER+0x144>)
 80012d0:	801a      	strh	r2, [r3, #0]
	encd_right = TIM1->CNT;
 80012d2:	4b36      	ldr	r3, [pc, #216]	; (80013ac <stateENCODER+0x140>)
 80012d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	4b36      	ldr	r3, [pc, #216]	; (80013b4 <stateENCODER+0x148>)
 80012da:	801a      	strh	r2, [r3, #0]

	//encd_right = TIM2->CNT;
	if (encd_left != old_encd_left || encd_right != old_encd_right)
 80012dc:	4b34      	ldr	r3, [pc, #208]	; (80013b0 <stateENCODER+0x144>)
 80012de:	881a      	ldrh	r2, [r3, #0]
 80012e0:	4b35      	ldr	r3, [pc, #212]	; (80013b8 <stateENCODER+0x14c>)
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d105      	bne.n	80012f4 <stateENCODER+0x88>
 80012e8:	4b32      	ldr	r3, [pc, #200]	; (80013b4 <stateENCODER+0x148>)
 80012ea:	881a      	ldrh	r2, [r3, #0]
 80012ec:	4b33      	ldr	r3, [pc, #204]	; (80013bc <stateENCODER+0x150>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d023      	beq.n	800133c <stateENCODER+0xd0>
	{
		old_encd_left = encd_left;
 80012f4:	4b2e      	ldr	r3, [pc, #184]	; (80013b0 <stateENCODER+0x144>)
 80012f6:	881a      	ldrh	r2, [r3, #0]
 80012f8:	4b2f      	ldr	r3, [pc, #188]	; (80013b8 <stateENCODER+0x14c>)
 80012fa:	801a      	strh	r2, [r3, #0]
		old_encd_right = encd_right;
 80012fc:	4b2d      	ldr	r3, [pc, #180]	; (80013b4 <stateENCODER+0x148>)
 80012fe:	881a      	ldrh	r2, [r3, #0]
 8001300:	4b2e      	ldr	r3, [pc, #184]	; (80013bc <stateENCODER+0x150>)
 8001302:	801a      	strh	r2, [r3, #0]
		lcd_put_cur(1, 1);
 8001304:	2101      	movs	r1, #1
 8001306:	2001      	movs	r0, #1
 8001308:	f7ff fd2f 	bl	8000d6a <lcd_put_cur>
		sprintf(MSG, "%+06d", encd_left);
 800130c:	4b28      	ldr	r3, [pc, #160]	; (80013b0 <stateENCODER+0x144>)
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	492b      	ldr	r1, [pc, #172]	; (80013c0 <stateENCODER+0x154>)
 8001314:	482b      	ldr	r0, [pc, #172]	; (80013c4 <stateENCODER+0x158>)
 8001316:	f005 f8ff 	bl	8006518 <siprintf>
		lcd_send_string(MSG);
 800131a:	482a      	ldr	r0, [pc, #168]	; (80013c4 <stateENCODER+0x158>)
 800131c:	f7ff fd81 	bl	8000e22 <lcd_send_string>

		lcd_put_cur(1, 8);
 8001320:	2108      	movs	r1, #8
 8001322:	2001      	movs	r0, #1
 8001324:	f7ff fd21 	bl	8000d6a <lcd_put_cur>
		sprintf(MSG, "%+06d", encd_right);
 8001328:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <stateENCODER+0x148>)
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	4924      	ldr	r1, [pc, #144]	; (80013c0 <stateENCODER+0x154>)
 8001330:	4824      	ldr	r0, [pc, #144]	; (80013c4 <stateENCODER+0x158>)
 8001332:	f005 f8f1 	bl	8006518 <siprintf>
		lcd_send_string(MSG);
 8001336:	4823      	ldr	r0, [pc, #140]	; (80013c4 <stateENCODER+0x158>)
 8001338:	f7ff fd73 	bl	8000e22 <lcd_send_string>
	}

	if (BTN.ok == BTN_pressed)
 800133c:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <stateENCODER+0x15c>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b01      	cmp	r3, #1
 8001344:	d102      	bne.n	800134c <stateENCODER+0xe0>
	{
		BTN.ok = BTN_not_pressed;
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <stateENCODER+0x15c>)
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.no == BTN_pressed)
 800134c:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <stateENCODER+0x15c>)
 800134e:	785b      	ldrb	r3, [r3, #1]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b01      	cmp	r3, #1
 8001354:	d102      	bne.n	800135c <stateENCODER+0xf0>
	{
		BTN.no = BTN_not_pressed;
 8001356:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <stateENCODER+0x15c>)
 8001358:	2200      	movs	r2, #0
 800135a:	705a      	strb	r2, [r3, #1]
	}
	if (BTN.left == BTN_pressed)
 800135c:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <stateENCODER+0x15c>)
 800135e:	789b      	ldrb	r3, [r3, #2]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b01      	cmp	r3, #1
 8001364:	d102      	bne.n	800136c <stateENCODER+0x100>
	{
		BTN.left = BTN_not_pressed;
 8001366:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <stateENCODER+0x15c>)
 8001368:	2200      	movs	r2, #0
 800136a:	709a      	strb	r2, [r3, #2]
	}
	if (BTN.right == BTN_pressed)
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <stateENCODER+0x15c>)
 800136e:	78db      	ldrb	r3, [r3, #3]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b01      	cmp	r3, #1
 8001374:	d10d      	bne.n	8001392 <stateENCODER+0x126>
	{
		BTN.right = BTN_not_pressed;
 8001376:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <stateENCODER+0x15c>)
 8001378:	2200      	movs	r2, #0
 800137a:	70da      	strb	r2, [r3, #3]
		HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 800137c:	213c      	movs	r1, #60	; 0x3c
 800137e:	4809      	ldr	r0, [pc, #36]	; (80013a4 <stateENCODER+0x138>)
 8001380:	f003 fe8d 	bl	800509e <HAL_TIM_Encoder_Stop>
		HAL_TIM_Encoder_Stop(&htim2, TIM_CHANNEL_ALL);
 8001384:	213c      	movs	r1, #60	; 0x3c
 8001386:	4808      	ldr	r0, [pc, #32]	; (80013a8 <stateENCODER+0x13c>)
 8001388:	f003 fe89 	bl	800509e <HAL_TIM_Encoder_Stop>
		current_state = IMU_DISPLAY_state;
 800138c:	4b02      	ldr	r3, [pc, #8]	; (8001398 <stateENCODER+0x12c>)
 800138e:	2203      	movs	r2, #3
 8001390:	701a      	strb	r2, [r3, #0]
	}
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000000 	.word	0x20000000
 800139c:	200002e8 	.word	0x200002e8
 80013a0:	08009118 	.word	0x08009118
 80013a4:	20000378 	.word	0x20000378
 80013a8:	200003c4 	.word	0x200003c4
 80013ac:	40012c00 	.word	0x40012c00
 80013b0:	20000362 	.word	0x20000362
 80013b4:	20000366 	.word	0x20000366
 80013b8:	20000360 	.word	0x20000360
 80013bc:	20000364 	.word	0x20000364
 80013c0:	08009120 	.word	0x08009120
 80013c4:	200002f0 	.word	0x200002f0
 80013c8:	200002ec 	.word	0x200002ec

080013cc <stateIMU>:
void stateIMU(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 80013d2:	4b34      	ldr	r3, [pc, #208]	; (80014a4 <stateIMU+0xd8>)
 80013d4:	781a      	ldrb	r2, [r3, #0]
 80013d6:	4b34      	ldr	r3, [pc, #208]	; (80014a8 <stateIMU+0xdc>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d021      	beq.n	8001422 <stateIMU+0x56>
	{
		previous_state = current_state;
 80013de:	4b31      	ldr	r3, [pc, #196]	; (80014a4 <stateIMU+0xd8>)
 80013e0:	781a      	ldrb	r2, [r3, #0]
 80013e2:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <stateIMU+0xdc>)
 80013e4:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 80013e6:	f7ff fca9 	bl	8000d3c <lcd_clear>
		lcd_put_cur(0, 0);
 80013ea:	2100      	movs	r1, #0
 80013ec:	2000      	movs	r0, #0
 80013ee:	f7ff fcbc 	bl	8000d6a <lcd_put_cur>
		lcd_send_string("IMU");
 80013f2:	482e      	ldr	r0, [pc, #184]	; (80014ac <stateIMU+0xe0>)
 80013f4:	f7ff fd15 	bl	8000e22 <lcd_send_string>
		lcd_put_cur(1, 0);
 80013f8:	2100      	movs	r1, #0
 80013fa:	2001      	movs	r0, #1
 80013fc:	f7ff fcb5 	bl	8000d6a <lcd_put_cur>
		lcd_send_data(LCD_LEFT_ARROW);
 8001400:	207f      	movs	r0, #127	; 0x7f
 8001402:	f7ff fc6b 	bl	8000cdc <lcd_send_data>
		lcd_put_cur(1, 15);
 8001406:	210f      	movs	r1, #15
 8001408:	2001      	movs	r0, #1
 800140a:	f7ff fcae 	bl	8000d6a <lcd_put_cur>
		lcd_send_data(LCD_RIGHT_ARROW);
 800140e:	207e      	movs	r0, #126	; 0x7e
 8001410:	f7ff fc64 	bl	8000cdc <lcd_send_data>
		lcd_put_cur(0, 10);
 8001414:	210a      	movs	r1, #10
 8001416:	2000      	movs	r0, #0
 8001418:	f7ff fca7 	bl	8000d6a <lcd_put_cur>
		lcd_send_data(LCD_DEGREE_SYMBOL);
 800141c:	20df      	movs	r0, #223	; 0xdf
 800141e:	f7ff fc5d 	bl	8000cdc <lcd_send_data>
	}

	// todo cyclic interrupt needed 10ms like
	// MPU READ ANGLE
	MPU6050_Read_All(&hi2c1, &MPU6050);
 8001422:	4923      	ldr	r1, [pc, #140]	; (80014b0 <stateIMU+0xe4>)
 8001424:	4823      	ldr	r0, [pc, #140]	; (80014b4 <stateIMU+0xe8>)
 8001426:	f000 fa67 	bl	80018f8 <MPU6050_Read_All>
	double angle = MPU6050.KalmanAngleX;
 800142a:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <stateIMU+0xe4>)
 800142c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001430:	e9c7 2300 	strd	r2, r3, [r7]
	// MPU DISPLAY ANGLE
	lcd_put_cur(0, 4);
 8001434:	2104      	movs	r1, #4
 8001436:	2000      	movs	r0, #0
 8001438:	f7ff fc97 	bl	8000d6a <lcd_put_cur>
	sprintf(MSG, "%+06.2f", angle);
 800143c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001440:	491d      	ldr	r1, [pc, #116]	; (80014b8 <stateIMU+0xec>)
 8001442:	481e      	ldr	r0, [pc, #120]	; (80014bc <stateIMU+0xf0>)
 8001444:	f005 f868 	bl	8006518 <siprintf>
	lcd_send_string(MSG);
 8001448:	481c      	ldr	r0, [pc, #112]	; (80014bc <stateIMU+0xf0>)
 800144a:	f7ff fcea 	bl	8000e22 <lcd_send_string>


	if (BTN.ok == BTN_pressed)
 800144e:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <stateIMU+0xf4>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b01      	cmp	r3, #1
 8001456:	d102      	bne.n	800145e <stateIMU+0x92>
	{
		BTN.ok = BTN_not_pressed;
 8001458:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <stateIMU+0xf4>)
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.no == BTN_pressed)
 800145e:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <stateIMU+0xf4>)
 8001460:	785b      	ldrb	r3, [r3, #1]
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b01      	cmp	r3, #1
 8001466:	d102      	bne.n	800146e <stateIMU+0xa2>
	{
		BTN.no = BTN_not_pressed;
 8001468:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <stateIMU+0xf4>)
 800146a:	2200      	movs	r2, #0
 800146c:	705a      	strb	r2, [r3, #1]
	}
	if (BTN.left == BTN_pressed)
 800146e:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <stateIMU+0xf4>)
 8001470:	789b      	ldrb	r3, [r3, #2]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b01      	cmp	r3, #1
 8001476:	d105      	bne.n	8001484 <stateIMU+0xb8>
	{
		BTN.left = BTN_not_pressed;
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <stateIMU+0xf4>)
 800147a:	2200      	movs	r2, #0
 800147c:	709a      	strb	r2, [r3, #2]
		current_state = ENCODER_DISPLAY_state;
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <stateIMU+0xd8>)
 8001480:	2202      	movs	r2, #2
 8001482:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.right == BTN_pressed)
 8001484:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <stateIMU+0xf4>)
 8001486:	78db      	ldrb	r3, [r3, #3]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b01      	cmp	r3, #1
 800148c:	d105      	bne.n	800149a <stateIMU+0xce>
	{
		BTN.right = BTN_not_pressed;
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <stateIMU+0xf4>)
 8001490:	2200      	movs	r2, #0
 8001492:	70da      	strb	r2, [r3, #3]
		current_state = HOME_state;
 8001494:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <stateIMU+0xd8>)
 8001496:	2204      	movs	r2, #4
 8001498:	701a      	strb	r2, [r3, #0]
	}
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000000 	.word	0x20000000
 80014a8:	200002e8 	.word	0x200002e8
 80014ac:	08009128 	.word	0x08009128
 80014b0:	20000308 	.word	0x20000308
 80014b4:	20000294 	.word	0x20000294
 80014b8:	0800912c 	.word	0x0800912c
 80014bc:	200002f0 	.word	0x200002f0
 80014c0:	200002ec 	.word	0x200002ec

080014c4 <stateHOME>:
void stateHOME(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 80014c8:	4b29      	ldr	r3, [pc, #164]	; (8001570 <stateHOME+0xac>)
 80014ca:	781a      	ldrb	r2, [r3, #0]
 80014cc:	4b29      	ldr	r3, [pc, #164]	; (8001574 <stateHOME+0xb0>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d01a      	beq.n	800150a <stateHOME+0x46>
	{
		previous_state = current_state;
 80014d4:	4b26      	ldr	r3, [pc, #152]	; (8001570 <stateHOME+0xac>)
 80014d6:	781a      	ldrb	r2, [r3, #0]
 80014d8:	4b26      	ldr	r3, [pc, #152]	; (8001574 <stateHOME+0xb0>)
 80014da:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 80014dc:	f7ff fc2e 	bl	8000d3c <lcd_clear>
		lcd_put_cur(0, 0);
 80014e0:	2100      	movs	r1, #0
 80014e2:	2000      	movs	r0, #0
 80014e4:	f7ff fc41 	bl	8000d6a <lcd_put_cur>
		lcd_send_string("Home");
 80014e8:	4823      	ldr	r0, [pc, #140]	; (8001578 <stateHOME+0xb4>)
 80014ea:	f7ff fc9a 	bl	8000e22 <lcd_send_string>
		lcd_put_cur(1, 0);
 80014ee:	2100      	movs	r1, #0
 80014f0:	2001      	movs	r0, #1
 80014f2:	f7ff fc3a 	bl	8000d6a <lcd_put_cur>
		lcd_send_data(LCD_LEFT_ARROW);
 80014f6:	207f      	movs	r0, #127	; 0x7f
 80014f8:	f7ff fbf0 	bl	8000cdc <lcd_send_data>
		lcd_put_cur(1, 15);
 80014fc:	210f      	movs	r1, #15
 80014fe:	2001      	movs	r0, #1
 8001500:	f7ff fc33 	bl	8000d6a <lcd_put_cur>
		lcd_send_data(LCD_RIGHT_ARROW);
 8001504:	207e      	movs	r0, #126	; 0x7e
 8001506:	f7ff fbe9 	bl	8000cdc <lcd_send_data>
	}

	HAL_Delay(200);
 800150a:	20c8      	movs	r0, #200	; 0xc8
 800150c:	f001 f916 	bl	800273c <HAL_Delay>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001510:	2108      	movs	r1, #8
 8001512:	481a      	ldr	r0, [pc, #104]	; (800157c <stateHOME+0xb8>)
 8001514:	f001 fbca 	bl	8002cac <HAL_GPIO_TogglePin>

	if (BTN.ok == BTN_pressed)
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <stateHOME+0xbc>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b01      	cmp	r3, #1
 8001520:	d105      	bne.n	800152e <stateHOME+0x6a>
	{
		BTN.ok = BTN_not_pressed;
 8001522:	4b17      	ldr	r3, [pc, #92]	; (8001580 <stateHOME+0xbc>)
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
		current_state = BALANCE_state;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <stateHOME+0xac>)
 800152a:	2201      	movs	r2, #1
 800152c:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.no == BTN_pressed)
 800152e:	4b14      	ldr	r3, [pc, #80]	; (8001580 <stateHOME+0xbc>)
 8001530:	785b      	ldrb	r3, [r3, #1]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b01      	cmp	r3, #1
 8001536:	d102      	bne.n	800153e <stateHOME+0x7a>
	{
		BTN.no = BTN_not_pressed;
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <stateHOME+0xbc>)
 800153a:	2200      	movs	r2, #0
 800153c:	705a      	strb	r2, [r3, #1]
	}
	if (BTN.left == BTN_pressed)
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <stateHOME+0xbc>)
 8001540:	789b      	ldrb	r3, [r3, #2]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b01      	cmp	r3, #1
 8001546:	d105      	bne.n	8001554 <stateHOME+0x90>
	{
		BTN.left = BTN_not_pressed;
 8001548:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <stateHOME+0xbc>)
 800154a:	2200      	movs	r2, #0
 800154c:	709a      	strb	r2, [r3, #2]
		current_state = IMU_DISPLAY_state;
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <stateHOME+0xac>)
 8001550:	2203      	movs	r2, #3
 8001552:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.right == BTN_pressed)
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <stateHOME+0xbc>)
 8001556:	78db      	ldrb	r3, [r3, #3]
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b01      	cmp	r3, #1
 800155c:	d105      	bne.n	800156a <stateHOME+0xa6>
	{
		BTN.right = BTN_not_pressed;
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <stateHOME+0xbc>)
 8001560:	2200      	movs	r2, #0
 8001562:	70da      	strb	r2, [r3, #3]
		current_state = EEPROM_RW_state;
 8001564:	4b02      	ldr	r3, [pc, #8]	; (8001570 <stateHOME+0xac>)
 8001566:	2205      	movs	r2, #5
 8001568:	701a      	strb	r2, [r3, #0]
	}
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000000 	.word	0x20000000
 8001574:	200002e8 	.word	0x200002e8
 8001578:	08009134 	.word	0x08009134
 800157c:	48000400 	.word	0x48000400
 8001580:	200002ec 	.word	0x200002ec

08001584 <stateEEPROM>:
void stateEEPROM(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 8001588:	4b2e      	ldr	r3, [pc, #184]	; (8001644 <stateEEPROM+0xc0>)
 800158a:	781a      	ldrb	r2, [r3, #0]
 800158c:	4b2e      	ldr	r3, [pc, #184]	; (8001648 <stateEEPROM+0xc4>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	d01a      	beq.n	80015ca <stateEEPROM+0x46>
	{
		previous_state = current_state;
 8001594:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <stateEEPROM+0xc0>)
 8001596:	781a      	ldrb	r2, [r3, #0]
 8001598:	4b2b      	ldr	r3, [pc, #172]	; (8001648 <stateEEPROM+0xc4>)
 800159a:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 800159c:	f7ff fbce 	bl	8000d3c <lcd_clear>
		lcd_put_cur(0, 0);
 80015a0:	2100      	movs	r1, #0
 80015a2:	2000      	movs	r0, #0
 80015a4:	f7ff fbe1 	bl	8000d6a <lcd_put_cur>
		lcd_send_string("EEPROM");
 80015a8:	4828      	ldr	r0, [pc, #160]	; (800164c <stateEEPROM+0xc8>)
 80015aa:	f7ff fc3a 	bl	8000e22 <lcd_send_string>
		lcd_put_cur(1, 0);
 80015ae:	2100      	movs	r1, #0
 80015b0:	2001      	movs	r0, #1
 80015b2:	f7ff fbda 	bl	8000d6a <lcd_put_cur>
		lcd_send_data(LCD_LEFT_ARROW);
 80015b6:	207f      	movs	r0, #127	; 0x7f
 80015b8:	f7ff fb90 	bl	8000cdc <lcd_send_data>
		lcd_put_cur(1, 15);
 80015bc:	210f      	movs	r1, #15
 80015be:	2001      	movs	r0, #1
 80015c0:	f7ff fbd3 	bl	8000d6a <lcd_put_cur>
		lcd_send_data(LCD_RIGHT_ARROW);
 80015c4:	207e      	movs	r0, #126	; 0x7e
 80015c6:	f7ff fb89 	bl	8000cdc <lcd_send_data>

	}



	if (BTN.ok == BTN_pressed)
 80015ca:	4b21      	ldr	r3, [pc, #132]	; (8001650 <stateEEPROM+0xcc>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d10c      	bne.n	80015ee <stateEEPROM+0x6a>
	{
		BTN.ok = BTN_not_pressed;
 80015d4:	4b1e      	ldr	r3, [pc, #120]	; (8001650 <stateEEPROM+0xcc>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
		duty_left++;
 80015da:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <stateEEPROM+0xd0>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	3301      	adds	r3, #1
 80015e0:	4a1c      	ldr	r2, [pc, #112]	; (8001654 <stateEEPROM+0xd0>)
 80015e2:	6013      	str	r3, [r2, #0]
		duty_right++;
 80015e4:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <stateEEPROM+0xd4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	3301      	adds	r3, #1
 80015ea:	4a1b      	ldr	r2, [pc, #108]	; (8001658 <stateEEPROM+0xd4>)
 80015ec:	6013      	str	r3, [r2, #0]
//		setMotors(duty_left, duty_right, 0, 0);
	}
	if (BTN.no == BTN_pressed)
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <stateEEPROM+0xcc>)
 80015f0:	785b      	ldrb	r3, [r3, #1]
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d10c      	bne.n	8001612 <stateEEPROM+0x8e>
	{
		BTN.no = BTN_not_pressed;
 80015f8:	4b15      	ldr	r3, [pc, #84]	; (8001650 <stateEEPROM+0xcc>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	705a      	strb	r2, [r3, #1]
		duty_left--;
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <stateEEPROM+0xd0>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	3b01      	subs	r3, #1
 8001604:	4a13      	ldr	r2, [pc, #76]	; (8001654 <stateEEPROM+0xd0>)
 8001606:	6013      	str	r3, [r2, #0]
		duty_right--;
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <stateEEPROM+0xd4>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	3b01      	subs	r3, #1
 800160e:	4a12      	ldr	r2, [pc, #72]	; (8001658 <stateEEPROM+0xd4>)
 8001610:	6013      	str	r3, [r2, #0]
//		setMotors(duty_left, duty_right, 0, 0);
	}
	if (BTN.left == BTN_pressed)
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <stateEEPROM+0xcc>)
 8001614:	789b      	ldrb	r3, [r3, #2]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b01      	cmp	r3, #1
 800161a:	d105      	bne.n	8001628 <stateEEPROM+0xa4>
	{
		BTN.left = BTN_not_pressed;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <stateEEPROM+0xcc>)
 800161e:	2200      	movs	r2, #0
 8001620:	709a      	strb	r2, [r3, #2]
//		HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);	// test
//		HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	// test
		current_state = HOME_state;
 8001622:	4b08      	ldr	r3, [pc, #32]	; (8001644 <stateEEPROM+0xc0>)
 8001624:	2204      	movs	r2, #4
 8001626:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.right == BTN_pressed)
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <stateEEPROM+0xcc>)
 800162a:	78db      	ldrb	r3, [r3, #3]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b01      	cmp	r3, #1
 8001630:	d105      	bne.n	800163e <stateEEPROM+0xba>
	{
		BTN.right = BTN_not_pressed;
 8001632:	4b07      	ldr	r3, [pc, #28]	; (8001650 <stateEEPROM+0xcc>)
 8001634:	2200      	movs	r2, #0
 8001636:	70da      	strb	r2, [r3, #3]
//		HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);	//test
//		HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//test
		current_state = KP_state;
 8001638:	4b02      	ldr	r3, [pc, #8]	; (8001644 <stateEEPROM+0xc0>)
 800163a:	2206      	movs	r2, #6
 800163c:	701a      	strb	r2, [r3, #0]
	}
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000000 	.word	0x20000000
 8001648:	200002e8 	.word	0x200002e8
 800164c:	0800913c 	.word	0x0800913c
 8001650:	200002ec 	.word	0x200002ec
 8001654:	20000368 	.word	0x20000368
 8001658:	2000036c 	.word	0x2000036c

0800165c <stateKP>:
void stateKP(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 8001660:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <stateKP+0x98>)
 8001662:	781a      	ldrb	r2, [r3, #0]
 8001664:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <stateKP+0x9c>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d01a      	beq.n	80016a2 <stateKP+0x46>
	{
		previous_state = current_state;
 800166c:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <stateKP+0x98>)
 800166e:	781a      	ldrb	r2, [r3, #0]
 8001670:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <stateKP+0x9c>)
 8001672:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001674:	f7ff fb62 	bl	8000d3c <lcd_clear>
		lcd_put_cur(0, 0);
 8001678:	2100      	movs	r1, #0
 800167a:	2000      	movs	r0, #0
 800167c:	f7ff fb75 	bl	8000d6a <lcd_put_cur>
		lcd_send_string("KP");
 8001680:	481e      	ldr	r0, [pc, #120]	; (80016fc <stateKP+0xa0>)
 8001682:	f7ff fbce 	bl	8000e22 <lcd_send_string>
		lcd_put_cur(1, 0);
 8001686:	2100      	movs	r1, #0
 8001688:	2001      	movs	r0, #1
 800168a:	f7ff fb6e 	bl	8000d6a <lcd_put_cur>
		lcd_send_data(LCD_LEFT_ARROW);
 800168e:	207f      	movs	r0, #127	; 0x7f
 8001690:	f7ff fb24 	bl	8000cdc <lcd_send_data>
		lcd_put_cur(1, 15);
 8001694:	210f      	movs	r1, #15
 8001696:	2001      	movs	r0, #1
 8001698:	f7ff fb67 	bl	8000d6a <lcd_put_cur>
		lcd_send_data(LCD_RIGHT_ARROW);
 800169c:	207e      	movs	r0, #126	; 0x7e
 800169e:	f7ff fb1d 	bl	8000cdc <lcd_send_data>
	}

	if (BTN.ok == BTN_pressed)
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <stateKP+0xa4>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d102      	bne.n	80016b2 <stateKP+0x56>
	{
		BTN.ok = BTN_not_pressed;
 80016ac:	4b14      	ldr	r3, [pc, #80]	; (8001700 <stateKP+0xa4>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.no == BTN_pressed)
 80016b2:	4b13      	ldr	r3, [pc, #76]	; (8001700 <stateKP+0xa4>)
 80016b4:	785b      	ldrb	r3, [r3, #1]
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d102      	bne.n	80016c2 <stateKP+0x66>
	{
		BTN.no = BTN_not_pressed;
 80016bc:	4b10      	ldr	r3, [pc, #64]	; (8001700 <stateKP+0xa4>)
 80016be:	2200      	movs	r2, #0
 80016c0:	705a      	strb	r2, [r3, #1]
	}
	if (BTN.left == BTN_pressed)
 80016c2:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <stateKP+0xa4>)
 80016c4:	789b      	ldrb	r3, [r3, #2]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d105      	bne.n	80016d8 <stateKP+0x7c>
	{
		BTN.left = BTN_not_pressed;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <stateKP+0xa4>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	709a      	strb	r2, [r3, #2]
		current_state = EEPROM_RW_state;
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <stateKP+0x98>)
 80016d4:	2205      	movs	r2, #5
 80016d6:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.right == BTN_pressed)
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <stateKP+0xa4>)
 80016da:	78db      	ldrb	r3, [r3, #3]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d105      	bne.n	80016ee <stateKP+0x92>
	{
		BTN.right = BTN_not_pressed;
 80016e2:	4b07      	ldr	r3, [pc, #28]	; (8001700 <stateKP+0xa4>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	70da      	strb	r2, [r3, #3]
		current_state = KI_state;
 80016e8:	4b02      	ldr	r3, [pc, #8]	; (80016f4 <stateKP+0x98>)
 80016ea:	2207      	movs	r2, #7
 80016ec:	701a      	strb	r2, [r3, #0]
	}
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000000 	.word	0x20000000
 80016f8:	200002e8 	.word	0x200002e8
 80016fc:	08009144 	.word	0x08009144
 8001700:	200002ec 	.word	0x200002ec

08001704 <stateKI>:
void stateKI(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 8001708:	4b24      	ldr	r3, [pc, #144]	; (800179c <stateKI+0x98>)
 800170a:	781a      	ldrb	r2, [r3, #0]
 800170c:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <stateKI+0x9c>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d01a      	beq.n	800174a <stateKI+0x46>
	{
		previous_state = current_state;
 8001714:	4b21      	ldr	r3, [pc, #132]	; (800179c <stateKI+0x98>)
 8001716:	781a      	ldrb	r2, [r3, #0]
 8001718:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <stateKI+0x9c>)
 800171a:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 800171c:	f7ff fb0e 	bl	8000d3c <lcd_clear>
		lcd_put_cur(0, 0);
 8001720:	2100      	movs	r1, #0
 8001722:	2000      	movs	r0, #0
 8001724:	f7ff fb21 	bl	8000d6a <lcd_put_cur>
		lcd_send_string("KI");
 8001728:	481e      	ldr	r0, [pc, #120]	; (80017a4 <stateKI+0xa0>)
 800172a:	f7ff fb7a 	bl	8000e22 <lcd_send_string>
		lcd_put_cur(1, 0);
 800172e:	2100      	movs	r1, #0
 8001730:	2001      	movs	r0, #1
 8001732:	f7ff fb1a 	bl	8000d6a <lcd_put_cur>
		lcd_send_data(LCD_LEFT_ARROW);
 8001736:	207f      	movs	r0, #127	; 0x7f
 8001738:	f7ff fad0 	bl	8000cdc <lcd_send_data>
		lcd_put_cur(1, 15);
 800173c:	210f      	movs	r1, #15
 800173e:	2001      	movs	r0, #1
 8001740:	f7ff fb13 	bl	8000d6a <lcd_put_cur>
		lcd_send_data(LCD_RIGHT_ARROW);
 8001744:	207e      	movs	r0, #126	; 0x7e
 8001746:	f7ff fac9 	bl	8000cdc <lcd_send_data>
	}

	if (BTN.ok == BTN_pressed)
 800174a:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <stateKI+0xa4>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b01      	cmp	r3, #1
 8001752:	d102      	bne.n	800175a <stateKI+0x56>
	{
		BTN.ok = BTN_not_pressed;
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <stateKI+0xa4>)
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.no == BTN_pressed)
 800175a:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <stateKI+0xa4>)
 800175c:	785b      	ldrb	r3, [r3, #1]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b01      	cmp	r3, #1
 8001762:	d102      	bne.n	800176a <stateKI+0x66>
	{
		BTN.no = BTN_not_pressed;
 8001764:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <stateKI+0xa4>)
 8001766:	2200      	movs	r2, #0
 8001768:	705a      	strb	r2, [r3, #1]
	}
	if (BTN.left == BTN_pressed)
 800176a:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <stateKI+0xa4>)
 800176c:	789b      	ldrb	r3, [r3, #2]
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b01      	cmp	r3, #1
 8001772:	d105      	bne.n	8001780 <stateKI+0x7c>
	{
		BTN.left = BTN_not_pressed;
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <stateKI+0xa4>)
 8001776:	2200      	movs	r2, #0
 8001778:	709a      	strb	r2, [r3, #2]
		current_state = KP_state;
 800177a:	4b08      	ldr	r3, [pc, #32]	; (800179c <stateKI+0x98>)
 800177c:	2206      	movs	r2, #6
 800177e:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.right == BTN_pressed)
 8001780:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <stateKI+0xa4>)
 8001782:	78db      	ldrb	r3, [r3, #3]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b01      	cmp	r3, #1
 8001788:	d105      	bne.n	8001796 <stateKI+0x92>
	{
		BTN.right = BTN_not_pressed;
 800178a:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <stateKI+0xa4>)
 800178c:	2200      	movs	r2, #0
 800178e:	70da      	strb	r2, [r3, #3]
		current_state = KD_state;
 8001790:	4b02      	ldr	r3, [pc, #8]	; (800179c <stateKI+0x98>)
 8001792:	2208      	movs	r2, #8
 8001794:	701a      	strb	r2, [r3, #0]
	}
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000000 	.word	0x20000000
 80017a0:	200002e8 	.word	0x200002e8
 80017a4:	08009148 	.word	0x08009148
 80017a8:	200002ec 	.word	0x200002ec

080017ac <stateKD>:
void stateKD(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 80017b0:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <stateKD+0x84>)
 80017b2:	781a      	ldrb	r2, [r3, #0]
 80017b4:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <stateKD+0x88>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d013      	beq.n	80017e4 <stateKD+0x38>
	{
		previous_state = current_state;
 80017bc:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <stateKD+0x84>)
 80017be:	781a      	ldrb	r2, [r3, #0]
 80017c0:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <stateKD+0x88>)
 80017c2:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 80017c4:	f7ff faba 	bl	8000d3c <lcd_clear>
		lcd_put_cur(0, 0);
 80017c8:	2100      	movs	r1, #0
 80017ca:	2000      	movs	r0, #0
 80017cc:	f7ff facd 	bl	8000d6a <lcd_put_cur>
		lcd_send_string("KD");
 80017d0:	4819      	ldr	r0, [pc, #100]	; (8001838 <stateKD+0x8c>)
 80017d2:	f7ff fb26 	bl	8000e22 <lcd_send_string>
		lcd_put_cur(1, 0);
 80017d6:	2100      	movs	r1, #0
 80017d8:	2001      	movs	r0, #1
 80017da:	f7ff fac6 	bl	8000d6a <lcd_put_cur>
		lcd_send_data(LCD_LEFT_ARROW);
 80017de:	207f      	movs	r0, #127	; 0x7f
 80017e0:	f7ff fa7c 	bl	8000cdc <lcd_send_data>
	}

	if (BTN.ok == BTN_pressed)
 80017e4:	4b15      	ldr	r3, [pc, #84]	; (800183c <stateKD+0x90>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d102      	bne.n	80017f4 <stateKD+0x48>
	{
		BTN.ok = BTN_not_pressed;
 80017ee:	4b13      	ldr	r3, [pc, #76]	; (800183c <stateKD+0x90>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.no == BTN_pressed)
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <stateKD+0x90>)
 80017f6:	785b      	ldrb	r3, [r3, #1]
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d102      	bne.n	8001804 <stateKD+0x58>
	{
		BTN.no = BTN_not_pressed;
 80017fe:	4b0f      	ldr	r3, [pc, #60]	; (800183c <stateKD+0x90>)
 8001800:	2200      	movs	r2, #0
 8001802:	705a      	strb	r2, [r3, #1]
	}
	if (BTN.left == BTN_pressed)
 8001804:	4b0d      	ldr	r3, [pc, #52]	; (800183c <stateKD+0x90>)
 8001806:	789b      	ldrb	r3, [r3, #2]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b01      	cmp	r3, #1
 800180c:	d105      	bne.n	800181a <stateKD+0x6e>
	{
		BTN.left = BTN_not_pressed;
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <stateKD+0x90>)
 8001810:	2200      	movs	r2, #0
 8001812:	709a      	strb	r2, [r3, #2]
		current_state = KI_state;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <stateKD+0x84>)
 8001816:	2207      	movs	r2, #7
 8001818:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.right == BTN_pressed)
 800181a:	4b08      	ldr	r3, [pc, #32]	; (800183c <stateKD+0x90>)
 800181c:	78db      	ldrb	r3, [r3, #3]
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b01      	cmp	r3, #1
 8001822:	d102      	bne.n	800182a <stateKD+0x7e>
	{
		BTN.right = BTN_not_pressed;
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <stateKD+0x90>)
 8001826:	2200      	movs	r2, #0
 8001828:	70da      	strb	r2, [r3, #3]
	}
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000000 	.word	0x20000000
 8001834:	200002e8 	.word	0x200002e8
 8001838:	0800914c 	.word	0x0800914c
 800183c:	200002ec 	.word	0x200002ec

08001840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001844:	b672      	cpsid	i
}
 8001846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001848:	e7fe      	b.n	8001848 <Error_Handler+0x8>

0800184a <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b088      	sub	sp, #32
 800184e:	af04      	add	r7, sp, #16
 8001850:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001852:	2364      	movs	r3, #100	; 0x64
 8001854:	9302      	str	r3, [sp, #8]
 8001856:	2301      	movs	r3, #1
 8001858:	9301      	str	r3, [sp, #4]
 800185a:	f107 030f 	add.w	r3, r7, #15
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	2301      	movs	r3, #1
 8001862:	2275      	movs	r2, #117	; 0x75
 8001864:	21d0      	movs	r1, #208	; 0xd0
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f001 fcea 	bl	8003240 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 800186c:	7bfb      	ldrb	r3, [r7, #15]
 800186e:	2b68      	cmp	r3, #104	; 0x68
 8001870:	d13d      	bne.n	80018ee <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001876:	2364      	movs	r3, #100	; 0x64
 8001878:	9302      	str	r3, [sp, #8]
 800187a:	2301      	movs	r3, #1
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	f107 030e 	add.w	r3, r7, #14
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	2301      	movs	r3, #1
 8001886:	226b      	movs	r2, #107	; 0x6b
 8001888:	21d0      	movs	r1, #208	; 0xd0
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f001 fbc4 	bl	8003018 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001890:	2307      	movs	r3, #7
 8001892:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001894:	2364      	movs	r3, #100	; 0x64
 8001896:	9302      	str	r3, [sp, #8]
 8001898:	2301      	movs	r3, #1
 800189a:	9301      	str	r3, [sp, #4]
 800189c:	f107 030e 	add.w	r3, r7, #14
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	2301      	movs	r3, #1
 80018a4:	2219      	movs	r2, #25
 80018a6:	21d0      	movs	r1, #208	; 0xd0
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f001 fbb5 	bl	8003018 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80018ae:	2300      	movs	r3, #0
 80018b0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80018b2:	2364      	movs	r3, #100	; 0x64
 80018b4:	9302      	str	r3, [sp, #8]
 80018b6:	2301      	movs	r3, #1
 80018b8:	9301      	str	r3, [sp, #4]
 80018ba:	f107 030e 	add.w	r3, r7, #14
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	2301      	movs	r3, #1
 80018c2:	221c      	movs	r2, #28
 80018c4:	21d0      	movs	r1, #208	; 0xd0
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f001 fba6 	bl	8003018 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80018cc:	2300      	movs	r3, #0
 80018ce:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80018d0:	2364      	movs	r3, #100	; 0x64
 80018d2:	9302      	str	r3, [sp, #8]
 80018d4:	2301      	movs	r3, #1
 80018d6:	9301      	str	r3, [sp, #4]
 80018d8:	f107 030e 	add.w	r3, r7, #14
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	2301      	movs	r3, #1
 80018e0:	221b      	movs	r2, #27
 80018e2:	21d0      	movs	r1, #208	; 0xd0
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f001 fb97 	bl	8003018 <HAL_I2C_Mem_Write>
        return 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	e000      	b.n	80018f0 <MPU6050_Init+0xa6>
    }
    return 1;
 80018ee:	2301      	movs	r3, #1
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80018f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018fc:	b094      	sub	sp, #80	; 0x50
 80018fe:	af04      	add	r7, sp, #16
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001904:	2364      	movs	r3, #100	; 0x64
 8001906:	9302      	str	r3, [sp, #8]
 8001908:	230e      	movs	r3, #14
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	f107 0308 	add.w	r3, r7, #8
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2301      	movs	r3, #1
 8001914:	223b      	movs	r2, #59	; 0x3b
 8001916:	21d0      	movs	r1, #208	; 0xd0
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f001 fc91 	bl	8003240 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800191e:	7a3b      	ldrb	r3, [r7, #8]
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	b21a      	sxth	r2, r3
 8001924:	7a7b      	ldrb	r3, [r7, #9]
 8001926:	b21b      	sxth	r3, r3
 8001928:	4313      	orrs	r3, r2
 800192a:	b21a      	sxth	r2, r3
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001930:	7abb      	ldrb	r3, [r7, #10]
 8001932:	021b      	lsls	r3, r3, #8
 8001934:	b21a      	sxth	r2, r3
 8001936:	7afb      	ldrb	r3, [r7, #11]
 8001938:	b21b      	sxth	r3, r3
 800193a:	4313      	orrs	r3, r2
 800193c:	b21a      	sxth	r2, r3
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001942:	7b3b      	ldrb	r3, [r7, #12]
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	b21a      	sxth	r2, r3
 8001948:	7b7b      	ldrb	r3, [r7, #13]
 800194a:	b21b      	sxth	r3, r3
 800194c:	4313      	orrs	r3, r2
 800194e:	b21a      	sxth	r2, r3
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001954:	7bbb      	ldrb	r3, [r7, #14]
 8001956:	021b      	lsls	r3, r3, #8
 8001958:	b21a      	sxth	r2, r3
 800195a:	7bfb      	ldrb	r3, [r7, #15]
 800195c:	b21b      	sxth	r3, r3
 800195e:	4313      	orrs	r3, r2
 8001960:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001962:	7c3b      	ldrb	r3, [r7, #16]
 8001964:	021b      	lsls	r3, r3, #8
 8001966:	b21a      	sxth	r2, r3
 8001968:	7c7b      	ldrb	r3, [r7, #17]
 800196a:	b21b      	sxth	r3, r3
 800196c:	4313      	orrs	r3, r2
 800196e:	b21a      	sxth	r2, r3
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001974:	7cbb      	ldrb	r3, [r7, #18]
 8001976:	021b      	lsls	r3, r3, #8
 8001978:	b21a      	sxth	r2, r3
 800197a:	7cfb      	ldrb	r3, [r7, #19]
 800197c:	b21b      	sxth	r3, r3
 800197e:	4313      	orrs	r3, r2
 8001980:	b21a      	sxth	r2, r3
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001986:	7d3b      	ldrb	r3, [r7, #20]
 8001988:	021b      	lsls	r3, r3, #8
 800198a:	b21a      	sxth	r2, r3
 800198c:	7d7b      	ldrb	r3, [r7, #21]
 800198e:	b21b      	sxth	r3, r3
 8001990:	4313      	orrs	r3, r2
 8001992:	b21a      	sxth	r2, r3
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fdc0 	bl	8000524 <__aeabi_i2d>
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	4bbd      	ldr	r3, [pc, #756]	; (8001ca0 <MPU6050_Read_All+0x3a8>)
 80019aa:	f7fe ff4f 	bl	800084c <__aeabi_ddiv>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	6839      	ldr	r1, [r7, #0]
 80019b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fdb0 	bl	8000524 <__aeabi_i2d>
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	4bb5      	ldr	r3, [pc, #724]	; (8001ca0 <MPU6050_Read_All+0x3a8>)
 80019ca:	f7fe ff3f 	bl	800084c <__aeabi_ddiv>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	6839      	ldr	r1, [r7, #0]
 80019d4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fda0 	bl	8000524 <__aeabi_i2d>
 80019e4:	a3a8      	add	r3, pc, #672	; (adr r3, 8001c88 <MPU6050_Read_All+0x390>)
 80019e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ea:	f7fe ff2f 	bl	800084c <__aeabi_ddiv>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	6839      	ldr	r1, [r7, #0]
 80019f4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80019f8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80019fc:	ee07 3a90 	vmov	s15, r3
 8001a00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a04:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8001ca4 <MPU6050_Read_All+0x3ac>
 8001a08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a0c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001ca8 <MPU6050_Read_All+0x3b0>
 8001a10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fd7f 	bl	8000524 <__aeabi_i2d>
 8001a26:	a39a      	add	r3, pc, #616	; (adr r3, 8001c90 <MPU6050_Read_All+0x398>)
 8001a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2c:	f7fe ff0e 	bl	800084c <__aeabi_ddiv>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	6839      	ldr	r1, [r7, #0]
 8001a36:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fd6f 	bl	8000524 <__aeabi_i2d>
 8001a46:	a392      	add	r3, pc, #584	; (adr r3, 8001c90 <MPU6050_Read_All+0x398>)
 8001a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4c:	f7fe fefe 	bl	800084c <__aeabi_ddiv>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	6839      	ldr	r1, [r7, #0]
 8001a56:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7fe fd5f 	bl	8000524 <__aeabi_i2d>
 8001a66:	a38a      	add	r3, pc, #552	; (adr r3, 8001c90 <MPU6050_Read_All+0x398>)
 8001a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6c:	f7fe feee 	bl	800084c <__aeabi_ddiv>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	6839      	ldr	r1, [r7, #0]
 8001a76:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001a7a:	f000 fe53 	bl	8002724 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	4b8a      	ldr	r3, [pc, #552]	; (8001cac <MPU6050_Read_All+0x3b4>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fd3c 	bl	8000504 <__aeabi_ui2d>
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	4b87      	ldr	r3, [pc, #540]	; (8001cb0 <MPU6050_Read_All+0x3b8>)
 8001a92:	f7fe fedb 	bl	800084c <__aeabi_ddiv>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001a9e:	f000 fe41 	bl	8002724 <HAL_GetTick>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	4a81      	ldr	r2, [pc, #516]	; (8001cac <MPU6050_Read_All+0x3b4>)
 8001aa6:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab6:	fb03 f202 	mul.w	r2, r3, r2
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ac8:	fb01 f303 	mul.w	r3, r1, r3
 8001acc:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fd28 	bl	8000524 <__aeabi_i2d>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	ec43 2b10 	vmov	d0, r2, r3
 8001adc:	f007 f93f 	bl	8008d5e <sqrt>
 8001ae0:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	f04f 0300 	mov.w	r3, #0
 8001aec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001af0:	f7fe ffea 	bl	8000ac8 <__aeabi_dcmpeq>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d11f      	bne.n	8001b3a <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7fe fd0f 	bl	8000524 <__aeabi_i2d>
 8001b06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b0a:	f7fe fe9f 	bl	800084c <__aeabi_ddiv>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	ec43 2b17 	vmov	d7, r2, r3
 8001b16:	eeb0 0a47 	vmov.f32	s0, s14
 8001b1a:	eef0 0a67 	vmov.f32	s1, s15
 8001b1e:	f006 ff73 	bl	8008a08 <atan>
 8001b22:	ec51 0b10 	vmov	r0, r1, d0
 8001b26:	a35c      	add	r3, pc, #368	; (adr r3, 8001c98 <MPU6050_Read_All+0x3a0>)
 8001b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2c:	f7fe fd64 	bl	80005f8 <__aeabi_dmul>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001b38:	e005      	b.n	8001b46 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	f04f 0300 	mov.w	r3, #0
 8001b42:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b4c:	425b      	negs	r3, r3
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fce8 	bl	8000524 <__aeabi_i2d>
 8001b54:	4682      	mov	sl, r0
 8001b56:	468b      	mov	fp, r1
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fce0 	bl	8000524 <__aeabi_i2d>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	ec43 2b11 	vmov	d1, r2, r3
 8001b6c:	ec4b ab10 	vmov	d0, sl, fp
 8001b70:	f007 f8f3 	bl	8008d5a <atan2>
 8001b74:	ec51 0b10 	vmov	r0, r1, d0
 8001b78:	a347      	add	r3, pc, #284	; (adr r3, 8001c98 <MPU6050_Read_All+0x3a0>)
 8001b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7e:	f7fe fd3b 	bl	80005f8 <__aeabi_dmul>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	4b49      	ldr	r3, [pc, #292]	; (8001cb4 <MPU6050_Read_All+0x3bc>)
 8001b90:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b94:	f7fe ffa2 	bl	8000adc <__aeabi_dcmplt>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00a      	beq.n	8001bb4 <MPU6050_Read_All+0x2bc>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	4b43      	ldr	r3, [pc, #268]	; (8001cb8 <MPU6050_Read_All+0x3c0>)
 8001baa:	f7fe ffb5 	bl	8000b18 <__aeabi_dcmpgt>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d114      	bne.n	8001bde <MPU6050_Read_All+0x2e6>
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	4b3f      	ldr	r3, [pc, #252]	; (8001cb8 <MPU6050_Read_All+0x3c0>)
 8001bba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bbe:	f7fe ffab 	bl	8000b18 <__aeabi_dcmpgt>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d015      	beq.n	8001bf4 <MPU6050_Read_All+0x2fc>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	4b38      	ldr	r3, [pc, #224]	; (8001cb4 <MPU6050_Read_All+0x3bc>)
 8001bd4:	f7fe ff82 	bl	8000adc <__aeabi_dcmplt>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00a      	beq.n	8001bf4 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8001bde:	4937      	ldr	r1, [pc, #220]	; (8001cbc <MPU6050_Read_All+0x3c4>)
 8001be0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001be4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001be8:	6839      	ldr	r1, [r7, #0]
 8001bea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bee:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001bf2:	e014      	b.n	8001c1e <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001bfa:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001bfe:	eeb0 1a47 	vmov.f32	s2, s14
 8001c02:	eef0 1a67 	vmov.f32	s3, s15
 8001c06:	ed97 0b06 	vldr	d0, [r7, #24]
 8001c0a:	482c      	ldr	r0, [pc, #176]	; (8001cbc <MPU6050_Read_All+0x3c4>)
 8001c0c:	f000 f85a 	bl	8001cc4 <Kalman_getAngle>
 8001c10:	eeb0 7a40 	vmov.f32	s14, s0
 8001c14:	eef0 7a60 	vmov.f32	s15, s1
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001c24:	4690      	mov	r8, r2
 8001c26:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	4b22      	ldr	r3, [pc, #136]	; (8001cb8 <MPU6050_Read_All+0x3c0>)
 8001c30:	4640      	mov	r0, r8
 8001c32:	4649      	mov	r1, r9
 8001c34:	f7fe ff70 	bl	8000b18 <__aeabi_dcmpgt>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d008      	beq.n	8001c50 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001c44:	4614      	mov	r4, r2
 8001c46:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001c56:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001c5a:	eeb0 1a47 	vmov.f32	s2, s14
 8001c5e:	eef0 1a67 	vmov.f32	s3, s15
 8001c62:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001c66:	4816      	ldr	r0, [pc, #88]	; (8001cc0 <MPU6050_Read_All+0x3c8>)
 8001c68:	f000 f82c 	bl	8001cc4 <Kalman_getAngle>
 8001c6c:	eeb0 7a40 	vmov.f32	s14, s0
 8001c70:	eef0 7a60 	vmov.f32	s15, s1
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 8001c7a:	bf00      	nop
 8001c7c:	3740      	adds	r7, #64	; 0x40
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c84:	f3af 8000 	nop.w
 8001c88:	00000000 	.word	0x00000000
 8001c8c:	40cc2900 	.word	0x40cc2900
 8001c90:	00000000 	.word	0x00000000
 8001c94:	40606000 	.word	0x40606000
 8001c98:	1a63c1f8 	.word	0x1a63c1f8
 8001c9c:	404ca5dc 	.word	0x404ca5dc
 8001ca0:	40d00000 	.word	0x40d00000
 8001ca4:	43aa0000 	.word	0x43aa0000
 8001ca8:	42121eb8 	.word	0x42121eb8
 8001cac:	20000370 	.word	0x20000370
 8001cb0:	408f4000 	.word	0x408f4000
 8001cb4:	c0568000 	.word	0xc0568000
 8001cb8:	40568000 	.word	0x40568000
 8001cbc:	20000050 	.word	0x20000050
 8001cc0:	20000008 	.word	0x20000008

08001cc4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001cc4:	b5b0      	push	{r4, r5, r7, lr}
 8001cc6:	b096      	sub	sp, #88	; 0x58
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	61f8      	str	r0, [r7, #28]
 8001ccc:	ed87 0b04 	vstr	d0, [r7, #16]
 8001cd0:	ed87 1b02 	vstr	d1, [r7, #8]
 8001cd4:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001cde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ce2:	f7fe fad1 	bl	8000288 <__aeabi_dsub>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001cf4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001cf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cfc:	f7fe fc7c 	bl	80005f8 <__aeabi_dmul>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4620      	mov	r0, r4
 8001d06:	4629      	mov	r1, r5
 8001d08:	f7fe fac0 	bl	800028c <__adddf3>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	69f9      	ldr	r1, [r7, #28]
 8001d12:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001d22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d26:	f7fe fc67 	bl	80005f8 <__aeabi_dmul>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4610      	mov	r0, r2
 8001d30:	4619      	mov	r1, r3
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001d38:	f7fe faa6 	bl	8000288 <__aeabi_dsub>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4610      	mov	r0, r2
 8001d42:	4619      	mov	r1, r3
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001d4a:	f7fe fa9d 	bl	8000288 <__aeabi_dsub>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	4610      	mov	r0, r2
 8001d54:	4619      	mov	r1, r3
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5c:	f7fe fa96 	bl	800028c <__adddf3>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d6c:	f7fe fc44 	bl	80005f8 <__aeabi_dmul>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4620      	mov	r0, r4
 8001d76:	4629      	mov	r1, r5
 8001d78:	f7fe fa88 	bl	800028c <__adddf3>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	69f9      	ldr	r1, [r7, #28]
 8001d82:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001d92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d96:	f7fe fc2f 	bl	80005f8 <__aeabi_dmul>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4620      	mov	r0, r4
 8001da0:	4629      	mov	r1, r5
 8001da2:	f7fe fa71 	bl	8000288 <__aeabi_dsub>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	69f9      	ldr	r1, [r7, #28]
 8001dac:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001dbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dc0:	f7fe fc1a 	bl	80005f8 <__aeabi_dmul>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4620      	mov	r0, r4
 8001dca:	4629      	mov	r1, r5
 8001dcc:	f7fe fa5c 	bl	8000288 <__aeabi_dsub>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	69f9      	ldr	r1, [r7, #28]
 8001dd6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001de6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dea:	f7fe fc05 	bl	80005f8 <__aeabi_dmul>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4620      	mov	r0, r4
 8001df4:	4629      	mov	r1, r5
 8001df6:	f7fe fa49 	bl	800028c <__adddf3>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	69f9      	ldr	r1, [r7, #28]
 8001e00:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e10:	f7fe fa3c 	bl	800028c <__adddf3>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001e22:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001e26:	f7fe fd11 	bl	800084c <__aeabi_ddiv>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001e38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001e3c:	f7fe fd06 	bl	800084c <__aeabi_ddiv>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001e4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e52:	f7fe fa19 	bl	8000288 <__aeabi_dsub>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001e64:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e68:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e6c:	f7fe fbc4 	bl	80005f8 <__aeabi_dmul>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4620      	mov	r0, r4
 8001e76:	4629      	mov	r1, r5
 8001e78:	f7fe fa08 	bl	800028c <__adddf3>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	69f9      	ldr	r1, [r7, #28]
 8001e82:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001e8c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e90:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e94:	f7fe fbb0 	bl	80005f8 <__aeabi_dmul>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	4629      	mov	r1, r5
 8001ea0:	f7fe f9f4 	bl	800028c <__adddf3>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	69f9      	ldr	r1, [r7, #28]
 8001eaa:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001eb4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001ebe:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001ec8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ecc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001ed0:	f7fe fb92 	bl	80005f8 <__aeabi_dmul>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4620      	mov	r0, r4
 8001eda:	4629      	mov	r1, r5
 8001edc:	f7fe f9d4 	bl	8000288 <__aeabi_dsub>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	69f9      	ldr	r1, [r7, #28]
 8001ee6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001ef0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ef4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ef8:	f7fe fb7e 	bl	80005f8 <__aeabi_dmul>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4620      	mov	r0, r4
 8001f02:	4629      	mov	r1, r5
 8001f04:	f7fe f9c0 	bl	8000288 <__aeabi_dsub>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	69f9      	ldr	r1, [r7, #28]
 8001f0e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001f18:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f20:	f7fe fb6a 	bl	80005f8 <__aeabi_dmul>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4620      	mov	r0, r4
 8001f2a:	4629      	mov	r1, r5
 8001f2c:	f7fe f9ac 	bl	8000288 <__aeabi_dsub>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	69f9      	ldr	r1, [r7, #28]
 8001f36:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001f40:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f44:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f48:	f7fe fb56 	bl	80005f8 <__aeabi_dmul>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4620      	mov	r0, r4
 8001f52:	4629      	mov	r1, r5
 8001f54:	f7fe f998 	bl	8000288 <__aeabi_dsub>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	69f9      	ldr	r1, [r7, #28]
 8001f5e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001f68:	ec43 2b17 	vmov	d7, r2, r3
};
 8001f6c:	eeb0 0a47 	vmov.f32	s0, s14
 8001f70:	eef0 0a67 	vmov.f32	s1, s15
 8001f74:	3758      	adds	r7, #88	; 0x58
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f82:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <HAL_MspInit+0x44>)
 8001f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f86:	4a0e      	ldr	r2, [pc, #56]	; (8001fc0 <HAL_MspInit+0x44>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f8e:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <HAL_MspInit+0x44>)
 8001f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f9a:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <HAL_MspInit+0x44>)
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9e:	4a08      	ldr	r2, [pc, #32]	; (8001fc0 <HAL_MspInit+0x44>)
 8001fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	6593      	str	r3, [r2, #88]	; 0x58
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_MspInit+0x44>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fae:	603b      	str	r3, [r7, #0]
 8001fb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40021000 	.word	0x40021000

08001fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <NMI_Handler+0x4>

08001fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fce:	e7fe      	b.n	8001fce <HardFault_Handler+0x4>

08001fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd4:	e7fe      	b.n	8001fd4 <MemManage_Handler+0x4>

08001fd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fda:	e7fe      	b.n	8001fda <BusFault_Handler+0x4>

08001fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe0:	e7fe      	b.n	8001fe0 <UsageFault_Handler+0x4>

08001fe2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002010:	f000 fb74 	bl	80026fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}

08002018 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_RI_Pin);
 800201c:	2020      	movs	r0, #32
 800201e:	f000 fe5f 	bl	8002ce0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}

08002026 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_OK_Pin);
 800202a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800202e:	f000 fe57 	bl	8002ce0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_NO_Pin);
 8002032:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002036:	f000 fe53 	bl	8002ce0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_LE_Pin);
 800203a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800203e:	f000 fe4f 	bl	8002ce0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}

08002046 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0
	return 1;
 800204a:	2301      	movs	r3, #1
}
 800204c:	4618      	mov	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <_kill>:

int _kill(int pid, int sig)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002060:	f003 fdbe 	bl	8005be0 <__errno>
 8002064:	4603      	mov	r3, r0
 8002066:	2216      	movs	r2, #22
 8002068:	601a      	str	r2, [r3, #0]
	return -1;
 800206a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <_exit>:

void _exit (int status)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800207e:	f04f 31ff 	mov.w	r1, #4294967295
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff ffe7 	bl	8002056 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002088:	e7fe      	b.n	8002088 <_exit+0x12>

0800208a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b086      	sub	sp, #24
 800208e:	af00      	add	r7, sp, #0
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	e00a      	b.n	80020b2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800209c:	f3af 8000 	nop.w
 80020a0:	4601      	mov	r1, r0
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	60ba      	str	r2, [r7, #8]
 80020a8:	b2ca      	uxtb	r2, r1
 80020aa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	3301      	adds	r3, #1
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	dbf0      	blt.n	800209c <_read+0x12>
	}

return len;
 80020ba:	687b      	ldr	r3, [r7, #4]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	e009      	b.n	80020ea <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	60ba      	str	r2, [r7, #8]
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	3301      	adds	r3, #1
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	dbf1      	blt.n	80020d6 <_write+0x12>
	}
	return len;
 80020f2:	687b      	ldr	r3, [r7, #4]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <_close>:

int _close(int file)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
	return -1;
 8002104:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002108:	4618      	mov	r0, r3
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002124:	605a      	str	r2, [r3, #4]
	return 0;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <_isatty>:

int _isatty(int file)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	return 1;
 800213c:	2301      	movs	r3, #1
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800214a:	b480      	push	{r7}
 800214c:	b085      	sub	sp, #20
 800214e:	af00      	add	r7, sp, #0
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
	return 0;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800216c:	4a14      	ldr	r2, [pc, #80]	; (80021c0 <_sbrk+0x5c>)
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <_sbrk+0x60>)
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002178:	4b13      	ldr	r3, [pc, #76]	; (80021c8 <_sbrk+0x64>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d102      	bne.n	8002186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <_sbrk+0x64>)
 8002182:	4a12      	ldr	r2, [pc, #72]	; (80021cc <_sbrk+0x68>)
 8002184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002186:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <_sbrk+0x64>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	429a      	cmp	r2, r3
 8002192:	d207      	bcs.n	80021a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002194:	f003 fd24 	bl	8005be0 <__errno>
 8002198:	4603      	mov	r3, r0
 800219a:	220c      	movs	r2, #12
 800219c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800219e:	f04f 33ff 	mov.w	r3, #4294967295
 80021a2:	e009      	b.n	80021b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <_sbrk+0x64>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021aa:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <_sbrk+0x64>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	4a05      	ldr	r2, [pc, #20]	; (80021c8 <_sbrk+0x64>)
 80021b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021b6:	68fb      	ldr	r3, [r7, #12]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20010000 	.word	0x20010000
 80021c4:	00000400 	.word	0x00000400
 80021c8:	20000374 	.word	0x20000374
 80021cc:	20000470 	.word	0x20000470

080021d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <SystemInit+0x20>)
 80021d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021da:	4a05      	ldr	r2, [pc, #20]	; (80021f0 <SystemInit+0x20>)
 80021dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08c      	sub	sp, #48	; 0x30
 80021f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80021fa:	f107 030c 	add.w	r3, r7, #12
 80021fe:	2224      	movs	r2, #36	; 0x24
 8002200:	2100      	movs	r1, #0
 8002202:	4618      	mov	r0, r3
 8002204:	f003 fd16 	bl	8005c34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002208:	463b      	mov	r3, r7
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002212:	4b23      	ldr	r3, [pc, #140]	; (80022a0 <MX_TIM1_Init+0xac>)
 8002214:	4a23      	ldr	r2, [pc, #140]	; (80022a4 <MX_TIM1_Init+0xb0>)
 8002216:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002218:	4b21      	ldr	r3, [pc, #132]	; (80022a0 <MX_TIM1_Init+0xac>)
 800221a:	2200      	movs	r2, #0
 800221c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800221e:	4b20      	ldr	r3, [pc, #128]	; (80022a0 <MX_TIM1_Init+0xac>)
 8002220:	2200      	movs	r2, #0
 8002222:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002224:	4b1e      	ldr	r3, [pc, #120]	; (80022a0 <MX_TIM1_Init+0xac>)
 8002226:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800222a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800222c:	4b1c      	ldr	r3, [pc, #112]	; (80022a0 <MX_TIM1_Init+0xac>)
 800222e:	2200      	movs	r2, #0
 8002230:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002232:	4b1b      	ldr	r3, [pc, #108]	; (80022a0 <MX_TIM1_Init+0xac>)
 8002234:	2200      	movs	r2, #0
 8002236:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002238:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <MX_TIM1_Init+0xac>)
 800223a:	2200      	movs	r2, #0
 800223c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800223e:	2301      	movs	r3, #1
 8002240:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002246:	2301      	movs	r3, #1
 8002248:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800224a:	2300      	movs	r3, #0
 800224c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002252:	2300      	movs	r3, #0
 8002254:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002256:	2301      	movs	r3, #1
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800225a:	2300      	movs	r3, #0
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002262:	f107 030c 	add.w	r3, r7, #12
 8002266:	4619      	mov	r1, r3
 8002268:	480d      	ldr	r0, [pc, #52]	; (80022a0 <MX_TIM1_Init+0xac>)
 800226a:	f002 fde4 	bl	8004e36 <HAL_TIM_Encoder_Init>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002274:	f7ff fae4 	bl	8001840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002278:	2300      	movs	r3, #0
 800227a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800227c:	2300      	movs	r3, #0
 800227e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002280:	2300      	movs	r3, #0
 8002282:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002284:	463b      	mov	r3, r7
 8002286:	4619      	mov	r1, r3
 8002288:	4805      	ldr	r0, [pc, #20]	; (80022a0 <MX_TIM1_Init+0xac>)
 800228a:	f003 fbcb 	bl	8005a24 <HAL_TIMEx_MasterConfigSynchronization>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002294:	f7ff fad4 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002298:	bf00      	nop
 800229a:	3730      	adds	r7, #48	; 0x30
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20000378 	.word	0x20000378
 80022a4:	40012c00 	.word	0x40012c00

080022a8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08c      	sub	sp, #48	; 0x30
 80022ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022ae:	f107 030c 	add.w	r3, r7, #12
 80022b2:	2224      	movs	r2, #36	; 0x24
 80022b4:	2100      	movs	r1, #0
 80022b6:	4618      	mov	r0, r3
 80022b8:	f003 fcbc 	bl	8005c34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022bc:	463b      	mov	r3, r7
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	605a      	str	r2, [r3, #4]
 80022c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022c6:	4b21      	ldr	r3, [pc, #132]	; (800234c <MX_TIM2_Init+0xa4>)
 80022c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80022ce:	4b1f      	ldr	r3, [pc, #124]	; (800234c <MX_TIM2_Init+0xa4>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d4:	4b1d      	ldr	r3, [pc, #116]	; (800234c <MX_TIM2_Init+0xa4>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535 - 1;
 80022da:	4b1c      	ldr	r3, [pc, #112]	; (800234c <MX_TIM2_Init+0xa4>)
 80022dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80022e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022e2:	4b1a      	ldr	r3, [pc, #104]	; (800234c <MX_TIM2_Init+0xa4>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022e8:	4b18      	ldr	r3, [pc, #96]	; (800234c <MX_TIM2_Init+0xa4>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80022ee:	2301      	movs	r3, #1
 80022f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022f6:	2301      	movs	r3, #1
 80022f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002302:	2300      	movs	r3, #0
 8002304:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002306:	2301      	movs	r3, #1
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800230a:	2300      	movs	r3, #0
 800230c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002312:	f107 030c 	add.w	r3, r7, #12
 8002316:	4619      	mov	r1, r3
 8002318:	480c      	ldr	r0, [pc, #48]	; (800234c <MX_TIM2_Init+0xa4>)
 800231a:	f002 fd8c 	bl	8004e36 <HAL_TIM_Encoder_Init>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002324:	f7ff fa8c 	bl	8001840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002328:	2300      	movs	r3, #0
 800232a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800232c:	2300      	movs	r3, #0
 800232e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002330:	463b      	mov	r3, r7
 8002332:	4619      	mov	r1, r3
 8002334:	4805      	ldr	r0, [pc, #20]	; (800234c <MX_TIM2_Init+0xa4>)
 8002336:	f003 fb75 	bl	8005a24 <HAL_TIMEx_MasterConfigSynchronization>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002340:	f7ff fa7e 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002344:	bf00      	nop
 8002346:	3730      	adds	r7, #48	; 0x30
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	200003c4 	.word	0x200003c4

08002350 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b096      	sub	sp, #88	; 0x58
 8002354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002356:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002362:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	60da      	str	r2, [r3, #12]
 8002370:	611a      	str	r2, [r3, #16]
 8002372:	615a      	str	r2, [r3, #20]
 8002374:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002376:	1d3b      	adds	r3, r7, #4
 8002378:	222c      	movs	r2, #44	; 0x2c
 800237a:	2100      	movs	r1, #0
 800237c:	4618      	mov	r0, r3
 800237e:	f003 fc59 	bl	8005c34 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002382:	4b39      	ldr	r3, [pc, #228]	; (8002468 <MX_TIM15_Init+0x118>)
 8002384:	4a39      	ldr	r2, [pc, #228]	; (800246c <MX_TIM15_Init+0x11c>)
 8002386:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 64 - 1;
 8002388:	4b37      	ldr	r3, [pc, #220]	; (8002468 <MX_TIM15_Init+0x118>)
 800238a:	223f      	movs	r2, #63	; 0x3f
 800238c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800238e:	4b36      	ldr	r3, [pc, #216]	; (8002468 <MX_TIM15_Init+0x118>)
 8002390:	2200      	movs	r2, #0
 8002392:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 100 - 1;
 8002394:	4b34      	ldr	r3, [pc, #208]	; (8002468 <MX_TIM15_Init+0x118>)
 8002396:	2263      	movs	r2, #99	; 0x63
 8002398:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800239a:	4b33      	ldr	r3, [pc, #204]	; (8002468 <MX_TIM15_Init+0x118>)
 800239c:	2200      	movs	r2, #0
 800239e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80023a0:	4b31      	ldr	r3, [pc, #196]	; (8002468 <MX_TIM15_Init+0x118>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023a6:	4b30      	ldr	r3, [pc, #192]	; (8002468 <MX_TIM15_Init+0x118>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80023ac:	482e      	ldr	r0, [pc, #184]	; (8002468 <MX_TIM15_Init+0x118>)
 80023ae:	f002 fceb 	bl	8004d88 <HAL_TIM_PWM_Init>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_TIM15_Init+0x6c>
  {
    Error_Handler();
 80023b8:	f7ff fa42 	bl	8001840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023bc:	2300      	movs	r3, #0
 80023be:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c0:	2300      	movs	r3, #0
 80023c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80023c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80023c8:	4619      	mov	r1, r3
 80023ca:	4827      	ldr	r0, [pc, #156]	; (8002468 <MX_TIM15_Init+0x118>)
 80023cc:	f003 fb2a 	bl	8005a24 <HAL_TIMEx_MasterConfigSynchronization>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_TIM15_Init+0x8a>
  {
    Error_Handler();
 80023d6:	f7ff fa33 	bl	8001840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023da:	2360      	movs	r3, #96	; 0x60
 80023dc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80023de:	2300      	movs	r3, #0
 80023e0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023e2:	2300      	movs	r3, #0
 80023e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023e6:	2300      	movs	r3, #0
 80023e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023ea:	2300      	movs	r3, #0
 80023ec:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023ee:	2300      	movs	r3, #0
 80023f0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023f2:	2300      	movs	r3, #0
 80023f4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023fa:	2200      	movs	r2, #0
 80023fc:	4619      	mov	r1, r3
 80023fe:	481a      	ldr	r0, [pc, #104]	; (8002468 <MX_TIM15_Init+0x118>)
 8002400:	f002 fef4 	bl	80051ec <HAL_TIM_PWM_ConfigChannel>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_TIM15_Init+0xbe>
  {
    Error_Handler();
 800240a:	f7ff fa19 	bl	8001840 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800240e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002412:	2204      	movs	r2, #4
 8002414:	4619      	mov	r1, r3
 8002416:	4814      	ldr	r0, [pc, #80]	; (8002468 <MX_TIM15_Init+0x118>)
 8002418:	f002 fee8 	bl	80051ec <HAL_TIM_PWM_ConfigChannel>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_TIM15_Init+0xd6>
  {
    Error_Handler();
 8002422:	f7ff fa0d 	bl	8001840 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002426:	2300      	movs	r3, #0
 8002428:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800242a:	2300      	movs	r3, #0
 800242c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800242e:	2300      	movs	r3, #0
 8002430:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800243a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800243e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002440:	2300      	movs	r3, #0
 8002442:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002444:	1d3b      	adds	r3, r7, #4
 8002446:	4619      	mov	r1, r3
 8002448:	4807      	ldr	r0, [pc, #28]	; (8002468 <MX_TIM15_Init+0x118>)
 800244a:	f003 fb51 	bl	8005af0 <HAL_TIMEx_ConfigBreakDeadTime>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_TIM15_Init+0x108>
  {
    Error_Handler();
 8002454:	f7ff f9f4 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002458:	4803      	ldr	r0, [pc, #12]	; (8002468 <MX_TIM15_Init+0x118>)
 800245a:	f000 f89b 	bl	8002594 <HAL_TIM_MspPostInit>

}
 800245e:	bf00      	nop
 8002460:	3758      	adds	r7, #88	; 0x58
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000410 	.word	0x20000410
 800246c:	40014000 	.word	0x40014000

08002470 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08c      	sub	sp, #48	; 0x30
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002478:	f107 031c 	add.w	r3, r7, #28
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a2f      	ldr	r2, [pc, #188]	; (800254c <HAL_TIM_Encoder_MspInit+0xdc>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d12a      	bne.n	80024e8 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002492:	4b2f      	ldr	r3, [pc, #188]	; (8002550 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002496:	4a2e      	ldr	r2, [pc, #184]	; (8002550 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002498:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800249c:	6613      	str	r3, [r2, #96]	; 0x60
 800249e:	4b2c      	ldr	r3, [pc, #176]	; (8002550 <HAL_TIM_Encoder_MspInit+0xe0>)
 80024a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024a6:	61bb      	str	r3, [r7, #24]
 80024a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024aa:	4b29      	ldr	r3, [pc, #164]	; (8002550 <HAL_TIM_Encoder_MspInit+0xe0>)
 80024ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ae:	4a28      	ldr	r2, [pc, #160]	; (8002550 <HAL_TIM_Encoder_MspInit+0xe0>)
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024b6:	4b26      	ldr	r3, [pc, #152]	; (8002550 <HAL_TIM_Encoder_MspInit+0xe0>)
 80024b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c8:	2302      	movs	r3, #2
 80024ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d0:	2300      	movs	r3, #0
 80024d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024d4:	2301      	movs	r3, #1
 80024d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d8:	f107 031c 	add.w	r3, r7, #28
 80024dc:	4619      	mov	r1, r3
 80024de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e2:	f000 fa61 	bl	80029a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80024e6:	e02d      	b.n	8002544 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM2)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f0:	d128      	bne.n	8002544 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024f2:	4b17      	ldr	r3, [pc, #92]	; (8002550 <HAL_TIM_Encoder_MspInit+0xe0>)
 80024f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f6:	4a16      	ldr	r2, [pc, #88]	; (8002550 <HAL_TIM_Encoder_MspInit+0xe0>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	6593      	str	r3, [r2, #88]	; 0x58
 80024fe:	4b14      	ldr	r3, [pc, #80]	; (8002550 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800250a:	4b11      	ldr	r3, [pc, #68]	; (8002550 <HAL_TIM_Encoder_MspInit+0xe0>)
 800250c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002516:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002522:	2303      	movs	r3, #3
 8002524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002526:	2302      	movs	r3, #2
 8002528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252e:	2300      	movs	r3, #0
 8002530:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002532:	2301      	movs	r3, #1
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002536:	f107 031c 	add.w	r3, r7, #28
 800253a:	4619      	mov	r1, r3
 800253c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002540:	f000 fa32 	bl	80029a8 <HAL_GPIO_Init>
}
 8002544:	bf00      	nop
 8002546:	3730      	adds	r7, #48	; 0x30
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40012c00 	.word	0x40012c00
 8002550:	40021000 	.word	0x40021000

08002554 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a0a      	ldr	r2, [pc, #40]	; (800258c <HAL_TIM_PWM_MspInit+0x38>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d10b      	bne.n	800257e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <HAL_TIM_PWM_MspInit+0x3c>)
 8002568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800256a:	4a09      	ldr	r2, [pc, #36]	; (8002590 <HAL_TIM_PWM_MspInit+0x3c>)
 800256c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002570:	6613      	str	r3, [r2, #96]	; 0x60
 8002572:	4b07      	ldr	r3, [pc, #28]	; (8002590 <HAL_TIM_PWM_MspInit+0x3c>)
 8002574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800257e:	bf00      	nop
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40014000 	.word	0x40014000
 8002590:	40021000 	.word	0x40021000

08002594 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259c:	f107 030c 	add.w	r3, r7, #12
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a11      	ldr	r2, [pc, #68]	; (80025f8 <HAL_TIM_MspPostInit+0x64>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d11c      	bne.n	80025f0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b6:	4b11      	ldr	r3, [pc, #68]	; (80025fc <HAL_TIM_MspPostInit+0x68>)
 80025b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ba:	4a10      	ldr	r2, [pc, #64]	; (80025fc <HAL_TIM_MspPostInit+0x68>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025c2:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <HAL_TIM_MspPostInit+0x68>)
 80025c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    PA3     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025ce:	230c      	movs	r3, #12
 80025d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d2:	2302      	movs	r3, #2
 80025d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025da:	2300      	movs	r3, #0
 80025dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80025de:	230e      	movs	r3, #14
 80025e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e2:	f107 030c 	add.w	r3, r7, #12
 80025e6:	4619      	mov	r1, r3
 80025e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ec:	f000 f9dc 	bl	80029a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80025f0:	bf00      	nop
 80025f2:	3720      	adds	r7, #32
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40014000 	.word	0x40014000
 80025fc:	40021000 	.word	0x40021000

08002600 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002600:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002638 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002604:	f7ff fde4 	bl	80021d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002608:	480c      	ldr	r0, [pc, #48]	; (800263c <LoopForever+0x6>)
  ldr r1, =_edata
 800260a:	490d      	ldr	r1, [pc, #52]	; (8002640 <LoopForever+0xa>)
  ldr r2, =_sidata
 800260c:	4a0d      	ldr	r2, [pc, #52]	; (8002644 <LoopForever+0xe>)
  movs r3, #0
 800260e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002610:	e002      	b.n	8002618 <LoopCopyDataInit>

08002612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002616:	3304      	adds	r3, #4

08002618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800261a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800261c:	d3f9      	bcc.n	8002612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800261e:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002620:	4c0a      	ldr	r4, [pc, #40]	; (800264c <LoopForever+0x16>)
  movs r3, #0
 8002622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002624:	e001      	b.n	800262a <LoopFillZerobss>

08002626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002628:	3204      	adds	r2, #4

0800262a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800262a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800262c:	d3fb      	bcc.n	8002626 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800262e:	f003 fadd 	bl	8005bec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002632:	f7fe fca3 	bl	8000f7c <main>

08002636 <LoopForever>:

LoopForever:
    b LoopForever
 8002636:	e7fe      	b.n	8002636 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002638:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800263c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002640:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 8002644:	080095e8 	.word	0x080095e8
  ldr r2, =_sbss
 8002648:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 800264c:	20000470 	.word	0x20000470

08002650 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002650:	e7fe      	b.n	8002650 <ADC1_IRQHandler>

08002652 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002658:	2300      	movs	r3, #0
 800265a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800265c:	2003      	movs	r0, #3
 800265e:	f000 f961 	bl	8002924 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002662:	2000      	movs	r0, #0
 8002664:	f000 f80e 	bl	8002684 <HAL_InitTick>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	71fb      	strb	r3, [r7, #7]
 8002672:	e001      	b.n	8002678 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002674:	f7ff fc82 	bl	8001f7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002678:	79fb      	ldrb	r3, [r7, #7]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002690:	4b17      	ldr	r3, [pc, #92]	; (80026f0 <HAL_InitTick+0x6c>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d023      	beq.n	80026e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002698:	4b16      	ldr	r3, [pc, #88]	; (80026f4 <HAL_InitTick+0x70>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <HAL_InitTick+0x6c>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	4619      	mov	r1, r3
 80026a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 f96d 	bl	800298e <HAL_SYSTICK_Config>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10f      	bne.n	80026da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b0f      	cmp	r3, #15
 80026be:	d809      	bhi.n	80026d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026c0:	2200      	movs	r2, #0
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	f04f 30ff 	mov.w	r0, #4294967295
 80026c8:	f000 f937 	bl	800293a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026cc:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <HAL_InitTick+0x74>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	e007      	b.n	80026e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	73fb      	strb	r3, [r7, #15]
 80026d8:	e004      	b.n	80026e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	73fb      	strb	r3, [r7, #15]
 80026de:	e001      	b.n	80026e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	200000a0 	.word	0x200000a0
 80026f4:	20000098 	.word	0x20000098
 80026f8:	2000009c 	.word	0x2000009c

080026fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002700:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_IncTick+0x20>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	461a      	mov	r2, r3
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_IncTick+0x24>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4413      	add	r3, r2
 800270c:	4a04      	ldr	r2, [pc, #16]	; (8002720 <HAL_IncTick+0x24>)
 800270e:	6013      	str	r3, [r2, #0]
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	200000a0 	.word	0x200000a0
 8002720:	2000045c 	.word	0x2000045c

08002724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return uwTick;
 8002728:	4b03      	ldr	r3, [pc, #12]	; (8002738 <HAL_GetTick+0x14>)
 800272a:	681b      	ldr	r3, [r3, #0]
}
 800272c:	4618      	mov	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	2000045c 	.word	0x2000045c

0800273c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002744:	f7ff ffee 	bl	8002724 <HAL_GetTick>
 8002748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002754:	d005      	beq.n	8002762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002756:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <HAL_Delay+0x44>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	461a      	mov	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4413      	add	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002762:	bf00      	nop
 8002764:	f7ff ffde 	bl	8002724 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	429a      	cmp	r2, r3
 8002772:	d8f7      	bhi.n	8002764 <HAL_Delay+0x28>
  {
  }
}
 8002774:	bf00      	nop
 8002776:	bf00      	nop
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	200000a0 	.word	0x200000a0

08002784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002794:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027a0:	4013      	ands	r3, r2
 80027a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027b6:	4a04      	ldr	r2, [pc, #16]	; (80027c8 <__NVIC_SetPriorityGrouping+0x44>)
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	60d3      	str	r3, [r2, #12]
}
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	e000ed00 	.word	0xe000ed00

080027cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d0:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <__NVIC_GetPriorityGrouping+0x18>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	0a1b      	lsrs	r3, r3, #8
 80027d6:	f003 0307 	and.w	r3, r3, #7
}
 80027da:	4618      	mov	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	db0b      	blt.n	8002812 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	f003 021f 	and.w	r2, r3, #31
 8002800:	4907      	ldr	r1, [pc, #28]	; (8002820 <__NVIC_EnableIRQ+0x38>)
 8002802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002806:	095b      	lsrs	r3, r3, #5
 8002808:	2001      	movs	r0, #1
 800280a:	fa00 f202 	lsl.w	r2, r0, r2
 800280e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	e000e100 	.word	0xe000e100

08002824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	6039      	str	r1, [r7, #0]
 800282e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002834:	2b00      	cmp	r3, #0
 8002836:	db0a      	blt.n	800284e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	b2da      	uxtb	r2, r3
 800283c:	490c      	ldr	r1, [pc, #48]	; (8002870 <__NVIC_SetPriority+0x4c>)
 800283e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002842:	0112      	lsls	r2, r2, #4
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	440b      	add	r3, r1
 8002848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800284c:	e00a      	b.n	8002864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	b2da      	uxtb	r2, r3
 8002852:	4908      	ldr	r1, [pc, #32]	; (8002874 <__NVIC_SetPriority+0x50>)
 8002854:	79fb      	ldrb	r3, [r7, #7]
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	3b04      	subs	r3, #4
 800285c:	0112      	lsls	r2, r2, #4
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	440b      	add	r3, r1
 8002862:	761a      	strb	r2, [r3, #24]
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	e000e100 	.word	0xe000e100
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002878:	b480      	push	{r7}
 800287a:	b089      	sub	sp, #36	; 0x24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f1c3 0307 	rsb	r3, r3, #7
 8002892:	2b04      	cmp	r3, #4
 8002894:	bf28      	it	cs
 8002896:	2304      	movcs	r3, #4
 8002898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	3304      	adds	r3, #4
 800289e:	2b06      	cmp	r3, #6
 80028a0:	d902      	bls.n	80028a8 <NVIC_EncodePriority+0x30>
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3b03      	subs	r3, #3
 80028a6:	e000      	b.n	80028aa <NVIC_EncodePriority+0x32>
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ac:	f04f 32ff 	mov.w	r2, #4294967295
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43da      	mvns	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	401a      	ands	r2, r3
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c0:	f04f 31ff 	mov.w	r1, #4294967295
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ca:	43d9      	mvns	r1, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d0:	4313      	orrs	r3, r2
         );
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3724      	adds	r7, #36	; 0x24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028f0:	d301      	bcc.n	80028f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028f2:	2301      	movs	r3, #1
 80028f4:	e00f      	b.n	8002916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028f6:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <SysTick_Config+0x40>)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028fe:	210f      	movs	r1, #15
 8002900:	f04f 30ff 	mov.w	r0, #4294967295
 8002904:	f7ff ff8e 	bl	8002824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002908:	4b05      	ldr	r3, [pc, #20]	; (8002920 <SysTick_Config+0x40>)
 800290a:	2200      	movs	r2, #0
 800290c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800290e:	4b04      	ldr	r3, [pc, #16]	; (8002920 <SysTick_Config+0x40>)
 8002910:	2207      	movs	r2, #7
 8002912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	e000e010 	.word	0xe000e010

08002924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7ff ff29 	bl	8002784 <__NVIC_SetPriorityGrouping>
}
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b086      	sub	sp, #24
 800293e:	af00      	add	r7, sp, #0
 8002940:	4603      	mov	r3, r0
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800294c:	f7ff ff3e 	bl	80027cc <__NVIC_GetPriorityGrouping>
 8002950:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	68b9      	ldr	r1, [r7, #8]
 8002956:	6978      	ldr	r0, [r7, #20]
 8002958:	f7ff ff8e 	bl	8002878 <NVIC_EncodePriority>
 800295c:	4602      	mov	r2, r0
 800295e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002962:	4611      	mov	r1, r2
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff ff5d 	bl	8002824 <__NVIC_SetPriority>
}
 800296a:	bf00      	nop
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	4603      	mov	r3, r0
 800297a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800297c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ff31 	bl	80027e8 <__NVIC_EnableIRQ>
}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff ffa2 	bl	80028e0 <SysTick_Config>
 800299c:	4603      	mov	r3, r0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029b6:	e148      	b.n	8002c4a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	2101      	movs	r1, #1
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	fa01 f303 	lsl.w	r3, r1, r3
 80029c4:	4013      	ands	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 813a 	beq.w	8002c44 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 0303 	and.w	r3, r3, #3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d005      	beq.n	80029e8 <HAL_GPIO_Init+0x40>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d130      	bne.n	8002a4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	2203      	movs	r2, #3
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4013      	ands	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a1e:	2201      	movs	r2, #1
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43db      	mvns	r3, r3
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	091b      	lsrs	r3, r3, #4
 8002a34:	f003 0201 	and.w	r2, r3, #1
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d017      	beq.n	8002a86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	2203      	movs	r2, #3
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43db      	mvns	r3, r3
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d123      	bne.n	8002ada <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	08da      	lsrs	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3208      	adds	r2, #8
 8002a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	220f      	movs	r2, #15
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	691a      	ldr	r2, [r3, #16]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	08da      	lsrs	r2, r3, #3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3208      	adds	r2, #8
 8002ad4:	6939      	ldr	r1, [r7, #16]
 8002ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43db      	mvns	r3, r3
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4013      	ands	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 0203 	and.w	r2, r3, #3
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 8094 	beq.w	8002c44 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1c:	4b52      	ldr	r3, [pc, #328]	; (8002c68 <HAL_GPIO_Init+0x2c0>)
 8002b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b20:	4a51      	ldr	r2, [pc, #324]	; (8002c68 <HAL_GPIO_Init+0x2c0>)
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	6613      	str	r3, [r2, #96]	; 0x60
 8002b28:	4b4f      	ldr	r3, [pc, #316]	; (8002c68 <HAL_GPIO_Init+0x2c0>)
 8002b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b34:	4a4d      	ldr	r2, [pc, #308]	; (8002c6c <HAL_GPIO_Init+0x2c4>)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	089b      	lsrs	r3, r3, #2
 8002b3a:	3302      	adds	r3, #2
 8002b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	220f      	movs	r2, #15
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4013      	ands	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b5e:	d00d      	beq.n	8002b7c <HAL_GPIO_Init+0x1d4>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a43      	ldr	r2, [pc, #268]	; (8002c70 <HAL_GPIO_Init+0x2c8>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d007      	beq.n	8002b78 <HAL_GPIO_Init+0x1d0>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a42      	ldr	r2, [pc, #264]	; (8002c74 <HAL_GPIO_Init+0x2cc>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d101      	bne.n	8002b74 <HAL_GPIO_Init+0x1cc>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e004      	b.n	8002b7e <HAL_GPIO_Init+0x1d6>
 8002b74:	2307      	movs	r3, #7
 8002b76:	e002      	b.n	8002b7e <HAL_GPIO_Init+0x1d6>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <HAL_GPIO_Init+0x1d6>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	f002 0203 	and.w	r2, r2, #3
 8002b84:	0092      	lsls	r2, r2, #2
 8002b86:	4093      	lsls	r3, r2
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b8e:	4937      	ldr	r1, [pc, #220]	; (8002c6c <HAL_GPIO_Init+0x2c4>)
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	089b      	lsrs	r3, r3, #2
 8002b94:	3302      	adds	r3, #2
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b9c:	4b36      	ldr	r3, [pc, #216]	; (8002c78 <HAL_GPIO_Init+0x2d0>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bc0:	4a2d      	ldr	r2, [pc, #180]	; (8002c78 <HAL_GPIO_Init+0x2d0>)
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002bc6:	4b2c      	ldr	r3, [pc, #176]	; (8002c78 <HAL_GPIO_Init+0x2d0>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bea:	4a23      	ldr	r2, [pc, #140]	; (8002c78 <HAL_GPIO_Init+0x2d0>)
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002bf0:	4b21      	ldr	r3, [pc, #132]	; (8002c78 <HAL_GPIO_Init+0x2d0>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c14:	4a18      	ldr	r2, [pc, #96]	; (8002c78 <HAL_GPIO_Init+0x2d0>)
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c1a:	4b17      	ldr	r3, [pc, #92]	; (8002c78 <HAL_GPIO_Init+0x2d0>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	43db      	mvns	r3, r3
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4013      	ands	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c3e:	4a0e      	ldr	r2, [pc, #56]	; (8002c78 <HAL_GPIO_Init+0x2d0>)
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	3301      	adds	r3, #1
 8002c48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f47f aeaf 	bne.w	80029b8 <HAL_GPIO_Init+0x10>
  }
}
 8002c5a:	bf00      	nop
 8002c5c:	bf00      	nop
 8002c5e:	371c      	adds	r7, #28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	40010000 	.word	0x40010000
 8002c70:	48000400 	.word	0x48000400
 8002c74:	48000800 	.word	0x48000800
 8002c78:	40010400 	.word	0x40010400

08002c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	460b      	mov	r3, r1
 8002c86:	807b      	strh	r3, [r7, #2]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c8c:	787b      	ldrb	r3, [r7, #1]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c92:	887a      	ldrh	r2, [r7, #2]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c98:	e002      	b.n	8002ca0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c9a:	887a      	ldrh	r2, [r7, #2]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cbe:	887a      	ldrh	r2, [r7, #2]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	041a      	lsls	r2, r3, #16
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	43d9      	mvns	r1, r3
 8002cca:	887b      	ldrh	r3, [r7, #2]
 8002ccc:	400b      	ands	r3, r1
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	619a      	str	r2, [r3, #24]
}
 8002cd4:	bf00      	nop
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002cea:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cec:	695a      	ldr	r2, [r3, #20]
 8002cee:	88fb      	ldrh	r3, [r7, #6]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d006      	beq.n	8002d04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cf6:	4a05      	ldr	r2, [pc, #20]	; (8002d0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cf8:	88fb      	ldrh	r3, [r7, #6]
 8002cfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cfc:	88fb      	ldrh	r3, [r7, #6]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe f9e8 	bl	80010d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d04:	bf00      	nop
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40010400 	.word	0x40010400

08002d10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e081      	b.n	8002e26 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fe f8c8 	bl	8000ecc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2224      	movs	r2, #36	; 0x24
 8002d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0201 	bic.w	r2, r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d107      	bne.n	8002d8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d86:	609a      	str	r2, [r3, #8]
 8002d88:	e006      	b.n	8002d98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002d96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d104      	bne.n	8002daa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002da8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6812      	ldr	r2, [r2, #0]
 8002db4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002db8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dbc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dcc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691a      	ldr	r2, [r3, #16]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	69d9      	ldr	r1, [r3, #28]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a1a      	ldr	r2, [r3, #32]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0201 	orr.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b088      	sub	sp, #32
 8002e34:	af02      	add	r7, sp, #8
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	607a      	str	r2, [r7, #4]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	817b      	strh	r3, [r7, #10]
 8002e40:	4613      	mov	r3, r2
 8002e42:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b20      	cmp	r3, #32
 8002e4e:	f040 80da 	bne.w	8003006 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_I2C_Master_Transmit+0x30>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e0d3      	b.n	8003008 <HAL_I2C_Master_Transmit+0x1d8>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e68:	f7ff fc5c 	bl	8002724 <HAL_GetTick>
 8002e6c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	2319      	movs	r3, #25
 8002e74:	2201      	movs	r2, #1
 8002e76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 fbc6 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e0be      	b.n	8003008 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2221      	movs	r2, #33	; 0x21
 8002e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2210      	movs	r2, #16
 8002e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	893a      	ldrh	r2, [r7, #8]
 8002eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2bff      	cmp	r3, #255	; 0xff
 8002eba:	d90e      	bls.n	8002eda <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	22ff      	movs	r2, #255	; 0xff
 8002ec0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	8979      	ldrh	r1, [r7, #10]
 8002eca:	4b51      	ldr	r3, [pc, #324]	; (8003010 <HAL_I2C_Master_Transmit+0x1e0>)
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 fd42 	bl	800395c <I2C_TransferConfig>
 8002ed8:	e06c      	b.n	8002fb4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	8979      	ldrh	r1, [r7, #10]
 8002eec:	4b48      	ldr	r3, [pc, #288]	; (8003010 <HAL_I2C_Master_Transmit+0x1e0>)
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f000 fd31 	bl	800395c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002efa:	e05b      	b.n	8002fb4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	6a39      	ldr	r1, [r7, #32]
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 fbc3 	bl	800368c <I2C_WaitOnTXISFlagUntilTimeout>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e07b      	b.n	8003008 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	781a      	ldrb	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d034      	beq.n	8002fb4 <HAL_I2C_Master_Transmit+0x184>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d130      	bne.n	8002fb4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	2180      	movs	r1, #128	; 0x80
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 fb55 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e04d      	b.n	8003008 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	2bff      	cmp	r3, #255	; 0xff
 8002f74:	d90e      	bls.n	8002f94 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	22ff      	movs	r2, #255	; 0xff
 8002f7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	8979      	ldrh	r1, [r7, #10]
 8002f84:	2300      	movs	r3, #0
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 fce5 	bl	800395c <I2C_TransferConfig>
 8002f92:	e00f      	b.n	8002fb4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	8979      	ldrh	r1, [r7, #10]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 fcd4 	bl	800395c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d19e      	bne.n	8002efc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	6a39      	ldr	r1, [r7, #32]
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 fba2 	bl	800370c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e01a      	b.n	8003008 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6859      	ldr	r1, [r3, #4]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <HAL_I2C_Master_Transmit+0x1e4>)
 8002fe6:	400b      	ands	r3, r1
 8002fe8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2220      	movs	r2, #32
 8002fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	e000      	b.n	8003008 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003006:	2302      	movs	r3, #2
  }
}
 8003008:	4618      	mov	r0, r3
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	80002000 	.word	0x80002000
 8003014:	fe00e800 	.word	0xfe00e800

08003018 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af02      	add	r7, sp, #8
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	4608      	mov	r0, r1
 8003022:	4611      	mov	r1, r2
 8003024:	461a      	mov	r2, r3
 8003026:	4603      	mov	r3, r0
 8003028:	817b      	strh	r3, [r7, #10]
 800302a:	460b      	mov	r3, r1
 800302c:	813b      	strh	r3, [r7, #8]
 800302e:	4613      	mov	r3, r2
 8003030:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b20      	cmp	r3, #32
 800303c:	f040 80f9 	bne.w	8003232 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <HAL_I2C_Mem_Write+0x34>
 8003046:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003048:	2b00      	cmp	r3, #0
 800304a:	d105      	bne.n	8003058 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003052:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0ed      	b.n	8003234 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <HAL_I2C_Mem_Write+0x4e>
 8003062:	2302      	movs	r3, #2
 8003064:	e0e6      	b.n	8003234 <HAL_I2C_Mem_Write+0x21c>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800306e:	f7ff fb59 	bl	8002724 <HAL_GetTick>
 8003072:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	2319      	movs	r3, #25
 800307a:	2201      	movs	r2, #1
 800307c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 fac3 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0d1      	b.n	8003234 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2221      	movs	r2, #33	; 0x21
 8003094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2240      	movs	r2, #64	; 0x40
 800309c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6a3a      	ldr	r2, [r7, #32]
 80030aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030b8:	88f8      	ldrh	r0, [r7, #6]
 80030ba:	893a      	ldrh	r2, [r7, #8]
 80030bc:	8979      	ldrh	r1, [r7, #10]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	9301      	str	r3, [sp, #4]
 80030c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	4603      	mov	r3, r0
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 f9d3 	bl	8003474 <I2C_RequestMemoryWrite>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d005      	beq.n	80030e0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0a9      	b.n	8003234 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2bff      	cmp	r3, #255	; 0xff
 80030e8:	d90e      	bls.n	8003108 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	22ff      	movs	r2, #255	; 0xff
 80030ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	8979      	ldrh	r1, [r7, #10]
 80030f8:	2300      	movs	r3, #0
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 fc2b 	bl	800395c <I2C_TransferConfig>
 8003106:	e00f      	b.n	8003128 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003116:	b2da      	uxtb	r2, r3
 8003118:	8979      	ldrh	r1, [r7, #10]
 800311a:	2300      	movs	r3, #0
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 fc1a 	bl	800395c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 faad 	bl	800368c <I2C_WaitOnTXISFlagUntilTimeout>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e07b      	b.n	8003234 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	781a      	ldrb	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003156:	b29b      	uxth	r3, r3
 8003158:	3b01      	subs	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d034      	beq.n	80031e0 <HAL_I2C_Mem_Write+0x1c8>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317a:	2b00      	cmp	r3, #0
 800317c:	d130      	bne.n	80031e0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003184:	2200      	movs	r2, #0
 8003186:	2180      	movs	r1, #128	; 0x80
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 fa3f 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e04d      	b.n	8003234 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319c:	b29b      	uxth	r3, r3
 800319e:	2bff      	cmp	r3, #255	; 0xff
 80031a0:	d90e      	bls.n	80031c0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	22ff      	movs	r2, #255	; 0xff
 80031a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	8979      	ldrh	r1, [r7, #10]
 80031b0:	2300      	movs	r3, #0
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 fbcf 	bl	800395c <I2C_TransferConfig>
 80031be:	e00f      	b.n	80031e0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	8979      	ldrh	r1, [r7, #10]
 80031d2:	2300      	movs	r3, #0
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 fbbe 	bl	800395c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d19e      	bne.n	8003128 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 fa8c 	bl	800370c <I2C_WaitOnSTOPFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e01a      	b.n	8003234 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2220      	movs	r2, #32
 8003204:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6859      	ldr	r1, [r3, #4]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	4b0a      	ldr	r3, [pc, #40]	; (800323c <HAL_I2C_Mem_Write+0x224>)
 8003212:	400b      	ands	r3, r1
 8003214:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2220      	movs	r2, #32
 800321a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800322e:	2300      	movs	r3, #0
 8003230:	e000      	b.n	8003234 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003232:	2302      	movs	r3, #2
  }
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	fe00e800 	.word	0xfe00e800

08003240 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	4608      	mov	r0, r1
 800324a:	4611      	mov	r1, r2
 800324c:	461a      	mov	r2, r3
 800324e:	4603      	mov	r3, r0
 8003250:	817b      	strh	r3, [r7, #10]
 8003252:	460b      	mov	r3, r1
 8003254:	813b      	strh	r3, [r7, #8]
 8003256:	4613      	mov	r3, r2
 8003258:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b20      	cmp	r3, #32
 8003264:	f040 80fd 	bne.w	8003462 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <HAL_I2C_Mem_Read+0x34>
 800326e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003270:	2b00      	cmp	r3, #0
 8003272:	d105      	bne.n	8003280 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800327a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e0f1      	b.n	8003464 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_I2C_Mem_Read+0x4e>
 800328a:	2302      	movs	r3, #2
 800328c:	e0ea      	b.n	8003464 <HAL_I2C_Mem_Read+0x224>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003296:	f7ff fa45 	bl	8002724 <HAL_GetTick>
 800329a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	2319      	movs	r3, #25
 80032a2:	2201      	movs	r2, #1
 80032a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 f9af 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0d5      	b.n	8003464 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2222      	movs	r2, #34	; 0x22
 80032bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2240      	movs	r2, #64	; 0x40
 80032c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6a3a      	ldr	r2, [r7, #32]
 80032d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032e0:	88f8      	ldrh	r0, [r7, #6]
 80032e2:	893a      	ldrh	r2, [r7, #8]
 80032e4:	8979      	ldrh	r1, [r7, #10]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	9301      	str	r3, [sp, #4]
 80032ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	4603      	mov	r3, r0
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 f913 	bl	800351c <I2C_RequestMemoryRead>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0ad      	b.n	8003464 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330c:	b29b      	uxth	r3, r3
 800330e:	2bff      	cmp	r3, #255	; 0xff
 8003310:	d90e      	bls.n	8003330 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	22ff      	movs	r2, #255	; 0xff
 8003316:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331c:	b2da      	uxtb	r2, r3
 800331e:	8979      	ldrh	r1, [r7, #10]
 8003320:	4b52      	ldr	r3, [pc, #328]	; (800346c <HAL_I2C_Mem_Read+0x22c>)
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 fb17 	bl	800395c <I2C_TransferConfig>
 800332e:	e00f      	b.n	8003350 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333e:	b2da      	uxtb	r2, r3
 8003340:	8979      	ldrh	r1, [r7, #10]
 8003342:	4b4a      	ldr	r3, [pc, #296]	; (800346c <HAL_I2C_Mem_Read+0x22c>)
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 fb06 	bl	800395c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003356:	2200      	movs	r2, #0
 8003358:	2104      	movs	r1, #4
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 f956 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e07c      	b.n	8003464 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003386:	3b01      	subs	r3, #1
 8003388:	b29a      	uxth	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003392:	b29b      	uxth	r3, r3
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d034      	beq.n	8003410 <HAL_I2C_Mem_Read+0x1d0>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d130      	bne.n	8003410 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b4:	2200      	movs	r2, #0
 80033b6:	2180      	movs	r1, #128	; 0x80
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 f927 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e04d      	b.n	8003464 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2bff      	cmp	r3, #255	; 0xff
 80033d0:	d90e      	bls.n	80033f0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	22ff      	movs	r2, #255	; 0xff
 80033d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	8979      	ldrh	r1, [r7, #10]
 80033e0:	2300      	movs	r3, #0
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 fab7 	bl	800395c <I2C_TransferConfig>
 80033ee:	e00f      	b.n	8003410 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	8979      	ldrh	r1, [r7, #10]
 8003402:	2300      	movs	r3, #0
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 faa6 	bl	800395c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003414:	b29b      	uxth	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d19a      	bne.n	8003350 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 f974 	bl	800370c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e01a      	b.n	8003464 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2220      	movs	r2, #32
 8003434:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6859      	ldr	r1, [r3, #4]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <HAL_I2C_Mem_Read+0x230>)
 8003442:	400b      	ands	r3, r1
 8003444:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2220      	movs	r2, #32
 800344a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	e000      	b.n	8003464 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003462:	2302      	movs	r3, #2
  }
}
 8003464:	4618      	mov	r0, r3
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	80002400 	.word	0x80002400
 8003470:	fe00e800 	.word	0xfe00e800

08003474 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af02      	add	r7, sp, #8
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	4608      	mov	r0, r1
 800347e:	4611      	mov	r1, r2
 8003480:	461a      	mov	r2, r3
 8003482:	4603      	mov	r3, r0
 8003484:	817b      	strh	r3, [r7, #10]
 8003486:	460b      	mov	r3, r1
 8003488:	813b      	strh	r3, [r7, #8]
 800348a:	4613      	mov	r3, r2
 800348c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	b2da      	uxtb	r2, r3
 8003492:	8979      	ldrh	r1, [r7, #10]
 8003494:	4b20      	ldr	r3, [pc, #128]	; (8003518 <I2C_RequestMemoryWrite+0xa4>)
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 fa5d 	bl	800395c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034a2:	69fa      	ldr	r2, [r7, #28]
 80034a4:	69b9      	ldr	r1, [r7, #24]
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 f8f0 	bl	800368c <I2C_WaitOnTXISFlagUntilTimeout>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e02c      	b.n	8003510 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d105      	bne.n	80034c8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034bc:	893b      	ldrh	r3, [r7, #8]
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	629a      	str	r2, [r3, #40]	; 0x28
 80034c6:	e015      	b.n	80034f4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80034c8:	893b      	ldrh	r3, [r7, #8]
 80034ca:	0a1b      	lsrs	r3, r3, #8
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034d6:	69fa      	ldr	r2, [r7, #28]
 80034d8:	69b9      	ldr	r1, [r7, #24]
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f8d6 	bl	800368c <I2C_WaitOnTXISFlagUntilTimeout>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e012      	b.n	8003510 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034ea:	893b      	ldrh	r3, [r7, #8]
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	2200      	movs	r2, #0
 80034fc:	2180      	movs	r1, #128	; 0x80
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 f884 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	80002000 	.word	0x80002000

0800351c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af02      	add	r7, sp, #8
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	4608      	mov	r0, r1
 8003526:	4611      	mov	r1, r2
 8003528:	461a      	mov	r2, r3
 800352a:	4603      	mov	r3, r0
 800352c:	817b      	strh	r3, [r7, #10]
 800352e:	460b      	mov	r3, r1
 8003530:	813b      	strh	r3, [r7, #8]
 8003532:	4613      	mov	r3, r2
 8003534:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003536:	88fb      	ldrh	r3, [r7, #6]
 8003538:	b2da      	uxtb	r2, r3
 800353a:	8979      	ldrh	r1, [r7, #10]
 800353c:	4b20      	ldr	r3, [pc, #128]	; (80035c0 <I2C_RequestMemoryRead+0xa4>)
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	2300      	movs	r3, #0
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 fa0a 	bl	800395c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003548:	69fa      	ldr	r2, [r7, #28]
 800354a:	69b9      	ldr	r1, [r7, #24]
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 f89d 	bl	800368c <I2C_WaitOnTXISFlagUntilTimeout>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e02c      	b.n	80035b6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d105      	bne.n	800356e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003562:	893b      	ldrh	r3, [r7, #8]
 8003564:	b2da      	uxtb	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	629a      	str	r2, [r3, #40]	; 0x28
 800356c:	e015      	b.n	800359a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800356e:	893b      	ldrh	r3, [r7, #8]
 8003570:	0a1b      	lsrs	r3, r3, #8
 8003572:	b29b      	uxth	r3, r3
 8003574:	b2da      	uxtb	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800357c:	69fa      	ldr	r2, [r7, #28]
 800357e:	69b9      	ldr	r1, [r7, #24]
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f883 	bl	800368c <I2C_WaitOnTXISFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e012      	b.n	80035b6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003590:	893b      	ldrh	r3, [r7, #8]
 8003592:	b2da      	uxtb	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	2200      	movs	r2, #0
 80035a2:	2140      	movs	r1, #64	; 0x40
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 f831 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e000      	b.n	80035b6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	80002000 	.word	0x80002000

080035c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d103      	bne.n	80035e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2200      	movs	r2, #0
 80035e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d007      	beq.n	8003600 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699a      	ldr	r2, [r3, #24]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0201 	orr.w	r2, r2, #1
 80035fe:	619a      	str	r2, [r3, #24]
  }
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	603b      	str	r3, [r7, #0]
 8003618:	4613      	mov	r3, r2
 800361a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800361c:	e022      	b.n	8003664 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003624:	d01e      	beq.n	8003664 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003626:	f7ff f87d 	bl	8002724 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d302      	bcc.n	800363c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d113      	bne.n	8003664 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003640:	f043 0220 	orr.w	r2, r3, #32
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e00f      	b.n	8003684 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699a      	ldr	r2, [r3, #24]
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	4013      	ands	r3, r2
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	429a      	cmp	r2, r3
 8003672:	bf0c      	ite	eq
 8003674:	2301      	moveq	r3, #1
 8003676:	2300      	movne	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	461a      	mov	r2, r3
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	429a      	cmp	r2, r3
 8003680:	d0cd      	beq.n	800361e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003698:	e02c      	b.n	80036f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	68b9      	ldr	r1, [r7, #8]
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f870 	bl	8003784 <I2C_IsErrorOccurred>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e02a      	b.n	8003704 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b4:	d01e      	beq.n	80036f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b6:	f7ff f835 	bl	8002724 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d302      	bcc.n	80036cc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d113      	bne.n	80036f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d0:	f043 0220 	orr.w	r2, r3, #32
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2220      	movs	r2, #32
 80036dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e007      	b.n	8003704 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d1cb      	bne.n	800369a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003718:	e028      	b.n	800376c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	68b9      	ldr	r1, [r7, #8]
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 f830 	bl	8003784 <I2C_IsErrorOccurred>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e026      	b.n	800377c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372e:	f7fe fff9 	bl	8002724 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	429a      	cmp	r2, r3
 800373c:	d302      	bcc.n	8003744 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d113      	bne.n	800376c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003748:	f043 0220 	orr.w	r2, r3, #32
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e007      	b.n	800377c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	f003 0320 	and.w	r3, r3, #32
 8003776:	2b20      	cmp	r3, #32
 8003778:	d1cf      	bne.n	800371a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08a      	sub	sp, #40	; 0x28
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003790:	2300      	movs	r3, #0
 8003792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800379e:	2300      	movs	r3, #0
 80037a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	f003 0310 	and.w	r3, r3, #16
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d075      	beq.n	800389c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2210      	movs	r2, #16
 80037b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037b8:	e056      	b.n	8003868 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c0:	d052      	beq.n	8003868 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037c2:	f7fe ffaf 	bl	8002724 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d302      	bcc.n	80037d8 <I2C_IsErrorOccurred+0x54>
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d147      	bne.n	8003868 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037fa:	d12e      	bne.n	800385a <I2C_IsErrorOccurred+0xd6>
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003802:	d02a      	beq.n	800385a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003804:	7cfb      	ldrb	r3, [r7, #19]
 8003806:	2b20      	cmp	r3, #32
 8003808:	d027      	beq.n	800385a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003818:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800381a:	f7fe ff83 	bl	8002724 <HAL_GetTick>
 800381e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003820:	e01b      	b.n	800385a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003822:	f7fe ff7f 	bl	8002724 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b19      	cmp	r3, #25
 800382e:	d914      	bls.n	800385a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003834:	f043 0220 	orr.w	r2, r3, #32
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	2b20      	cmp	r3, #32
 8003866:	d1dc      	bne.n	8003822 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	f003 0320 	and.w	r3, r3, #32
 8003872:	2b20      	cmp	r3, #32
 8003874:	d003      	beq.n	800387e <I2C_IsErrorOccurred+0xfa>
 8003876:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800387a:	2b00      	cmp	r3, #0
 800387c:	d09d      	beq.n	80037ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800387e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003882:	2b00      	cmp	r3, #0
 8003884:	d103      	bne.n	800388e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2220      	movs	r2, #32
 800388c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	f043 0304 	orr.w	r3, r3, #4
 8003894:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00b      	beq.n	80038c6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	f043 0301 	orr.w	r3, r3, #1
 80038b4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00b      	beq.n	80038e8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	f043 0308 	orr.w	r3, r3, #8
 80038d6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00b      	beq.n	800390a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	f043 0302 	orr.w	r3, r3, #2
 80038f8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003902:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800390a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800390e:	2b00      	cmp	r3, #0
 8003910:	d01c      	beq.n	800394c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f7ff fe56 	bl	80035c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6859      	ldr	r1, [r3, #4]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	4b0d      	ldr	r3, [pc, #52]	; (8003958 <I2C_IsErrorOccurred+0x1d4>)
 8003924:	400b      	ands	r3, r1
 8003926:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	431a      	orrs	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2220      	movs	r2, #32
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800394c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003950:	4618      	mov	r0, r3
 8003952:	3728      	adds	r7, #40	; 0x28
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	fe00e800 	.word	0xfe00e800

0800395c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	607b      	str	r3, [r7, #4]
 8003966:	460b      	mov	r3, r1
 8003968:	817b      	strh	r3, [r7, #10]
 800396a:	4613      	mov	r3, r2
 800396c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800396e:	897b      	ldrh	r3, [r7, #10]
 8003970:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003974:	7a7b      	ldrb	r3, [r7, #9]
 8003976:	041b      	lsls	r3, r3, #16
 8003978:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800397c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	4313      	orrs	r3, r2
 8003986:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800398a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	0d5b      	lsrs	r3, r3, #21
 8003996:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800399a:	4b08      	ldr	r3, [pc, #32]	; (80039bc <I2C_TransferConfig+0x60>)
 800399c:	430b      	orrs	r3, r1
 800399e:	43db      	mvns	r3, r3
 80039a0:	ea02 0103 	and.w	r1, r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80039ae:	bf00      	nop
 80039b0:	371c      	adds	r7, #28
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	03ff63ff 	.word	0x03ff63ff

080039c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b20      	cmp	r3, #32
 80039d4:	d138      	bne.n	8003a48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e032      	b.n	8003a4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2224      	movs	r2, #36	; 0x24
 80039f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0201 	bic.w	r2, r2, #1
 8003a02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6819      	ldr	r1, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f042 0201 	orr.w	r2, r2, #1
 8003a32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	e000      	b.n	8003a4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a48:	2302      	movs	r3, #2
  }
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b085      	sub	sp, #20
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b20      	cmp	r3, #32
 8003a6a:	d139      	bne.n	8003ae0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e033      	b.n	8003ae2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2224      	movs	r2, #36	; 0x24
 8003a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0201 	bic.w	r2, r2, #1
 8003a98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003aa8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	021b      	lsls	r3, r3, #8
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0201 	orr.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	e000      	b.n	8003ae2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ae0:	2302      	movs	r3, #2
  }
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
	...

08003af0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003af4:	4b04      	ldr	r3, [pc, #16]	; (8003b08 <HAL_PWREx_GetVoltageRange+0x18>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	40007000 	.word	0x40007000

08003b0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b1a:	d130      	bne.n	8003b7e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b1c:	4b23      	ldr	r3, [pc, #140]	; (8003bac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b28:	d038      	beq.n	8003b9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b2a:	4b20      	ldr	r3, [pc, #128]	; (8003bac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b32:	4a1e      	ldr	r2, [pc, #120]	; (8003bac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b38:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b3a:	4b1d      	ldr	r3, [pc, #116]	; (8003bb0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2232      	movs	r2, #50	; 0x32
 8003b40:	fb02 f303 	mul.w	r3, r2, r3
 8003b44:	4a1b      	ldr	r2, [pc, #108]	; (8003bb4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003b46:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4a:	0c9b      	lsrs	r3, r3, #18
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b50:	e002      	b.n	8003b58 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	3b01      	subs	r3, #1
 8003b56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b58:	4b14      	ldr	r3, [pc, #80]	; (8003bac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b64:	d102      	bne.n	8003b6c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1f2      	bne.n	8003b52 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b6c:	4b0f      	ldr	r3, [pc, #60]	; (8003bac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b78:	d110      	bne.n	8003b9c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e00f      	b.n	8003b9e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b7e:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b8a:	d007      	beq.n	8003b9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b8c:	4b07      	ldr	r3, [pc, #28]	; (8003bac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b94:	4a05      	ldr	r2, [pc, #20]	; (8003bac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	40007000 	.word	0x40007000
 8003bb0:	20000098 	.word	0x20000098
 8003bb4:	431bde83 	.word	0x431bde83

08003bb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d102      	bne.n	8003bcc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	f000 bc02 	b.w	80043d0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bcc:	4b96      	ldr	r3, [pc, #600]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 030c 	and.w	r3, r3, #12
 8003bd4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bd6:	4b94      	ldr	r3, [pc, #592]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0310 	and.w	r3, r3, #16
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 80e4 	beq.w	8003db6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d007      	beq.n	8003c04 <HAL_RCC_OscConfig+0x4c>
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	2b0c      	cmp	r3, #12
 8003bf8:	f040 808b 	bne.w	8003d12 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	f040 8087 	bne.w	8003d12 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c04:	4b88      	ldr	r3, [pc, #544]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d005      	beq.n	8003c1c <HAL_RCC_OscConfig+0x64>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e3d9      	b.n	80043d0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1a      	ldr	r2, [r3, #32]
 8003c20:	4b81      	ldr	r3, [pc, #516]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d004      	beq.n	8003c36 <HAL_RCC_OscConfig+0x7e>
 8003c2c:	4b7e      	ldr	r3, [pc, #504]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c34:	e005      	b.n	8003c42 <HAL_RCC_OscConfig+0x8a>
 8003c36:	4b7c      	ldr	r3, [pc, #496]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c3c:	091b      	lsrs	r3, r3, #4
 8003c3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d223      	bcs.n	8003c8e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 fd54 	bl	80046f8 <RCC_SetFlashLatencyFromMSIRange>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e3ba      	b.n	80043d0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c5a:	4b73      	ldr	r3, [pc, #460]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a72      	ldr	r2, [pc, #456]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003c60:	f043 0308 	orr.w	r3, r3, #8
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	4b70      	ldr	r3, [pc, #448]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	496d      	ldr	r1, [pc, #436]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c78:	4b6b      	ldr	r3, [pc, #428]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	021b      	lsls	r3, r3, #8
 8003c86:	4968      	ldr	r1, [pc, #416]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	604b      	str	r3, [r1, #4]
 8003c8c:	e025      	b.n	8003cda <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c8e:	4b66      	ldr	r3, [pc, #408]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a65      	ldr	r2, [pc, #404]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003c94:	f043 0308 	orr.w	r3, r3, #8
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	4b63      	ldr	r3, [pc, #396]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	4960      	ldr	r1, [pc, #384]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cac:	4b5e      	ldr	r3, [pc, #376]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	021b      	lsls	r3, r3, #8
 8003cba:	495b      	ldr	r1, [pc, #364]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d109      	bne.n	8003cda <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 fd14 	bl	80046f8 <RCC_SetFlashLatencyFromMSIRange>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e37a      	b.n	80043d0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cda:	f000 fc81 	bl	80045e0 <HAL_RCC_GetSysClockFreq>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	4b51      	ldr	r3, [pc, #324]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	091b      	lsrs	r3, r3, #4
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	4950      	ldr	r1, [pc, #320]	; (8003e2c <HAL_RCC_OscConfig+0x274>)
 8003cec:	5ccb      	ldrb	r3, [r1, r3]
 8003cee:	f003 031f 	and.w	r3, r3, #31
 8003cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf6:	4a4e      	ldr	r2, [pc, #312]	; (8003e30 <HAL_RCC_OscConfig+0x278>)
 8003cf8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003cfa:	4b4e      	ldr	r3, [pc, #312]	; (8003e34 <HAL_RCC_OscConfig+0x27c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fe fcc0 	bl	8002684 <HAL_InitTick>
 8003d04:	4603      	mov	r3, r0
 8003d06:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d052      	beq.n	8003db4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003d0e:	7bfb      	ldrb	r3, [r7, #15]
 8003d10:	e35e      	b.n	80043d0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d032      	beq.n	8003d80 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d1a:	4b43      	ldr	r3, [pc, #268]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a42      	ldr	r2, [pc, #264]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d26:	f7fe fcfd 	bl	8002724 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d2e:	f7fe fcf9 	bl	8002724 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e347      	b.n	80043d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d40:	4b39      	ldr	r3, [pc, #228]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0f0      	beq.n	8003d2e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d4c:	4b36      	ldr	r3, [pc, #216]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a35      	ldr	r2, [pc, #212]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003d52:	f043 0308 	orr.w	r3, r3, #8
 8003d56:	6013      	str	r3, [r2, #0]
 8003d58:	4b33      	ldr	r3, [pc, #204]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	4930      	ldr	r1, [pc, #192]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d6a:	4b2f      	ldr	r3, [pc, #188]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	021b      	lsls	r3, r3, #8
 8003d78:	492b      	ldr	r1, [pc, #172]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	604b      	str	r3, [r1, #4]
 8003d7e:	e01a      	b.n	8003db6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d80:	4b29      	ldr	r3, [pc, #164]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a28      	ldr	r2, [pc, #160]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003d86:	f023 0301 	bic.w	r3, r3, #1
 8003d8a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d8c:	f7fe fcca 	bl	8002724 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d94:	f7fe fcc6 	bl	8002724 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e314      	b.n	80043d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003da6:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1f0      	bne.n	8003d94 <HAL_RCC_OscConfig+0x1dc>
 8003db2:	e000      	b.n	8003db6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003db4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d073      	beq.n	8003eaa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d005      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x21c>
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	2b0c      	cmp	r3, #12
 8003dcc:	d10e      	bne.n	8003dec <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d10b      	bne.n	8003dec <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd4:	4b14      	ldr	r3, [pc, #80]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d063      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x2f0>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d15f      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e2f1      	b.n	80043d0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df4:	d106      	bne.n	8003e04 <HAL_RCC_OscConfig+0x24c>
 8003df6:	4b0c      	ldr	r3, [pc, #48]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a0b      	ldr	r2, [pc, #44]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e00:	6013      	str	r3, [r2, #0]
 8003e02:	e025      	b.n	8003e50 <HAL_RCC_OscConfig+0x298>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e0c:	d114      	bne.n	8003e38 <HAL_RCC_OscConfig+0x280>
 8003e0e:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a05      	ldr	r2, [pc, #20]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	4b03      	ldr	r3, [pc, #12]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a02      	ldr	r2, [pc, #8]	; (8003e28 <HAL_RCC_OscConfig+0x270>)
 8003e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	e013      	b.n	8003e50 <HAL_RCC_OscConfig+0x298>
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	08009150 	.word	0x08009150
 8003e30:	20000098 	.word	0x20000098
 8003e34:	2000009c 	.word	0x2000009c
 8003e38:	4ba0      	ldr	r3, [pc, #640]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a9f      	ldr	r2, [pc, #636]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 8003e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e42:	6013      	str	r3, [r2, #0]
 8003e44:	4b9d      	ldr	r3, [pc, #628]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a9c      	ldr	r2, [pc, #624]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 8003e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d013      	beq.n	8003e80 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e58:	f7fe fc64 	bl	8002724 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e60:	f7fe fc60 	bl	8002724 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b64      	cmp	r3, #100	; 0x64
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e2ae      	b.n	80043d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e72:	4b92      	ldr	r3, [pc, #584]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f0      	beq.n	8003e60 <HAL_RCC_OscConfig+0x2a8>
 8003e7e:	e014      	b.n	8003eaa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e80:	f7fe fc50 	bl	8002724 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e88:	f7fe fc4c 	bl	8002724 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b64      	cmp	r3, #100	; 0x64
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e29a      	b.n	80043d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e9a:	4b88      	ldr	r3, [pc, #544]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f0      	bne.n	8003e88 <HAL_RCC_OscConfig+0x2d0>
 8003ea6:	e000      	b.n	8003eaa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d060      	beq.n	8003f78 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d005      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x310>
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	2b0c      	cmp	r3, #12
 8003ec0:	d119      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d116      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ec8:	4b7c      	ldr	r3, [pc, #496]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x328>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e277      	b.n	80043d0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee0:	4b76      	ldr	r3, [pc, #472]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	061b      	lsls	r3, r3, #24
 8003eee:	4973      	ldr	r1, [pc, #460]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ef4:	e040      	b.n	8003f78 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d023      	beq.n	8003f46 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003efe:	4b6f      	ldr	r3, [pc, #444]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a6e      	ldr	r2, [pc, #440]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 8003f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0a:	f7fe fc0b 	bl	8002724 <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f12:	f7fe fc07 	bl	8002724 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e255      	b.n	80043d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f24:	4b65      	ldr	r3, [pc, #404]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0f0      	beq.n	8003f12 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f30:	4b62      	ldr	r3, [pc, #392]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	061b      	lsls	r3, r3, #24
 8003f3e:	495f      	ldr	r1, [pc, #380]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	604b      	str	r3, [r1, #4]
 8003f44:	e018      	b.n	8003f78 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f46:	4b5d      	ldr	r3, [pc, #372]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a5c      	ldr	r2, [pc, #368]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 8003f4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f52:	f7fe fbe7 	bl	8002724 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f5a:	f7fe fbe3 	bl	8002724 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e231      	b.n	80043d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f6c:	4b53      	ldr	r3, [pc, #332]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1f0      	bne.n	8003f5a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d03c      	beq.n	8003ffe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d01c      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f8c:	4b4b      	ldr	r3, [pc, #300]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 8003f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f92:	4a4a      	ldr	r2, [pc, #296]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 8003f94:	f043 0301 	orr.w	r3, r3, #1
 8003f98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f9c:	f7fe fbc2 	bl	8002724 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fa4:	f7fe fbbe 	bl	8002724 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e20c      	b.n	80043d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fb6:	4b41      	ldr	r3, [pc, #260]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 8003fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0ef      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x3ec>
 8003fc4:	e01b      	b.n	8003ffe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fc6:	4b3d      	ldr	r3, [pc, #244]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 8003fc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fcc:	4a3b      	ldr	r2, [pc, #236]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 8003fce:	f023 0301 	bic.w	r3, r3, #1
 8003fd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd6:	f7fe fba5 	bl	8002724 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fde:	f7fe fba1 	bl	8002724 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e1ef      	b.n	80043d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ff0:	4b32      	ldr	r3, [pc, #200]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 8003ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1ef      	bne.n	8003fde <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0304 	and.w	r3, r3, #4
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 80a6 	beq.w	8004158 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800400c:	2300      	movs	r3, #0
 800400e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004010:	4b2a      	ldr	r3, [pc, #168]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 8004012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10d      	bne.n	8004038 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800401c:	4b27      	ldr	r3, [pc, #156]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 800401e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004020:	4a26      	ldr	r2, [pc, #152]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 8004022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004026:	6593      	str	r3, [r2, #88]	; 0x58
 8004028:	4b24      	ldr	r3, [pc, #144]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 800402a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004034:	2301      	movs	r3, #1
 8004036:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004038:	4b21      	ldr	r3, [pc, #132]	; (80040c0 <HAL_RCC_OscConfig+0x508>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d118      	bne.n	8004076 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004044:	4b1e      	ldr	r3, [pc, #120]	; (80040c0 <HAL_RCC_OscConfig+0x508>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a1d      	ldr	r2, [pc, #116]	; (80040c0 <HAL_RCC_OscConfig+0x508>)
 800404a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800404e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004050:	f7fe fb68 	bl	8002724 <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004058:	f7fe fb64 	bl	8002724 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e1b2      	b.n	80043d0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800406a:	4b15      	ldr	r3, [pc, #84]	; (80040c0 <HAL_RCC_OscConfig+0x508>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0f0      	beq.n	8004058 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d108      	bne.n	8004090 <HAL_RCC_OscConfig+0x4d8>
 800407e:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 8004080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004084:	4a0d      	ldr	r2, [pc, #52]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 8004086:	f043 0301 	orr.w	r3, r3, #1
 800408a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800408e:	e029      	b.n	80040e4 <HAL_RCC_OscConfig+0x52c>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	2b05      	cmp	r3, #5
 8004096:	d115      	bne.n	80040c4 <HAL_RCC_OscConfig+0x50c>
 8004098:	4b08      	ldr	r3, [pc, #32]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 800409a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409e:	4a07      	ldr	r2, [pc, #28]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 80040a0:	f043 0304 	orr.w	r3, r3, #4
 80040a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040a8:	4b04      	ldr	r3, [pc, #16]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 80040aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ae:	4a03      	ldr	r2, [pc, #12]	; (80040bc <HAL_RCC_OscConfig+0x504>)
 80040b0:	f043 0301 	orr.w	r3, r3, #1
 80040b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040b8:	e014      	b.n	80040e4 <HAL_RCC_OscConfig+0x52c>
 80040ba:	bf00      	nop
 80040bc:	40021000 	.word	0x40021000
 80040c0:	40007000 	.word	0x40007000
 80040c4:	4b9a      	ldr	r3, [pc, #616]	; (8004330 <HAL_RCC_OscConfig+0x778>)
 80040c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ca:	4a99      	ldr	r2, [pc, #612]	; (8004330 <HAL_RCC_OscConfig+0x778>)
 80040cc:	f023 0301 	bic.w	r3, r3, #1
 80040d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040d4:	4b96      	ldr	r3, [pc, #600]	; (8004330 <HAL_RCC_OscConfig+0x778>)
 80040d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040da:	4a95      	ldr	r2, [pc, #596]	; (8004330 <HAL_RCC_OscConfig+0x778>)
 80040dc:	f023 0304 	bic.w	r3, r3, #4
 80040e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d016      	beq.n	800411a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ec:	f7fe fb1a 	bl	8002724 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040f2:	e00a      	b.n	800410a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f4:	f7fe fb16 	bl	8002724 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004102:	4293      	cmp	r3, r2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e162      	b.n	80043d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800410a:	4b89      	ldr	r3, [pc, #548]	; (8004330 <HAL_RCC_OscConfig+0x778>)
 800410c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0ed      	beq.n	80040f4 <HAL_RCC_OscConfig+0x53c>
 8004118:	e015      	b.n	8004146 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800411a:	f7fe fb03 	bl	8002724 <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004120:	e00a      	b.n	8004138 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004122:	f7fe faff 	bl	8002724 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004130:	4293      	cmp	r3, r2
 8004132:	d901      	bls.n	8004138 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e14b      	b.n	80043d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004138:	4b7d      	ldr	r3, [pc, #500]	; (8004330 <HAL_RCC_OscConfig+0x778>)
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1ed      	bne.n	8004122 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004146:	7ffb      	ldrb	r3, [r7, #31]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d105      	bne.n	8004158 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800414c:	4b78      	ldr	r3, [pc, #480]	; (8004330 <HAL_RCC_OscConfig+0x778>)
 800414e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004150:	4a77      	ldr	r2, [pc, #476]	; (8004330 <HAL_RCC_OscConfig+0x778>)
 8004152:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004156:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0320 	and.w	r3, r3, #32
 8004160:	2b00      	cmp	r3, #0
 8004162:	d03c      	beq.n	80041de <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	2b00      	cmp	r3, #0
 800416a:	d01c      	beq.n	80041a6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800416c:	4b70      	ldr	r3, [pc, #448]	; (8004330 <HAL_RCC_OscConfig+0x778>)
 800416e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004172:	4a6f      	ldr	r2, [pc, #444]	; (8004330 <HAL_RCC_OscConfig+0x778>)
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417c:	f7fe fad2 	bl	8002724 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004184:	f7fe face 	bl	8002724 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e11c      	b.n	80043d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004196:	4b66      	ldr	r3, [pc, #408]	; (8004330 <HAL_RCC_OscConfig+0x778>)
 8004198:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0ef      	beq.n	8004184 <HAL_RCC_OscConfig+0x5cc>
 80041a4:	e01b      	b.n	80041de <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041a6:	4b62      	ldr	r3, [pc, #392]	; (8004330 <HAL_RCC_OscConfig+0x778>)
 80041a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041ac:	4a60      	ldr	r2, [pc, #384]	; (8004330 <HAL_RCC_OscConfig+0x778>)
 80041ae:	f023 0301 	bic.w	r3, r3, #1
 80041b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b6:	f7fe fab5 	bl	8002724 <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041bc:	e008      	b.n	80041d0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041be:	f7fe fab1 	bl	8002724 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e0ff      	b.n	80043d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041d0:	4b57      	ldr	r3, [pc, #348]	; (8004330 <HAL_RCC_OscConfig+0x778>)
 80041d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1ef      	bne.n	80041be <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 80f3 	beq.w	80043ce <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	f040 80c9 	bne.w	8004384 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80041f2:	4b4f      	ldr	r3, [pc, #316]	; (8004330 <HAL_RCC_OscConfig+0x778>)
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f003 0203 	and.w	r2, r3, #3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004202:	429a      	cmp	r2, r3
 8004204:	d12c      	bne.n	8004260 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004210:	3b01      	subs	r3, #1
 8004212:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004214:	429a      	cmp	r2, r3
 8004216:	d123      	bne.n	8004260 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004222:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004224:	429a      	cmp	r2, r3
 8004226:	d11b      	bne.n	8004260 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004232:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004234:	429a      	cmp	r2, r3
 8004236:	d113      	bne.n	8004260 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004242:	085b      	lsrs	r3, r3, #1
 8004244:	3b01      	subs	r3, #1
 8004246:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004248:	429a      	cmp	r2, r3
 800424a:	d109      	bne.n	8004260 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	085b      	lsrs	r3, r3, #1
 8004258:	3b01      	subs	r3, #1
 800425a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800425c:	429a      	cmp	r2, r3
 800425e:	d06b      	beq.n	8004338 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	2b0c      	cmp	r3, #12
 8004264:	d062      	beq.n	800432c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004266:	4b32      	ldr	r3, [pc, #200]	; (8004330 <HAL_RCC_OscConfig+0x778>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e0ac      	b.n	80043d0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004276:	4b2e      	ldr	r3, [pc, #184]	; (8004330 <HAL_RCC_OscConfig+0x778>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a2d      	ldr	r2, [pc, #180]	; (8004330 <HAL_RCC_OscConfig+0x778>)
 800427c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004280:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004282:	f7fe fa4f 	bl	8002724 <HAL_GetTick>
 8004286:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004288:	e008      	b.n	800429c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800428a:	f7fe fa4b 	bl	8002724 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d901      	bls.n	800429c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e099      	b.n	80043d0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800429c:	4b24      	ldr	r3, [pc, #144]	; (8004330 <HAL_RCC_OscConfig+0x778>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1f0      	bne.n	800428a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042a8:	4b21      	ldr	r3, [pc, #132]	; (8004330 <HAL_RCC_OscConfig+0x778>)
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	4b21      	ldr	r3, [pc, #132]	; (8004334 <HAL_RCC_OscConfig+0x77c>)
 80042ae:	4013      	ands	r3, r2
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80042b8:	3a01      	subs	r2, #1
 80042ba:	0112      	lsls	r2, r2, #4
 80042bc:	4311      	orrs	r1, r2
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042c2:	0212      	lsls	r2, r2, #8
 80042c4:	4311      	orrs	r1, r2
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042ca:	0852      	lsrs	r2, r2, #1
 80042cc:	3a01      	subs	r2, #1
 80042ce:	0552      	lsls	r2, r2, #21
 80042d0:	4311      	orrs	r1, r2
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042d6:	0852      	lsrs	r2, r2, #1
 80042d8:	3a01      	subs	r2, #1
 80042da:	0652      	lsls	r2, r2, #25
 80042dc:	4311      	orrs	r1, r2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042e2:	06d2      	lsls	r2, r2, #27
 80042e4:	430a      	orrs	r2, r1
 80042e6:	4912      	ldr	r1, [pc, #72]	; (8004330 <HAL_RCC_OscConfig+0x778>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042ec:	4b10      	ldr	r3, [pc, #64]	; (8004330 <HAL_RCC_OscConfig+0x778>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a0f      	ldr	r2, [pc, #60]	; (8004330 <HAL_RCC_OscConfig+0x778>)
 80042f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042f8:	4b0d      	ldr	r3, [pc, #52]	; (8004330 <HAL_RCC_OscConfig+0x778>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	4a0c      	ldr	r2, [pc, #48]	; (8004330 <HAL_RCC_OscConfig+0x778>)
 80042fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004302:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004304:	f7fe fa0e 	bl	8002724 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800430c:	f7fe fa0a 	bl	8002724 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e058      	b.n	80043d0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800431e:	4b04      	ldr	r3, [pc, #16]	; (8004330 <HAL_RCC_OscConfig+0x778>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0f0      	beq.n	800430c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800432a:	e050      	b.n	80043ce <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e04f      	b.n	80043d0 <HAL_RCC_OscConfig+0x818>
 8004330:	40021000 	.word	0x40021000
 8004334:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004338:	4b27      	ldr	r3, [pc, #156]	; (80043d8 <HAL_RCC_OscConfig+0x820>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d144      	bne.n	80043ce <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004344:	4b24      	ldr	r3, [pc, #144]	; (80043d8 <HAL_RCC_OscConfig+0x820>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a23      	ldr	r2, [pc, #140]	; (80043d8 <HAL_RCC_OscConfig+0x820>)
 800434a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800434e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004350:	4b21      	ldr	r3, [pc, #132]	; (80043d8 <HAL_RCC_OscConfig+0x820>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	4a20      	ldr	r2, [pc, #128]	; (80043d8 <HAL_RCC_OscConfig+0x820>)
 8004356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800435a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800435c:	f7fe f9e2 	bl	8002724 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004364:	f7fe f9de 	bl	8002724 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e02c      	b.n	80043d0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004376:	4b18      	ldr	r3, [pc, #96]	; (80043d8 <HAL_RCC_OscConfig+0x820>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0f0      	beq.n	8004364 <HAL_RCC_OscConfig+0x7ac>
 8004382:	e024      	b.n	80043ce <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	2b0c      	cmp	r3, #12
 8004388:	d01f      	beq.n	80043ca <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800438a:	4b13      	ldr	r3, [pc, #76]	; (80043d8 <HAL_RCC_OscConfig+0x820>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a12      	ldr	r2, [pc, #72]	; (80043d8 <HAL_RCC_OscConfig+0x820>)
 8004390:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004394:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004396:	f7fe f9c5 	bl	8002724 <HAL_GetTick>
 800439a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800439c:	e008      	b.n	80043b0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800439e:	f7fe f9c1 	bl	8002724 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e00f      	b.n	80043d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043b0:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <HAL_RCC_OscConfig+0x820>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1f0      	bne.n	800439e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80043bc:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <HAL_RCC_OscConfig+0x820>)
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	4905      	ldr	r1, [pc, #20]	; (80043d8 <HAL_RCC_OscConfig+0x820>)
 80043c2:	4b06      	ldr	r3, [pc, #24]	; (80043dc <HAL_RCC_OscConfig+0x824>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	60cb      	str	r3, [r1, #12]
 80043c8:	e001      	b.n	80043ce <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3720      	adds	r7, #32
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40021000 	.word	0x40021000
 80043dc:	feeefffc 	.word	0xfeeefffc

080043e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e0e7      	b.n	80045c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043f4:	4b75      	ldr	r3, [pc, #468]	; (80045cc <HAL_RCC_ClockConfig+0x1ec>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d910      	bls.n	8004424 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004402:	4b72      	ldr	r3, [pc, #456]	; (80045cc <HAL_RCC_ClockConfig+0x1ec>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f023 0207 	bic.w	r2, r3, #7
 800440a:	4970      	ldr	r1, [pc, #448]	; (80045cc <HAL_RCC_ClockConfig+0x1ec>)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	4313      	orrs	r3, r2
 8004410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004412:	4b6e      	ldr	r3, [pc, #440]	; (80045cc <HAL_RCC_ClockConfig+0x1ec>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0307 	and.w	r3, r3, #7
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	429a      	cmp	r2, r3
 800441e:	d001      	beq.n	8004424 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e0cf      	b.n	80045c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d010      	beq.n	8004452 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	4b66      	ldr	r3, [pc, #408]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800443c:	429a      	cmp	r2, r3
 800443e:	d908      	bls.n	8004452 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004440:	4b63      	ldr	r3, [pc, #396]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	4960      	ldr	r1, [pc, #384]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 800444e:	4313      	orrs	r3, r2
 8004450:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d04c      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2b03      	cmp	r3, #3
 8004464:	d107      	bne.n	8004476 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004466:	4b5a      	ldr	r3, [pc, #360]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d121      	bne.n	80044b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e0a6      	b.n	80045c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d107      	bne.n	800448e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800447e:	4b54      	ldr	r3, [pc, #336]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d115      	bne.n	80044b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e09a      	b.n	80045c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d107      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004496:	4b4e      	ldr	r3, [pc, #312]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d109      	bne.n	80044b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e08e      	b.n	80045c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044a6:	4b4a      	ldr	r3, [pc, #296]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e086      	b.n	80045c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044b6:	4b46      	ldr	r3, [pc, #280]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f023 0203 	bic.w	r2, r3, #3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	4943      	ldr	r1, [pc, #268]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c8:	f7fe f92c 	bl	8002724 <HAL_GetTick>
 80044cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ce:	e00a      	b.n	80044e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044d0:	f7fe f928 	bl	8002724 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	f241 3288 	movw	r2, #5000	; 0x1388
 80044de:	4293      	cmp	r3, r2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e06e      	b.n	80045c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e6:	4b3a      	ldr	r3, [pc, #232]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 020c 	and.w	r2, r3, #12
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d1eb      	bne.n	80044d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d010      	beq.n	8004526 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	4b31      	ldr	r3, [pc, #196]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004510:	429a      	cmp	r2, r3
 8004512:	d208      	bcs.n	8004526 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004514:	4b2e      	ldr	r3, [pc, #184]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	492b      	ldr	r1, [pc, #172]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004522:	4313      	orrs	r3, r2
 8004524:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004526:	4b29      	ldr	r3, [pc, #164]	; (80045cc <HAL_RCC_ClockConfig+0x1ec>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0307 	and.w	r3, r3, #7
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d210      	bcs.n	8004556 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004534:	4b25      	ldr	r3, [pc, #148]	; (80045cc <HAL_RCC_ClockConfig+0x1ec>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f023 0207 	bic.w	r2, r3, #7
 800453c:	4923      	ldr	r1, [pc, #140]	; (80045cc <HAL_RCC_ClockConfig+0x1ec>)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	4313      	orrs	r3, r2
 8004542:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004544:	4b21      	ldr	r3, [pc, #132]	; (80045cc <HAL_RCC_ClockConfig+0x1ec>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	429a      	cmp	r2, r3
 8004550:	d001      	beq.n	8004556 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e036      	b.n	80045c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b00      	cmp	r3, #0
 8004560:	d008      	beq.n	8004574 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004562:	4b1b      	ldr	r3, [pc, #108]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	4918      	ldr	r1, [pc, #96]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004570:	4313      	orrs	r3, r2
 8004572:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0308 	and.w	r3, r3, #8
 800457c:	2b00      	cmp	r3, #0
 800457e:	d009      	beq.n	8004594 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004580:	4b13      	ldr	r3, [pc, #76]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	4910      	ldr	r1, [pc, #64]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004590:	4313      	orrs	r3, r2
 8004592:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004594:	f000 f824 	bl	80045e0 <HAL_RCC_GetSysClockFreq>
 8004598:	4602      	mov	r2, r0
 800459a:	4b0d      	ldr	r3, [pc, #52]	; (80045d0 <HAL_RCC_ClockConfig+0x1f0>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	091b      	lsrs	r3, r3, #4
 80045a0:	f003 030f 	and.w	r3, r3, #15
 80045a4:	490b      	ldr	r1, [pc, #44]	; (80045d4 <HAL_RCC_ClockConfig+0x1f4>)
 80045a6:	5ccb      	ldrb	r3, [r1, r3]
 80045a8:	f003 031f 	and.w	r3, r3, #31
 80045ac:	fa22 f303 	lsr.w	r3, r2, r3
 80045b0:	4a09      	ldr	r2, [pc, #36]	; (80045d8 <HAL_RCC_ClockConfig+0x1f8>)
 80045b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80045b4:	4b09      	ldr	r3, [pc, #36]	; (80045dc <HAL_RCC_ClockConfig+0x1fc>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fe f863 	bl	8002684 <HAL_InitTick>
 80045be:	4603      	mov	r3, r0
 80045c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80045c2:	7afb      	ldrb	r3, [r7, #11]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40022000 	.word	0x40022000
 80045d0:	40021000 	.word	0x40021000
 80045d4:	08009150 	.word	0x08009150
 80045d8:	20000098 	.word	0x20000098
 80045dc:	2000009c 	.word	0x2000009c

080045e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b089      	sub	sp, #36	; 0x24
 80045e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	61fb      	str	r3, [r7, #28]
 80045ea:	2300      	movs	r3, #0
 80045ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045ee:	4b3e      	ldr	r3, [pc, #248]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 030c 	and.w	r3, r3, #12
 80045f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045f8:	4b3b      	ldr	r3, [pc, #236]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f003 0303 	and.w	r3, r3, #3
 8004600:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d005      	beq.n	8004614 <HAL_RCC_GetSysClockFreq+0x34>
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	2b0c      	cmp	r3, #12
 800460c:	d121      	bne.n	8004652 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d11e      	bne.n	8004652 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004614:	4b34      	ldr	r3, [pc, #208]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	d107      	bne.n	8004630 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004620:	4b31      	ldr	r3, [pc, #196]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004626:	0a1b      	lsrs	r3, r3, #8
 8004628:	f003 030f 	and.w	r3, r3, #15
 800462c:	61fb      	str	r3, [r7, #28]
 800462e:	e005      	b.n	800463c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004630:	4b2d      	ldr	r3, [pc, #180]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	091b      	lsrs	r3, r3, #4
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800463c:	4a2b      	ldr	r2, [pc, #172]	; (80046ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004644:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10d      	bne.n	8004668 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004650:	e00a      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	2b04      	cmp	r3, #4
 8004656:	d102      	bne.n	800465e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004658:	4b25      	ldr	r3, [pc, #148]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800465a:	61bb      	str	r3, [r7, #24]
 800465c:	e004      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	2b08      	cmp	r3, #8
 8004662:	d101      	bne.n	8004668 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004664:	4b23      	ldr	r3, [pc, #140]	; (80046f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004666:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	2b0c      	cmp	r3, #12
 800466c:	d134      	bne.n	80046d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800466e:	4b1e      	ldr	r3, [pc, #120]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b02      	cmp	r3, #2
 800467c:	d003      	beq.n	8004686 <HAL_RCC_GetSysClockFreq+0xa6>
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2b03      	cmp	r3, #3
 8004682:	d003      	beq.n	800468c <HAL_RCC_GetSysClockFreq+0xac>
 8004684:	e005      	b.n	8004692 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004686:	4b1a      	ldr	r3, [pc, #104]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004688:	617b      	str	r3, [r7, #20]
      break;
 800468a:	e005      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800468c:	4b19      	ldr	r3, [pc, #100]	; (80046f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800468e:	617b      	str	r3, [r7, #20]
      break;
 8004690:	e002      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	617b      	str	r3, [r7, #20]
      break;
 8004696:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004698:	4b13      	ldr	r3, [pc, #76]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	091b      	lsrs	r3, r3, #4
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	3301      	adds	r3, #1
 80046a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80046a6:	4b10      	ldr	r3, [pc, #64]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	0a1b      	lsrs	r3, r3, #8
 80046ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	fb03 f202 	mul.w	r2, r3, r2
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046be:	4b0a      	ldr	r3, [pc, #40]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	0e5b      	lsrs	r3, r3, #25
 80046c4:	f003 0303 	and.w	r3, r3, #3
 80046c8:	3301      	adds	r3, #1
 80046ca:	005b      	lsls	r3, r3, #1
 80046cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80046d8:	69bb      	ldr	r3, [r7, #24]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3724      	adds	r7, #36	; 0x24
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	40021000 	.word	0x40021000
 80046ec:	08009160 	.word	0x08009160
 80046f0:	00f42400 	.word	0x00f42400
 80046f4:	007a1200 	.word	0x007a1200

080046f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004700:	2300      	movs	r3, #0
 8004702:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004704:	4b2a      	ldr	r3, [pc, #168]	; (80047b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d003      	beq.n	8004718 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004710:	f7ff f9ee 	bl	8003af0 <HAL_PWREx_GetVoltageRange>
 8004714:	6178      	str	r0, [r7, #20]
 8004716:	e014      	b.n	8004742 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004718:	4b25      	ldr	r3, [pc, #148]	; (80047b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800471a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471c:	4a24      	ldr	r2, [pc, #144]	; (80047b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800471e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004722:	6593      	str	r3, [r2, #88]	; 0x58
 8004724:	4b22      	ldr	r3, [pc, #136]	; (80047b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004730:	f7ff f9de 	bl	8003af0 <HAL_PWREx_GetVoltageRange>
 8004734:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004736:	4b1e      	ldr	r3, [pc, #120]	; (80047b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473a:	4a1d      	ldr	r2, [pc, #116]	; (80047b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800473c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004740:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004748:	d10b      	bne.n	8004762 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b80      	cmp	r3, #128	; 0x80
 800474e:	d919      	bls.n	8004784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2ba0      	cmp	r3, #160	; 0xa0
 8004754:	d902      	bls.n	800475c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004756:	2302      	movs	r3, #2
 8004758:	613b      	str	r3, [r7, #16]
 800475a:	e013      	b.n	8004784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800475c:	2301      	movs	r3, #1
 800475e:	613b      	str	r3, [r7, #16]
 8004760:	e010      	b.n	8004784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b80      	cmp	r3, #128	; 0x80
 8004766:	d902      	bls.n	800476e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004768:	2303      	movs	r3, #3
 800476a:	613b      	str	r3, [r7, #16]
 800476c:	e00a      	b.n	8004784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b80      	cmp	r3, #128	; 0x80
 8004772:	d102      	bne.n	800477a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004774:	2302      	movs	r3, #2
 8004776:	613b      	str	r3, [r7, #16]
 8004778:	e004      	b.n	8004784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b70      	cmp	r3, #112	; 0x70
 800477e:	d101      	bne.n	8004784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004780:	2301      	movs	r3, #1
 8004782:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004784:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f023 0207 	bic.w	r2, r3, #7
 800478c:	4909      	ldr	r1, [pc, #36]	; (80047b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004794:	4b07      	ldr	r3, [pc, #28]	; (80047b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d001      	beq.n	80047a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40021000 	.word	0x40021000
 80047b4:	40022000 	.word	0x40022000

080047b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047c0:	2300      	movs	r3, #0
 80047c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047c4:	2300      	movs	r3, #0
 80047c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d031      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80047dc:	d01a      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80047de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80047e2:	d814      	bhi.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x56>
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d009      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80047e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047ec:	d10f      	bne.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80047ee:	4b5d      	ldr	r3, [pc, #372]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	4a5c      	ldr	r2, [pc, #368]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047fa:	e00c      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3304      	adds	r3, #4
 8004800:	2100      	movs	r1, #0
 8004802:	4618      	mov	r0, r3
 8004804:	f000 f9ce 	bl	8004ba4 <RCCEx_PLLSAI1_Config>
 8004808:	4603      	mov	r3, r0
 800480a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800480c:	e003      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	74fb      	strb	r3, [r7, #19]
      break;
 8004812:	e000      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004814:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004816:	7cfb      	ldrb	r3, [r7, #19]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10b      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800481c:	4b51      	ldr	r3, [pc, #324]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800481e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004822:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482a:	494e      	ldr	r1, [pc, #312]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800482c:	4313      	orrs	r3, r2
 800482e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004832:	e001      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004834:	7cfb      	ldrb	r3, [r7, #19]
 8004836:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 809e 	beq.w	8004982 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004846:	2300      	movs	r3, #0
 8004848:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800484a:	4b46      	ldr	r3, [pc, #280]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800484c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004856:	2301      	movs	r3, #1
 8004858:	e000      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800485a:	2300      	movs	r3, #0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00d      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004860:	4b40      	ldr	r3, [pc, #256]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004864:	4a3f      	ldr	r2, [pc, #252]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800486a:	6593      	str	r3, [r2, #88]	; 0x58
 800486c:	4b3d      	ldr	r3, [pc, #244]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800486e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004874:	60bb      	str	r3, [r7, #8]
 8004876:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004878:	2301      	movs	r3, #1
 800487a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800487c:	4b3a      	ldr	r3, [pc, #232]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a39      	ldr	r2, [pc, #228]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004886:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004888:	f7fd ff4c 	bl	8002724 <HAL_GetTick>
 800488c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800488e:	e009      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004890:	f7fd ff48 	bl	8002724 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d902      	bls.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	74fb      	strb	r3, [r7, #19]
        break;
 80048a2:	e005      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048a4:	4b30      	ldr	r3, [pc, #192]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0ef      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80048b0:	7cfb      	ldrb	r3, [r7, #19]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d15a      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048b6:	4b2b      	ldr	r3, [pc, #172]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d01e      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d019      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048d2:	4b24      	ldr	r3, [pc, #144]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048dc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048de:	4b21      	ldr	r3, [pc, #132]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e4:	4a1f      	ldr	r2, [pc, #124]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048ee:	4b1d      	ldr	r3, [pc, #116]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f4:	4a1b      	ldr	r2, [pc, #108]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048fe:	4a19      	ldr	r2, [pc, #100]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b00      	cmp	r3, #0
 800490e:	d016      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004910:	f7fd ff08 	bl	8002724 <HAL_GetTick>
 8004914:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004916:	e00b      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004918:	f7fd ff04 	bl	8002724 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	f241 3288 	movw	r2, #5000	; 0x1388
 8004926:	4293      	cmp	r3, r2
 8004928:	d902      	bls.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	74fb      	strb	r3, [r7, #19]
            break;
 800492e:	e006      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004930:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0ec      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800493e:	7cfb      	ldrb	r3, [r7, #19]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10b      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004944:	4b07      	ldr	r3, [pc, #28]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004952:	4904      	ldr	r1, [pc, #16]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004954:	4313      	orrs	r3, r2
 8004956:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800495a:	e009      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800495c:	7cfb      	ldrb	r3, [r7, #19]
 800495e:	74bb      	strb	r3, [r7, #18]
 8004960:	e006      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004962:	bf00      	nop
 8004964:	40021000 	.word	0x40021000
 8004968:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800496c:	7cfb      	ldrb	r3, [r7, #19]
 800496e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004970:	7c7b      	ldrb	r3, [r7, #17]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d105      	bne.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004976:	4b8a      	ldr	r3, [pc, #552]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497a:	4a89      	ldr	r2, [pc, #548]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800497c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004980:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800498e:	4b84      	ldr	r3, [pc, #528]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004994:	f023 0203 	bic.w	r2, r3, #3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	4980      	ldr	r1, [pc, #512]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00a      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049b0:	4b7b      	ldr	r3, [pc, #492]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b6:	f023 020c 	bic.w	r2, r3, #12
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	4978      	ldr	r1, [pc, #480]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0320 	and.w	r3, r3, #32
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049d2:	4b73      	ldr	r3, [pc, #460]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e0:	496f      	ldr	r1, [pc, #444]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00a      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049f4:	4b6a      	ldr	r3, [pc, #424]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a02:	4967      	ldr	r1, [pc, #412]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a16:	4b62      	ldr	r3, [pc, #392]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	495e      	ldr	r1, [pc, #376]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a38:	4b59      	ldr	r3, [pc, #356]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	4956      	ldr	r1, [pc, #344]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a5a:	4b51      	ldr	r3, [pc, #324]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a68:	494d      	ldr	r1, [pc, #308]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d028      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a7c:	4b48      	ldr	r3, [pc, #288]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	4945      	ldr	r1, [pc, #276]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a9a:	d106      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a9c:	4b40      	ldr	r3, [pc, #256]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	4a3f      	ldr	r2, [pc, #252]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004aa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aa6:	60d3      	str	r3, [r2, #12]
 8004aa8:	e011      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ab2:	d10c      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	2101      	movs	r1, #1
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 f872 	bl	8004ba4 <RCCEx_PLLSAI1_Config>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004ac4:	7cfb      	ldrb	r3, [r7, #19]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004aca:	7cfb      	ldrb	r3, [r7, #19]
 8004acc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d028      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ada:	4b31      	ldr	r3, [pc, #196]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae8:	492d      	ldr	r1, [pc, #180]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004af8:	d106      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004afa:	4b29      	ldr	r3, [pc, #164]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	4a28      	ldr	r2, [pc, #160]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b04:	60d3      	str	r3, [r2, #12]
 8004b06:	e011      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b10:	d10c      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	3304      	adds	r3, #4
 8004b16:	2101      	movs	r1, #1
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 f843 	bl	8004ba4 <RCCEx_PLLSAI1_Config>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b22:	7cfb      	ldrb	r3, [r7, #19]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004b28:	7cfb      	ldrb	r3, [r7, #19]
 8004b2a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d01c      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b38:	4b19      	ldr	r3, [pc, #100]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b46:	4916      	ldr	r1, [pc, #88]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b56:	d10c      	bne.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	2102      	movs	r1, #2
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 f820 	bl	8004ba4 <RCCEx_PLLSAI1_Config>
 8004b64:	4603      	mov	r3, r0
 8004b66:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b68:	7cfb      	ldrb	r3, [r7, #19]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004b6e:	7cfb      	ldrb	r3, [r7, #19]
 8004b70:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b7e:	4b08      	ldr	r3, [pc, #32]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b84:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b8c:	4904      	ldr	r1, [pc, #16]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b94:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3718      	adds	r7, #24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40021000 	.word	0x40021000

08004ba4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bb2:	4b74      	ldr	r3, [pc, #464]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f003 0303 	and.w	r3, r3, #3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d018      	beq.n	8004bf0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004bbe:	4b71      	ldr	r3, [pc, #452]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f003 0203 	and.w	r2, r3, #3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d10d      	bne.n	8004bea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
       ||
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d009      	beq.n	8004bea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004bd6:	4b6b      	ldr	r3, [pc, #428]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	091b      	lsrs	r3, r3, #4
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	1c5a      	adds	r2, r3, #1
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
       ||
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d047      	beq.n	8004c7a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	73fb      	strb	r3, [r7, #15]
 8004bee:	e044      	b.n	8004c7a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b03      	cmp	r3, #3
 8004bf6:	d018      	beq.n	8004c2a <RCCEx_PLLSAI1_Config+0x86>
 8004bf8:	2b03      	cmp	r3, #3
 8004bfa:	d825      	bhi.n	8004c48 <RCCEx_PLLSAI1_Config+0xa4>
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d002      	beq.n	8004c06 <RCCEx_PLLSAI1_Config+0x62>
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d009      	beq.n	8004c18 <RCCEx_PLLSAI1_Config+0x74>
 8004c04:	e020      	b.n	8004c48 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c06:	4b5f      	ldr	r3, [pc, #380]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d11d      	bne.n	8004c4e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c16:	e01a      	b.n	8004c4e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c18:	4b5a      	ldr	r3, [pc, #360]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d116      	bne.n	8004c52 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c28:	e013      	b.n	8004c52 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c2a:	4b56      	ldr	r3, [pc, #344]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10f      	bne.n	8004c56 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c36:	4b53      	ldr	r3, [pc, #332]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d109      	bne.n	8004c56 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c46:	e006      	b.n	8004c56 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c4c:	e004      	b.n	8004c58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c4e:	bf00      	nop
 8004c50:	e002      	b.n	8004c58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c52:	bf00      	nop
 8004c54:	e000      	b.n	8004c58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c56:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c58:	7bfb      	ldrb	r3, [r7, #15]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10d      	bne.n	8004c7a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c5e:	4b49      	ldr	r3, [pc, #292]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6819      	ldr	r1, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	430b      	orrs	r3, r1
 8004c74:	4943      	ldr	r1, [pc, #268]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c7a:	7bfb      	ldrb	r3, [r7, #15]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d17c      	bne.n	8004d7a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c80:	4b40      	ldr	r3, [pc, #256]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a3f      	ldr	r2, [pc, #252]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c8c:	f7fd fd4a 	bl	8002724 <HAL_GetTick>
 8004c90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c92:	e009      	b.n	8004ca8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c94:	f7fd fd46 	bl	8002724 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d902      	bls.n	8004ca8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ca6:	e005      	b.n	8004cb4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ca8:	4b36      	ldr	r3, [pc, #216]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1ef      	bne.n	8004c94 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004cb4:	7bfb      	ldrb	r3, [r7, #15]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d15f      	bne.n	8004d7a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d110      	bne.n	8004ce2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cc0:	4b30      	ldr	r3, [pc, #192]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004cc8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	6892      	ldr	r2, [r2, #8]
 8004cd0:	0211      	lsls	r1, r2, #8
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	68d2      	ldr	r2, [r2, #12]
 8004cd6:	06d2      	lsls	r2, r2, #27
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	492a      	ldr	r1, [pc, #168]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	610b      	str	r3, [r1, #16]
 8004ce0:	e027      	b.n	8004d32 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d112      	bne.n	8004d0e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ce8:	4b26      	ldr	r3, [pc, #152]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004cf0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6892      	ldr	r2, [r2, #8]
 8004cf8:	0211      	lsls	r1, r2, #8
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	6912      	ldr	r2, [r2, #16]
 8004cfe:	0852      	lsrs	r2, r2, #1
 8004d00:	3a01      	subs	r2, #1
 8004d02:	0552      	lsls	r2, r2, #21
 8004d04:	430a      	orrs	r2, r1
 8004d06:	491f      	ldr	r1, [pc, #124]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	610b      	str	r3, [r1, #16]
 8004d0c:	e011      	b.n	8004d32 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d0e:	4b1d      	ldr	r3, [pc, #116]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d16:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6892      	ldr	r2, [r2, #8]
 8004d1e:	0211      	lsls	r1, r2, #8
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6952      	ldr	r2, [r2, #20]
 8004d24:	0852      	lsrs	r2, r2, #1
 8004d26:	3a01      	subs	r2, #1
 8004d28:	0652      	lsls	r2, r2, #25
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	4915      	ldr	r1, [pc, #84]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d32:	4b14      	ldr	r3, [pc, #80]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a13      	ldr	r2, [pc, #76]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d3c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d3e:	f7fd fcf1 	bl	8002724 <HAL_GetTick>
 8004d42:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d44:	e009      	b.n	8004d5a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d46:	f7fd fced 	bl	8002724 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d902      	bls.n	8004d5a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	73fb      	strb	r3, [r7, #15]
          break;
 8004d58:	e005      	b.n	8004d66 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d5a:	4b0a      	ldr	r3, [pc, #40]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0ef      	beq.n	8004d46 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004d66:	7bfb      	ldrb	r3, [r7, #15]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d106      	bne.n	8004d7a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d6c:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d6e:	691a      	ldr	r2, [r3, #16]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	4903      	ldr	r1, [pc, #12]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	40021000 	.word	0x40021000

08004d88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e049      	b.n	8004e2e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d106      	bne.n	8004db4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7fd fbd0 	bl	8002554 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	f000 fb24 	bl	8005414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b086      	sub	sp, #24
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e097      	b.n	8004f7a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d106      	bne.n	8004e64 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7fd fb06 	bl	8002470 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	6812      	ldr	r2, [r2, #0]
 8004e76:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004e7a:	f023 0307 	bic.w	r3, r3, #7
 8004e7e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3304      	adds	r3, #4
 8004e88:	4619      	mov	r1, r3
 8004e8a:	4610      	mov	r0, r2
 8004e8c:	f000 fac2 	bl	8005414 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb8:	f023 0303 	bic.w	r3, r3, #3
 8004ebc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	689a      	ldr	r2, [r3, #8]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	021b      	lsls	r3, r3, #8
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004ed6:	f023 030c 	bic.w	r3, r3, #12
 8004eda:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ee2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ee6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	021b      	lsls	r3, r3, #8
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	011a      	lsls	r2, r3, #4
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	031b      	lsls	r3, r3, #12
 8004f06:	4313      	orrs	r3, r2
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004f14:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004f1c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b084      	sub	sp, #16
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
 8004f8a:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f92:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f9a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fa2:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004faa:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d110      	bne.n	8004fd4 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fb2:	7bfb      	ldrb	r3, [r7, #15]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d102      	bne.n	8004fbe <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fb8:	7b7b      	ldrb	r3, [r7, #13]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d001      	beq.n	8004fc2 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e069      	b.n	8005096 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2202      	movs	r2, #2
 8004fce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fd2:	e031      	b.n	8005038 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	d110      	bne.n	8004ffc <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fda:	7bbb      	ldrb	r3, [r7, #14]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d102      	bne.n	8004fe6 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fe0:	7b3b      	ldrb	r3, [r7, #12]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d001      	beq.n	8004fea <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e055      	b.n	8005096 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2202      	movs	r2, #2
 8004fee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ffa:	e01d      	b.n	8005038 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d108      	bne.n	8005014 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005002:	7bbb      	ldrb	r3, [r7, #14]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d105      	bne.n	8005014 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005008:	7b7b      	ldrb	r3, [r7, #13]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d102      	bne.n	8005014 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800500e:	7b3b      	ldrb	r3, [r7, #12]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d001      	beq.n	8005018 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e03e      	b.n	8005096 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2202      	movs	r2, #2
 800502c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_TIM_Encoder_Start+0xc4>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b04      	cmp	r3, #4
 8005042:	d008      	beq.n	8005056 <HAL_TIM_Encoder_Start+0xd4>
 8005044:	e00f      	b.n	8005066 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2201      	movs	r2, #1
 800504c:	2100      	movs	r1, #0
 800504e:	4618      	mov	r0, r3
 8005050:	f000 fcc2 	bl	80059d8 <TIM_CCxChannelCmd>
      break;
 8005054:	e016      	b.n	8005084 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2201      	movs	r2, #1
 800505c:	2104      	movs	r1, #4
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fcba 	bl	80059d8 <TIM_CCxChannelCmd>
      break;
 8005064:	e00e      	b.n	8005084 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2201      	movs	r2, #1
 800506c:	2100      	movs	r1, #0
 800506e:	4618      	mov	r0, r3
 8005070:	f000 fcb2 	bl	80059d8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2201      	movs	r2, #1
 800507a:	2104      	movs	r1, #4
 800507c:	4618      	mov	r0, r3
 800507e:	f000 fcab 	bl	80059d8 <TIM_CCxChannelCmd>
      break;
 8005082:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0201 	orr.w	r2, r2, #1
 8005092:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b082      	sub	sp, #8
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
 80050a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <HAL_TIM_Encoder_Stop+0x18>
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b04      	cmp	r3, #4
 80050b2:	d008      	beq.n	80050c6 <HAL_TIM_Encoder_Stop+0x28>
 80050b4:	e00f      	b.n	80050d6 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2200      	movs	r2, #0
 80050bc:	2100      	movs	r1, #0
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 fc8a 	bl	80059d8 <TIM_CCxChannelCmd>
      break;
 80050c4:	e016      	b.n	80050f4 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2200      	movs	r2, #0
 80050cc:	2104      	movs	r1, #4
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 fc82 	bl	80059d8 <TIM_CCxChannelCmd>
      break;
 80050d4:	e00e      	b.n	80050f4 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2200      	movs	r2, #0
 80050dc:	2100      	movs	r1, #0
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 fc7a 	bl	80059d8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2200      	movs	r2, #0
 80050ea:	2104      	movs	r1, #4
 80050ec:	4618      	mov	r0, r3
 80050ee:	f000 fc73 	bl	80059d8 <TIM_CCxChannelCmd>
      break;
 80050f2:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6a1a      	ldr	r2, [r3, #32]
 80050fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80050fe:	4013      	ands	r3, r2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10f      	bne.n	8005124 <HAL_TIM_Encoder_Stop+0x86>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6a1a      	ldr	r2, [r3, #32]
 800510a:	f240 4344 	movw	r3, #1092	; 0x444
 800510e:	4013      	ands	r3, r2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d107      	bne.n	8005124 <HAL_TIM_Encoder_Stop+0x86>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 0201 	bic.w	r2, r2, #1
 8005122:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d002      	beq.n	8005130 <HAL_TIM_Encoder_Stop+0x92>
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b04      	cmp	r3, #4
 800512e:	d148      	bne.n	80051c2 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d104      	bne.n	8005140 <HAL_TIM_Encoder_Stop+0xa2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800513e:	e023      	b.n	8005188 <HAL_TIM_Encoder_Stop+0xea>
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2b04      	cmp	r3, #4
 8005144:	d104      	bne.n	8005150 <HAL_TIM_Encoder_Stop+0xb2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800514e:	e01b      	b.n	8005188 <HAL_TIM_Encoder_Stop+0xea>
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2b08      	cmp	r3, #8
 8005154:	d104      	bne.n	8005160 <HAL_TIM_Encoder_Stop+0xc2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800515e:	e013      	b.n	8005188 <HAL_TIM_Encoder_Stop+0xea>
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	2b0c      	cmp	r3, #12
 8005164:	d104      	bne.n	8005170 <HAL_TIM_Encoder_Stop+0xd2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800516e:	e00b      	b.n	8005188 <HAL_TIM_Encoder_Stop+0xea>
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	2b10      	cmp	r3, #16
 8005174:	d104      	bne.n	8005180 <HAL_TIM_Encoder_Stop+0xe2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800517e:	e003      	b.n	8005188 <HAL_TIM_Encoder_Stop+0xea>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d104      	bne.n	8005198 <HAL_TIM_Encoder_Stop+0xfa>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005196:	e024      	b.n	80051e2 <HAL_TIM_Encoder_Stop+0x144>
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	2b04      	cmp	r3, #4
 800519c:	d104      	bne.n	80051a8 <HAL_TIM_Encoder_Stop+0x10a>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051a6:	e01c      	b.n	80051e2 <HAL_TIM_Encoder_Stop+0x144>
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	2b08      	cmp	r3, #8
 80051ac:	d104      	bne.n	80051b8 <HAL_TIM_Encoder_Stop+0x11a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051b6:	e014      	b.n	80051e2 <HAL_TIM_Encoder_Stop+0x144>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80051c0:	e00f      	b.n	80051e2 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051f8:	2300      	movs	r3, #0
 80051fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005202:	2b01      	cmp	r3, #1
 8005204:	d101      	bne.n	800520a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005206:	2302      	movs	r3, #2
 8005208:	e0ff      	b.n	800540a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2b14      	cmp	r3, #20
 8005216:	f200 80f0 	bhi.w	80053fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800521a:	a201      	add	r2, pc, #4	; (adr r2, 8005220 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800521c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005220:	08005275 	.word	0x08005275
 8005224:	080053fb 	.word	0x080053fb
 8005228:	080053fb 	.word	0x080053fb
 800522c:	080053fb 	.word	0x080053fb
 8005230:	080052b5 	.word	0x080052b5
 8005234:	080053fb 	.word	0x080053fb
 8005238:	080053fb 	.word	0x080053fb
 800523c:	080053fb 	.word	0x080053fb
 8005240:	080052f7 	.word	0x080052f7
 8005244:	080053fb 	.word	0x080053fb
 8005248:	080053fb 	.word	0x080053fb
 800524c:	080053fb 	.word	0x080053fb
 8005250:	08005337 	.word	0x08005337
 8005254:	080053fb 	.word	0x080053fb
 8005258:	080053fb 	.word	0x080053fb
 800525c:	080053fb 	.word	0x080053fb
 8005260:	08005379 	.word	0x08005379
 8005264:	080053fb 	.word	0x080053fb
 8005268:	080053fb 	.word	0x080053fb
 800526c:	080053fb 	.word	0x080053fb
 8005270:	080053b9 	.word	0x080053b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68b9      	ldr	r1, [r7, #8]
 800527a:	4618      	mov	r0, r3
 800527c:	f000 f92e 	bl	80054dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699a      	ldr	r2, [r3, #24]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0208 	orr.w	r2, r2, #8
 800528e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699a      	ldr	r2, [r3, #24]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0204 	bic.w	r2, r2, #4
 800529e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6999      	ldr	r1, [r3, #24]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	691a      	ldr	r2, [r3, #16]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	619a      	str	r2, [r3, #24]
      break;
 80052b2:	e0a5      	b.n	8005400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68b9      	ldr	r1, [r7, #8]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 f98a 	bl	80055d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	699a      	ldr	r2, [r3, #24]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	699a      	ldr	r2, [r3, #24]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6999      	ldr	r1, [r3, #24]
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	021a      	lsls	r2, r3, #8
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	619a      	str	r2, [r3, #24]
      break;
 80052f4:	e084      	b.n	8005400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68b9      	ldr	r1, [r7, #8]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 f9e3 	bl	80056c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	69da      	ldr	r2, [r3, #28]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f042 0208 	orr.w	r2, r2, #8
 8005310:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69da      	ldr	r2, [r3, #28]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0204 	bic.w	r2, r2, #4
 8005320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69d9      	ldr	r1, [r3, #28]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	691a      	ldr	r2, [r3, #16]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	430a      	orrs	r2, r1
 8005332:	61da      	str	r2, [r3, #28]
      break;
 8005334:	e064      	b.n	8005400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68b9      	ldr	r1, [r7, #8]
 800533c:	4618      	mov	r0, r3
 800533e:	f000 fa3b 	bl	80057b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	69da      	ldr	r2, [r3, #28]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005350:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	69da      	ldr	r2, [r3, #28]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	69d9      	ldr	r1, [r3, #28]
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	021a      	lsls	r2, r3, #8
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	61da      	str	r2, [r3, #28]
      break;
 8005376:	e043      	b.n	8005400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68b9      	ldr	r1, [r7, #8]
 800537e:	4618      	mov	r0, r3
 8005380:	f000 fa78 	bl	8005874 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f042 0208 	orr.w	r2, r2, #8
 8005392:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 0204 	bic.w	r2, r2, #4
 80053a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	691a      	ldr	r2, [r3, #16]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80053b6:	e023      	b.n	8005400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68b9      	ldr	r1, [r7, #8]
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 fab0 	bl	8005924 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	021a      	lsls	r2, r3, #8
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80053f8:	e002      	b.n	8005400 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	75fb      	strb	r3, [r7, #23]
      break;
 80053fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005408:	7dfb      	ldrb	r3, [r7, #23]
}
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop

08005414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a2a      	ldr	r2, [pc, #168]	; (80054d0 <TIM_Base_SetConfig+0xbc>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d003      	beq.n	8005434 <TIM_Base_SetConfig+0x20>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005432:	d108      	bne.n	8005446 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a21      	ldr	r2, [pc, #132]	; (80054d0 <TIM_Base_SetConfig+0xbc>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d00b      	beq.n	8005466 <TIM_Base_SetConfig+0x52>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005454:	d007      	beq.n	8005466 <TIM_Base_SetConfig+0x52>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a1e      	ldr	r2, [pc, #120]	; (80054d4 <TIM_Base_SetConfig+0xc0>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d003      	beq.n	8005466 <TIM_Base_SetConfig+0x52>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a1d      	ldr	r2, [pc, #116]	; (80054d8 <TIM_Base_SetConfig+0xc4>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d108      	bne.n	8005478 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800546c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	4313      	orrs	r3, r2
 8005476:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	4313      	orrs	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	689a      	ldr	r2, [r3, #8]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a0c      	ldr	r2, [pc, #48]	; (80054d0 <TIM_Base_SetConfig+0xbc>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d007      	beq.n	80054b4 <TIM_Base_SetConfig+0xa0>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a0b      	ldr	r2, [pc, #44]	; (80054d4 <TIM_Base_SetConfig+0xc0>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d003      	beq.n	80054b4 <TIM_Base_SetConfig+0xa0>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a0a      	ldr	r2, [pc, #40]	; (80054d8 <TIM_Base_SetConfig+0xc4>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d103      	bne.n	80054bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	615a      	str	r2, [r3, #20]
}
 80054c2:	bf00      	nop
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	40012c00 	.word	0x40012c00
 80054d4:	40014000 	.word	0x40014000
 80054d8:	40014400 	.word	0x40014400

080054dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	f023 0201 	bic.w	r2, r3, #1
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800550a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800550e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f023 0303 	bic.w	r3, r3, #3
 8005516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	4313      	orrs	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f023 0302 	bic.w	r3, r3, #2
 8005528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	4313      	orrs	r3, r2
 8005532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a24      	ldr	r2, [pc, #144]	; (80055c8 <TIM_OC1_SetConfig+0xec>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d007      	beq.n	800554c <TIM_OC1_SetConfig+0x70>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a23      	ldr	r2, [pc, #140]	; (80055cc <TIM_OC1_SetConfig+0xf0>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d003      	beq.n	800554c <TIM_OC1_SetConfig+0x70>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a22      	ldr	r2, [pc, #136]	; (80055d0 <TIM_OC1_SetConfig+0xf4>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d10c      	bne.n	8005566 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f023 0308 	bic.w	r3, r3, #8
 8005552:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	4313      	orrs	r3, r2
 800555c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f023 0304 	bic.w	r3, r3, #4
 8005564:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a17      	ldr	r2, [pc, #92]	; (80055c8 <TIM_OC1_SetConfig+0xec>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d007      	beq.n	800557e <TIM_OC1_SetConfig+0xa2>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a16      	ldr	r2, [pc, #88]	; (80055cc <TIM_OC1_SetConfig+0xf0>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d003      	beq.n	800557e <TIM_OC1_SetConfig+0xa2>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a15      	ldr	r2, [pc, #84]	; (80055d0 <TIM_OC1_SetConfig+0xf4>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d111      	bne.n	80055a2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800558c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	4313      	orrs	r3, r2
 8005596:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	4313      	orrs	r3, r2
 80055a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	621a      	str	r2, [r3, #32]
}
 80055bc:	bf00      	nop
 80055be:	371c      	adds	r7, #28
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	40012c00 	.word	0x40012c00
 80055cc:	40014000 	.word	0x40014000
 80055d0:	40014400 	.word	0x40014400

080055d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	f023 0210 	bic.w	r2, r3, #16
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800560e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	021b      	lsls	r3, r3, #8
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	4313      	orrs	r3, r2
 800561a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f023 0320 	bic.w	r3, r3, #32
 8005622:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	011b      	lsls	r3, r3, #4
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	4313      	orrs	r3, r2
 800562e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a22      	ldr	r2, [pc, #136]	; (80056bc <TIM_OC2_SetConfig+0xe8>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d10d      	bne.n	8005654 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800563e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	011b      	lsls	r3, r3, #4
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	4313      	orrs	r3, r2
 800564a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005652:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a19      	ldr	r2, [pc, #100]	; (80056bc <TIM_OC2_SetConfig+0xe8>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d007      	beq.n	800566c <TIM_OC2_SetConfig+0x98>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a18      	ldr	r2, [pc, #96]	; (80056c0 <TIM_OC2_SetConfig+0xec>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d003      	beq.n	800566c <TIM_OC2_SetConfig+0x98>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a17      	ldr	r2, [pc, #92]	; (80056c4 <TIM_OC2_SetConfig+0xf0>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d113      	bne.n	8005694 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005672:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800567a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	4313      	orrs	r3, r2
 8005686:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	4313      	orrs	r3, r2
 8005692:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	621a      	str	r2, [r3, #32]
}
 80056ae:	bf00      	nop
 80056b0:	371c      	adds	r7, #28
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	40012c00 	.word	0x40012c00
 80056c0:	40014000 	.word	0x40014000
 80056c4:	40014400 	.word	0x40014400

080056c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b087      	sub	sp, #28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f023 0303 	bic.w	r3, r3, #3
 8005702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	4313      	orrs	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005714:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	021b      	lsls	r3, r3, #8
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	4313      	orrs	r3, r2
 8005720:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a21      	ldr	r2, [pc, #132]	; (80057ac <TIM_OC3_SetConfig+0xe4>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d10d      	bne.n	8005746 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005730:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	021b      	lsls	r3, r3, #8
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	4313      	orrs	r3, r2
 800573c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005744:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a18      	ldr	r2, [pc, #96]	; (80057ac <TIM_OC3_SetConfig+0xe4>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d007      	beq.n	800575e <TIM_OC3_SetConfig+0x96>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a17      	ldr	r2, [pc, #92]	; (80057b0 <TIM_OC3_SetConfig+0xe8>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d003      	beq.n	800575e <TIM_OC3_SetConfig+0x96>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a16      	ldr	r2, [pc, #88]	; (80057b4 <TIM_OC3_SetConfig+0xec>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d113      	bne.n	8005786 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800576c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	011b      	lsls	r3, r3, #4
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	4313      	orrs	r3, r2
 8005778:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	011b      	lsls	r3, r3, #4
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	4313      	orrs	r3, r2
 8005784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	621a      	str	r2, [r3, #32]
}
 80057a0:	bf00      	nop
 80057a2:	371c      	adds	r7, #28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	40012c00 	.word	0x40012c00
 80057b0:	40014000 	.word	0x40014000
 80057b4:	40014400 	.word	0x40014400

080057b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b087      	sub	sp, #28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	021b      	lsls	r3, r3, #8
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005806:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	031b      	lsls	r3, r3, #12
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	4313      	orrs	r3, r2
 8005812:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a14      	ldr	r2, [pc, #80]	; (8005868 <TIM_OC4_SetConfig+0xb0>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d007      	beq.n	800582c <TIM_OC4_SetConfig+0x74>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a13      	ldr	r2, [pc, #76]	; (800586c <TIM_OC4_SetConfig+0xb4>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d003      	beq.n	800582c <TIM_OC4_SetConfig+0x74>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a12      	ldr	r2, [pc, #72]	; (8005870 <TIM_OC4_SetConfig+0xb8>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d109      	bne.n	8005840 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005832:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	019b      	lsls	r3, r3, #6
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	4313      	orrs	r3, r2
 800583e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	621a      	str	r2, [r3, #32]
}
 800585a:	bf00      	nop
 800585c:	371c      	adds	r7, #28
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	40012c00 	.word	0x40012c00
 800586c:	40014000 	.word	0x40014000
 8005870:	40014400 	.word	0x40014400

08005874 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005874:	b480      	push	{r7}
 8005876:	b087      	sub	sp, #28
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80058b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	041b      	lsls	r3, r3, #16
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a13      	ldr	r2, [pc, #76]	; (8005918 <TIM_OC5_SetConfig+0xa4>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d007      	beq.n	80058de <TIM_OC5_SetConfig+0x6a>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a12      	ldr	r2, [pc, #72]	; (800591c <TIM_OC5_SetConfig+0xa8>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d003      	beq.n	80058de <TIM_OC5_SetConfig+0x6a>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a11      	ldr	r2, [pc, #68]	; (8005920 <TIM_OC5_SetConfig+0xac>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d109      	bne.n	80058f2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	021b      	lsls	r3, r3, #8
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	621a      	str	r2, [r3, #32]
}
 800590c:	bf00      	nop
 800590e:	371c      	adds	r7, #28
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr
 8005918:	40012c00 	.word	0x40012c00
 800591c:	40014000 	.word	0x40014000
 8005920:	40014400 	.word	0x40014400

08005924 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005924:	b480      	push	{r7}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	021b      	lsls	r3, r3, #8
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	4313      	orrs	r3, r2
 8005962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800596a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	051b      	lsls	r3, r3, #20
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	4313      	orrs	r3, r2
 8005976:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a14      	ldr	r2, [pc, #80]	; (80059cc <TIM_OC6_SetConfig+0xa8>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d007      	beq.n	8005990 <TIM_OC6_SetConfig+0x6c>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a13      	ldr	r2, [pc, #76]	; (80059d0 <TIM_OC6_SetConfig+0xac>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d003      	beq.n	8005990 <TIM_OC6_SetConfig+0x6c>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a12      	ldr	r2, [pc, #72]	; (80059d4 <TIM_OC6_SetConfig+0xb0>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d109      	bne.n	80059a4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005996:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	029b      	lsls	r3, r3, #10
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	621a      	str	r2, [r3, #32]
}
 80059be:	bf00      	nop
 80059c0:	371c      	adds	r7, #28
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	40012c00 	.word	0x40012c00
 80059d0:	40014000 	.word	0x40014000
 80059d4:	40014400 	.word	0x40014400

080059d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	f003 031f 	and.w	r3, r3, #31
 80059ea:	2201      	movs	r2, #1
 80059ec:	fa02 f303 	lsl.w	r3, r2, r3
 80059f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6a1a      	ldr	r2, [r3, #32]
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	43db      	mvns	r3, r3
 80059fa:	401a      	ands	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6a1a      	ldr	r2, [r3, #32]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	f003 031f 	and.w	r3, r3, #31
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a10:	431a      	orrs	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	621a      	str	r2, [r3, #32]
}
 8005a16:	bf00      	nop
 8005a18:	371c      	adds	r7, #28
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
	...

08005a24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d101      	bne.n	8005a3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a38:	2302      	movs	r3, #2
 8005a3a:	e04f      	b.n	8005adc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2202      	movs	r2, #2
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a21      	ldr	r2, [pc, #132]	; (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d108      	bne.n	8005a78 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a6c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a14      	ldr	r2, [pc, #80]	; (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d009      	beq.n	8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aa4:	d004      	beq.n	8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a10      	ldr	r2, [pc, #64]	; (8005aec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d10c      	bne.n	8005aca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ab6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3714      	adds	r7, #20
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr
 8005ae8:	40012c00 	.word	0x40012c00
 8005aec:	40014000 	.word	0x40014000

08005af0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d101      	bne.n	8005b0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b08:	2302      	movs	r3, #2
 8005b0a:	e060      	b.n	8005bce <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	041b      	lsls	r3, r3, #16
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a14      	ldr	r2, [pc, #80]	; (8005bdc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d115      	bne.n	8005bbc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	051b      	lsls	r3, r3, #20
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	69db      	ldr	r3, [r3, #28]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	40012c00 	.word	0x40012c00

08005be0 <__errno>:
 8005be0:	4b01      	ldr	r3, [pc, #4]	; (8005be8 <__errno+0x8>)
 8005be2:	6818      	ldr	r0, [r3, #0]
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	200000a4 	.word	0x200000a4

08005bec <__libc_init_array>:
 8005bec:	b570      	push	{r4, r5, r6, lr}
 8005bee:	4d0d      	ldr	r5, [pc, #52]	; (8005c24 <__libc_init_array+0x38>)
 8005bf0:	4c0d      	ldr	r4, [pc, #52]	; (8005c28 <__libc_init_array+0x3c>)
 8005bf2:	1b64      	subs	r4, r4, r5
 8005bf4:	10a4      	asrs	r4, r4, #2
 8005bf6:	2600      	movs	r6, #0
 8005bf8:	42a6      	cmp	r6, r4
 8005bfa:	d109      	bne.n	8005c10 <__libc_init_array+0x24>
 8005bfc:	4d0b      	ldr	r5, [pc, #44]	; (8005c2c <__libc_init_array+0x40>)
 8005bfe:	4c0c      	ldr	r4, [pc, #48]	; (8005c30 <__libc_init_array+0x44>)
 8005c00:	f003 fa56 	bl	80090b0 <_init>
 8005c04:	1b64      	subs	r4, r4, r5
 8005c06:	10a4      	asrs	r4, r4, #2
 8005c08:	2600      	movs	r6, #0
 8005c0a:	42a6      	cmp	r6, r4
 8005c0c:	d105      	bne.n	8005c1a <__libc_init_array+0x2e>
 8005c0e:	bd70      	pop	{r4, r5, r6, pc}
 8005c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c14:	4798      	blx	r3
 8005c16:	3601      	adds	r6, #1
 8005c18:	e7ee      	b.n	8005bf8 <__libc_init_array+0xc>
 8005c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c1e:	4798      	blx	r3
 8005c20:	3601      	adds	r6, #1
 8005c22:	e7f2      	b.n	8005c0a <__libc_init_array+0x1e>
 8005c24:	080095e0 	.word	0x080095e0
 8005c28:	080095e0 	.word	0x080095e0
 8005c2c:	080095e0 	.word	0x080095e0
 8005c30:	080095e4 	.word	0x080095e4

08005c34 <memset>:
 8005c34:	4402      	add	r2, r0
 8005c36:	4603      	mov	r3, r0
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d100      	bne.n	8005c3e <memset+0xa>
 8005c3c:	4770      	bx	lr
 8005c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c42:	e7f9      	b.n	8005c38 <memset+0x4>

08005c44 <__cvt>:
 8005c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c48:	ec55 4b10 	vmov	r4, r5, d0
 8005c4c:	2d00      	cmp	r5, #0
 8005c4e:	460e      	mov	r6, r1
 8005c50:	4619      	mov	r1, r3
 8005c52:	462b      	mov	r3, r5
 8005c54:	bfbb      	ittet	lt
 8005c56:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005c5a:	461d      	movlt	r5, r3
 8005c5c:	2300      	movge	r3, #0
 8005c5e:	232d      	movlt	r3, #45	; 0x2d
 8005c60:	700b      	strb	r3, [r1, #0]
 8005c62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c64:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005c68:	4691      	mov	r9, r2
 8005c6a:	f023 0820 	bic.w	r8, r3, #32
 8005c6e:	bfbc      	itt	lt
 8005c70:	4622      	movlt	r2, r4
 8005c72:	4614      	movlt	r4, r2
 8005c74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c78:	d005      	beq.n	8005c86 <__cvt+0x42>
 8005c7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005c7e:	d100      	bne.n	8005c82 <__cvt+0x3e>
 8005c80:	3601      	adds	r6, #1
 8005c82:	2102      	movs	r1, #2
 8005c84:	e000      	b.n	8005c88 <__cvt+0x44>
 8005c86:	2103      	movs	r1, #3
 8005c88:	ab03      	add	r3, sp, #12
 8005c8a:	9301      	str	r3, [sp, #4]
 8005c8c:	ab02      	add	r3, sp, #8
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	ec45 4b10 	vmov	d0, r4, r5
 8005c94:	4653      	mov	r3, sl
 8005c96:	4632      	mov	r2, r6
 8005c98:	f000 fcea 	bl	8006670 <_dtoa_r>
 8005c9c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ca0:	4607      	mov	r7, r0
 8005ca2:	d102      	bne.n	8005caa <__cvt+0x66>
 8005ca4:	f019 0f01 	tst.w	r9, #1
 8005ca8:	d022      	beq.n	8005cf0 <__cvt+0xac>
 8005caa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005cae:	eb07 0906 	add.w	r9, r7, r6
 8005cb2:	d110      	bne.n	8005cd6 <__cvt+0x92>
 8005cb4:	783b      	ldrb	r3, [r7, #0]
 8005cb6:	2b30      	cmp	r3, #48	; 0x30
 8005cb8:	d10a      	bne.n	8005cd0 <__cvt+0x8c>
 8005cba:	2200      	movs	r2, #0
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	4629      	mov	r1, r5
 8005cc2:	f7fa ff01 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cc6:	b918      	cbnz	r0, 8005cd0 <__cvt+0x8c>
 8005cc8:	f1c6 0601 	rsb	r6, r6, #1
 8005ccc:	f8ca 6000 	str.w	r6, [sl]
 8005cd0:	f8da 3000 	ldr.w	r3, [sl]
 8005cd4:	4499      	add	r9, r3
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	2300      	movs	r3, #0
 8005cda:	4620      	mov	r0, r4
 8005cdc:	4629      	mov	r1, r5
 8005cde:	f7fa fef3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ce2:	b108      	cbz	r0, 8005ce8 <__cvt+0xa4>
 8005ce4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ce8:	2230      	movs	r2, #48	; 0x30
 8005cea:	9b03      	ldr	r3, [sp, #12]
 8005cec:	454b      	cmp	r3, r9
 8005cee:	d307      	bcc.n	8005d00 <__cvt+0xbc>
 8005cf0:	9b03      	ldr	r3, [sp, #12]
 8005cf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005cf4:	1bdb      	subs	r3, r3, r7
 8005cf6:	4638      	mov	r0, r7
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	b004      	add	sp, #16
 8005cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d00:	1c59      	adds	r1, r3, #1
 8005d02:	9103      	str	r1, [sp, #12]
 8005d04:	701a      	strb	r2, [r3, #0]
 8005d06:	e7f0      	b.n	8005cea <__cvt+0xa6>

08005d08 <__exponent>:
 8005d08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2900      	cmp	r1, #0
 8005d0e:	bfb8      	it	lt
 8005d10:	4249      	neglt	r1, r1
 8005d12:	f803 2b02 	strb.w	r2, [r3], #2
 8005d16:	bfb4      	ite	lt
 8005d18:	222d      	movlt	r2, #45	; 0x2d
 8005d1a:	222b      	movge	r2, #43	; 0x2b
 8005d1c:	2909      	cmp	r1, #9
 8005d1e:	7042      	strb	r2, [r0, #1]
 8005d20:	dd2a      	ble.n	8005d78 <__exponent+0x70>
 8005d22:	f10d 0407 	add.w	r4, sp, #7
 8005d26:	46a4      	mov	ip, r4
 8005d28:	270a      	movs	r7, #10
 8005d2a:	46a6      	mov	lr, r4
 8005d2c:	460a      	mov	r2, r1
 8005d2e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005d32:	fb07 1516 	mls	r5, r7, r6, r1
 8005d36:	3530      	adds	r5, #48	; 0x30
 8005d38:	2a63      	cmp	r2, #99	; 0x63
 8005d3a:	f104 34ff 	add.w	r4, r4, #4294967295
 8005d3e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005d42:	4631      	mov	r1, r6
 8005d44:	dcf1      	bgt.n	8005d2a <__exponent+0x22>
 8005d46:	3130      	adds	r1, #48	; 0x30
 8005d48:	f1ae 0502 	sub.w	r5, lr, #2
 8005d4c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005d50:	1c44      	adds	r4, r0, #1
 8005d52:	4629      	mov	r1, r5
 8005d54:	4561      	cmp	r1, ip
 8005d56:	d30a      	bcc.n	8005d6e <__exponent+0x66>
 8005d58:	f10d 0209 	add.w	r2, sp, #9
 8005d5c:	eba2 020e 	sub.w	r2, r2, lr
 8005d60:	4565      	cmp	r5, ip
 8005d62:	bf88      	it	hi
 8005d64:	2200      	movhi	r2, #0
 8005d66:	4413      	add	r3, r2
 8005d68:	1a18      	subs	r0, r3, r0
 8005d6a:	b003      	add	sp, #12
 8005d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d72:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005d76:	e7ed      	b.n	8005d54 <__exponent+0x4c>
 8005d78:	2330      	movs	r3, #48	; 0x30
 8005d7a:	3130      	adds	r1, #48	; 0x30
 8005d7c:	7083      	strb	r3, [r0, #2]
 8005d7e:	70c1      	strb	r1, [r0, #3]
 8005d80:	1d03      	adds	r3, r0, #4
 8005d82:	e7f1      	b.n	8005d68 <__exponent+0x60>

08005d84 <_printf_float>:
 8005d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d88:	ed2d 8b02 	vpush	{d8}
 8005d8c:	b08d      	sub	sp, #52	; 0x34
 8005d8e:	460c      	mov	r4, r1
 8005d90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005d94:	4616      	mov	r6, r2
 8005d96:	461f      	mov	r7, r3
 8005d98:	4605      	mov	r5, r0
 8005d9a:	f001 fa57 	bl	800724c <_localeconv_r>
 8005d9e:	f8d0 a000 	ldr.w	sl, [r0]
 8005da2:	4650      	mov	r0, sl
 8005da4:	f7fa fa14 	bl	80001d0 <strlen>
 8005da8:	2300      	movs	r3, #0
 8005daa:	930a      	str	r3, [sp, #40]	; 0x28
 8005dac:	6823      	ldr	r3, [r4, #0]
 8005dae:	9305      	str	r3, [sp, #20]
 8005db0:	f8d8 3000 	ldr.w	r3, [r8]
 8005db4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005db8:	3307      	adds	r3, #7
 8005dba:	f023 0307 	bic.w	r3, r3, #7
 8005dbe:	f103 0208 	add.w	r2, r3, #8
 8005dc2:	f8c8 2000 	str.w	r2, [r8]
 8005dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005dce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005dd2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005dd6:	9307      	str	r3, [sp, #28]
 8005dd8:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ddc:	ee08 0a10 	vmov	s16, r0
 8005de0:	4b9f      	ldr	r3, [pc, #636]	; (8006060 <_printf_float+0x2dc>)
 8005de2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005de6:	f04f 32ff 	mov.w	r2, #4294967295
 8005dea:	f7fa fe9f 	bl	8000b2c <__aeabi_dcmpun>
 8005dee:	bb88      	cbnz	r0, 8005e54 <_printf_float+0xd0>
 8005df0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005df4:	4b9a      	ldr	r3, [pc, #616]	; (8006060 <_printf_float+0x2dc>)
 8005df6:	f04f 32ff 	mov.w	r2, #4294967295
 8005dfa:	f7fa fe79 	bl	8000af0 <__aeabi_dcmple>
 8005dfe:	bb48      	cbnz	r0, 8005e54 <_printf_float+0xd0>
 8005e00:	2200      	movs	r2, #0
 8005e02:	2300      	movs	r3, #0
 8005e04:	4640      	mov	r0, r8
 8005e06:	4649      	mov	r1, r9
 8005e08:	f7fa fe68 	bl	8000adc <__aeabi_dcmplt>
 8005e0c:	b110      	cbz	r0, 8005e14 <_printf_float+0x90>
 8005e0e:	232d      	movs	r3, #45	; 0x2d
 8005e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e14:	4b93      	ldr	r3, [pc, #588]	; (8006064 <_printf_float+0x2e0>)
 8005e16:	4894      	ldr	r0, [pc, #592]	; (8006068 <_printf_float+0x2e4>)
 8005e18:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005e1c:	bf94      	ite	ls
 8005e1e:	4698      	movls	r8, r3
 8005e20:	4680      	movhi	r8, r0
 8005e22:	2303      	movs	r3, #3
 8005e24:	6123      	str	r3, [r4, #16]
 8005e26:	9b05      	ldr	r3, [sp, #20]
 8005e28:	f023 0204 	bic.w	r2, r3, #4
 8005e2c:	6022      	str	r2, [r4, #0]
 8005e2e:	f04f 0900 	mov.w	r9, #0
 8005e32:	9700      	str	r7, [sp, #0]
 8005e34:	4633      	mov	r3, r6
 8005e36:	aa0b      	add	r2, sp, #44	; 0x2c
 8005e38:	4621      	mov	r1, r4
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	f000 f9d8 	bl	80061f0 <_printf_common>
 8005e40:	3001      	adds	r0, #1
 8005e42:	f040 8090 	bne.w	8005f66 <_printf_float+0x1e2>
 8005e46:	f04f 30ff 	mov.w	r0, #4294967295
 8005e4a:	b00d      	add	sp, #52	; 0x34
 8005e4c:	ecbd 8b02 	vpop	{d8}
 8005e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e54:	4642      	mov	r2, r8
 8005e56:	464b      	mov	r3, r9
 8005e58:	4640      	mov	r0, r8
 8005e5a:	4649      	mov	r1, r9
 8005e5c:	f7fa fe66 	bl	8000b2c <__aeabi_dcmpun>
 8005e60:	b140      	cbz	r0, 8005e74 <_printf_float+0xf0>
 8005e62:	464b      	mov	r3, r9
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	bfbc      	itt	lt
 8005e68:	232d      	movlt	r3, #45	; 0x2d
 8005e6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005e6e:	487f      	ldr	r0, [pc, #508]	; (800606c <_printf_float+0x2e8>)
 8005e70:	4b7f      	ldr	r3, [pc, #508]	; (8006070 <_printf_float+0x2ec>)
 8005e72:	e7d1      	b.n	8005e18 <_printf_float+0x94>
 8005e74:	6863      	ldr	r3, [r4, #4]
 8005e76:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005e7a:	9206      	str	r2, [sp, #24]
 8005e7c:	1c5a      	adds	r2, r3, #1
 8005e7e:	d13f      	bne.n	8005f00 <_printf_float+0x17c>
 8005e80:	2306      	movs	r3, #6
 8005e82:	6063      	str	r3, [r4, #4]
 8005e84:	9b05      	ldr	r3, [sp, #20]
 8005e86:	6861      	ldr	r1, [r4, #4]
 8005e88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	9303      	str	r3, [sp, #12]
 8005e90:	ab0a      	add	r3, sp, #40	; 0x28
 8005e92:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005e96:	ab09      	add	r3, sp, #36	; 0x24
 8005e98:	ec49 8b10 	vmov	d0, r8, r9
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	6022      	str	r2, [r4, #0]
 8005ea0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	f7ff fecd 	bl	8005c44 <__cvt>
 8005eaa:	9b06      	ldr	r3, [sp, #24]
 8005eac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005eae:	2b47      	cmp	r3, #71	; 0x47
 8005eb0:	4680      	mov	r8, r0
 8005eb2:	d108      	bne.n	8005ec6 <_printf_float+0x142>
 8005eb4:	1cc8      	adds	r0, r1, #3
 8005eb6:	db02      	blt.n	8005ebe <_printf_float+0x13a>
 8005eb8:	6863      	ldr	r3, [r4, #4]
 8005eba:	4299      	cmp	r1, r3
 8005ebc:	dd41      	ble.n	8005f42 <_printf_float+0x1be>
 8005ebe:	f1ab 0b02 	sub.w	fp, fp, #2
 8005ec2:	fa5f fb8b 	uxtb.w	fp, fp
 8005ec6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005eca:	d820      	bhi.n	8005f0e <_printf_float+0x18a>
 8005ecc:	3901      	subs	r1, #1
 8005ece:	465a      	mov	r2, fp
 8005ed0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ed4:	9109      	str	r1, [sp, #36]	; 0x24
 8005ed6:	f7ff ff17 	bl	8005d08 <__exponent>
 8005eda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005edc:	1813      	adds	r3, r2, r0
 8005ede:	2a01      	cmp	r2, #1
 8005ee0:	4681      	mov	r9, r0
 8005ee2:	6123      	str	r3, [r4, #16]
 8005ee4:	dc02      	bgt.n	8005eec <_printf_float+0x168>
 8005ee6:	6822      	ldr	r2, [r4, #0]
 8005ee8:	07d2      	lsls	r2, r2, #31
 8005eea:	d501      	bpl.n	8005ef0 <_printf_float+0x16c>
 8005eec:	3301      	adds	r3, #1
 8005eee:	6123      	str	r3, [r4, #16]
 8005ef0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d09c      	beq.n	8005e32 <_printf_float+0xae>
 8005ef8:	232d      	movs	r3, #45	; 0x2d
 8005efa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005efe:	e798      	b.n	8005e32 <_printf_float+0xae>
 8005f00:	9a06      	ldr	r2, [sp, #24]
 8005f02:	2a47      	cmp	r2, #71	; 0x47
 8005f04:	d1be      	bne.n	8005e84 <_printf_float+0x100>
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1bc      	bne.n	8005e84 <_printf_float+0x100>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e7b9      	b.n	8005e82 <_printf_float+0xfe>
 8005f0e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005f12:	d118      	bne.n	8005f46 <_printf_float+0x1c2>
 8005f14:	2900      	cmp	r1, #0
 8005f16:	6863      	ldr	r3, [r4, #4]
 8005f18:	dd0b      	ble.n	8005f32 <_printf_float+0x1ae>
 8005f1a:	6121      	str	r1, [r4, #16]
 8005f1c:	b913      	cbnz	r3, 8005f24 <_printf_float+0x1a0>
 8005f1e:	6822      	ldr	r2, [r4, #0]
 8005f20:	07d0      	lsls	r0, r2, #31
 8005f22:	d502      	bpl.n	8005f2a <_printf_float+0x1a6>
 8005f24:	3301      	adds	r3, #1
 8005f26:	440b      	add	r3, r1
 8005f28:	6123      	str	r3, [r4, #16]
 8005f2a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005f2c:	f04f 0900 	mov.w	r9, #0
 8005f30:	e7de      	b.n	8005ef0 <_printf_float+0x16c>
 8005f32:	b913      	cbnz	r3, 8005f3a <_printf_float+0x1b6>
 8005f34:	6822      	ldr	r2, [r4, #0]
 8005f36:	07d2      	lsls	r2, r2, #31
 8005f38:	d501      	bpl.n	8005f3e <_printf_float+0x1ba>
 8005f3a:	3302      	adds	r3, #2
 8005f3c:	e7f4      	b.n	8005f28 <_printf_float+0x1a4>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e7f2      	b.n	8005f28 <_printf_float+0x1a4>
 8005f42:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f48:	4299      	cmp	r1, r3
 8005f4a:	db05      	blt.n	8005f58 <_printf_float+0x1d4>
 8005f4c:	6823      	ldr	r3, [r4, #0]
 8005f4e:	6121      	str	r1, [r4, #16]
 8005f50:	07d8      	lsls	r0, r3, #31
 8005f52:	d5ea      	bpl.n	8005f2a <_printf_float+0x1a6>
 8005f54:	1c4b      	adds	r3, r1, #1
 8005f56:	e7e7      	b.n	8005f28 <_printf_float+0x1a4>
 8005f58:	2900      	cmp	r1, #0
 8005f5a:	bfd4      	ite	le
 8005f5c:	f1c1 0202 	rsble	r2, r1, #2
 8005f60:	2201      	movgt	r2, #1
 8005f62:	4413      	add	r3, r2
 8005f64:	e7e0      	b.n	8005f28 <_printf_float+0x1a4>
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	055a      	lsls	r2, r3, #21
 8005f6a:	d407      	bmi.n	8005f7c <_printf_float+0x1f8>
 8005f6c:	6923      	ldr	r3, [r4, #16]
 8005f6e:	4642      	mov	r2, r8
 8005f70:	4631      	mov	r1, r6
 8005f72:	4628      	mov	r0, r5
 8005f74:	47b8      	blx	r7
 8005f76:	3001      	adds	r0, #1
 8005f78:	d12c      	bne.n	8005fd4 <_printf_float+0x250>
 8005f7a:	e764      	b.n	8005e46 <_printf_float+0xc2>
 8005f7c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f80:	f240 80e0 	bls.w	8006144 <_printf_float+0x3c0>
 8005f84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f88:	2200      	movs	r2, #0
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	f7fa fd9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f90:	2800      	cmp	r0, #0
 8005f92:	d034      	beq.n	8005ffe <_printf_float+0x27a>
 8005f94:	4a37      	ldr	r2, [pc, #220]	; (8006074 <_printf_float+0x2f0>)
 8005f96:	2301      	movs	r3, #1
 8005f98:	4631      	mov	r1, r6
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	47b8      	blx	r7
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	f43f af51 	beq.w	8005e46 <_printf_float+0xc2>
 8005fa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	db02      	blt.n	8005fb2 <_printf_float+0x22e>
 8005fac:	6823      	ldr	r3, [r4, #0]
 8005fae:	07d8      	lsls	r0, r3, #31
 8005fb0:	d510      	bpl.n	8005fd4 <_printf_float+0x250>
 8005fb2:	ee18 3a10 	vmov	r3, s16
 8005fb6:	4652      	mov	r2, sl
 8005fb8:	4631      	mov	r1, r6
 8005fba:	4628      	mov	r0, r5
 8005fbc:	47b8      	blx	r7
 8005fbe:	3001      	adds	r0, #1
 8005fc0:	f43f af41 	beq.w	8005e46 <_printf_float+0xc2>
 8005fc4:	f04f 0800 	mov.w	r8, #0
 8005fc8:	f104 091a 	add.w	r9, r4, #26
 8005fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	4543      	cmp	r3, r8
 8005fd2:	dc09      	bgt.n	8005fe8 <_printf_float+0x264>
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	079b      	lsls	r3, r3, #30
 8005fd8:	f100 8105 	bmi.w	80061e6 <_printf_float+0x462>
 8005fdc:	68e0      	ldr	r0, [r4, #12]
 8005fde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fe0:	4298      	cmp	r0, r3
 8005fe2:	bfb8      	it	lt
 8005fe4:	4618      	movlt	r0, r3
 8005fe6:	e730      	b.n	8005e4a <_printf_float+0xc6>
 8005fe8:	2301      	movs	r3, #1
 8005fea:	464a      	mov	r2, r9
 8005fec:	4631      	mov	r1, r6
 8005fee:	4628      	mov	r0, r5
 8005ff0:	47b8      	blx	r7
 8005ff2:	3001      	adds	r0, #1
 8005ff4:	f43f af27 	beq.w	8005e46 <_printf_float+0xc2>
 8005ff8:	f108 0801 	add.w	r8, r8, #1
 8005ffc:	e7e6      	b.n	8005fcc <_printf_float+0x248>
 8005ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006000:	2b00      	cmp	r3, #0
 8006002:	dc39      	bgt.n	8006078 <_printf_float+0x2f4>
 8006004:	4a1b      	ldr	r2, [pc, #108]	; (8006074 <_printf_float+0x2f0>)
 8006006:	2301      	movs	r3, #1
 8006008:	4631      	mov	r1, r6
 800600a:	4628      	mov	r0, r5
 800600c:	47b8      	blx	r7
 800600e:	3001      	adds	r0, #1
 8006010:	f43f af19 	beq.w	8005e46 <_printf_float+0xc2>
 8006014:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006018:	4313      	orrs	r3, r2
 800601a:	d102      	bne.n	8006022 <_printf_float+0x29e>
 800601c:	6823      	ldr	r3, [r4, #0]
 800601e:	07d9      	lsls	r1, r3, #31
 8006020:	d5d8      	bpl.n	8005fd4 <_printf_float+0x250>
 8006022:	ee18 3a10 	vmov	r3, s16
 8006026:	4652      	mov	r2, sl
 8006028:	4631      	mov	r1, r6
 800602a:	4628      	mov	r0, r5
 800602c:	47b8      	blx	r7
 800602e:	3001      	adds	r0, #1
 8006030:	f43f af09 	beq.w	8005e46 <_printf_float+0xc2>
 8006034:	f04f 0900 	mov.w	r9, #0
 8006038:	f104 0a1a 	add.w	sl, r4, #26
 800603c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800603e:	425b      	negs	r3, r3
 8006040:	454b      	cmp	r3, r9
 8006042:	dc01      	bgt.n	8006048 <_printf_float+0x2c4>
 8006044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006046:	e792      	b.n	8005f6e <_printf_float+0x1ea>
 8006048:	2301      	movs	r3, #1
 800604a:	4652      	mov	r2, sl
 800604c:	4631      	mov	r1, r6
 800604e:	4628      	mov	r0, r5
 8006050:	47b8      	blx	r7
 8006052:	3001      	adds	r0, #1
 8006054:	f43f aef7 	beq.w	8005e46 <_printf_float+0xc2>
 8006058:	f109 0901 	add.w	r9, r9, #1
 800605c:	e7ee      	b.n	800603c <_printf_float+0x2b8>
 800605e:	bf00      	nop
 8006060:	7fefffff 	.word	0x7fefffff
 8006064:	08009194 	.word	0x08009194
 8006068:	08009198 	.word	0x08009198
 800606c:	080091a0 	.word	0x080091a0
 8006070:	0800919c 	.word	0x0800919c
 8006074:	080091a4 	.word	0x080091a4
 8006078:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800607a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800607c:	429a      	cmp	r2, r3
 800607e:	bfa8      	it	ge
 8006080:	461a      	movge	r2, r3
 8006082:	2a00      	cmp	r2, #0
 8006084:	4691      	mov	r9, r2
 8006086:	dc37      	bgt.n	80060f8 <_printf_float+0x374>
 8006088:	f04f 0b00 	mov.w	fp, #0
 800608c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006090:	f104 021a 	add.w	r2, r4, #26
 8006094:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006096:	9305      	str	r3, [sp, #20]
 8006098:	eba3 0309 	sub.w	r3, r3, r9
 800609c:	455b      	cmp	r3, fp
 800609e:	dc33      	bgt.n	8006108 <_printf_float+0x384>
 80060a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060a4:	429a      	cmp	r2, r3
 80060a6:	db3b      	blt.n	8006120 <_printf_float+0x39c>
 80060a8:	6823      	ldr	r3, [r4, #0]
 80060aa:	07da      	lsls	r2, r3, #31
 80060ac:	d438      	bmi.n	8006120 <_printf_float+0x39c>
 80060ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060b0:	9a05      	ldr	r2, [sp, #20]
 80060b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060b4:	1a9a      	subs	r2, r3, r2
 80060b6:	eba3 0901 	sub.w	r9, r3, r1
 80060ba:	4591      	cmp	r9, r2
 80060bc:	bfa8      	it	ge
 80060be:	4691      	movge	r9, r2
 80060c0:	f1b9 0f00 	cmp.w	r9, #0
 80060c4:	dc35      	bgt.n	8006132 <_printf_float+0x3ae>
 80060c6:	f04f 0800 	mov.w	r8, #0
 80060ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060ce:	f104 0a1a 	add.w	sl, r4, #26
 80060d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060d6:	1a9b      	subs	r3, r3, r2
 80060d8:	eba3 0309 	sub.w	r3, r3, r9
 80060dc:	4543      	cmp	r3, r8
 80060de:	f77f af79 	ble.w	8005fd4 <_printf_float+0x250>
 80060e2:	2301      	movs	r3, #1
 80060e4:	4652      	mov	r2, sl
 80060e6:	4631      	mov	r1, r6
 80060e8:	4628      	mov	r0, r5
 80060ea:	47b8      	blx	r7
 80060ec:	3001      	adds	r0, #1
 80060ee:	f43f aeaa 	beq.w	8005e46 <_printf_float+0xc2>
 80060f2:	f108 0801 	add.w	r8, r8, #1
 80060f6:	e7ec      	b.n	80060d2 <_printf_float+0x34e>
 80060f8:	4613      	mov	r3, r2
 80060fa:	4631      	mov	r1, r6
 80060fc:	4642      	mov	r2, r8
 80060fe:	4628      	mov	r0, r5
 8006100:	47b8      	blx	r7
 8006102:	3001      	adds	r0, #1
 8006104:	d1c0      	bne.n	8006088 <_printf_float+0x304>
 8006106:	e69e      	b.n	8005e46 <_printf_float+0xc2>
 8006108:	2301      	movs	r3, #1
 800610a:	4631      	mov	r1, r6
 800610c:	4628      	mov	r0, r5
 800610e:	9205      	str	r2, [sp, #20]
 8006110:	47b8      	blx	r7
 8006112:	3001      	adds	r0, #1
 8006114:	f43f ae97 	beq.w	8005e46 <_printf_float+0xc2>
 8006118:	9a05      	ldr	r2, [sp, #20]
 800611a:	f10b 0b01 	add.w	fp, fp, #1
 800611e:	e7b9      	b.n	8006094 <_printf_float+0x310>
 8006120:	ee18 3a10 	vmov	r3, s16
 8006124:	4652      	mov	r2, sl
 8006126:	4631      	mov	r1, r6
 8006128:	4628      	mov	r0, r5
 800612a:	47b8      	blx	r7
 800612c:	3001      	adds	r0, #1
 800612e:	d1be      	bne.n	80060ae <_printf_float+0x32a>
 8006130:	e689      	b.n	8005e46 <_printf_float+0xc2>
 8006132:	9a05      	ldr	r2, [sp, #20]
 8006134:	464b      	mov	r3, r9
 8006136:	4442      	add	r2, r8
 8006138:	4631      	mov	r1, r6
 800613a:	4628      	mov	r0, r5
 800613c:	47b8      	blx	r7
 800613e:	3001      	adds	r0, #1
 8006140:	d1c1      	bne.n	80060c6 <_printf_float+0x342>
 8006142:	e680      	b.n	8005e46 <_printf_float+0xc2>
 8006144:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006146:	2a01      	cmp	r2, #1
 8006148:	dc01      	bgt.n	800614e <_printf_float+0x3ca>
 800614a:	07db      	lsls	r3, r3, #31
 800614c:	d538      	bpl.n	80061c0 <_printf_float+0x43c>
 800614e:	2301      	movs	r3, #1
 8006150:	4642      	mov	r2, r8
 8006152:	4631      	mov	r1, r6
 8006154:	4628      	mov	r0, r5
 8006156:	47b8      	blx	r7
 8006158:	3001      	adds	r0, #1
 800615a:	f43f ae74 	beq.w	8005e46 <_printf_float+0xc2>
 800615e:	ee18 3a10 	vmov	r3, s16
 8006162:	4652      	mov	r2, sl
 8006164:	4631      	mov	r1, r6
 8006166:	4628      	mov	r0, r5
 8006168:	47b8      	blx	r7
 800616a:	3001      	adds	r0, #1
 800616c:	f43f ae6b 	beq.w	8005e46 <_printf_float+0xc2>
 8006170:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006174:	2200      	movs	r2, #0
 8006176:	2300      	movs	r3, #0
 8006178:	f7fa fca6 	bl	8000ac8 <__aeabi_dcmpeq>
 800617c:	b9d8      	cbnz	r0, 80061b6 <_printf_float+0x432>
 800617e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006180:	f108 0201 	add.w	r2, r8, #1
 8006184:	3b01      	subs	r3, #1
 8006186:	4631      	mov	r1, r6
 8006188:	4628      	mov	r0, r5
 800618a:	47b8      	blx	r7
 800618c:	3001      	adds	r0, #1
 800618e:	d10e      	bne.n	80061ae <_printf_float+0x42a>
 8006190:	e659      	b.n	8005e46 <_printf_float+0xc2>
 8006192:	2301      	movs	r3, #1
 8006194:	4652      	mov	r2, sl
 8006196:	4631      	mov	r1, r6
 8006198:	4628      	mov	r0, r5
 800619a:	47b8      	blx	r7
 800619c:	3001      	adds	r0, #1
 800619e:	f43f ae52 	beq.w	8005e46 <_printf_float+0xc2>
 80061a2:	f108 0801 	add.w	r8, r8, #1
 80061a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061a8:	3b01      	subs	r3, #1
 80061aa:	4543      	cmp	r3, r8
 80061ac:	dcf1      	bgt.n	8006192 <_printf_float+0x40e>
 80061ae:	464b      	mov	r3, r9
 80061b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80061b4:	e6dc      	b.n	8005f70 <_printf_float+0x1ec>
 80061b6:	f04f 0800 	mov.w	r8, #0
 80061ba:	f104 0a1a 	add.w	sl, r4, #26
 80061be:	e7f2      	b.n	80061a6 <_printf_float+0x422>
 80061c0:	2301      	movs	r3, #1
 80061c2:	4642      	mov	r2, r8
 80061c4:	e7df      	b.n	8006186 <_printf_float+0x402>
 80061c6:	2301      	movs	r3, #1
 80061c8:	464a      	mov	r2, r9
 80061ca:	4631      	mov	r1, r6
 80061cc:	4628      	mov	r0, r5
 80061ce:	47b8      	blx	r7
 80061d0:	3001      	adds	r0, #1
 80061d2:	f43f ae38 	beq.w	8005e46 <_printf_float+0xc2>
 80061d6:	f108 0801 	add.w	r8, r8, #1
 80061da:	68e3      	ldr	r3, [r4, #12]
 80061dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061de:	1a5b      	subs	r3, r3, r1
 80061e0:	4543      	cmp	r3, r8
 80061e2:	dcf0      	bgt.n	80061c6 <_printf_float+0x442>
 80061e4:	e6fa      	b.n	8005fdc <_printf_float+0x258>
 80061e6:	f04f 0800 	mov.w	r8, #0
 80061ea:	f104 0919 	add.w	r9, r4, #25
 80061ee:	e7f4      	b.n	80061da <_printf_float+0x456>

080061f0 <_printf_common>:
 80061f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061f4:	4616      	mov	r6, r2
 80061f6:	4699      	mov	r9, r3
 80061f8:	688a      	ldr	r2, [r1, #8]
 80061fa:	690b      	ldr	r3, [r1, #16]
 80061fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006200:	4293      	cmp	r3, r2
 8006202:	bfb8      	it	lt
 8006204:	4613      	movlt	r3, r2
 8006206:	6033      	str	r3, [r6, #0]
 8006208:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800620c:	4607      	mov	r7, r0
 800620e:	460c      	mov	r4, r1
 8006210:	b10a      	cbz	r2, 8006216 <_printf_common+0x26>
 8006212:	3301      	adds	r3, #1
 8006214:	6033      	str	r3, [r6, #0]
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	0699      	lsls	r1, r3, #26
 800621a:	bf42      	ittt	mi
 800621c:	6833      	ldrmi	r3, [r6, #0]
 800621e:	3302      	addmi	r3, #2
 8006220:	6033      	strmi	r3, [r6, #0]
 8006222:	6825      	ldr	r5, [r4, #0]
 8006224:	f015 0506 	ands.w	r5, r5, #6
 8006228:	d106      	bne.n	8006238 <_printf_common+0x48>
 800622a:	f104 0a19 	add.w	sl, r4, #25
 800622e:	68e3      	ldr	r3, [r4, #12]
 8006230:	6832      	ldr	r2, [r6, #0]
 8006232:	1a9b      	subs	r3, r3, r2
 8006234:	42ab      	cmp	r3, r5
 8006236:	dc26      	bgt.n	8006286 <_printf_common+0x96>
 8006238:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800623c:	1e13      	subs	r3, r2, #0
 800623e:	6822      	ldr	r2, [r4, #0]
 8006240:	bf18      	it	ne
 8006242:	2301      	movne	r3, #1
 8006244:	0692      	lsls	r2, r2, #26
 8006246:	d42b      	bmi.n	80062a0 <_printf_common+0xb0>
 8006248:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800624c:	4649      	mov	r1, r9
 800624e:	4638      	mov	r0, r7
 8006250:	47c0      	blx	r8
 8006252:	3001      	adds	r0, #1
 8006254:	d01e      	beq.n	8006294 <_printf_common+0xa4>
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	68e5      	ldr	r5, [r4, #12]
 800625a:	6832      	ldr	r2, [r6, #0]
 800625c:	f003 0306 	and.w	r3, r3, #6
 8006260:	2b04      	cmp	r3, #4
 8006262:	bf08      	it	eq
 8006264:	1aad      	subeq	r5, r5, r2
 8006266:	68a3      	ldr	r3, [r4, #8]
 8006268:	6922      	ldr	r2, [r4, #16]
 800626a:	bf0c      	ite	eq
 800626c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006270:	2500      	movne	r5, #0
 8006272:	4293      	cmp	r3, r2
 8006274:	bfc4      	itt	gt
 8006276:	1a9b      	subgt	r3, r3, r2
 8006278:	18ed      	addgt	r5, r5, r3
 800627a:	2600      	movs	r6, #0
 800627c:	341a      	adds	r4, #26
 800627e:	42b5      	cmp	r5, r6
 8006280:	d11a      	bne.n	80062b8 <_printf_common+0xc8>
 8006282:	2000      	movs	r0, #0
 8006284:	e008      	b.n	8006298 <_printf_common+0xa8>
 8006286:	2301      	movs	r3, #1
 8006288:	4652      	mov	r2, sl
 800628a:	4649      	mov	r1, r9
 800628c:	4638      	mov	r0, r7
 800628e:	47c0      	blx	r8
 8006290:	3001      	adds	r0, #1
 8006292:	d103      	bne.n	800629c <_printf_common+0xac>
 8006294:	f04f 30ff 	mov.w	r0, #4294967295
 8006298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800629c:	3501      	adds	r5, #1
 800629e:	e7c6      	b.n	800622e <_printf_common+0x3e>
 80062a0:	18e1      	adds	r1, r4, r3
 80062a2:	1c5a      	adds	r2, r3, #1
 80062a4:	2030      	movs	r0, #48	; 0x30
 80062a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062aa:	4422      	add	r2, r4
 80062ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062b4:	3302      	adds	r3, #2
 80062b6:	e7c7      	b.n	8006248 <_printf_common+0x58>
 80062b8:	2301      	movs	r3, #1
 80062ba:	4622      	mov	r2, r4
 80062bc:	4649      	mov	r1, r9
 80062be:	4638      	mov	r0, r7
 80062c0:	47c0      	blx	r8
 80062c2:	3001      	adds	r0, #1
 80062c4:	d0e6      	beq.n	8006294 <_printf_common+0xa4>
 80062c6:	3601      	adds	r6, #1
 80062c8:	e7d9      	b.n	800627e <_printf_common+0x8e>
	...

080062cc <_printf_i>:
 80062cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062d0:	7e0f      	ldrb	r7, [r1, #24]
 80062d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062d4:	2f78      	cmp	r7, #120	; 0x78
 80062d6:	4691      	mov	r9, r2
 80062d8:	4680      	mov	r8, r0
 80062da:	460c      	mov	r4, r1
 80062dc:	469a      	mov	sl, r3
 80062de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80062e2:	d807      	bhi.n	80062f4 <_printf_i+0x28>
 80062e4:	2f62      	cmp	r7, #98	; 0x62
 80062e6:	d80a      	bhi.n	80062fe <_printf_i+0x32>
 80062e8:	2f00      	cmp	r7, #0
 80062ea:	f000 80d8 	beq.w	800649e <_printf_i+0x1d2>
 80062ee:	2f58      	cmp	r7, #88	; 0x58
 80062f0:	f000 80a3 	beq.w	800643a <_printf_i+0x16e>
 80062f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062fc:	e03a      	b.n	8006374 <_printf_i+0xa8>
 80062fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006302:	2b15      	cmp	r3, #21
 8006304:	d8f6      	bhi.n	80062f4 <_printf_i+0x28>
 8006306:	a101      	add	r1, pc, #4	; (adr r1, 800630c <_printf_i+0x40>)
 8006308:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800630c:	08006365 	.word	0x08006365
 8006310:	08006379 	.word	0x08006379
 8006314:	080062f5 	.word	0x080062f5
 8006318:	080062f5 	.word	0x080062f5
 800631c:	080062f5 	.word	0x080062f5
 8006320:	080062f5 	.word	0x080062f5
 8006324:	08006379 	.word	0x08006379
 8006328:	080062f5 	.word	0x080062f5
 800632c:	080062f5 	.word	0x080062f5
 8006330:	080062f5 	.word	0x080062f5
 8006334:	080062f5 	.word	0x080062f5
 8006338:	08006485 	.word	0x08006485
 800633c:	080063a9 	.word	0x080063a9
 8006340:	08006467 	.word	0x08006467
 8006344:	080062f5 	.word	0x080062f5
 8006348:	080062f5 	.word	0x080062f5
 800634c:	080064a7 	.word	0x080064a7
 8006350:	080062f5 	.word	0x080062f5
 8006354:	080063a9 	.word	0x080063a9
 8006358:	080062f5 	.word	0x080062f5
 800635c:	080062f5 	.word	0x080062f5
 8006360:	0800646f 	.word	0x0800646f
 8006364:	682b      	ldr	r3, [r5, #0]
 8006366:	1d1a      	adds	r2, r3, #4
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	602a      	str	r2, [r5, #0]
 800636c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006370:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006374:	2301      	movs	r3, #1
 8006376:	e0a3      	b.n	80064c0 <_printf_i+0x1f4>
 8006378:	6820      	ldr	r0, [r4, #0]
 800637a:	6829      	ldr	r1, [r5, #0]
 800637c:	0606      	lsls	r6, r0, #24
 800637e:	f101 0304 	add.w	r3, r1, #4
 8006382:	d50a      	bpl.n	800639a <_printf_i+0xce>
 8006384:	680e      	ldr	r6, [r1, #0]
 8006386:	602b      	str	r3, [r5, #0]
 8006388:	2e00      	cmp	r6, #0
 800638a:	da03      	bge.n	8006394 <_printf_i+0xc8>
 800638c:	232d      	movs	r3, #45	; 0x2d
 800638e:	4276      	negs	r6, r6
 8006390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006394:	485e      	ldr	r0, [pc, #376]	; (8006510 <_printf_i+0x244>)
 8006396:	230a      	movs	r3, #10
 8006398:	e019      	b.n	80063ce <_printf_i+0x102>
 800639a:	680e      	ldr	r6, [r1, #0]
 800639c:	602b      	str	r3, [r5, #0]
 800639e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80063a2:	bf18      	it	ne
 80063a4:	b236      	sxthne	r6, r6
 80063a6:	e7ef      	b.n	8006388 <_printf_i+0xbc>
 80063a8:	682b      	ldr	r3, [r5, #0]
 80063aa:	6820      	ldr	r0, [r4, #0]
 80063ac:	1d19      	adds	r1, r3, #4
 80063ae:	6029      	str	r1, [r5, #0]
 80063b0:	0601      	lsls	r1, r0, #24
 80063b2:	d501      	bpl.n	80063b8 <_printf_i+0xec>
 80063b4:	681e      	ldr	r6, [r3, #0]
 80063b6:	e002      	b.n	80063be <_printf_i+0xf2>
 80063b8:	0646      	lsls	r6, r0, #25
 80063ba:	d5fb      	bpl.n	80063b4 <_printf_i+0xe8>
 80063bc:	881e      	ldrh	r6, [r3, #0]
 80063be:	4854      	ldr	r0, [pc, #336]	; (8006510 <_printf_i+0x244>)
 80063c0:	2f6f      	cmp	r7, #111	; 0x6f
 80063c2:	bf0c      	ite	eq
 80063c4:	2308      	moveq	r3, #8
 80063c6:	230a      	movne	r3, #10
 80063c8:	2100      	movs	r1, #0
 80063ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063ce:	6865      	ldr	r5, [r4, #4]
 80063d0:	60a5      	str	r5, [r4, #8]
 80063d2:	2d00      	cmp	r5, #0
 80063d4:	bfa2      	ittt	ge
 80063d6:	6821      	ldrge	r1, [r4, #0]
 80063d8:	f021 0104 	bicge.w	r1, r1, #4
 80063dc:	6021      	strge	r1, [r4, #0]
 80063de:	b90e      	cbnz	r6, 80063e4 <_printf_i+0x118>
 80063e0:	2d00      	cmp	r5, #0
 80063e2:	d04d      	beq.n	8006480 <_printf_i+0x1b4>
 80063e4:	4615      	mov	r5, r2
 80063e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80063ea:	fb03 6711 	mls	r7, r3, r1, r6
 80063ee:	5dc7      	ldrb	r7, [r0, r7]
 80063f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80063f4:	4637      	mov	r7, r6
 80063f6:	42bb      	cmp	r3, r7
 80063f8:	460e      	mov	r6, r1
 80063fa:	d9f4      	bls.n	80063e6 <_printf_i+0x11a>
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	d10b      	bne.n	8006418 <_printf_i+0x14c>
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	07de      	lsls	r6, r3, #31
 8006404:	d508      	bpl.n	8006418 <_printf_i+0x14c>
 8006406:	6923      	ldr	r3, [r4, #16]
 8006408:	6861      	ldr	r1, [r4, #4]
 800640a:	4299      	cmp	r1, r3
 800640c:	bfde      	ittt	le
 800640e:	2330      	movle	r3, #48	; 0x30
 8006410:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006414:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006418:	1b52      	subs	r2, r2, r5
 800641a:	6122      	str	r2, [r4, #16]
 800641c:	f8cd a000 	str.w	sl, [sp]
 8006420:	464b      	mov	r3, r9
 8006422:	aa03      	add	r2, sp, #12
 8006424:	4621      	mov	r1, r4
 8006426:	4640      	mov	r0, r8
 8006428:	f7ff fee2 	bl	80061f0 <_printf_common>
 800642c:	3001      	adds	r0, #1
 800642e:	d14c      	bne.n	80064ca <_printf_i+0x1fe>
 8006430:	f04f 30ff 	mov.w	r0, #4294967295
 8006434:	b004      	add	sp, #16
 8006436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800643a:	4835      	ldr	r0, [pc, #212]	; (8006510 <_printf_i+0x244>)
 800643c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006440:	6829      	ldr	r1, [r5, #0]
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	f851 6b04 	ldr.w	r6, [r1], #4
 8006448:	6029      	str	r1, [r5, #0]
 800644a:	061d      	lsls	r5, r3, #24
 800644c:	d514      	bpl.n	8006478 <_printf_i+0x1ac>
 800644e:	07df      	lsls	r7, r3, #31
 8006450:	bf44      	itt	mi
 8006452:	f043 0320 	orrmi.w	r3, r3, #32
 8006456:	6023      	strmi	r3, [r4, #0]
 8006458:	b91e      	cbnz	r6, 8006462 <_printf_i+0x196>
 800645a:	6823      	ldr	r3, [r4, #0]
 800645c:	f023 0320 	bic.w	r3, r3, #32
 8006460:	6023      	str	r3, [r4, #0]
 8006462:	2310      	movs	r3, #16
 8006464:	e7b0      	b.n	80063c8 <_printf_i+0xfc>
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	f043 0320 	orr.w	r3, r3, #32
 800646c:	6023      	str	r3, [r4, #0]
 800646e:	2378      	movs	r3, #120	; 0x78
 8006470:	4828      	ldr	r0, [pc, #160]	; (8006514 <_printf_i+0x248>)
 8006472:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006476:	e7e3      	b.n	8006440 <_printf_i+0x174>
 8006478:	0659      	lsls	r1, r3, #25
 800647a:	bf48      	it	mi
 800647c:	b2b6      	uxthmi	r6, r6
 800647e:	e7e6      	b.n	800644e <_printf_i+0x182>
 8006480:	4615      	mov	r5, r2
 8006482:	e7bb      	b.n	80063fc <_printf_i+0x130>
 8006484:	682b      	ldr	r3, [r5, #0]
 8006486:	6826      	ldr	r6, [r4, #0]
 8006488:	6961      	ldr	r1, [r4, #20]
 800648a:	1d18      	adds	r0, r3, #4
 800648c:	6028      	str	r0, [r5, #0]
 800648e:	0635      	lsls	r5, r6, #24
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	d501      	bpl.n	8006498 <_printf_i+0x1cc>
 8006494:	6019      	str	r1, [r3, #0]
 8006496:	e002      	b.n	800649e <_printf_i+0x1d2>
 8006498:	0670      	lsls	r0, r6, #25
 800649a:	d5fb      	bpl.n	8006494 <_printf_i+0x1c8>
 800649c:	8019      	strh	r1, [r3, #0]
 800649e:	2300      	movs	r3, #0
 80064a0:	6123      	str	r3, [r4, #16]
 80064a2:	4615      	mov	r5, r2
 80064a4:	e7ba      	b.n	800641c <_printf_i+0x150>
 80064a6:	682b      	ldr	r3, [r5, #0]
 80064a8:	1d1a      	adds	r2, r3, #4
 80064aa:	602a      	str	r2, [r5, #0]
 80064ac:	681d      	ldr	r5, [r3, #0]
 80064ae:	6862      	ldr	r2, [r4, #4]
 80064b0:	2100      	movs	r1, #0
 80064b2:	4628      	mov	r0, r5
 80064b4:	f7f9 fe94 	bl	80001e0 <memchr>
 80064b8:	b108      	cbz	r0, 80064be <_printf_i+0x1f2>
 80064ba:	1b40      	subs	r0, r0, r5
 80064bc:	6060      	str	r0, [r4, #4]
 80064be:	6863      	ldr	r3, [r4, #4]
 80064c0:	6123      	str	r3, [r4, #16]
 80064c2:	2300      	movs	r3, #0
 80064c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064c8:	e7a8      	b.n	800641c <_printf_i+0x150>
 80064ca:	6923      	ldr	r3, [r4, #16]
 80064cc:	462a      	mov	r2, r5
 80064ce:	4649      	mov	r1, r9
 80064d0:	4640      	mov	r0, r8
 80064d2:	47d0      	blx	sl
 80064d4:	3001      	adds	r0, #1
 80064d6:	d0ab      	beq.n	8006430 <_printf_i+0x164>
 80064d8:	6823      	ldr	r3, [r4, #0]
 80064da:	079b      	lsls	r3, r3, #30
 80064dc:	d413      	bmi.n	8006506 <_printf_i+0x23a>
 80064de:	68e0      	ldr	r0, [r4, #12]
 80064e0:	9b03      	ldr	r3, [sp, #12]
 80064e2:	4298      	cmp	r0, r3
 80064e4:	bfb8      	it	lt
 80064e6:	4618      	movlt	r0, r3
 80064e8:	e7a4      	b.n	8006434 <_printf_i+0x168>
 80064ea:	2301      	movs	r3, #1
 80064ec:	4632      	mov	r2, r6
 80064ee:	4649      	mov	r1, r9
 80064f0:	4640      	mov	r0, r8
 80064f2:	47d0      	blx	sl
 80064f4:	3001      	adds	r0, #1
 80064f6:	d09b      	beq.n	8006430 <_printf_i+0x164>
 80064f8:	3501      	adds	r5, #1
 80064fa:	68e3      	ldr	r3, [r4, #12]
 80064fc:	9903      	ldr	r1, [sp, #12]
 80064fe:	1a5b      	subs	r3, r3, r1
 8006500:	42ab      	cmp	r3, r5
 8006502:	dcf2      	bgt.n	80064ea <_printf_i+0x21e>
 8006504:	e7eb      	b.n	80064de <_printf_i+0x212>
 8006506:	2500      	movs	r5, #0
 8006508:	f104 0619 	add.w	r6, r4, #25
 800650c:	e7f5      	b.n	80064fa <_printf_i+0x22e>
 800650e:	bf00      	nop
 8006510:	080091a6 	.word	0x080091a6
 8006514:	080091b7 	.word	0x080091b7

08006518 <siprintf>:
 8006518:	b40e      	push	{r1, r2, r3}
 800651a:	b500      	push	{lr}
 800651c:	b09c      	sub	sp, #112	; 0x70
 800651e:	ab1d      	add	r3, sp, #116	; 0x74
 8006520:	9002      	str	r0, [sp, #8]
 8006522:	9006      	str	r0, [sp, #24]
 8006524:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006528:	4809      	ldr	r0, [pc, #36]	; (8006550 <siprintf+0x38>)
 800652a:	9107      	str	r1, [sp, #28]
 800652c:	9104      	str	r1, [sp, #16]
 800652e:	4909      	ldr	r1, [pc, #36]	; (8006554 <siprintf+0x3c>)
 8006530:	f853 2b04 	ldr.w	r2, [r3], #4
 8006534:	9105      	str	r1, [sp, #20]
 8006536:	6800      	ldr	r0, [r0, #0]
 8006538:	9301      	str	r3, [sp, #4]
 800653a:	a902      	add	r1, sp, #8
 800653c:	f001 fb76 	bl	8007c2c <_svfiprintf_r>
 8006540:	9b02      	ldr	r3, [sp, #8]
 8006542:	2200      	movs	r2, #0
 8006544:	701a      	strb	r2, [r3, #0]
 8006546:	b01c      	add	sp, #112	; 0x70
 8006548:	f85d eb04 	ldr.w	lr, [sp], #4
 800654c:	b003      	add	sp, #12
 800654e:	4770      	bx	lr
 8006550:	200000a4 	.word	0x200000a4
 8006554:	ffff0208 	.word	0xffff0208

08006558 <quorem>:
 8006558:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800655c:	6903      	ldr	r3, [r0, #16]
 800655e:	690c      	ldr	r4, [r1, #16]
 8006560:	42a3      	cmp	r3, r4
 8006562:	4607      	mov	r7, r0
 8006564:	f2c0 8081 	blt.w	800666a <quorem+0x112>
 8006568:	3c01      	subs	r4, #1
 800656a:	f101 0814 	add.w	r8, r1, #20
 800656e:	f100 0514 	add.w	r5, r0, #20
 8006572:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006576:	9301      	str	r3, [sp, #4]
 8006578:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800657c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006580:	3301      	adds	r3, #1
 8006582:	429a      	cmp	r2, r3
 8006584:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006588:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800658c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006590:	d331      	bcc.n	80065f6 <quorem+0x9e>
 8006592:	f04f 0e00 	mov.w	lr, #0
 8006596:	4640      	mov	r0, r8
 8006598:	46ac      	mov	ip, r5
 800659a:	46f2      	mov	sl, lr
 800659c:	f850 2b04 	ldr.w	r2, [r0], #4
 80065a0:	b293      	uxth	r3, r2
 80065a2:	fb06 e303 	mla	r3, r6, r3, lr
 80065a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	ebaa 0303 	sub.w	r3, sl, r3
 80065b0:	f8dc a000 	ldr.w	sl, [ip]
 80065b4:	0c12      	lsrs	r2, r2, #16
 80065b6:	fa13 f38a 	uxtah	r3, r3, sl
 80065ba:	fb06 e202 	mla	r2, r6, r2, lr
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	9b00      	ldr	r3, [sp, #0]
 80065c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80065c6:	b292      	uxth	r2, r2
 80065c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80065cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065d0:	f8bd 3000 	ldrh.w	r3, [sp]
 80065d4:	4581      	cmp	r9, r0
 80065d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065da:	f84c 3b04 	str.w	r3, [ip], #4
 80065de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80065e2:	d2db      	bcs.n	800659c <quorem+0x44>
 80065e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80065e8:	b92b      	cbnz	r3, 80065f6 <quorem+0x9e>
 80065ea:	9b01      	ldr	r3, [sp, #4]
 80065ec:	3b04      	subs	r3, #4
 80065ee:	429d      	cmp	r5, r3
 80065f0:	461a      	mov	r2, r3
 80065f2:	d32e      	bcc.n	8006652 <quorem+0xfa>
 80065f4:	613c      	str	r4, [r7, #16]
 80065f6:	4638      	mov	r0, r7
 80065f8:	f001 f8c4 	bl	8007784 <__mcmp>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	db24      	blt.n	800664a <quorem+0xf2>
 8006600:	3601      	adds	r6, #1
 8006602:	4628      	mov	r0, r5
 8006604:	f04f 0c00 	mov.w	ip, #0
 8006608:	f858 2b04 	ldr.w	r2, [r8], #4
 800660c:	f8d0 e000 	ldr.w	lr, [r0]
 8006610:	b293      	uxth	r3, r2
 8006612:	ebac 0303 	sub.w	r3, ip, r3
 8006616:	0c12      	lsrs	r2, r2, #16
 8006618:	fa13 f38e 	uxtah	r3, r3, lr
 800661c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006620:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006624:	b29b      	uxth	r3, r3
 8006626:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800662a:	45c1      	cmp	r9, r8
 800662c:	f840 3b04 	str.w	r3, [r0], #4
 8006630:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006634:	d2e8      	bcs.n	8006608 <quorem+0xb0>
 8006636:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800663a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800663e:	b922      	cbnz	r2, 800664a <quorem+0xf2>
 8006640:	3b04      	subs	r3, #4
 8006642:	429d      	cmp	r5, r3
 8006644:	461a      	mov	r2, r3
 8006646:	d30a      	bcc.n	800665e <quorem+0x106>
 8006648:	613c      	str	r4, [r7, #16]
 800664a:	4630      	mov	r0, r6
 800664c:	b003      	add	sp, #12
 800664e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006652:	6812      	ldr	r2, [r2, #0]
 8006654:	3b04      	subs	r3, #4
 8006656:	2a00      	cmp	r2, #0
 8006658:	d1cc      	bne.n	80065f4 <quorem+0x9c>
 800665a:	3c01      	subs	r4, #1
 800665c:	e7c7      	b.n	80065ee <quorem+0x96>
 800665e:	6812      	ldr	r2, [r2, #0]
 8006660:	3b04      	subs	r3, #4
 8006662:	2a00      	cmp	r2, #0
 8006664:	d1f0      	bne.n	8006648 <quorem+0xf0>
 8006666:	3c01      	subs	r4, #1
 8006668:	e7eb      	b.n	8006642 <quorem+0xea>
 800666a:	2000      	movs	r0, #0
 800666c:	e7ee      	b.n	800664c <quorem+0xf4>
	...

08006670 <_dtoa_r>:
 8006670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006674:	ed2d 8b04 	vpush	{d8-d9}
 8006678:	ec57 6b10 	vmov	r6, r7, d0
 800667c:	b093      	sub	sp, #76	; 0x4c
 800667e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006680:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006684:	9106      	str	r1, [sp, #24]
 8006686:	ee10 aa10 	vmov	sl, s0
 800668a:	4604      	mov	r4, r0
 800668c:	9209      	str	r2, [sp, #36]	; 0x24
 800668e:	930c      	str	r3, [sp, #48]	; 0x30
 8006690:	46bb      	mov	fp, r7
 8006692:	b975      	cbnz	r5, 80066b2 <_dtoa_r+0x42>
 8006694:	2010      	movs	r0, #16
 8006696:	f000 fddd 	bl	8007254 <malloc>
 800669a:	4602      	mov	r2, r0
 800669c:	6260      	str	r0, [r4, #36]	; 0x24
 800669e:	b920      	cbnz	r0, 80066aa <_dtoa_r+0x3a>
 80066a0:	4ba7      	ldr	r3, [pc, #668]	; (8006940 <_dtoa_r+0x2d0>)
 80066a2:	21ea      	movs	r1, #234	; 0xea
 80066a4:	48a7      	ldr	r0, [pc, #668]	; (8006944 <_dtoa_r+0x2d4>)
 80066a6:	f001 fbd1 	bl	8007e4c <__assert_func>
 80066aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80066ae:	6005      	str	r5, [r0, #0]
 80066b0:	60c5      	str	r5, [r0, #12]
 80066b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066b4:	6819      	ldr	r1, [r3, #0]
 80066b6:	b151      	cbz	r1, 80066ce <_dtoa_r+0x5e>
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	604a      	str	r2, [r1, #4]
 80066bc:	2301      	movs	r3, #1
 80066be:	4093      	lsls	r3, r2
 80066c0:	608b      	str	r3, [r1, #8]
 80066c2:	4620      	mov	r0, r4
 80066c4:	f000 fe1c 	bl	8007300 <_Bfree>
 80066c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066ca:	2200      	movs	r2, #0
 80066cc:	601a      	str	r2, [r3, #0]
 80066ce:	1e3b      	subs	r3, r7, #0
 80066d0:	bfaa      	itet	ge
 80066d2:	2300      	movge	r3, #0
 80066d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80066d8:	f8c8 3000 	strge.w	r3, [r8]
 80066dc:	4b9a      	ldr	r3, [pc, #616]	; (8006948 <_dtoa_r+0x2d8>)
 80066de:	bfbc      	itt	lt
 80066e0:	2201      	movlt	r2, #1
 80066e2:	f8c8 2000 	strlt.w	r2, [r8]
 80066e6:	ea33 030b 	bics.w	r3, r3, fp
 80066ea:	d11b      	bne.n	8006724 <_dtoa_r+0xb4>
 80066ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80066f2:	6013      	str	r3, [r2, #0]
 80066f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80066f8:	4333      	orrs	r3, r6
 80066fa:	f000 8592 	beq.w	8007222 <_dtoa_r+0xbb2>
 80066fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006700:	b963      	cbnz	r3, 800671c <_dtoa_r+0xac>
 8006702:	4b92      	ldr	r3, [pc, #584]	; (800694c <_dtoa_r+0x2dc>)
 8006704:	e022      	b.n	800674c <_dtoa_r+0xdc>
 8006706:	4b92      	ldr	r3, [pc, #584]	; (8006950 <_dtoa_r+0x2e0>)
 8006708:	9301      	str	r3, [sp, #4]
 800670a:	3308      	adds	r3, #8
 800670c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800670e:	6013      	str	r3, [r2, #0]
 8006710:	9801      	ldr	r0, [sp, #4]
 8006712:	b013      	add	sp, #76	; 0x4c
 8006714:	ecbd 8b04 	vpop	{d8-d9}
 8006718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671c:	4b8b      	ldr	r3, [pc, #556]	; (800694c <_dtoa_r+0x2dc>)
 800671e:	9301      	str	r3, [sp, #4]
 8006720:	3303      	adds	r3, #3
 8006722:	e7f3      	b.n	800670c <_dtoa_r+0x9c>
 8006724:	2200      	movs	r2, #0
 8006726:	2300      	movs	r3, #0
 8006728:	4650      	mov	r0, sl
 800672a:	4659      	mov	r1, fp
 800672c:	f7fa f9cc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006730:	ec4b ab19 	vmov	d9, sl, fp
 8006734:	4680      	mov	r8, r0
 8006736:	b158      	cbz	r0, 8006750 <_dtoa_r+0xe0>
 8006738:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800673a:	2301      	movs	r3, #1
 800673c:	6013      	str	r3, [r2, #0]
 800673e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 856b 	beq.w	800721c <_dtoa_r+0xbac>
 8006746:	4883      	ldr	r0, [pc, #524]	; (8006954 <_dtoa_r+0x2e4>)
 8006748:	6018      	str	r0, [r3, #0]
 800674a:	1e43      	subs	r3, r0, #1
 800674c:	9301      	str	r3, [sp, #4]
 800674e:	e7df      	b.n	8006710 <_dtoa_r+0xa0>
 8006750:	ec4b ab10 	vmov	d0, sl, fp
 8006754:	aa10      	add	r2, sp, #64	; 0x40
 8006756:	a911      	add	r1, sp, #68	; 0x44
 8006758:	4620      	mov	r0, r4
 800675a:	f001 f8b9 	bl	80078d0 <__d2b>
 800675e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006762:	ee08 0a10 	vmov	s16, r0
 8006766:	2d00      	cmp	r5, #0
 8006768:	f000 8084 	beq.w	8006874 <_dtoa_r+0x204>
 800676c:	ee19 3a90 	vmov	r3, s19
 8006770:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006774:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006778:	4656      	mov	r6, sl
 800677a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800677e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006782:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006786:	4b74      	ldr	r3, [pc, #464]	; (8006958 <_dtoa_r+0x2e8>)
 8006788:	2200      	movs	r2, #0
 800678a:	4630      	mov	r0, r6
 800678c:	4639      	mov	r1, r7
 800678e:	f7f9 fd7b 	bl	8000288 <__aeabi_dsub>
 8006792:	a365      	add	r3, pc, #404	; (adr r3, 8006928 <_dtoa_r+0x2b8>)
 8006794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006798:	f7f9 ff2e 	bl	80005f8 <__aeabi_dmul>
 800679c:	a364      	add	r3, pc, #400	; (adr r3, 8006930 <_dtoa_r+0x2c0>)
 800679e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a2:	f7f9 fd73 	bl	800028c <__adddf3>
 80067a6:	4606      	mov	r6, r0
 80067a8:	4628      	mov	r0, r5
 80067aa:	460f      	mov	r7, r1
 80067ac:	f7f9 feba 	bl	8000524 <__aeabi_i2d>
 80067b0:	a361      	add	r3, pc, #388	; (adr r3, 8006938 <_dtoa_r+0x2c8>)
 80067b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b6:	f7f9 ff1f 	bl	80005f8 <__aeabi_dmul>
 80067ba:	4602      	mov	r2, r0
 80067bc:	460b      	mov	r3, r1
 80067be:	4630      	mov	r0, r6
 80067c0:	4639      	mov	r1, r7
 80067c2:	f7f9 fd63 	bl	800028c <__adddf3>
 80067c6:	4606      	mov	r6, r0
 80067c8:	460f      	mov	r7, r1
 80067ca:	f7fa f9c5 	bl	8000b58 <__aeabi_d2iz>
 80067ce:	2200      	movs	r2, #0
 80067d0:	9000      	str	r0, [sp, #0]
 80067d2:	2300      	movs	r3, #0
 80067d4:	4630      	mov	r0, r6
 80067d6:	4639      	mov	r1, r7
 80067d8:	f7fa f980 	bl	8000adc <__aeabi_dcmplt>
 80067dc:	b150      	cbz	r0, 80067f4 <_dtoa_r+0x184>
 80067de:	9800      	ldr	r0, [sp, #0]
 80067e0:	f7f9 fea0 	bl	8000524 <__aeabi_i2d>
 80067e4:	4632      	mov	r2, r6
 80067e6:	463b      	mov	r3, r7
 80067e8:	f7fa f96e 	bl	8000ac8 <__aeabi_dcmpeq>
 80067ec:	b910      	cbnz	r0, 80067f4 <_dtoa_r+0x184>
 80067ee:	9b00      	ldr	r3, [sp, #0]
 80067f0:	3b01      	subs	r3, #1
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	9b00      	ldr	r3, [sp, #0]
 80067f6:	2b16      	cmp	r3, #22
 80067f8:	d85a      	bhi.n	80068b0 <_dtoa_r+0x240>
 80067fa:	9a00      	ldr	r2, [sp, #0]
 80067fc:	4b57      	ldr	r3, [pc, #348]	; (800695c <_dtoa_r+0x2ec>)
 80067fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006806:	ec51 0b19 	vmov	r0, r1, d9
 800680a:	f7fa f967 	bl	8000adc <__aeabi_dcmplt>
 800680e:	2800      	cmp	r0, #0
 8006810:	d050      	beq.n	80068b4 <_dtoa_r+0x244>
 8006812:	9b00      	ldr	r3, [sp, #0]
 8006814:	3b01      	subs	r3, #1
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	2300      	movs	r3, #0
 800681a:	930b      	str	r3, [sp, #44]	; 0x2c
 800681c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800681e:	1b5d      	subs	r5, r3, r5
 8006820:	1e6b      	subs	r3, r5, #1
 8006822:	9305      	str	r3, [sp, #20]
 8006824:	bf45      	ittet	mi
 8006826:	f1c5 0301 	rsbmi	r3, r5, #1
 800682a:	9304      	strmi	r3, [sp, #16]
 800682c:	2300      	movpl	r3, #0
 800682e:	2300      	movmi	r3, #0
 8006830:	bf4c      	ite	mi
 8006832:	9305      	strmi	r3, [sp, #20]
 8006834:	9304      	strpl	r3, [sp, #16]
 8006836:	9b00      	ldr	r3, [sp, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	db3d      	blt.n	80068b8 <_dtoa_r+0x248>
 800683c:	9b05      	ldr	r3, [sp, #20]
 800683e:	9a00      	ldr	r2, [sp, #0]
 8006840:	920a      	str	r2, [sp, #40]	; 0x28
 8006842:	4413      	add	r3, r2
 8006844:	9305      	str	r3, [sp, #20]
 8006846:	2300      	movs	r3, #0
 8006848:	9307      	str	r3, [sp, #28]
 800684a:	9b06      	ldr	r3, [sp, #24]
 800684c:	2b09      	cmp	r3, #9
 800684e:	f200 8089 	bhi.w	8006964 <_dtoa_r+0x2f4>
 8006852:	2b05      	cmp	r3, #5
 8006854:	bfc4      	itt	gt
 8006856:	3b04      	subgt	r3, #4
 8006858:	9306      	strgt	r3, [sp, #24]
 800685a:	9b06      	ldr	r3, [sp, #24]
 800685c:	f1a3 0302 	sub.w	r3, r3, #2
 8006860:	bfcc      	ite	gt
 8006862:	2500      	movgt	r5, #0
 8006864:	2501      	movle	r5, #1
 8006866:	2b03      	cmp	r3, #3
 8006868:	f200 8087 	bhi.w	800697a <_dtoa_r+0x30a>
 800686c:	e8df f003 	tbb	[pc, r3]
 8006870:	59383a2d 	.word	0x59383a2d
 8006874:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006878:	441d      	add	r5, r3
 800687a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800687e:	2b20      	cmp	r3, #32
 8006880:	bfc1      	itttt	gt
 8006882:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006886:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800688a:	fa0b f303 	lslgt.w	r3, fp, r3
 800688e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006892:	bfda      	itte	le
 8006894:	f1c3 0320 	rsble	r3, r3, #32
 8006898:	fa06 f003 	lslle.w	r0, r6, r3
 800689c:	4318      	orrgt	r0, r3
 800689e:	f7f9 fe31 	bl	8000504 <__aeabi_ui2d>
 80068a2:	2301      	movs	r3, #1
 80068a4:	4606      	mov	r6, r0
 80068a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80068aa:	3d01      	subs	r5, #1
 80068ac:	930e      	str	r3, [sp, #56]	; 0x38
 80068ae:	e76a      	b.n	8006786 <_dtoa_r+0x116>
 80068b0:	2301      	movs	r3, #1
 80068b2:	e7b2      	b.n	800681a <_dtoa_r+0x1aa>
 80068b4:	900b      	str	r0, [sp, #44]	; 0x2c
 80068b6:	e7b1      	b.n	800681c <_dtoa_r+0x1ac>
 80068b8:	9b04      	ldr	r3, [sp, #16]
 80068ba:	9a00      	ldr	r2, [sp, #0]
 80068bc:	1a9b      	subs	r3, r3, r2
 80068be:	9304      	str	r3, [sp, #16]
 80068c0:	4253      	negs	r3, r2
 80068c2:	9307      	str	r3, [sp, #28]
 80068c4:	2300      	movs	r3, #0
 80068c6:	930a      	str	r3, [sp, #40]	; 0x28
 80068c8:	e7bf      	b.n	800684a <_dtoa_r+0x1da>
 80068ca:	2300      	movs	r3, #0
 80068cc:	9308      	str	r3, [sp, #32]
 80068ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	dc55      	bgt.n	8006980 <_dtoa_r+0x310>
 80068d4:	2301      	movs	r3, #1
 80068d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80068da:	461a      	mov	r2, r3
 80068dc:	9209      	str	r2, [sp, #36]	; 0x24
 80068de:	e00c      	b.n	80068fa <_dtoa_r+0x28a>
 80068e0:	2301      	movs	r3, #1
 80068e2:	e7f3      	b.n	80068cc <_dtoa_r+0x25c>
 80068e4:	2300      	movs	r3, #0
 80068e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068e8:	9308      	str	r3, [sp, #32]
 80068ea:	9b00      	ldr	r3, [sp, #0]
 80068ec:	4413      	add	r3, r2
 80068ee:	9302      	str	r3, [sp, #8]
 80068f0:	3301      	adds	r3, #1
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	9303      	str	r3, [sp, #12]
 80068f6:	bfb8      	it	lt
 80068f8:	2301      	movlt	r3, #1
 80068fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80068fc:	2200      	movs	r2, #0
 80068fe:	6042      	str	r2, [r0, #4]
 8006900:	2204      	movs	r2, #4
 8006902:	f102 0614 	add.w	r6, r2, #20
 8006906:	429e      	cmp	r6, r3
 8006908:	6841      	ldr	r1, [r0, #4]
 800690a:	d93d      	bls.n	8006988 <_dtoa_r+0x318>
 800690c:	4620      	mov	r0, r4
 800690e:	f000 fcb7 	bl	8007280 <_Balloc>
 8006912:	9001      	str	r0, [sp, #4]
 8006914:	2800      	cmp	r0, #0
 8006916:	d13b      	bne.n	8006990 <_dtoa_r+0x320>
 8006918:	4b11      	ldr	r3, [pc, #68]	; (8006960 <_dtoa_r+0x2f0>)
 800691a:	4602      	mov	r2, r0
 800691c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006920:	e6c0      	b.n	80066a4 <_dtoa_r+0x34>
 8006922:	2301      	movs	r3, #1
 8006924:	e7df      	b.n	80068e6 <_dtoa_r+0x276>
 8006926:	bf00      	nop
 8006928:	636f4361 	.word	0x636f4361
 800692c:	3fd287a7 	.word	0x3fd287a7
 8006930:	8b60c8b3 	.word	0x8b60c8b3
 8006934:	3fc68a28 	.word	0x3fc68a28
 8006938:	509f79fb 	.word	0x509f79fb
 800693c:	3fd34413 	.word	0x3fd34413
 8006940:	080091d5 	.word	0x080091d5
 8006944:	080091ec 	.word	0x080091ec
 8006948:	7ff00000 	.word	0x7ff00000
 800694c:	080091d1 	.word	0x080091d1
 8006950:	080091c8 	.word	0x080091c8
 8006954:	080091a5 	.word	0x080091a5
 8006958:	3ff80000 	.word	0x3ff80000
 800695c:	080092e0 	.word	0x080092e0
 8006960:	08009247 	.word	0x08009247
 8006964:	2501      	movs	r5, #1
 8006966:	2300      	movs	r3, #0
 8006968:	9306      	str	r3, [sp, #24]
 800696a:	9508      	str	r5, [sp, #32]
 800696c:	f04f 33ff 	mov.w	r3, #4294967295
 8006970:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006974:	2200      	movs	r2, #0
 8006976:	2312      	movs	r3, #18
 8006978:	e7b0      	b.n	80068dc <_dtoa_r+0x26c>
 800697a:	2301      	movs	r3, #1
 800697c:	9308      	str	r3, [sp, #32]
 800697e:	e7f5      	b.n	800696c <_dtoa_r+0x2fc>
 8006980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006982:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006986:	e7b8      	b.n	80068fa <_dtoa_r+0x28a>
 8006988:	3101      	adds	r1, #1
 800698a:	6041      	str	r1, [r0, #4]
 800698c:	0052      	lsls	r2, r2, #1
 800698e:	e7b8      	b.n	8006902 <_dtoa_r+0x292>
 8006990:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006992:	9a01      	ldr	r2, [sp, #4]
 8006994:	601a      	str	r2, [r3, #0]
 8006996:	9b03      	ldr	r3, [sp, #12]
 8006998:	2b0e      	cmp	r3, #14
 800699a:	f200 809d 	bhi.w	8006ad8 <_dtoa_r+0x468>
 800699e:	2d00      	cmp	r5, #0
 80069a0:	f000 809a 	beq.w	8006ad8 <_dtoa_r+0x468>
 80069a4:	9b00      	ldr	r3, [sp, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	dd32      	ble.n	8006a10 <_dtoa_r+0x3a0>
 80069aa:	4ab7      	ldr	r2, [pc, #732]	; (8006c88 <_dtoa_r+0x618>)
 80069ac:	f003 030f 	and.w	r3, r3, #15
 80069b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80069b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069b8:	9b00      	ldr	r3, [sp, #0]
 80069ba:	05d8      	lsls	r0, r3, #23
 80069bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80069c0:	d516      	bpl.n	80069f0 <_dtoa_r+0x380>
 80069c2:	4bb2      	ldr	r3, [pc, #712]	; (8006c8c <_dtoa_r+0x61c>)
 80069c4:	ec51 0b19 	vmov	r0, r1, d9
 80069c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80069cc:	f7f9 ff3e 	bl	800084c <__aeabi_ddiv>
 80069d0:	f007 070f 	and.w	r7, r7, #15
 80069d4:	4682      	mov	sl, r0
 80069d6:	468b      	mov	fp, r1
 80069d8:	2503      	movs	r5, #3
 80069da:	4eac      	ldr	r6, [pc, #688]	; (8006c8c <_dtoa_r+0x61c>)
 80069dc:	b957      	cbnz	r7, 80069f4 <_dtoa_r+0x384>
 80069de:	4642      	mov	r2, r8
 80069e0:	464b      	mov	r3, r9
 80069e2:	4650      	mov	r0, sl
 80069e4:	4659      	mov	r1, fp
 80069e6:	f7f9 ff31 	bl	800084c <__aeabi_ddiv>
 80069ea:	4682      	mov	sl, r0
 80069ec:	468b      	mov	fp, r1
 80069ee:	e028      	b.n	8006a42 <_dtoa_r+0x3d2>
 80069f0:	2502      	movs	r5, #2
 80069f2:	e7f2      	b.n	80069da <_dtoa_r+0x36a>
 80069f4:	07f9      	lsls	r1, r7, #31
 80069f6:	d508      	bpl.n	8006a0a <_dtoa_r+0x39a>
 80069f8:	4640      	mov	r0, r8
 80069fa:	4649      	mov	r1, r9
 80069fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a00:	f7f9 fdfa 	bl	80005f8 <__aeabi_dmul>
 8006a04:	3501      	adds	r5, #1
 8006a06:	4680      	mov	r8, r0
 8006a08:	4689      	mov	r9, r1
 8006a0a:	107f      	asrs	r7, r7, #1
 8006a0c:	3608      	adds	r6, #8
 8006a0e:	e7e5      	b.n	80069dc <_dtoa_r+0x36c>
 8006a10:	f000 809b 	beq.w	8006b4a <_dtoa_r+0x4da>
 8006a14:	9b00      	ldr	r3, [sp, #0]
 8006a16:	4f9d      	ldr	r7, [pc, #628]	; (8006c8c <_dtoa_r+0x61c>)
 8006a18:	425e      	negs	r6, r3
 8006a1a:	4b9b      	ldr	r3, [pc, #620]	; (8006c88 <_dtoa_r+0x618>)
 8006a1c:	f006 020f 	and.w	r2, r6, #15
 8006a20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a28:	ec51 0b19 	vmov	r0, r1, d9
 8006a2c:	f7f9 fde4 	bl	80005f8 <__aeabi_dmul>
 8006a30:	1136      	asrs	r6, r6, #4
 8006a32:	4682      	mov	sl, r0
 8006a34:	468b      	mov	fp, r1
 8006a36:	2300      	movs	r3, #0
 8006a38:	2502      	movs	r5, #2
 8006a3a:	2e00      	cmp	r6, #0
 8006a3c:	d17a      	bne.n	8006b34 <_dtoa_r+0x4c4>
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1d3      	bne.n	80069ea <_dtoa_r+0x37a>
 8006a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 8082 	beq.w	8006b4e <_dtoa_r+0x4de>
 8006a4a:	4b91      	ldr	r3, [pc, #580]	; (8006c90 <_dtoa_r+0x620>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	4650      	mov	r0, sl
 8006a50:	4659      	mov	r1, fp
 8006a52:	f7fa f843 	bl	8000adc <__aeabi_dcmplt>
 8006a56:	2800      	cmp	r0, #0
 8006a58:	d079      	beq.n	8006b4e <_dtoa_r+0x4de>
 8006a5a:	9b03      	ldr	r3, [sp, #12]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d076      	beq.n	8006b4e <_dtoa_r+0x4de>
 8006a60:	9b02      	ldr	r3, [sp, #8]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	dd36      	ble.n	8006ad4 <_dtoa_r+0x464>
 8006a66:	9b00      	ldr	r3, [sp, #0]
 8006a68:	4650      	mov	r0, sl
 8006a6a:	4659      	mov	r1, fp
 8006a6c:	1e5f      	subs	r7, r3, #1
 8006a6e:	2200      	movs	r2, #0
 8006a70:	4b88      	ldr	r3, [pc, #544]	; (8006c94 <_dtoa_r+0x624>)
 8006a72:	f7f9 fdc1 	bl	80005f8 <__aeabi_dmul>
 8006a76:	9e02      	ldr	r6, [sp, #8]
 8006a78:	4682      	mov	sl, r0
 8006a7a:	468b      	mov	fp, r1
 8006a7c:	3501      	adds	r5, #1
 8006a7e:	4628      	mov	r0, r5
 8006a80:	f7f9 fd50 	bl	8000524 <__aeabi_i2d>
 8006a84:	4652      	mov	r2, sl
 8006a86:	465b      	mov	r3, fp
 8006a88:	f7f9 fdb6 	bl	80005f8 <__aeabi_dmul>
 8006a8c:	4b82      	ldr	r3, [pc, #520]	; (8006c98 <_dtoa_r+0x628>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f7f9 fbfc 	bl	800028c <__adddf3>
 8006a94:	46d0      	mov	r8, sl
 8006a96:	46d9      	mov	r9, fp
 8006a98:	4682      	mov	sl, r0
 8006a9a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006a9e:	2e00      	cmp	r6, #0
 8006aa0:	d158      	bne.n	8006b54 <_dtoa_r+0x4e4>
 8006aa2:	4b7e      	ldr	r3, [pc, #504]	; (8006c9c <_dtoa_r+0x62c>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	4640      	mov	r0, r8
 8006aa8:	4649      	mov	r1, r9
 8006aaa:	f7f9 fbed 	bl	8000288 <__aeabi_dsub>
 8006aae:	4652      	mov	r2, sl
 8006ab0:	465b      	mov	r3, fp
 8006ab2:	4680      	mov	r8, r0
 8006ab4:	4689      	mov	r9, r1
 8006ab6:	f7fa f82f 	bl	8000b18 <__aeabi_dcmpgt>
 8006aba:	2800      	cmp	r0, #0
 8006abc:	f040 8295 	bne.w	8006fea <_dtoa_r+0x97a>
 8006ac0:	4652      	mov	r2, sl
 8006ac2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006ac6:	4640      	mov	r0, r8
 8006ac8:	4649      	mov	r1, r9
 8006aca:	f7fa f807 	bl	8000adc <__aeabi_dcmplt>
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	f040 8289 	bne.w	8006fe6 <_dtoa_r+0x976>
 8006ad4:	ec5b ab19 	vmov	sl, fp, d9
 8006ad8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f2c0 8148 	blt.w	8006d70 <_dtoa_r+0x700>
 8006ae0:	9a00      	ldr	r2, [sp, #0]
 8006ae2:	2a0e      	cmp	r2, #14
 8006ae4:	f300 8144 	bgt.w	8006d70 <_dtoa_r+0x700>
 8006ae8:	4b67      	ldr	r3, [pc, #412]	; (8006c88 <_dtoa_r+0x618>)
 8006aea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006aee:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f280 80d5 	bge.w	8006ca4 <_dtoa_r+0x634>
 8006afa:	9b03      	ldr	r3, [sp, #12]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f300 80d1 	bgt.w	8006ca4 <_dtoa_r+0x634>
 8006b02:	f040 826f 	bne.w	8006fe4 <_dtoa_r+0x974>
 8006b06:	4b65      	ldr	r3, [pc, #404]	; (8006c9c <_dtoa_r+0x62c>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	4640      	mov	r0, r8
 8006b0c:	4649      	mov	r1, r9
 8006b0e:	f7f9 fd73 	bl	80005f8 <__aeabi_dmul>
 8006b12:	4652      	mov	r2, sl
 8006b14:	465b      	mov	r3, fp
 8006b16:	f7f9 fff5 	bl	8000b04 <__aeabi_dcmpge>
 8006b1a:	9e03      	ldr	r6, [sp, #12]
 8006b1c:	4637      	mov	r7, r6
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	f040 8245 	bne.w	8006fae <_dtoa_r+0x93e>
 8006b24:	9d01      	ldr	r5, [sp, #4]
 8006b26:	2331      	movs	r3, #49	; 0x31
 8006b28:	f805 3b01 	strb.w	r3, [r5], #1
 8006b2c:	9b00      	ldr	r3, [sp, #0]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	e240      	b.n	8006fb6 <_dtoa_r+0x946>
 8006b34:	07f2      	lsls	r2, r6, #31
 8006b36:	d505      	bpl.n	8006b44 <_dtoa_r+0x4d4>
 8006b38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b3c:	f7f9 fd5c 	bl	80005f8 <__aeabi_dmul>
 8006b40:	3501      	adds	r5, #1
 8006b42:	2301      	movs	r3, #1
 8006b44:	1076      	asrs	r6, r6, #1
 8006b46:	3708      	adds	r7, #8
 8006b48:	e777      	b.n	8006a3a <_dtoa_r+0x3ca>
 8006b4a:	2502      	movs	r5, #2
 8006b4c:	e779      	b.n	8006a42 <_dtoa_r+0x3d2>
 8006b4e:	9f00      	ldr	r7, [sp, #0]
 8006b50:	9e03      	ldr	r6, [sp, #12]
 8006b52:	e794      	b.n	8006a7e <_dtoa_r+0x40e>
 8006b54:	9901      	ldr	r1, [sp, #4]
 8006b56:	4b4c      	ldr	r3, [pc, #304]	; (8006c88 <_dtoa_r+0x618>)
 8006b58:	4431      	add	r1, r6
 8006b5a:	910d      	str	r1, [sp, #52]	; 0x34
 8006b5c:	9908      	ldr	r1, [sp, #32]
 8006b5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006b62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b66:	2900      	cmp	r1, #0
 8006b68:	d043      	beq.n	8006bf2 <_dtoa_r+0x582>
 8006b6a:	494d      	ldr	r1, [pc, #308]	; (8006ca0 <_dtoa_r+0x630>)
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	f7f9 fe6d 	bl	800084c <__aeabi_ddiv>
 8006b72:	4652      	mov	r2, sl
 8006b74:	465b      	mov	r3, fp
 8006b76:	f7f9 fb87 	bl	8000288 <__aeabi_dsub>
 8006b7a:	9d01      	ldr	r5, [sp, #4]
 8006b7c:	4682      	mov	sl, r0
 8006b7e:	468b      	mov	fp, r1
 8006b80:	4649      	mov	r1, r9
 8006b82:	4640      	mov	r0, r8
 8006b84:	f7f9 ffe8 	bl	8000b58 <__aeabi_d2iz>
 8006b88:	4606      	mov	r6, r0
 8006b8a:	f7f9 fccb 	bl	8000524 <__aeabi_i2d>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	460b      	mov	r3, r1
 8006b92:	4640      	mov	r0, r8
 8006b94:	4649      	mov	r1, r9
 8006b96:	f7f9 fb77 	bl	8000288 <__aeabi_dsub>
 8006b9a:	3630      	adds	r6, #48	; 0x30
 8006b9c:	f805 6b01 	strb.w	r6, [r5], #1
 8006ba0:	4652      	mov	r2, sl
 8006ba2:	465b      	mov	r3, fp
 8006ba4:	4680      	mov	r8, r0
 8006ba6:	4689      	mov	r9, r1
 8006ba8:	f7f9 ff98 	bl	8000adc <__aeabi_dcmplt>
 8006bac:	2800      	cmp	r0, #0
 8006bae:	d163      	bne.n	8006c78 <_dtoa_r+0x608>
 8006bb0:	4642      	mov	r2, r8
 8006bb2:	464b      	mov	r3, r9
 8006bb4:	4936      	ldr	r1, [pc, #216]	; (8006c90 <_dtoa_r+0x620>)
 8006bb6:	2000      	movs	r0, #0
 8006bb8:	f7f9 fb66 	bl	8000288 <__aeabi_dsub>
 8006bbc:	4652      	mov	r2, sl
 8006bbe:	465b      	mov	r3, fp
 8006bc0:	f7f9 ff8c 	bl	8000adc <__aeabi_dcmplt>
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	f040 80b5 	bne.w	8006d34 <_dtoa_r+0x6c4>
 8006bca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bcc:	429d      	cmp	r5, r3
 8006bce:	d081      	beq.n	8006ad4 <_dtoa_r+0x464>
 8006bd0:	4b30      	ldr	r3, [pc, #192]	; (8006c94 <_dtoa_r+0x624>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	4650      	mov	r0, sl
 8006bd6:	4659      	mov	r1, fp
 8006bd8:	f7f9 fd0e 	bl	80005f8 <__aeabi_dmul>
 8006bdc:	4b2d      	ldr	r3, [pc, #180]	; (8006c94 <_dtoa_r+0x624>)
 8006bde:	4682      	mov	sl, r0
 8006be0:	468b      	mov	fp, r1
 8006be2:	4640      	mov	r0, r8
 8006be4:	4649      	mov	r1, r9
 8006be6:	2200      	movs	r2, #0
 8006be8:	f7f9 fd06 	bl	80005f8 <__aeabi_dmul>
 8006bec:	4680      	mov	r8, r0
 8006bee:	4689      	mov	r9, r1
 8006bf0:	e7c6      	b.n	8006b80 <_dtoa_r+0x510>
 8006bf2:	4650      	mov	r0, sl
 8006bf4:	4659      	mov	r1, fp
 8006bf6:	f7f9 fcff 	bl	80005f8 <__aeabi_dmul>
 8006bfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bfc:	9d01      	ldr	r5, [sp, #4]
 8006bfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c00:	4682      	mov	sl, r0
 8006c02:	468b      	mov	fp, r1
 8006c04:	4649      	mov	r1, r9
 8006c06:	4640      	mov	r0, r8
 8006c08:	f7f9 ffa6 	bl	8000b58 <__aeabi_d2iz>
 8006c0c:	4606      	mov	r6, r0
 8006c0e:	f7f9 fc89 	bl	8000524 <__aeabi_i2d>
 8006c12:	3630      	adds	r6, #48	; 0x30
 8006c14:	4602      	mov	r2, r0
 8006c16:	460b      	mov	r3, r1
 8006c18:	4640      	mov	r0, r8
 8006c1a:	4649      	mov	r1, r9
 8006c1c:	f7f9 fb34 	bl	8000288 <__aeabi_dsub>
 8006c20:	f805 6b01 	strb.w	r6, [r5], #1
 8006c24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c26:	429d      	cmp	r5, r3
 8006c28:	4680      	mov	r8, r0
 8006c2a:	4689      	mov	r9, r1
 8006c2c:	f04f 0200 	mov.w	r2, #0
 8006c30:	d124      	bne.n	8006c7c <_dtoa_r+0x60c>
 8006c32:	4b1b      	ldr	r3, [pc, #108]	; (8006ca0 <_dtoa_r+0x630>)
 8006c34:	4650      	mov	r0, sl
 8006c36:	4659      	mov	r1, fp
 8006c38:	f7f9 fb28 	bl	800028c <__adddf3>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	460b      	mov	r3, r1
 8006c40:	4640      	mov	r0, r8
 8006c42:	4649      	mov	r1, r9
 8006c44:	f7f9 ff68 	bl	8000b18 <__aeabi_dcmpgt>
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	d173      	bne.n	8006d34 <_dtoa_r+0x6c4>
 8006c4c:	4652      	mov	r2, sl
 8006c4e:	465b      	mov	r3, fp
 8006c50:	4913      	ldr	r1, [pc, #76]	; (8006ca0 <_dtoa_r+0x630>)
 8006c52:	2000      	movs	r0, #0
 8006c54:	f7f9 fb18 	bl	8000288 <__aeabi_dsub>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4640      	mov	r0, r8
 8006c5e:	4649      	mov	r1, r9
 8006c60:	f7f9 ff3c 	bl	8000adc <__aeabi_dcmplt>
 8006c64:	2800      	cmp	r0, #0
 8006c66:	f43f af35 	beq.w	8006ad4 <_dtoa_r+0x464>
 8006c6a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006c6c:	1e6b      	subs	r3, r5, #1
 8006c6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c70:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c74:	2b30      	cmp	r3, #48	; 0x30
 8006c76:	d0f8      	beq.n	8006c6a <_dtoa_r+0x5fa>
 8006c78:	9700      	str	r7, [sp, #0]
 8006c7a:	e049      	b.n	8006d10 <_dtoa_r+0x6a0>
 8006c7c:	4b05      	ldr	r3, [pc, #20]	; (8006c94 <_dtoa_r+0x624>)
 8006c7e:	f7f9 fcbb 	bl	80005f8 <__aeabi_dmul>
 8006c82:	4680      	mov	r8, r0
 8006c84:	4689      	mov	r9, r1
 8006c86:	e7bd      	b.n	8006c04 <_dtoa_r+0x594>
 8006c88:	080092e0 	.word	0x080092e0
 8006c8c:	080092b8 	.word	0x080092b8
 8006c90:	3ff00000 	.word	0x3ff00000
 8006c94:	40240000 	.word	0x40240000
 8006c98:	401c0000 	.word	0x401c0000
 8006c9c:	40140000 	.word	0x40140000
 8006ca0:	3fe00000 	.word	0x3fe00000
 8006ca4:	9d01      	ldr	r5, [sp, #4]
 8006ca6:	4656      	mov	r6, sl
 8006ca8:	465f      	mov	r7, fp
 8006caa:	4642      	mov	r2, r8
 8006cac:	464b      	mov	r3, r9
 8006cae:	4630      	mov	r0, r6
 8006cb0:	4639      	mov	r1, r7
 8006cb2:	f7f9 fdcb 	bl	800084c <__aeabi_ddiv>
 8006cb6:	f7f9 ff4f 	bl	8000b58 <__aeabi_d2iz>
 8006cba:	4682      	mov	sl, r0
 8006cbc:	f7f9 fc32 	bl	8000524 <__aeabi_i2d>
 8006cc0:	4642      	mov	r2, r8
 8006cc2:	464b      	mov	r3, r9
 8006cc4:	f7f9 fc98 	bl	80005f8 <__aeabi_dmul>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	460b      	mov	r3, r1
 8006ccc:	4630      	mov	r0, r6
 8006cce:	4639      	mov	r1, r7
 8006cd0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006cd4:	f7f9 fad8 	bl	8000288 <__aeabi_dsub>
 8006cd8:	f805 6b01 	strb.w	r6, [r5], #1
 8006cdc:	9e01      	ldr	r6, [sp, #4]
 8006cde:	9f03      	ldr	r7, [sp, #12]
 8006ce0:	1bae      	subs	r6, r5, r6
 8006ce2:	42b7      	cmp	r7, r6
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	d135      	bne.n	8006d56 <_dtoa_r+0x6e6>
 8006cea:	f7f9 facf 	bl	800028c <__adddf3>
 8006cee:	4642      	mov	r2, r8
 8006cf0:	464b      	mov	r3, r9
 8006cf2:	4606      	mov	r6, r0
 8006cf4:	460f      	mov	r7, r1
 8006cf6:	f7f9 ff0f 	bl	8000b18 <__aeabi_dcmpgt>
 8006cfa:	b9d0      	cbnz	r0, 8006d32 <_dtoa_r+0x6c2>
 8006cfc:	4642      	mov	r2, r8
 8006cfe:	464b      	mov	r3, r9
 8006d00:	4630      	mov	r0, r6
 8006d02:	4639      	mov	r1, r7
 8006d04:	f7f9 fee0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d08:	b110      	cbz	r0, 8006d10 <_dtoa_r+0x6a0>
 8006d0a:	f01a 0f01 	tst.w	sl, #1
 8006d0e:	d110      	bne.n	8006d32 <_dtoa_r+0x6c2>
 8006d10:	4620      	mov	r0, r4
 8006d12:	ee18 1a10 	vmov	r1, s16
 8006d16:	f000 faf3 	bl	8007300 <_Bfree>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	9800      	ldr	r0, [sp, #0]
 8006d1e:	702b      	strb	r3, [r5, #0]
 8006d20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d22:	3001      	adds	r0, #1
 8006d24:	6018      	str	r0, [r3, #0]
 8006d26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f43f acf1 	beq.w	8006710 <_dtoa_r+0xa0>
 8006d2e:	601d      	str	r5, [r3, #0]
 8006d30:	e4ee      	b.n	8006710 <_dtoa_r+0xa0>
 8006d32:	9f00      	ldr	r7, [sp, #0]
 8006d34:	462b      	mov	r3, r5
 8006d36:	461d      	mov	r5, r3
 8006d38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d3c:	2a39      	cmp	r2, #57	; 0x39
 8006d3e:	d106      	bne.n	8006d4e <_dtoa_r+0x6de>
 8006d40:	9a01      	ldr	r2, [sp, #4]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d1f7      	bne.n	8006d36 <_dtoa_r+0x6c6>
 8006d46:	9901      	ldr	r1, [sp, #4]
 8006d48:	2230      	movs	r2, #48	; 0x30
 8006d4a:	3701      	adds	r7, #1
 8006d4c:	700a      	strb	r2, [r1, #0]
 8006d4e:	781a      	ldrb	r2, [r3, #0]
 8006d50:	3201      	adds	r2, #1
 8006d52:	701a      	strb	r2, [r3, #0]
 8006d54:	e790      	b.n	8006c78 <_dtoa_r+0x608>
 8006d56:	4ba6      	ldr	r3, [pc, #664]	; (8006ff0 <_dtoa_r+0x980>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f7f9 fc4d 	bl	80005f8 <__aeabi_dmul>
 8006d5e:	2200      	movs	r2, #0
 8006d60:	2300      	movs	r3, #0
 8006d62:	4606      	mov	r6, r0
 8006d64:	460f      	mov	r7, r1
 8006d66:	f7f9 feaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	d09d      	beq.n	8006caa <_dtoa_r+0x63a>
 8006d6e:	e7cf      	b.n	8006d10 <_dtoa_r+0x6a0>
 8006d70:	9a08      	ldr	r2, [sp, #32]
 8006d72:	2a00      	cmp	r2, #0
 8006d74:	f000 80d7 	beq.w	8006f26 <_dtoa_r+0x8b6>
 8006d78:	9a06      	ldr	r2, [sp, #24]
 8006d7a:	2a01      	cmp	r2, #1
 8006d7c:	f300 80ba 	bgt.w	8006ef4 <_dtoa_r+0x884>
 8006d80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d82:	2a00      	cmp	r2, #0
 8006d84:	f000 80b2 	beq.w	8006eec <_dtoa_r+0x87c>
 8006d88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d8c:	9e07      	ldr	r6, [sp, #28]
 8006d8e:	9d04      	ldr	r5, [sp, #16]
 8006d90:	9a04      	ldr	r2, [sp, #16]
 8006d92:	441a      	add	r2, r3
 8006d94:	9204      	str	r2, [sp, #16]
 8006d96:	9a05      	ldr	r2, [sp, #20]
 8006d98:	2101      	movs	r1, #1
 8006d9a:	441a      	add	r2, r3
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	9205      	str	r2, [sp, #20]
 8006da0:	f000 fb66 	bl	8007470 <__i2b>
 8006da4:	4607      	mov	r7, r0
 8006da6:	2d00      	cmp	r5, #0
 8006da8:	dd0c      	ble.n	8006dc4 <_dtoa_r+0x754>
 8006daa:	9b05      	ldr	r3, [sp, #20]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	dd09      	ble.n	8006dc4 <_dtoa_r+0x754>
 8006db0:	42ab      	cmp	r3, r5
 8006db2:	9a04      	ldr	r2, [sp, #16]
 8006db4:	bfa8      	it	ge
 8006db6:	462b      	movge	r3, r5
 8006db8:	1ad2      	subs	r2, r2, r3
 8006dba:	9204      	str	r2, [sp, #16]
 8006dbc:	9a05      	ldr	r2, [sp, #20]
 8006dbe:	1aed      	subs	r5, r5, r3
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	9305      	str	r3, [sp, #20]
 8006dc4:	9b07      	ldr	r3, [sp, #28]
 8006dc6:	b31b      	cbz	r3, 8006e10 <_dtoa_r+0x7a0>
 8006dc8:	9b08      	ldr	r3, [sp, #32]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f000 80af 	beq.w	8006f2e <_dtoa_r+0x8be>
 8006dd0:	2e00      	cmp	r6, #0
 8006dd2:	dd13      	ble.n	8006dfc <_dtoa_r+0x78c>
 8006dd4:	4639      	mov	r1, r7
 8006dd6:	4632      	mov	r2, r6
 8006dd8:	4620      	mov	r0, r4
 8006dda:	f000 fc09 	bl	80075f0 <__pow5mult>
 8006dde:	ee18 2a10 	vmov	r2, s16
 8006de2:	4601      	mov	r1, r0
 8006de4:	4607      	mov	r7, r0
 8006de6:	4620      	mov	r0, r4
 8006de8:	f000 fb58 	bl	800749c <__multiply>
 8006dec:	ee18 1a10 	vmov	r1, s16
 8006df0:	4680      	mov	r8, r0
 8006df2:	4620      	mov	r0, r4
 8006df4:	f000 fa84 	bl	8007300 <_Bfree>
 8006df8:	ee08 8a10 	vmov	s16, r8
 8006dfc:	9b07      	ldr	r3, [sp, #28]
 8006dfe:	1b9a      	subs	r2, r3, r6
 8006e00:	d006      	beq.n	8006e10 <_dtoa_r+0x7a0>
 8006e02:	ee18 1a10 	vmov	r1, s16
 8006e06:	4620      	mov	r0, r4
 8006e08:	f000 fbf2 	bl	80075f0 <__pow5mult>
 8006e0c:	ee08 0a10 	vmov	s16, r0
 8006e10:	2101      	movs	r1, #1
 8006e12:	4620      	mov	r0, r4
 8006e14:	f000 fb2c 	bl	8007470 <__i2b>
 8006e18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	4606      	mov	r6, r0
 8006e1e:	f340 8088 	ble.w	8006f32 <_dtoa_r+0x8c2>
 8006e22:	461a      	mov	r2, r3
 8006e24:	4601      	mov	r1, r0
 8006e26:	4620      	mov	r0, r4
 8006e28:	f000 fbe2 	bl	80075f0 <__pow5mult>
 8006e2c:	9b06      	ldr	r3, [sp, #24]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	4606      	mov	r6, r0
 8006e32:	f340 8081 	ble.w	8006f38 <_dtoa_r+0x8c8>
 8006e36:	f04f 0800 	mov.w	r8, #0
 8006e3a:	6933      	ldr	r3, [r6, #16]
 8006e3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006e40:	6918      	ldr	r0, [r3, #16]
 8006e42:	f000 fac5 	bl	80073d0 <__hi0bits>
 8006e46:	f1c0 0020 	rsb	r0, r0, #32
 8006e4a:	9b05      	ldr	r3, [sp, #20]
 8006e4c:	4418      	add	r0, r3
 8006e4e:	f010 001f 	ands.w	r0, r0, #31
 8006e52:	f000 8092 	beq.w	8006f7a <_dtoa_r+0x90a>
 8006e56:	f1c0 0320 	rsb	r3, r0, #32
 8006e5a:	2b04      	cmp	r3, #4
 8006e5c:	f340 808a 	ble.w	8006f74 <_dtoa_r+0x904>
 8006e60:	f1c0 001c 	rsb	r0, r0, #28
 8006e64:	9b04      	ldr	r3, [sp, #16]
 8006e66:	4403      	add	r3, r0
 8006e68:	9304      	str	r3, [sp, #16]
 8006e6a:	9b05      	ldr	r3, [sp, #20]
 8006e6c:	4403      	add	r3, r0
 8006e6e:	4405      	add	r5, r0
 8006e70:	9305      	str	r3, [sp, #20]
 8006e72:	9b04      	ldr	r3, [sp, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	dd07      	ble.n	8006e88 <_dtoa_r+0x818>
 8006e78:	ee18 1a10 	vmov	r1, s16
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f000 fc10 	bl	80076a4 <__lshift>
 8006e84:	ee08 0a10 	vmov	s16, r0
 8006e88:	9b05      	ldr	r3, [sp, #20]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	dd05      	ble.n	8006e9a <_dtoa_r+0x82a>
 8006e8e:	4631      	mov	r1, r6
 8006e90:	461a      	mov	r2, r3
 8006e92:	4620      	mov	r0, r4
 8006e94:	f000 fc06 	bl	80076a4 <__lshift>
 8006e98:	4606      	mov	r6, r0
 8006e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d06e      	beq.n	8006f7e <_dtoa_r+0x90e>
 8006ea0:	ee18 0a10 	vmov	r0, s16
 8006ea4:	4631      	mov	r1, r6
 8006ea6:	f000 fc6d 	bl	8007784 <__mcmp>
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	da67      	bge.n	8006f7e <_dtoa_r+0x90e>
 8006eae:	9b00      	ldr	r3, [sp, #0]
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	ee18 1a10 	vmov	r1, s16
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	220a      	movs	r2, #10
 8006eba:	2300      	movs	r3, #0
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f000 fa41 	bl	8007344 <__multadd>
 8006ec2:	9b08      	ldr	r3, [sp, #32]
 8006ec4:	ee08 0a10 	vmov	s16, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f000 81b1 	beq.w	8007230 <_dtoa_r+0xbc0>
 8006ece:	2300      	movs	r3, #0
 8006ed0:	4639      	mov	r1, r7
 8006ed2:	220a      	movs	r2, #10
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f000 fa35 	bl	8007344 <__multadd>
 8006eda:	9b02      	ldr	r3, [sp, #8]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	4607      	mov	r7, r0
 8006ee0:	f300 808e 	bgt.w	8007000 <_dtoa_r+0x990>
 8006ee4:	9b06      	ldr	r3, [sp, #24]
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	dc51      	bgt.n	8006f8e <_dtoa_r+0x91e>
 8006eea:	e089      	b.n	8007000 <_dtoa_r+0x990>
 8006eec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006eee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ef2:	e74b      	b.n	8006d8c <_dtoa_r+0x71c>
 8006ef4:	9b03      	ldr	r3, [sp, #12]
 8006ef6:	1e5e      	subs	r6, r3, #1
 8006ef8:	9b07      	ldr	r3, [sp, #28]
 8006efa:	42b3      	cmp	r3, r6
 8006efc:	bfbf      	itttt	lt
 8006efe:	9b07      	ldrlt	r3, [sp, #28]
 8006f00:	9607      	strlt	r6, [sp, #28]
 8006f02:	1af2      	sublt	r2, r6, r3
 8006f04:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006f06:	bfb6      	itet	lt
 8006f08:	189b      	addlt	r3, r3, r2
 8006f0a:	1b9e      	subge	r6, r3, r6
 8006f0c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006f0e:	9b03      	ldr	r3, [sp, #12]
 8006f10:	bfb8      	it	lt
 8006f12:	2600      	movlt	r6, #0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	bfb7      	itett	lt
 8006f18:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006f1c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006f20:	1a9d      	sublt	r5, r3, r2
 8006f22:	2300      	movlt	r3, #0
 8006f24:	e734      	b.n	8006d90 <_dtoa_r+0x720>
 8006f26:	9e07      	ldr	r6, [sp, #28]
 8006f28:	9d04      	ldr	r5, [sp, #16]
 8006f2a:	9f08      	ldr	r7, [sp, #32]
 8006f2c:	e73b      	b.n	8006da6 <_dtoa_r+0x736>
 8006f2e:	9a07      	ldr	r2, [sp, #28]
 8006f30:	e767      	b.n	8006e02 <_dtoa_r+0x792>
 8006f32:	9b06      	ldr	r3, [sp, #24]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	dc18      	bgt.n	8006f6a <_dtoa_r+0x8fa>
 8006f38:	f1ba 0f00 	cmp.w	sl, #0
 8006f3c:	d115      	bne.n	8006f6a <_dtoa_r+0x8fa>
 8006f3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f42:	b993      	cbnz	r3, 8006f6a <_dtoa_r+0x8fa>
 8006f44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006f48:	0d1b      	lsrs	r3, r3, #20
 8006f4a:	051b      	lsls	r3, r3, #20
 8006f4c:	b183      	cbz	r3, 8006f70 <_dtoa_r+0x900>
 8006f4e:	9b04      	ldr	r3, [sp, #16]
 8006f50:	3301      	adds	r3, #1
 8006f52:	9304      	str	r3, [sp, #16]
 8006f54:	9b05      	ldr	r3, [sp, #20]
 8006f56:	3301      	adds	r3, #1
 8006f58:	9305      	str	r3, [sp, #20]
 8006f5a:	f04f 0801 	mov.w	r8, #1
 8006f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f47f af6a 	bne.w	8006e3a <_dtoa_r+0x7ca>
 8006f66:	2001      	movs	r0, #1
 8006f68:	e76f      	b.n	8006e4a <_dtoa_r+0x7da>
 8006f6a:	f04f 0800 	mov.w	r8, #0
 8006f6e:	e7f6      	b.n	8006f5e <_dtoa_r+0x8ee>
 8006f70:	4698      	mov	r8, r3
 8006f72:	e7f4      	b.n	8006f5e <_dtoa_r+0x8ee>
 8006f74:	f43f af7d 	beq.w	8006e72 <_dtoa_r+0x802>
 8006f78:	4618      	mov	r0, r3
 8006f7a:	301c      	adds	r0, #28
 8006f7c:	e772      	b.n	8006e64 <_dtoa_r+0x7f4>
 8006f7e:	9b03      	ldr	r3, [sp, #12]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	dc37      	bgt.n	8006ff4 <_dtoa_r+0x984>
 8006f84:	9b06      	ldr	r3, [sp, #24]
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	dd34      	ble.n	8006ff4 <_dtoa_r+0x984>
 8006f8a:	9b03      	ldr	r3, [sp, #12]
 8006f8c:	9302      	str	r3, [sp, #8]
 8006f8e:	9b02      	ldr	r3, [sp, #8]
 8006f90:	b96b      	cbnz	r3, 8006fae <_dtoa_r+0x93e>
 8006f92:	4631      	mov	r1, r6
 8006f94:	2205      	movs	r2, #5
 8006f96:	4620      	mov	r0, r4
 8006f98:	f000 f9d4 	bl	8007344 <__multadd>
 8006f9c:	4601      	mov	r1, r0
 8006f9e:	4606      	mov	r6, r0
 8006fa0:	ee18 0a10 	vmov	r0, s16
 8006fa4:	f000 fbee 	bl	8007784 <__mcmp>
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	f73f adbb 	bgt.w	8006b24 <_dtoa_r+0x4b4>
 8006fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fb0:	9d01      	ldr	r5, [sp, #4]
 8006fb2:	43db      	mvns	r3, r3
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	f04f 0800 	mov.w	r8, #0
 8006fba:	4631      	mov	r1, r6
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	f000 f99f 	bl	8007300 <_Bfree>
 8006fc2:	2f00      	cmp	r7, #0
 8006fc4:	f43f aea4 	beq.w	8006d10 <_dtoa_r+0x6a0>
 8006fc8:	f1b8 0f00 	cmp.w	r8, #0
 8006fcc:	d005      	beq.n	8006fda <_dtoa_r+0x96a>
 8006fce:	45b8      	cmp	r8, r7
 8006fd0:	d003      	beq.n	8006fda <_dtoa_r+0x96a>
 8006fd2:	4641      	mov	r1, r8
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	f000 f993 	bl	8007300 <_Bfree>
 8006fda:	4639      	mov	r1, r7
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f000 f98f 	bl	8007300 <_Bfree>
 8006fe2:	e695      	b.n	8006d10 <_dtoa_r+0x6a0>
 8006fe4:	2600      	movs	r6, #0
 8006fe6:	4637      	mov	r7, r6
 8006fe8:	e7e1      	b.n	8006fae <_dtoa_r+0x93e>
 8006fea:	9700      	str	r7, [sp, #0]
 8006fec:	4637      	mov	r7, r6
 8006fee:	e599      	b.n	8006b24 <_dtoa_r+0x4b4>
 8006ff0:	40240000 	.word	0x40240000
 8006ff4:	9b08      	ldr	r3, [sp, #32]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f000 80ca 	beq.w	8007190 <_dtoa_r+0xb20>
 8006ffc:	9b03      	ldr	r3, [sp, #12]
 8006ffe:	9302      	str	r3, [sp, #8]
 8007000:	2d00      	cmp	r5, #0
 8007002:	dd05      	ble.n	8007010 <_dtoa_r+0x9a0>
 8007004:	4639      	mov	r1, r7
 8007006:	462a      	mov	r2, r5
 8007008:	4620      	mov	r0, r4
 800700a:	f000 fb4b 	bl	80076a4 <__lshift>
 800700e:	4607      	mov	r7, r0
 8007010:	f1b8 0f00 	cmp.w	r8, #0
 8007014:	d05b      	beq.n	80070ce <_dtoa_r+0xa5e>
 8007016:	6879      	ldr	r1, [r7, #4]
 8007018:	4620      	mov	r0, r4
 800701a:	f000 f931 	bl	8007280 <_Balloc>
 800701e:	4605      	mov	r5, r0
 8007020:	b928      	cbnz	r0, 800702e <_dtoa_r+0x9be>
 8007022:	4b87      	ldr	r3, [pc, #540]	; (8007240 <_dtoa_r+0xbd0>)
 8007024:	4602      	mov	r2, r0
 8007026:	f240 21ea 	movw	r1, #746	; 0x2ea
 800702a:	f7ff bb3b 	b.w	80066a4 <_dtoa_r+0x34>
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	3202      	adds	r2, #2
 8007032:	0092      	lsls	r2, r2, #2
 8007034:	f107 010c 	add.w	r1, r7, #12
 8007038:	300c      	adds	r0, #12
 800703a:	f000 f913 	bl	8007264 <memcpy>
 800703e:	2201      	movs	r2, #1
 8007040:	4629      	mov	r1, r5
 8007042:	4620      	mov	r0, r4
 8007044:	f000 fb2e 	bl	80076a4 <__lshift>
 8007048:	9b01      	ldr	r3, [sp, #4]
 800704a:	f103 0901 	add.w	r9, r3, #1
 800704e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007052:	4413      	add	r3, r2
 8007054:	9305      	str	r3, [sp, #20]
 8007056:	f00a 0301 	and.w	r3, sl, #1
 800705a:	46b8      	mov	r8, r7
 800705c:	9304      	str	r3, [sp, #16]
 800705e:	4607      	mov	r7, r0
 8007060:	4631      	mov	r1, r6
 8007062:	ee18 0a10 	vmov	r0, s16
 8007066:	f7ff fa77 	bl	8006558 <quorem>
 800706a:	4641      	mov	r1, r8
 800706c:	9002      	str	r0, [sp, #8]
 800706e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007072:	ee18 0a10 	vmov	r0, s16
 8007076:	f000 fb85 	bl	8007784 <__mcmp>
 800707a:	463a      	mov	r2, r7
 800707c:	9003      	str	r0, [sp, #12]
 800707e:	4631      	mov	r1, r6
 8007080:	4620      	mov	r0, r4
 8007082:	f000 fb9b 	bl	80077bc <__mdiff>
 8007086:	68c2      	ldr	r2, [r0, #12]
 8007088:	f109 3bff 	add.w	fp, r9, #4294967295
 800708c:	4605      	mov	r5, r0
 800708e:	bb02      	cbnz	r2, 80070d2 <_dtoa_r+0xa62>
 8007090:	4601      	mov	r1, r0
 8007092:	ee18 0a10 	vmov	r0, s16
 8007096:	f000 fb75 	bl	8007784 <__mcmp>
 800709a:	4602      	mov	r2, r0
 800709c:	4629      	mov	r1, r5
 800709e:	4620      	mov	r0, r4
 80070a0:	9207      	str	r2, [sp, #28]
 80070a2:	f000 f92d 	bl	8007300 <_Bfree>
 80070a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80070aa:	ea43 0102 	orr.w	r1, r3, r2
 80070ae:	9b04      	ldr	r3, [sp, #16]
 80070b0:	430b      	orrs	r3, r1
 80070b2:	464d      	mov	r5, r9
 80070b4:	d10f      	bne.n	80070d6 <_dtoa_r+0xa66>
 80070b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80070ba:	d02a      	beq.n	8007112 <_dtoa_r+0xaa2>
 80070bc:	9b03      	ldr	r3, [sp, #12]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	dd02      	ble.n	80070c8 <_dtoa_r+0xa58>
 80070c2:	9b02      	ldr	r3, [sp, #8]
 80070c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80070c8:	f88b a000 	strb.w	sl, [fp]
 80070cc:	e775      	b.n	8006fba <_dtoa_r+0x94a>
 80070ce:	4638      	mov	r0, r7
 80070d0:	e7ba      	b.n	8007048 <_dtoa_r+0x9d8>
 80070d2:	2201      	movs	r2, #1
 80070d4:	e7e2      	b.n	800709c <_dtoa_r+0xa2c>
 80070d6:	9b03      	ldr	r3, [sp, #12]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	db04      	blt.n	80070e6 <_dtoa_r+0xa76>
 80070dc:	9906      	ldr	r1, [sp, #24]
 80070de:	430b      	orrs	r3, r1
 80070e0:	9904      	ldr	r1, [sp, #16]
 80070e2:	430b      	orrs	r3, r1
 80070e4:	d122      	bne.n	800712c <_dtoa_r+0xabc>
 80070e6:	2a00      	cmp	r2, #0
 80070e8:	ddee      	ble.n	80070c8 <_dtoa_r+0xa58>
 80070ea:	ee18 1a10 	vmov	r1, s16
 80070ee:	2201      	movs	r2, #1
 80070f0:	4620      	mov	r0, r4
 80070f2:	f000 fad7 	bl	80076a4 <__lshift>
 80070f6:	4631      	mov	r1, r6
 80070f8:	ee08 0a10 	vmov	s16, r0
 80070fc:	f000 fb42 	bl	8007784 <__mcmp>
 8007100:	2800      	cmp	r0, #0
 8007102:	dc03      	bgt.n	800710c <_dtoa_r+0xa9c>
 8007104:	d1e0      	bne.n	80070c8 <_dtoa_r+0xa58>
 8007106:	f01a 0f01 	tst.w	sl, #1
 800710a:	d0dd      	beq.n	80070c8 <_dtoa_r+0xa58>
 800710c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007110:	d1d7      	bne.n	80070c2 <_dtoa_r+0xa52>
 8007112:	2339      	movs	r3, #57	; 0x39
 8007114:	f88b 3000 	strb.w	r3, [fp]
 8007118:	462b      	mov	r3, r5
 800711a:	461d      	mov	r5, r3
 800711c:	3b01      	subs	r3, #1
 800711e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007122:	2a39      	cmp	r2, #57	; 0x39
 8007124:	d071      	beq.n	800720a <_dtoa_r+0xb9a>
 8007126:	3201      	adds	r2, #1
 8007128:	701a      	strb	r2, [r3, #0]
 800712a:	e746      	b.n	8006fba <_dtoa_r+0x94a>
 800712c:	2a00      	cmp	r2, #0
 800712e:	dd07      	ble.n	8007140 <_dtoa_r+0xad0>
 8007130:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007134:	d0ed      	beq.n	8007112 <_dtoa_r+0xaa2>
 8007136:	f10a 0301 	add.w	r3, sl, #1
 800713a:	f88b 3000 	strb.w	r3, [fp]
 800713e:	e73c      	b.n	8006fba <_dtoa_r+0x94a>
 8007140:	9b05      	ldr	r3, [sp, #20]
 8007142:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007146:	4599      	cmp	r9, r3
 8007148:	d047      	beq.n	80071da <_dtoa_r+0xb6a>
 800714a:	ee18 1a10 	vmov	r1, s16
 800714e:	2300      	movs	r3, #0
 8007150:	220a      	movs	r2, #10
 8007152:	4620      	mov	r0, r4
 8007154:	f000 f8f6 	bl	8007344 <__multadd>
 8007158:	45b8      	cmp	r8, r7
 800715a:	ee08 0a10 	vmov	s16, r0
 800715e:	f04f 0300 	mov.w	r3, #0
 8007162:	f04f 020a 	mov.w	r2, #10
 8007166:	4641      	mov	r1, r8
 8007168:	4620      	mov	r0, r4
 800716a:	d106      	bne.n	800717a <_dtoa_r+0xb0a>
 800716c:	f000 f8ea 	bl	8007344 <__multadd>
 8007170:	4680      	mov	r8, r0
 8007172:	4607      	mov	r7, r0
 8007174:	f109 0901 	add.w	r9, r9, #1
 8007178:	e772      	b.n	8007060 <_dtoa_r+0x9f0>
 800717a:	f000 f8e3 	bl	8007344 <__multadd>
 800717e:	4639      	mov	r1, r7
 8007180:	4680      	mov	r8, r0
 8007182:	2300      	movs	r3, #0
 8007184:	220a      	movs	r2, #10
 8007186:	4620      	mov	r0, r4
 8007188:	f000 f8dc 	bl	8007344 <__multadd>
 800718c:	4607      	mov	r7, r0
 800718e:	e7f1      	b.n	8007174 <_dtoa_r+0xb04>
 8007190:	9b03      	ldr	r3, [sp, #12]
 8007192:	9302      	str	r3, [sp, #8]
 8007194:	9d01      	ldr	r5, [sp, #4]
 8007196:	ee18 0a10 	vmov	r0, s16
 800719a:	4631      	mov	r1, r6
 800719c:	f7ff f9dc 	bl	8006558 <quorem>
 80071a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80071a4:	9b01      	ldr	r3, [sp, #4]
 80071a6:	f805 ab01 	strb.w	sl, [r5], #1
 80071aa:	1aea      	subs	r2, r5, r3
 80071ac:	9b02      	ldr	r3, [sp, #8]
 80071ae:	4293      	cmp	r3, r2
 80071b0:	dd09      	ble.n	80071c6 <_dtoa_r+0xb56>
 80071b2:	ee18 1a10 	vmov	r1, s16
 80071b6:	2300      	movs	r3, #0
 80071b8:	220a      	movs	r2, #10
 80071ba:	4620      	mov	r0, r4
 80071bc:	f000 f8c2 	bl	8007344 <__multadd>
 80071c0:	ee08 0a10 	vmov	s16, r0
 80071c4:	e7e7      	b.n	8007196 <_dtoa_r+0xb26>
 80071c6:	9b02      	ldr	r3, [sp, #8]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	bfc8      	it	gt
 80071cc:	461d      	movgt	r5, r3
 80071ce:	9b01      	ldr	r3, [sp, #4]
 80071d0:	bfd8      	it	le
 80071d2:	2501      	movle	r5, #1
 80071d4:	441d      	add	r5, r3
 80071d6:	f04f 0800 	mov.w	r8, #0
 80071da:	ee18 1a10 	vmov	r1, s16
 80071de:	2201      	movs	r2, #1
 80071e0:	4620      	mov	r0, r4
 80071e2:	f000 fa5f 	bl	80076a4 <__lshift>
 80071e6:	4631      	mov	r1, r6
 80071e8:	ee08 0a10 	vmov	s16, r0
 80071ec:	f000 faca 	bl	8007784 <__mcmp>
 80071f0:	2800      	cmp	r0, #0
 80071f2:	dc91      	bgt.n	8007118 <_dtoa_r+0xaa8>
 80071f4:	d102      	bne.n	80071fc <_dtoa_r+0xb8c>
 80071f6:	f01a 0f01 	tst.w	sl, #1
 80071fa:	d18d      	bne.n	8007118 <_dtoa_r+0xaa8>
 80071fc:	462b      	mov	r3, r5
 80071fe:	461d      	mov	r5, r3
 8007200:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007204:	2a30      	cmp	r2, #48	; 0x30
 8007206:	d0fa      	beq.n	80071fe <_dtoa_r+0xb8e>
 8007208:	e6d7      	b.n	8006fba <_dtoa_r+0x94a>
 800720a:	9a01      	ldr	r2, [sp, #4]
 800720c:	429a      	cmp	r2, r3
 800720e:	d184      	bne.n	800711a <_dtoa_r+0xaaa>
 8007210:	9b00      	ldr	r3, [sp, #0]
 8007212:	3301      	adds	r3, #1
 8007214:	9300      	str	r3, [sp, #0]
 8007216:	2331      	movs	r3, #49	; 0x31
 8007218:	7013      	strb	r3, [r2, #0]
 800721a:	e6ce      	b.n	8006fba <_dtoa_r+0x94a>
 800721c:	4b09      	ldr	r3, [pc, #36]	; (8007244 <_dtoa_r+0xbd4>)
 800721e:	f7ff ba95 	b.w	800674c <_dtoa_r+0xdc>
 8007222:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007224:	2b00      	cmp	r3, #0
 8007226:	f47f aa6e 	bne.w	8006706 <_dtoa_r+0x96>
 800722a:	4b07      	ldr	r3, [pc, #28]	; (8007248 <_dtoa_r+0xbd8>)
 800722c:	f7ff ba8e 	b.w	800674c <_dtoa_r+0xdc>
 8007230:	9b02      	ldr	r3, [sp, #8]
 8007232:	2b00      	cmp	r3, #0
 8007234:	dcae      	bgt.n	8007194 <_dtoa_r+0xb24>
 8007236:	9b06      	ldr	r3, [sp, #24]
 8007238:	2b02      	cmp	r3, #2
 800723a:	f73f aea8 	bgt.w	8006f8e <_dtoa_r+0x91e>
 800723e:	e7a9      	b.n	8007194 <_dtoa_r+0xb24>
 8007240:	08009247 	.word	0x08009247
 8007244:	080091a4 	.word	0x080091a4
 8007248:	080091c8 	.word	0x080091c8

0800724c <_localeconv_r>:
 800724c:	4800      	ldr	r0, [pc, #0]	; (8007250 <_localeconv_r+0x4>)
 800724e:	4770      	bx	lr
 8007250:	200001f8 	.word	0x200001f8

08007254 <malloc>:
 8007254:	4b02      	ldr	r3, [pc, #8]	; (8007260 <malloc+0xc>)
 8007256:	4601      	mov	r1, r0
 8007258:	6818      	ldr	r0, [r3, #0]
 800725a:	f000 bc17 	b.w	8007a8c <_malloc_r>
 800725e:	bf00      	nop
 8007260:	200000a4 	.word	0x200000a4

08007264 <memcpy>:
 8007264:	440a      	add	r2, r1
 8007266:	4291      	cmp	r1, r2
 8007268:	f100 33ff 	add.w	r3, r0, #4294967295
 800726c:	d100      	bne.n	8007270 <memcpy+0xc>
 800726e:	4770      	bx	lr
 8007270:	b510      	push	{r4, lr}
 8007272:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007276:	f803 4f01 	strb.w	r4, [r3, #1]!
 800727a:	4291      	cmp	r1, r2
 800727c:	d1f9      	bne.n	8007272 <memcpy+0xe>
 800727e:	bd10      	pop	{r4, pc}

08007280 <_Balloc>:
 8007280:	b570      	push	{r4, r5, r6, lr}
 8007282:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007284:	4604      	mov	r4, r0
 8007286:	460d      	mov	r5, r1
 8007288:	b976      	cbnz	r6, 80072a8 <_Balloc+0x28>
 800728a:	2010      	movs	r0, #16
 800728c:	f7ff ffe2 	bl	8007254 <malloc>
 8007290:	4602      	mov	r2, r0
 8007292:	6260      	str	r0, [r4, #36]	; 0x24
 8007294:	b920      	cbnz	r0, 80072a0 <_Balloc+0x20>
 8007296:	4b18      	ldr	r3, [pc, #96]	; (80072f8 <_Balloc+0x78>)
 8007298:	4818      	ldr	r0, [pc, #96]	; (80072fc <_Balloc+0x7c>)
 800729a:	2166      	movs	r1, #102	; 0x66
 800729c:	f000 fdd6 	bl	8007e4c <__assert_func>
 80072a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072a4:	6006      	str	r6, [r0, #0]
 80072a6:	60c6      	str	r6, [r0, #12]
 80072a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80072aa:	68f3      	ldr	r3, [r6, #12]
 80072ac:	b183      	cbz	r3, 80072d0 <_Balloc+0x50>
 80072ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80072b6:	b9b8      	cbnz	r0, 80072e8 <_Balloc+0x68>
 80072b8:	2101      	movs	r1, #1
 80072ba:	fa01 f605 	lsl.w	r6, r1, r5
 80072be:	1d72      	adds	r2, r6, #5
 80072c0:	0092      	lsls	r2, r2, #2
 80072c2:	4620      	mov	r0, r4
 80072c4:	f000 fb60 	bl	8007988 <_calloc_r>
 80072c8:	b160      	cbz	r0, 80072e4 <_Balloc+0x64>
 80072ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80072ce:	e00e      	b.n	80072ee <_Balloc+0x6e>
 80072d0:	2221      	movs	r2, #33	; 0x21
 80072d2:	2104      	movs	r1, #4
 80072d4:	4620      	mov	r0, r4
 80072d6:	f000 fb57 	bl	8007988 <_calloc_r>
 80072da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072dc:	60f0      	str	r0, [r6, #12]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1e4      	bne.n	80072ae <_Balloc+0x2e>
 80072e4:	2000      	movs	r0, #0
 80072e6:	bd70      	pop	{r4, r5, r6, pc}
 80072e8:	6802      	ldr	r2, [r0, #0]
 80072ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072ee:	2300      	movs	r3, #0
 80072f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072f4:	e7f7      	b.n	80072e6 <_Balloc+0x66>
 80072f6:	bf00      	nop
 80072f8:	080091d5 	.word	0x080091d5
 80072fc:	08009258 	.word	0x08009258

08007300 <_Bfree>:
 8007300:	b570      	push	{r4, r5, r6, lr}
 8007302:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007304:	4605      	mov	r5, r0
 8007306:	460c      	mov	r4, r1
 8007308:	b976      	cbnz	r6, 8007328 <_Bfree+0x28>
 800730a:	2010      	movs	r0, #16
 800730c:	f7ff ffa2 	bl	8007254 <malloc>
 8007310:	4602      	mov	r2, r0
 8007312:	6268      	str	r0, [r5, #36]	; 0x24
 8007314:	b920      	cbnz	r0, 8007320 <_Bfree+0x20>
 8007316:	4b09      	ldr	r3, [pc, #36]	; (800733c <_Bfree+0x3c>)
 8007318:	4809      	ldr	r0, [pc, #36]	; (8007340 <_Bfree+0x40>)
 800731a:	218a      	movs	r1, #138	; 0x8a
 800731c:	f000 fd96 	bl	8007e4c <__assert_func>
 8007320:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007324:	6006      	str	r6, [r0, #0]
 8007326:	60c6      	str	r6, [r0, #12]
 8007328:	b13c      	cbz	r4, 800733a <_Bfree+0x3a>
 800732a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800732c:	6862      	ldr	r2, [r4, #4]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007334:	6021      	str	r1, [r4, #0]
 8007336:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800733a:	bd70      	pop	{r4, r5, r6, pc}
 800733c:	080091d5 	.word	0x080091d5
 8007340:	08009258 	.word	0x08009258

08007344 <__multadd>:
 8007344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007348:	690d      	ldr	r5, [r1, #16]
 800734a:	4607      	mov	r7, r0
 800734c:	460c      	mov	r4, r1
 800734e:	461e      	mov	r6, r3
 8007350:	f101 0c14 	add.w	ip, r1, #20
 8007354:	2000      	movs	r0, #0
 8007356:	f8dc 3000 	ldr.w	r3, [ip]
 800735a:	b299      	uxth	r1, r3
 800735c:	fb02 6101 	mla	r1, r2, r1, r6
 8007360:	0c1e      	lsrs	r6, r3, #16
 8007362:	0c0b      	lsrs	r3, r1, #16
 8007364:	fb02 3306 	mla	r3, r2, r6, r3
 8007368:	b289      	uxth	r1, r1
 800736a:	3001      	adds	r0, #1
 800736c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007370:	4285      	cmp	r5, r0
 8007372:	f84c 1b04 	str.w	r1, [ip], #4
 8007376:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800737a:	dcec      	bgt.n	8007356 <__multadd+0x12>
 800737c:	b30e      	cbz	r6, 80073c2 <__multadd+0x7e>
 800737e:	68a3      	ldr	r3, [r4, #8]
 8007380:	42ab      	cmp	r3, r5
 8007382:	dc19      	bgt.n	80073b8 <__multadd+0x74>
 8007384:	6861      	ldr	r1, [r4, #4]
 8007386:	4638      	mov	r0, r7
 8007388:	3101      	adds	r1, #1
 800738a:	f7ff ff79 	bl	8007280 <_Balloc>
 800738e:	4680      	mov	r8, r0
 8007390:	b928      	cbnz	r0, 800739e <__multadd+0x5a>
 8007392:	4602      	mov	r2, r0
 8007394:	4b0c      	ldr	r3, [pc, #48]	; (80073c8 <__multadd+0x84>)
 8007396:	480d      	ldr	r0, [pc, #52]	; (80073cc <__multadd+0x88>)
 8007398:	21b5      	movs	r1, #181	; 0xb5
 800739a:	f000 fd57 	bl	8007e4c <__assert_func>
 800739e:	6922      	ldr	r2, [r4, #16]
 80073a0:	3202      	adds	r2, #2
 80073a2:	f104 010c 	add.w	r1, r4, #12
 80073a6:	0092      	lsls	r2, r2, #2
 80073a8:	300c      	adds	r0, #12
 80073aa:	f7ff ff5b 	bl	8007264 <memcpy>
 80073ae:	4621      	mov	r1, r4
 80073b0:	4638      	mov	r0, r7
 80073b2:	f7ff ffa5 	bl	8007300 <_Bfree>
 80073b6:	4644      	mov	r4, r8
 80073b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80073bc:	3501      	adds	r5, #1
 80073be:	615e      	str	r6, [r3, #20]
 80073c0:	6125      	str	r5, [r4, #16]
 80073c2:	4620      	mov	r0, r4
 80073c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073c8:	08009247 	.word	0x08009247
 80073cc:	08009258 	.word	0x08009258

080073d0 <__hi0bits>:
 80073d0:	0c03      	lsrs	r3, r0, #16
 80073d2:	041b      	lsls	r3, r3, #16
 80073d4:	b9d3      	cbnz	r3, 800740c <__hi0bits+0x3c>
 80073d6:	0400      	lsls	r0, r0, #16
 80073d8:	2310      	movs	r3, #16
 80073da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80073de:	bf04      	itt	eq
 80073e0:	0200      	lsleq	r0, r0, #8
 80073e2:	3308      	addeq	r3, #8
 80073e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80073e8:	bf04      	itt	eq
 80073ea:	0100      	lsleq	r0, r0, #4
 80073ec:	3304      	addeq	r3, #4
 80073ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80073f2:	bf04      	itt	eq
 80073f4:	0080      	lsleq	r0, r0, #2
 80073f6:	3302      	addeq	r3, #2
 80073f8:	2800      	cmp	r0, #0
 80073fa:	db05      	blt.n	8007408 <__hi0bits+0x38>
 80073fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007400:	f103 0301 	add.w	r3, r3, #1
 8007404:	bf08      	it	eq
 8007406:	2320      	moveq	r3, #32
 8007408:	4618      	mov	r0, r3
 800740a:	4770      	bx	lr
 800740c:	2300      	movs	r3, #0
 800740e:	e7e4      	b.n	80073da <__hi0bits+0xa>

08007410 <__lo0bits>:
 8007410:	6803      	ldr	r3, [r0, #0]
 8007412:	f013 0207 	ands.w	r2, r3, #7
 8007416:	4601      	mov	r1, r0
 8007418:	d00b      	beq.n	8007432 <__lo0bits+0x22>
 800741a:	07da      	lsls	r2, r3, #31
 800741c:	d423      	bmi.n	8007466 <__lo0bits+0x56>
 800741e:	0798      	lsls	r0, r3, #30
 8007420:	bf49      	itett	mi
 8007422:	085b      	lsrmi	r3, r3, #1
 8007424:	089b      	lsrpl	r3, r3, #2
 8007426:	2001      	movmi	r0, #1
 8007428:	600b      	strmi	r3, [r1, #0]
 800742a:	bf5c      	itt	pl
 800742c:	600b      	strpl	r3, [r1, #0]
 800742e:	2002      	movpl	r0, #2
 8007430:	4770      	bx	lr
 8007432:	b298      	uxth	r0, r3
 8007434:	b9a8      	cbnz	r0, 8007462 <__lo0bits+0x52>
 8007436:	0c1b      	lsrs	r3, r3, #16
 8007438:	2010      	movs	r0, #16
 800743a:	b2da      	uxtb	r2, r3
 800743c:	b90a      	cbnz	r2, 8007442 <__lo0bits+0x32>
 800743e:	3008      	adds	r0, #8
 8007440:	0a1b      	lsrs	r3, r3, #8
 8007442:	071a      	lsls	r2, r3, #28
 8007444:	bf04      	itt	eq
 8007446:	091b      	lsreq	r3, r3, #4
 8007448:	3004      	addeq	r0, #4
 800744a:	079a      	lsls	r2, r3, #30
 800744c:	bf04      	itt	eq
 800744e:	089b      	lsreq	r3, r3, #2
 8007450:	3002      	addeq	r0, #2
 8007452:	07da      	lsls	r2, r3, #31
 8007454:	d403      	bmi.n	800745e <__lo0bits+0x4e>
 8007456:	085b      	lsrs	r3, r3, #1
 8007458:	f100 0001 	add.w	r0, r0, #1
 800745c:	d005      	beq.n	800746a <__lo0bits+0x5a>
 800745e:	600b      	str	r3, [r1, #0]
 8007460:	4770      	bx	lr
 8007462:	4610      	mov	r0, r2
 8007464:	e7e9      	b.n	800743a <__lo0bits+0x2a>
 8007466:	2000      	movs	r0, #0
 8007468:	4770      	bx	lr
 800746a:	2020      	movs	r0, #32
 800746c:	4770      	bx	lr
	...

08007470 <__i2b>:
 8007470:	b510      	push	{r4, lr}
 8007472:	460c      	mov	r4, r1
 8007474:	2101      	movs	r1, #1
 8007476:	f7ff ff03 	bl	8007280 <_Balloc>
 800747a:	4602      	mov	r2, r0
 800747c:	b928      	cbnz	r0, 800748a <__i2b+0x1a>
 800747e:	4b05      	ldr	r3, [pc, #20]	; (8007494 <__i2b+0x24>)
 8007480:	4805      	ldr	r0, [pc, #20]	; (8007498 <__i2b+0x28>)
 8007482:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007486:	f000 fce1 	bl	8007e4c <__assert_func>
 800748a:	2301      	movs	r3, #1
 800748c:	6144      	str	r4, [r0, #20]
 800748e:	6103      	str	r3, [r0, #16]
 8007490:	bd10      	pop	{r4, pc}
 8007492:	bf00      	nop
 8007494:	08009247 	.word	0x08009247
 8007498:	08009258 	.word	0x08009258

0800749c <__multiply>:
 800749c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a0:	4691      	mov	r9, r2
 80074a2:	690a      	ldr	r2, [r1, #16]
 80074a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	bfb8      	it	lt
 80074ac:	460b      	movlt	r3, r1
 80074ae:	460c      	mov	r4, r1
 80074b0:	bfbc      	itt	lt
 80074b2:	464c      	movlt	r4, r9
 80074b4:	4699      	movlt	r9, r3
 80074b6:	6927      	ldr	r7, [r4, #16]
 80074b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80074bc:	68a3      	ldr	r3, [r4, #8]
 80074be:	6861      	ldr	r1, [r4, #4]
 80074c0:	eb07 060a 	add.w	r6, r7, sl
 80074c4:	42b3      	cmp	r3, r6
 80074c6:	b085      	sub	sp, #20
 80074c8:	bfb8      	it	lt
 80074ca:	3101      	addlt	r1, #1
 80074cc:	f7ff fed8 	bl	8007280 <_Balloc>
 80074d0:	b930      	cbnz	r0, 80074e0 <__multiply+0x44>
 80074d2:	4602      	mov	r2, r0
 80074d4:	4b44      	ldr	r3, [pc, #272]	; (80075e8 <__multiply+0x14c>)
 80074d6:	4845      	ldr	r0, [pc, #276]	; (80075ec <__multiply+0x150>)
 80074d8:	f240 115d 	movw	r1, #349	; 0x15d
 80074dc:	f000 fcb6 	bl	8007e4c <__assert_func>
 80074e0:	f100 0514 	add.w	r5, r0, #20
 80074e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80074e8:	462b      	mov	r3, r5
 80074ea:	2200      	movs	r2, #0
 80074ec:	4543      	cmp	r3, r8
 80074ee:	d321      	bcc.n	8007534 <__multiply+0x98>
 80074f0:	f104 0314 	add.w	r3, r4, #20
 80074f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80074f8:	f109 0314 	add.w	r3, r9, #20
 80074fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007500:	9202      	str	r2, [sp, #8]
 8007502:	1b3a      	subs	r2, r7, r4
 8007504:	3a15      	subs	r2, #21
 8007506:	f022 0203 	bic.w	r2, r2, #3
 800750a:	3204      	adds	r2, #4
 800750c:	f104 0115 	add.w	r1, r4, #21
 8007510:	428f      	cmp	r7, r1
 8007512:	bf38      	it	cc
 8007514:	2204      	movcc	r2, #4
 8007516:	9201      	str	r2, [sp, #4]
 8007518:	9a02      	ldr	r2, [sp, #8]
 800751a:	9303      	str	r3, [sp, #12]
 800751c:	429a      	cmp	r2, r3
 800751e:	d80c      	bhi.n	800753a <__multiply+0x9e>
 8007520:	2e00      	cmp	r6, #0
 8007522:	dd03      	ble.n	800752c <__multiply+0x90>
 8007524:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007528:	2b00      	cmp	r3, #0
 800752a:	d05a      	beq.n	80075e2 <__multiply+0x146>
 800752c:	6106      	str	r6, [r0, #16]
 800752e:	b005      	add	sp, #20
 8007530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007534:	f843 2b04 	str.w	r2, [r3], #4
 8007538:	e7d8      	b.n	80074ec <__multiply+0x50>
 800753a:	f8b3 a000 	ldrh.w	sl, [r3]
 800753e:	f1ba 0f00 	cmp.w	sl, #0
 8007542:	d024      	beq.n	800758e <__multiply+0xf2>
 8007544:	f104 0e14 	add.w	lr, r4, #20
 8007548:	46a9      	mov	r9, r5
 800754a:	f04f 0c00 	mov.w	ip, #0
 800754e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007552:	f8d9 1000 	ldr.w	r1, [r9]
 8007556:	fa1f fb82 	uxth.w	fp, r2
 800755a:	b289      	uxth	r1, r1
 800755c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007560:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007564:	f8d9 2000 	ldr.w	r2, [r9]
 8007568:	4461      	add	r1, ip
 800756a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800756e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007572:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007576:	b289      	uxth	r1, r1
 8007578:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800757c:	4577      	cmp	r7, lr
 800757e:	f849 1b04 	str.w	r1, [r9], #4
 8007582:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007586:	d8e2      	bhi.n	800754e <__multiply+0xb2>
 8007588:	9a01      	ldr	r2, [sp, #4]
 800758a:	f845 c002 	str.w	ip, [r5, r2]
 800758e:	9a03      	ldr	r2, [sp, #12]
 8007590:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007594:	3304      	adds	r3, #4
 8007596:	f1b9 0f00 	cmp.w	r9, #0
 800759a:	d020      	beq.n	80075de <__multiply+0x142>
 800759c:	6829      	ldr	r1, [r5, #0]
 800759e:	f104 0c14 	add.w	ip, r4, #20
 80075a2:	46ae      	mov	lr, r5
 80075a4:	f04f 0a00 	mov.w	sl, #0
 80075a8:	f8bc b000 	ldrh.w	fp, [ip]
 80075ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80075b0:	fb09 220b 	mla	r2, r9, fp, r2
 80075b4:	4492      	add	sl, r2
 80075b6:	b289      	uxth	r1, r1
 80075b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80075bc:	f84e 1b04 	str.w	r1, [lr], #4
 80075c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80075c4:	f8be 1000 	ldrh.w	r1, [lr]
 80075c8:	0c12      	lsrs	r2, r2, #16
 80075ca:	fb09 1102 	mla	r1, r9, r2, r1
 80075ce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80075d2:	4567      	cmp	r7, ip
 80075d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80075d8:	d8e6      	bhi.n	80075a8 <__multiply+0x10c>
 80075da:	9a01      	ldr	r2, [sp, #4]
 80075dc:	50a9      	str	r1, [r5, r2]
 80075de:	3504      	adds	r5, #4
 80075e0:	e79a      	b.n	8007518 <__multiply+0x7c>
 80075e2:	3e01      	subs	r6, #1
 80075e4:	e79c      	b.n	8007520 <__multiply+0x84>
 80075e6:	bf00      	nop
 80075e8:	08009247 	.word	0x08009247
 80075ec:	08009258 	.word	0x08009258

080075f0 <__pow5mult>:
 80075f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075f4:	4615      	mov	r5, r2
 80075f6:	f012 0203 	ands.w	r2, r2, #3
 80075fa:	4606      	mov	r6, r0
 80075fc:	460f      	mov	r7, r1
 80075fe:	d007      	beq.n	8007610 <__pow5mult+0x20>
 8007600:	4c25      	ldr	r4, [pc, #148]	; (8007698 <__pow5mult+0xa8>)
 8007602:	3a01      	subs	r2, #1
 8007604:	2300      	movs	r3, #0
 8007606:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800760a:	f7ff fe9b 	bl	8007344 <__multadd>
 800760e:	4607      	mov	r7, r0
 8007610:	10ad      	asrs	r5, r5, #2
 8007612:	d03d      	beq.n	8007690 <__pow5mult+0xa0>
 8007614:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007616:	b97c      	cbnz	r4, 8007638 <__pow5mult+0x48>
 8007618:	2010      	movs	r0, #16
 800761a:	f7ff fe1b 	bl	8007254 <malloc>
 800761e:	4602      	mov	r2, r0
 8007620:	6270      	str	r0, [r6, #36]	; 0x24
 8007622:	b928      	cbnz	r0, 8007630 <__pow5mult+0x40>
 8007624:	4b1d      	ldr	r3, [pc, #116]	; (800769c <__pow5mult+0xac>)
 8007626:	481e      	ldr	r0, [pc, #120]	; (80076a0 <__pow5mult+0xb0>)
 8007628:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800762c:	f000 fc0e 	bl	8007e4c <__assert_func>
 8007630:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007634:	6004      	str	r4, [r0, #0]
 8007636:	60c4      	str	r4, [r0, #12]
 8007638:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800763c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007640:	b94c      	cbnz	r4, 8007656 <__pow5mult+0x66>
 8007642:	f240 2171 	movw	r1, #625	; 0x271
 8007646:	4630      	mov	r0, r6
 8007648:	f7ff ff12 	bl	8007470 <__i2b>
 800764c:	2300      	movs	r3, #0
 800764e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007652:	4604      	mov	r4, r0
 8007654:	6003      	str	r3, [r0, #0]
 8007656:	f04f 0900 	mov.w	r9, #0
 800765a:	07eb      	lsls	r3, r5, #31
 800765c:	d50a      	bpl.n	8007674 <__pow5mult+0x84>
 800765e:	4639      	mov	r1, r7
 8007660:	4622      	mov	r2, r4
 8007662:	4630      	mov	r0, r6
 8007664:	f7ff ff1a 	bl	800749c <__multiply>
 8007668:	4639      	mov	r1, r7
 800766a:	4680      	mov	r8, r0
 800766c:	4630      	mov	r0, r6
 800766e:	f7ff fe47 	bl	8007300 <_Bfree>
 8007672:	4647      	mov	r7, r8
 8007674:	106d      	asrs	r5, r5, #1
 8007676:	d00b      	beq.n	8007690 <__pow5mult+0xa0>
 8007678:	6820      	ldr	r0, [r4, #0]
 800767a:	b938      	cbnz	r0, 800768c <__pow5mult+0x9c>
 800767c:	4622      	mov	r2, r4
 800767e:	4621      	mov	r1, r4
 8007680:	4630      	mov	r0, r6
 8007682:	f7ff ff0b 	bl	800749c <__multiply>
 8007686:	6020      	str	r0, [r4, #0]
 8007688:	f8c0 9000 	str.w	r9, [r0]
 800768c:	4604      	mov	r4, r0
 800768e:	e7e4      	b.n	800765a <__pow5mult+0x6a>
 8007690:	4638      	mov	r0, r7
 8007692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007696:	bf00      	nop
 8007698:	080093a8 	.word	0x080093a8
 800769c:	080091d5 	.word	0x080091d5
 80076a0:	08009258 	.word	0x08009258

080076a4 <__lshift>:
 80076a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076a8:	460c      	mov	r4, r1
 80076aa:	6849      	ldr	r1, [r1, #4]
 80076ac:	6923      	ldr	r3, [r4, #16]
 80076ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076b2:	68a3      	ldr	r3, [r4, #8]
 80076b4:	4607      	mov	r7, r0
 80076b6:	4691      	mov	r9, r2
 80076b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076bc:	f108 0601 	add.w	r6, r8, #1
 80076c0:	42b3      	cmp	r3, r6
 80076c2:	db0b      	blt.n	80076dc <__lshift+0x38>
 80076c4:	4638      	mov	r0, r7
 80076c6:	f7ff fddb 	bl	8007280 <_Balloc>
 80076ca:	4605      	mov	r5, r0
 80076cc:	b948      	cbnz	r0, 80076e2 <__lshift+0x3e>
 80076ce:	4602      	mov	r2, r0
 80076d0:	4b2a      	ldr	r3, [pc, #168]	; (800777c <__lshift+0xd8>)
 80076d2:	482b      	ldr	r0, [pc, #172]	; (8007780 <__lshift+0xdc>)
 80076d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80076d8:	f000 fbb8 	bl	8007e4c <__assert_func>
 80076dc:	3101      	adds	r1, #1
 80076de:	005b      	lsls	r3, r3, #1
 80076e0:	e7ee      	b.n	80076c0 <__lshift+0x1c>
 80076e2:	2300      	movs	r3, #0
 80076e4:	f100 0114 	add.w	r1, r0, #20
 80076e8:	f100 0210 	add.w	r2, r0, #16
 80076ec:	4618      	mov	r0, r3
 80076ee:	4553      	cmp	r3, sl
 80076f0:	db37      	blt.n	8007762 <__lshift+0xbe>
 80076f2:	6920      	ldr	r0, [r4, #16]
 80076f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076f8:	f104 0314 	add.w	r3, r4, #20
 80076fc:	f019 091f 	ands.w	r9, r9, #31
 8007700:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007704:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007708:	d02f      	beq.n	800776a <__lshift+0xc6>
 800770a:	f1c9 0e20 	rsb	lr, r9, #32
 800770e:	468a      	mov	sl, r1
 8007710:	f04f 0c00 	mov.w	ip, #0
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	fa02 f209 	lsl.w	r2, r2, r9
 800771a:	ea42 020c 	orr.w	r2, r2, ip
 800771e:	f84a 2b04 	str.w	r2, [sl], #4
 8007722:	f853 2b04 	ldr.w	r2, [r3], #4
 8007726:	4298      	cmp	r0, r3
 8007728:	fa22 fc0e 	lsr.w	ip, r2, lr
 800772c:	d8f2      	bhi.n	8007714 <__lshift+0x70>
 800772e:	1b03      	subs	r3, r0, r4
 8007730:	3b15      	subs	r3, #21
 8007732:	f023 0303 	bic.w	r3, r3, #3
 8007736:	3304      	adds	r3, #4
 8007738:	f104 0215 	add.w	r2, r4, #21
 800773c:	4290      	cmp	r0, r2
 800773e:	bf38      	it	cc
 8007740:	2304      	movcc	r3, #4
 8007742:	f841 c003 	str.w	ip, [r1, r3]
 8007746:	f1bc 0f00 	cmp.w	ip, #0
 800774a:	d001      	beq.n	8007750 <__lshift+0xac>
 800774c:	f108 0602 	add.w	r6, r8, #2
 8007750:	3e01      	subs	r6, #1
 8007752:	4638      	mov	r0, r7
 8007754:	612e      	str	r6, [r5, #16]
 8007756:	4621      	mov	r1, r4
 8007758:	f7ff fdd2 	bl	8007300 <_Bfree>
 800775c:	4628      	mov	r0, r5
 800775e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007762:	f842 0f04 	str.w	r0, [r2, #4]!
 8007766:	3301      	adds	r3, #1
 8007768:	e7c1      	b.n	80076ee <__lshift+0x4a>
 800776a:	3904      	subs	r1, #4
 800776c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007770:	f841 2f04 	str.w	r2, [r1, #4]!
 8007774:	4298      	cmp	r0, r3
 8007776:	d8f9      	bhi.n	800776c <__lshift+0xc8>
 8007778:	e7ea      	b.n	8007750 <__lshift+0xac>
 800777a:	bf00      	nop
 800777c:	08009247 	.word	0x08009247
 8007780:	08009258 	.word	0x08009258

08007784 <__mcmp>:
 8007784:	b530      	push	{r4, r5, lr}
 8007786:	6902      	ldr	r2, [r0, #16]
 8007788:	690c      	ldr	r4, [r1, #16]
 800778a:	1b12      	subs	r2, r2, r4
 800778c:	d10e      	bne.n	80077ac <__mcmp+0x28>
 800778e:	f100 0314 	add.w	r3, r0, #20
 8007792:	3114      	adds	r1, #20
 8007794:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007798:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800779c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80077a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80077a4:	42a5      	cmp	r5, r4
 80077a6:	d003      	beq.n	80077b0 <__mcmp+0x2c>
 80077a8:	d305      	bcc.n	80077b6 <__mcmp+0x32>
 80077aa:	2201      	movs	r2, #1
 80077ac:	4610      	mov	r0, r2
 80077ae:	bd30      	pop	{r4, r5, pc}
 80077b0:	4283      	cmp	r3, r0
 80077b2:	d3f3      	bcc.n	800779c <__mcmp+0x18>
 80077b4:	e7fa      	b.n	80077ac <__mcmp+0x28>
 80077b6:	f04f 32ff 	mov.w	r2, #4294967295
 80077ba:	e7f7      	b.n	80077ac <__mcmp+0x28>

080077bc <__mdiff>:
 80077bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c0:	460c      	mov	r4, r1
 80077c2:	4606      	mov	r6, r0
 80077c4:	4611      	mov	r1, r2
 80077c6:	4620      	mov	r0, r4
 80077c8:	4690      	mov	r8, r2
 80077ca:	f7ff ffdb 	bl	8007784 <__mcmp>
 80077ce:	1e05      	subs	r5, r0, #0
 80077d0:	d110      	bne.n	80077f4 <__mdiff+0x38>
 80077d2:	4629      	mov	r1, r5
 80077d4:	4630      	mov	r0, r6
 80077d6:	f7ff fd53 	bl	8007280 <_Balloc>
 80077da:	b930      	cbnz	r0, 80077ea <__mdiff+0x2e>
 80077dc:	4b3a      	ldr	r3, [pc, #232]	; (80078c8 <__mdiff+0x10c>)
 80077de:	4602      	mov	r2, r0
 80077e0:	f240 2132 	movw	r1, #562	; 0x232
 80077e4:	4839      	ldr	r0, [pc, #228]	; (80078cc <__mdiff+0x110>)
 80077e6:	f000 fb31 	bl	8007e4c <__assert_func>
 80077ea:	2301      	movs	r3, #1
 80077ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80077f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f4:	bfa4      	itt	ge
 80077f6:	4643      	movge	r3, r8
 80077f8:	46a0      	movge	r8, r4
 80077fa:	4630      	mov	r0, r6
 80077fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007800:	bfa6      	itte	ge
 8007802:	461c      	movge	r4, r3
 8007804:	2500      	movge	r5, #0
 8007806:	2501      	movlt	r5, #1
 8007808:	f7ff fd3a 	bl	8007280 <_Balloc>
 800780c:	b920      	cbnz	r0, 8007818 <__mdiff+0x5c>
 800780e:	4b2e      	ldr	r3, [pc, #184]	; (80078c8 <__mdiff+0x10c>)
 8007810:	4602      	mov	r2, r0
 8007812:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007816:	e7e5      	b.n	80077e4 <__mdiff+0x28>
 8007818:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800781c:	6926      	ldr	r6, [r4, #16]
 800781e:	60c5      	str	r5, [r0, #12]
 8007820:	f104 0914 	add.w	r9, r4, #20
 8007824:	f108 0514 	add.w	r5, r8, #20
 8007828:	f100 0e14 	add.w	lr, r0, #20
 800782c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007830:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007834:	f108 0210 	add.w	r2, r8, #16
 8007838:	46f2      	mov	sl, lr
 800783a:	2100      	movs	r1, #0
 800783c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007840:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007844:	fa1f f883 	uxth.w	r8, r3
 8007848:	fa11 f18b 	uxtah	r1, r1, fp
 800784c:	0c1b      	lsrs	r3, r3, #16
 800784e:	eba1 0808 	sub.w	r8, r1, r8
 8007852:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007856:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800785a:	fa1f f888 	uxth.w	r8, r8
 800785e:	1419      	asrs	r1, r3, #16
 8007860:	454e      	cmp	r6, r9
 8007862:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007866:	f84a 3b04 	str.w	r3, [sl], #4
 800786a:	d8e7      	bhi.n	800783c <__mdiff+0x80>
 800786c:	1b33      	subs	r3, r6, r4
 800786e:	3b15      	subs	r3, #21
 8007870:	f023 0303 	bic.w	r3, r3, #3
 8007874:	3304      	adds	r3, #4
 8007876:	3415      	adds	r4, #21
 8007878:	42a6      	cmp	r6, r4
 800787a:	bf38      	it	cc
 800787c:	2304      	movcc	r3, #4
 800787e:	441d      	add	r5, r3
 8007880:	4473      	add	r3, lr
 8007882:	469e      	mov	lr, r3
 8007884:	462e      	mov	r6, r5
 8007886:	4566      	cmp	r6, ip
 8007888:	d30e      	bcc.n	80078a8 <__mdiff+0xec>
 800788a:	f10c 0203 	add.w	r2, ip, #3
 800788e:	1b52      	subs	r2, r2, r5
 8007890:	f022 0203 	bic.w	r2, r2, #3
 8007894:	3d03      	subs	r5, #3
 8007896:	45ac      	cmp	ip, r5
 8007898:	bf38      	it	cc
 800789a:	2200      	movcc	r2, #0
 800789c:	441a      	add	r2, r3
 800789e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80078a2:	b17b      	cbz	r3, 80078c4 <__mdiff+0x108>
 80078a4:	6107      	str	r7, [r0, #16]
 80078a6:	e7a3      	b.n	80077f0 <__mdiff+0x34>
 80078a8:	f856 8b04 	ldr.w	r8, [r6], #4
 80078ac:	fa11 f288 	uxtah	r2, r1, r8
 80078b0:	1414      	asrs	r4, r2, #16
 80078b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80078b6:	b292      	uxth	r2, r2
 80078b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80078bc:	f84e 2b04 	str.w	r2, [lr], #4
 80078c0:	1421      	asrs	r1, r4, #16
 80078c2:	e7e0      	b.n	8007886 <__mdiff+0xca>
 80078c4:	3f01      	subs	r7, #1
 80078c6:	e7ea      	b.n	800789e <__mdiff+0xe2>
 80078c8:	08009247 	.word	0x08009247
 80078cc:	08009258 	.word	0x08009258

080078d0 <__d2b>:
 80078d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80078d4:	4689      	mov	r9, r1
 80078d6:	2101      	movs	r1, #1
 80078d8:	ec57 6b10 	vmov	r6, r7, d0
 80078dc:	4690      	mov	r8, r2
 80078de:	f7ff fccf 	bl	8007280 <_Balloc>
 80078e2:	4604      	mov	r4, r0
 80078e4:	b930      	cbnz	r0, 80078f4 <__d2b+0x24>
 80078e6:	4602      	mov	r2, r0
 80078e8:	4b25      	ldr	r3, [pc, #148]	; (8007980 <__d2b+0xb0>)
 80078ea:	4826      	ldr	r0, [pc, #152]	; (8007984 <__d2b+0xb4>)
 80078ec:	f240 310a 	movw	r1, #778	; 0x30a
 80078f0:	f000 faac 	bl	8007e4c <__assert_func>
 80078f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80078f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80078fc:	bb35      	cbnz	r5, 800794c <__d2b+0x7c>
 80078fe:	2e00      	cmp	r6, #0
 8007900:	9301      	str	r3, [sp, #4]
 8007902:	d028      	beq.n	8007956 <__d2b+0x86>
 8007904:	4668      	mov	r0, sp
 8007906:	9600      	str	r6, [sp, #0]
 8007908:	f7ff fd82 	bl	8007410 <__lo0bits>
 800790c:	9900      	ldr	r1, [sp, #0]
 800790e:	b300      	cbz	r0, 8007952 <__d2b+0x82>
 8007910:	9a01      	ldr	r2, [sp, #4]
 8007912:	f1c0 0320 	rsb	r3, r0, #32
 8007916:	fa02 f303 	lsl.w	r3, r2, r3
 800791a:	430b      	orrs	r3, r1
 800791c:	40c2      	lsrs	r2, r0
 800791e:	6163      	str	r3, [r4, #20]
 8007920:	9201      	str	r2, [sp, #4]
 8007922:	9b01      	ldr	r3, [sp, #4]
 8007924:	61a3      	str	r3, [r4, #24]
 8007926:	2b00      	cmp	r3, #0
 8007928:	bf14      	ite	ne
 800792a:	2202      	movne	r2, #2
 800792c:	2201      	moveq	r2, #1
 800792e:	6122      	str	r2, [r4, #16]
 8007930:	b1d5      	cbz	r5, 8007968 <__d2b+0x98>
 8007932:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007936:	4405      	add	r5, r0
 8007938:	f8c9 5000 	str.w	r5, [r9]
 800793c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007940:	f8c8 0000 	str.w	r0, [r8]
 8007944:	4620      	mov	r0, r4
 8007946:	b003      	add	sp, #12
 8007948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800794c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007950:	e7d5      	b.n	80078fe <__d2b+0x2e>
 8007952:	6161      	str	r1, [r4, #20]
 8007954:	e7e5      	b.n	8007922 <__d2b+0x52>
 8007956:	a801      	add	r0, sp, #4
 8007958:	f7ff fd5a 	bl	8007410 <__lo0bits>
 800795c:	9b01      	ldr	r3, [sp, #4]
 800795e:	6163      	str	r3, [r4, #20]
 8007960:	2201      	movs	r2, #1
 8007962:	6122      	str	r2, [r4, #16]
 8007964:	3020      	adds	r0, #32
 8007966:	e7e3      	b.n	8007930 <__d2b+0x60>
 8007968:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800796c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007970:	f8c9 0000 	str.w	r0, [r9]
 8007974:	6918      	ldr	r0, [r3, #16]
 8007976:	f7ff fd2b 	bl	80073d0 <__hi0bits>
 800797a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800797e:	e7df      	b.n	8007940 <__d2b+0x70>
 8007980:	08009247 	.word	0x08009247
 8007984:	08009258 	.word	0x08009258

08007988 <_calloc_r>:
 8007988:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800798a:	fba1 2402 	umull	r2, r4, r1, r2
 800798e:	b94c      	cbnz	r4, 80079a4 <_calloc_r+0x1c>
 8007990:	4611      	mov	r1, r2
 8007992:	9201      	str	r2, [sp, #4]
 8007994:	f000 f87a 	bl	8007a8c <_malloc_r>
 8007998:	9a01      	ldr	r2, [sp, #4]
 800799a:	4605      	mov	r5, r0
 800799c:	b930      	cbnz	r0, 80079ac <_calloc_r+0x24>
 800799e:	4628      	mov	r0, r5
 80079a0:	b003      	add	sp, #12
 80079a2:	bd30      	pop	{r4, r5, pc}
 80079a4:	220c      	movs	r2, #12
 80079a6:	6002      	str	r2, [r0, #0]
 80079a8:	2500      	movs	r5, #0
 80079aa:	e7f8      	b.n	800799e <_calloc_r+0x16>
 80079ac:	4621      	mov	r1, r4
 80079ae:	f7fe f941 	bl	8005c34 <memset>
 80079b2:	e7f4      	b.n	800799e <_calloc_r+0x16>

080079b4 <_free_r>:
 80079b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079b6:	2900      	cmp	r1, #0
 80079b8:	d044      	beq.n	8007a44 <_free_r+0x90>
 80079ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079be:	9001      	str	r0, [sp, #4]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f1a1 0404 	sub.w	r4, r1, #4
 80079c6:	bfb8      	it	lt
 80079c8:	18e4      	addlt	r4, r4, r3
 80079ca:	f000 fa9b 	bl	8007f04 <__malloc_lock>
 80079ce:	4a1e      	ldr	r2, [pc, #120]	; (8007a48 <_free_r+0x94>)
 80079d0:	9801      	ldr	r0, [sp, #4]
 80079d2:	6813      	ldr	r3, [r2, #0]
 80079d4:	b933      	cbnz	r3, 80079e4 <_free_r+0x30>
 80079d6:	6063      	str	r3, [r4, #4]
 80079d8:	6014      	str	r4, [r2, #0]
 80079da:	b003      	add	sp, #12
 80079dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079e0:	f000 ba96 	b.w	8007f10 <__malloc_unlock>
 80079e4:	42a3      	cmp	r3, r4
 80079e6:	d908      	bls.n	80079fa <_free_r+0x46>
 80079e8:	6825      	ldr	r5, [r4, #0]
 80079ea:	1961      	adds	r1, r4, r5
 80079ec:	428b      	cmp	r3, r1
 80079ee:	bf01      	itttt	eq
 80079f0:	6819      	ldreq	r1, [r3, #0]
 80079f2:	685b      	ldreq	r3, [r3, #4]
 80079f4:	1949      	addeq	r1, r1, r5
 80079f6:	6021      	streq	r1, [r4, #0]
 80079f8:	e7ed      	b.n	80079d6 <_free_r+0x22>
 80079fa:	461a      	mov	r2, r3
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	b10b      	cbz	r3, 8007a04 <_free_r+0x50>
 8007a00:	42a3      	cmp	r3, r4
 8007a02:	d9fa      	bls.n	80079fa <_free_r+0x46>
 8007a04:	6811      	ldr	r1, [r2, #0]
 8007a06:	1855      	adds	r5, r2, r1
 8007a08:	42a5      	cmp	r5, r4
 8007a0a:	d10b      	bne.n	8007a24 <_free_r+0x70>
 8007a0c:	6824      	ldr	r4, [r4, #0]
 8007a0e:	4421      	add	r1, r4
 8007a10:	1854      	adds	r4, r2, r1
 8007a12:	42a3      	cmp	r3, r4
 8007a14:	6011      	str	r1, [r2, #0]
 8007a16:	d1e0      	bne.n	80079da <_free_r+0x26>
 8007a18:	681c      	ldr	r4, [r3, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	6053      	str	r3, [r2, #4]
 8007a1e:	4421      	add	r1, r4
 8007a20:	6011      	str	r1, [r2, #0]
 8007a22:	e7da      	b.n	80079da <_free_r+0x26>
 8007a24:	d902      	bls.n	8007a2c <_free_r+0x78>
 8007a26:	230c      	movs	r3, #12
 8007a28:	6003      	str	r3, [r0, #0]
 8007a2a:	e7d6      	b.n	80079da <_free_r+0x26>
 8007a2c:	6825      	ldr	r5, [r4, #0]
 8007a2e:	1961      	adds	r1, r4, r5
 8007a30:	428b      	cmp	r3, r1
 8007a32:	bf04      	itt	eq
 8007a34:	6819      	ldreq	r1, [r3, #0]
 8007a36:	685b      	ldreq	r3, [r3, #4]
 8007a38:	6063      	str	r3, [r4, #4]
 8007a3a:	bf04      	itt	eq
 8007a3c:	1949      	addeq	r1, r1, r5
 8007a3e:	6021      	streq	r1, [r4, #0]
 8007a40:	6054      	str	r4, [r2, #4]
 8007a42:	e7ca      	b.n	80079da <_free_r+0x26>
 8007a44:	b003      	add	sp, #12
 8007a46:	bd30      	pop	{r4, r5, pc}
 8007a48:	20000460 	.word	0x20000460

08007a4c <sbrk_aligned>:
 8007a4c:	b570      	push	{r4, r5, r6, lr}
 8007a4e:	4e0e      	ldr	r6, [pc, #56]	; (8007a88 <sbrk_aligned+0x3c>)
 8007a50:	460c      	mov	r4, r1
 8007a52:	6831      	ldr	r1, [r6, #0]
 8007a54:	4605      	mov	r5, r0
 8007a56:	b911      	cbnz	r1, 8007a5e <sbrk_aligned+0x12>
 8007a58:	f000 f9e8 	bl	8007e2c <_sbrk_r>
 8007a5c:	6030      	str	r0, [r6, #0]
 8007a5e:	4621      	mov	r1, r4
 8007a60:	4628      	mov	r0, r5
 8007a62:	f000 f9e3 	bl	8007e2c <_sbrk_r>
 8007a66:	1c43      	adds	r3, r0, #1
 8007a68:	d00a      	beq.n	8007a80 <sbrk_aligned+0x34>
 8007a6a:	1cc4      	adds	r4, r0, #3
 8007a6c:	f024 0403 	bic.w	r4, r4, #3
 8007a70:	42a0      	cmp	r0, r4
 8007a72:	d007      	beq.n	8007a84 <sbrk_aligned+0x38>
 8007a74:	1a21      	subs	r1, r4, r0
 8007a76:	4628      	mov	r0, r5
 8007a78:	f000 f9d8 	bl	8007e2c <_sbrk_r>
 8007a7c:	3001      	adds	r0, #1
 8007a7e:	d101      	bne.n	8007a84 <sbrk_aligned+0x38>
 8007a80:	f04f 34ff 	mov.w	r4, #4294967295
 8007a84:	4620      	mov	r0, r4
 8007a86:	bd70      	pop	{r4, r5, r6, pc}
 8007a88:	20000464 	.word	0x20000464

08007a8c <_malloc_r>:
 8007a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a90:	1ccd      	adds	r5, r1, #3
 8007a92:	f025 0503 	bic.w	r5, r5, #3
 8007a96:	3508      	adds	r5, #8
 8007a98:	2d0c      	cmp	r5, #12
 8007a9a:	bf38      	it	cc
 8007a9c:	250c      	movcc	r5, #12
 8007a9e:	2d00      	cmp	r5, #0
 8007aa0:	4607      	mov	r7, r0
 8007aa2:	db01      	blt.n	8007aa8 <_malloc_r+0x1c>
 8007aa4:	42a9      	cmp	r1, r5
 8007aa6:	d905      	bls.n	8007ab4 <_malloc_r+0x28>
 8007aa8:	230c      	movs	r3, #12
 8007aaa:	603b      	str	r3, [r7, #0]
 8007aac:	2600      	movs	r6, #0
 8007aae:	4630      	mov	r0, r6
 8007ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ab4:	4e2e      	ldr	r6, [pc, #184]	; (8007b70 <_malloc_r+0xe4>)
 8007ab6:	f000 fa25 	bl	8007f04 <__malloc_lock>
 8007aba:	6833      	ldr	r3, [r6, #0]
 8007abc:	461c      	mov	r4, r3
 8007abe:	bb34      	cbnz	r4, 8007b0e <_malloc_r+0x82>
 8007ac0:	4629      	mov	r1, r5
 8007ac2:	4638      	mov	r0, r7
 8007ac4:	f7ff ffc2 	bl	8007a4c <sbrk_aligned>
 8007ac8:	1c43      	adds	r3, r0, #1
 8007aca:	4604      	mov	r4, r0
 8007acc:	d14d      	bne.n	8007b6a <_malloc_r+0xde>
 8007ace:	6834      	ldr	r4, [r6, #0]
 8007ad0:	4626      	mov	r6, r4
 8007ad2:	2e00      	cmp	r6, #0
 8007ad4:	d140      	bne.n	8007b58 <_malloc_r+0xcc>
 8007ad6:	6823      	ldr	r3, [r4, #0]
 8007ad8:	4631      	mov	r1, r6
 8007ada:	4638      	mov	r0, r7
 8007adc:	eb04 0803 	add.w	r8, r4, r3
 8007ae0:	f000 f9a4 	bl	8007e2c <_sbrk_r>
 8007ae4:	4580      	cmp	r8, r0
 8007ae6:	d13a      	bne.n	8007b5e <_malloc_r+0xd2>
 8007ae8:	6821      	ldr	r1, [r4, #0]
 8007aea:	3503      	adds	r5, #3
 8007aec:	1a6d      	subs	r5, r5, r1
 8007aee:	f025 0503 	bic.w	r5, r5, #3
 8007af2:	3508      	adds	r5, #8
 8007af4:	2d0c      	cmp	r5, #12
 8007af6:	bf38      	it	cc
 8007af8:	250c      	movcc	r5, #12
 8007afa:	4629      	mov	r1, r5
 8007afc:	4638      	mov	r0, r7
 8007afe:	f7ff ffa5 	bl	8007a4c <sbrk_aligned>
 8007b02:	3001      	adds	r0, #1
 8007b04:	d02b      	beq.n	8007b5e <_malloc_r+0xd2>
 8007b06:	6823      	ldr	r3, [r4, #0]
 8007b08:	442b      	add	r3, r5
 8007b0a:	6023      	str	r3, [r4, #0]
 8007b0c:	e00e      	b.n	8007b2c <_malloc_r+0xa0>
 8007b0e:	6822      	ldr	r2, [r4, #0]
 8007b10:	1b52      	subs	r2, r2, r5
 8007b12:	d41e      	bmi.n	8007b52 <_malloc_r+0xc6>
 8007b14:	2a0b      	cmp	r2, #11
 8007b16:	d916      	bls.n	8007b46 <_malloc_r+0xba>
 8007b18:	1961      	adds	r1, r4, r5
 8007b1a:	42a3      	cmp	r3, r4
 8007b1c:	6025      	str	r5, [r4, #0]
 8007b1e:	bf18      	it	ne
 8007b20:	6059      	strne	r1, [r3, #4]
 8007b22:	6863      	ldr	r3, [r4, #4]
 8007b24:	bf08      	it	eq
 8007b26:	6031      	streq	r1, [r6, #0]
 8007b28:	5162      	str	r2, [r4, r5]
 8007b2a:	604b      	str	r3, [r1, #4]
 8007b2c:	4638      	mov	r0, r7
 8007b2e:	f104 060b 	add.w	r6, r4, #11
 8007b32:	f000 f9ed 	bl	8007f10 <__malloc_unlock>
 8007b36:	f026 0607 	bic.w	r6, r6, #7
 8007b3a:	1d23      	adds	r3, r4, #4
 8007b3c:	1af2      	subs	r2, r6, r3
 8007b3e:	d0b6      	beq.n	8007aae <_malloc_r+0x22>
 8007b40:	1b9b      	subs	r3, r3, r6
 8007b42:	50a3      	str	r3, [r4, r2]
 8007b44:	e7b3      	b.n	8007aae <_malloc_r+0x22>
 8007b46:	6862      	ldr	r2, [r4, #4]
 8007b48:	42a3      	cmp	r3, r4
 8007b4a:	bf0c      	ite	eq
 8007b4c:	6032      	streq	r2, [r6, #0]
 8007b4e:	605a      	strne	r2, [r3, #4]
 8007b50:	e7ec      	b.n	8007b2c <_malloc_r+0xa0>
 8007b52:	4623      	mov	r3, r4
 8007b54:	6864      	ldr	r4, [r4, #4]
 8007b56:	e7b2      	b.n	8007abe <_malloc_r+0x32>
 8007b58:	4634      	mov	r4, r6
 8007b5a:	6876      	ldr	r6, [r6, #4]
 8007b5c:	e7b9      	b.n	8007ad2 <_malloc_r+0x46>
 8007b5e:	230c      	movs	r3, #12
 8007b60:	603b      	str	r3, [r7, #0]
 8007b62:	4638      	mov	r0, r7
 8007b64:	f000 f9d4 	bl	8007f10 <__malloc_unlock>
 8007b68:	e7a1      	b.n	8007aae <_malloc_r+0x22>
 8007b6a:	6025      	str	r5, [r4, #0]
 8007b6c:	e7de      	b.n	8007b2c <_malloc_r+0xa0>
 8007b6e:	bf00      	nop
 8007b70:	20000460 	.word	0x20000460

08007b74 <__ssputs_r>:
 8007b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b78:	688e      	ldr	r6, [r1, #8]
 8007b7a:	429e      	cmp	r6, r3
 8007b7c:	4682      	mov	sl, r0
 8007b7e:	460c      	mov	r4, r1
 8007b80:	4690      	mov	r8, r2
 8007b82:	461f      	mov	r7, r3
 8007b84:	d838      	bhi.n	8007bf8 <__ssputs_r+0x84>
 8007b86:	898a      	ldrh	r2, [r1, #12]
 8007b88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b8c:	d032      	beq.n	8007bf4 <__ssputs_r+0x80>
 8007b8e:	6825      	ldr	r5, [r4, #0]
 8007b90:	6909      	ldr	r1, [r1, #16]
 8007b92:	eba5 0901 	sub.w	r9, r5, r1
 8007b96:	6965      	ldr	r5, [r4, #20]
 8007b98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	444b      	add	r3, r9
 8007ba4:	106d      	asrs	r5, r5, #1
 8007ba6:	429d      	cmp	r5, r3
 8007ba8:	bf38      	it	cc
 8007baa:	461d      	movcc	r5, r3
 8007bac:	0553      	lsls	r3, r2, #21
 8007bae:	d531      	bpl.n	8007c14 <__ssputs_r+0xa0>
 8007bb0:	4629      	mov	r1, r5
 8007bb2:	f7ff ff6b 	bl	8007a8c <_malloc_r>
 8007bb6:	4606      	mov	r6, r0
 8007bb8:	b950      	cbnz	r0, 8007bd0 <__ssputs_r+0x5c>
 8007bba:	230c      	movs	r3, #12
 8007bbc:	f8ca 3000 	str.w	r3, [sl]
 8007bc0:	89a3      	ldrh	r3, [r4, #12]
 8007bc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bc6:	81a3      	strh	r3, [r4, #12]
 8007bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bd0:	6921      	ldr	r1, [r4, #16]
 8007bd2:	464a      	mov	r2, r9
 8007bd4:	f7ff fb46 	bl	8007264 <memcpy>
 8007bd8:	89a3      	ldrh	r3, [r4, #12]
 8007bda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007be2:	81a3      	strh	r3, [r4, #12]
 8007be4:	6126      	str	r6, [r4, #16]
 8007be6:	6165      	str	r5, [r4, #20]
 8007be8:	444e      	add	r6, r9
 8007bea:	eba5 0509 	sub.w	r5, r5, r9
 8007bee:	6026      	str	r6, [r4, #0]
 8007bf0:	60a5      	str	r5, [r4, #8]
 8007bf2:	463e      	mov	r6, r7
 8007bf4:	42be      	cmp	r6, r7
 8007bf6:	d900      	bls.n	8007bfa <__ssputs_r+0x86>
 8007bf8:	463e      	mov	r6, r7
 8007bfa:	6820      	ldr	r0, [r4, #0]
 8007bfc:	4632      	mov	r2, r6
 8007bfe:	4641      	mov	r1, r8
 8007c00:	f000 f966 	bl	8007ed0 <memmove>
 8007c04:	68a3      	ldr	r3, [r4, #8]
 8007c06:	1b9b      	subs	r3, r3, r6
 8007c08:	60a3      	str	r3, [r4, #8]
 8007c0a:	6823      	ldr	r3, [r4, #0]
 8007c0c:	4433      	add	r3, r6
 8007c0e:	6023      	str	r3, [r4, #0]
 8007c10:	2000      	movs	r0, #0
 8007c12:	e7db      	b.n	8007bcc <__ssputs_r+0x58>
 8007c14:	462a      	mov	r2, r5
 8007c16:	f000 f981 	bl	8007f1c <_realloc_r>
 8007c1a:	4606      	mov	r6, r0
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	d1e1      	bne.n	8007be4 <__ssputs_r+0x70>
 8007c20:	6921      	ldr	r1, [r4, #16]
 8007c22:	4650      	mov	r0, sl
 8007c24:	f7ff fec6 	bl	80079b4 <_free_r>
 8007c28:	e7c7      	b.n	8007bba <__ssputs_r+0x46>
	...

08007c2c <_svfiprintf_r>:
 8007c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c30:	4698      	mov	r8, r3
 8007c32:	898b      	ldrh	r3, [r1, #12]
 8007c34:	061b      	lsls	r3, r3, #24
 8007c36:	b09d      	sub	sp, #116	; 0x74
 8007c38:	4607      	mov	r7, r0
 8007c3a:	460d      	mov	r5, r1
 8007c3c:	4614      	mov	r4, r2
 8007c3e:	d50e      	bpl.n	8007c5e <_svfiprintf_r+0x32>
 8007c40:	690b      	ldr	r3, [r1, #16]
 8007c42:	b963      	cbnz	r3, 8007c5e <_svfiprintf_r+0x32>
 8007c44:	2140      	movs	r1, #64	; 0x40
 8007c46:	f7ff ff21 	bl	8007a8c <_malloc_r>
 8007c4a:	6028      	str	r0, [r5, #0]
 8007c4c:	6128      	str	r0, [r5, #16]
 8007c4e:	b920      	cbnz	r0, 8007c5a <_svfiprintf_r+0x2e>
 8007c50:	230c      	movs	r3, #12
 8007c52:	603b      	str	r3, [r7, #0]
 8007c54:	f04f 30ff 	mov.w	r0, #4294967295
 8007c58:	e0d1      	b.n	8007dfe <_svfiprintf_r+0x1d2>
 8007c5a:	2340      	movs	r3, #64	; 0x40
 8007c5c:	616b      	str	r3, [r5, #20]
 8007c5e:	2300      	movs	r3, #0
 8007c60:	9309      	str	r3, [sp, #36]	; 0x24
 8007c62:	2320      	movs	r3, #32
 8007c64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c68:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c6c:	2330      	movs	r3, #48	; 0x30
 8007c6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007e18 <_svfiprintf_r+0x1ec>
 8007c72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c76:	f04f 0901 	mov.w	r9, #1
 8007c7a:	4623      	mov	r3, r4
 8007c7c:	469a      	mov	sl, r3
 8007c7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c82:	b10a      	cbz	r2, 8007c88 <_svfiprintf_r+0x5c>
 8007c84:	2a25      	cmp	r2, #37	; 0x25
 8007c86:	d1f9      	bne.n	8007c7c <_svfiprintf_r+0x50>
 8007c88:	ebba 0b04 	subs.w	fp, sl, r4
 8007c8c:	d00b      	beq.n	8007ca6 <_svfiprintf_r+0x7a>
 8007c8e:	465b      	mov	r3, fp
 8007c90:	4622      	mov	r2, r4
 8007c92:	4629      	mov	r1, r5
 8007c94:	4638      	mov	r0, r7
 8007c96:	f7ff ff6d 	bl	8007b74 <__ssputs_r>
 8007c9a:	3001      	adds	r0, #1
 8007c9c:	f000 80aa 	beq.w	8007df4 <_svfiprintf_r+0x1c8>
 8007ca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ca2:	445a      	add	r2, fp
 8007ca4:	9209      	str	r2, [sp, #36]	; 0x24
 8007ca6:	f89a 3000 	ldrb.w	r3, [sl]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	f000 80a2 	beq.w	8007df4 <_svfiprintf_r+0x1c8>
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8007cb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cba:	f10a 0a01 	add.w	sl, sl, #1
 8007cbe:	9304      	str	r3, [sp, #16]
 8007cc0:	9307      	str	r3, [sp, #28]
 8007cc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cc6:	931a      	str	r3, [sp, #104]	; 0x68
 8007cc8:	4654      	mov	r4, sl
 8007cca:	2205      	movs	r2, #5
 8007ccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cd0:	4851      	ldr	r0, [pc, #324]	; (8007e18 <_svfiprintf_r+0x1ec>)
 8007cd2:	f7f8 fa85 	bl	80001e0 <memchr>
 8007cd6:	9a04      	ldr	r2, [sp, #16]
 8007cd8:	b9d8      	cbnz	r0, 8007d12 <_svfiprintf_r+0xe6>
 8007cda:	06d0      	lsls	r0, r2, #27
 8007cdc:	bf44      	itt	mi
 8007cde:	2320      	movmi	r3, #32
 8007ce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ce4:	0711      	lsls	r1, r2, #28
 8007ce6:	bf44      	itt	mi
 8007ce8:	232b      	movmi	r3, #43	; 0x2b
 8007cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cee:	f89a 3000 	ldrb.w	r3, [sl]
 8007cf2:	2b2a      	cmp	r3, #42	; 0x2a
 8007cf4:	d015      	beq.n	8007d22 <_svfiprintf_r+0xf6>
 8007cf6:	9a07      	ldr	r2, [sp, #28]
 8007cf8:	4654      	mov	r4, sl
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	f04f 0c0a 	mov.w	ip, #10
 8007d00:	4621      	mov	r1, r4
 8007d02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d06:	3b30      	subs	r3, #48	; 0x30
 8007d08:	2b09      	cmp	r3, #9
 8007d0a:	d94e      	bls.n	8007daa <_svfiprintf_r+0x17e>
 8007d0c:	b1b0      	cbz	r0, 8007d3c <_svfiprintf_r+0x110>
 8007d0e:	9207      	str	r2, [sp, #28]
 8007d10:	e014      	b.n	8007d3c <_svfiprintf_r+0x110>
 8007d12:	eba0 0308 	sub.w	r3, r0, r8
 8007d16:	fa09 f303 	lsl.w	r3, r9, r3
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	9304      	str	r3, [sp, #16]
 8007d1e:	46a2      	mov	sl, r4
 8007d20:	e7d2      	b.n	8007cc8 <_svfiprintf_r+0x9c>
 8007d22:	9b03      	ldr	r3, [sp, #12]
 8007d24:	1d19      	adds	r1, r3, #4
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	9103      	str	r1, [sp, #12]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	bfbb      	ittet	lt
 8007d2e:	425b      	neglt	r3, r3
 8007d30:	f042 0202 	orrlt.w	r2, r2, #2
 8007d34:	9307      	strge	r3, [sp, #28]
 8007d36:	9307      	strlt	r3, [sp, #28]
 8007d38:	bfb8      	it	lt
 8007d3a:	9204      	strlt	r2, [sp, #16]
 8007d3c:	7823      	ldrb	r3, [r4, #0]
 8007d3e:	2b2e      	cmp	r3, #46	; 0x2e
 8007d40:	d10c      	bne.n	8007d5c <_svfiprintf_r+0x130>
 8007d42:	7863      	ldrb	r3, [r4, #1]
 8007d44:	2b2a      	cmp	r3, #42	; 0x2a
 8007d46:	d135      	bne.n	8007db4 <_svfiprintf_r+0x188>
 8007d48:	9b03      	ldr	r3, [sp, #12]
 8007d4a:	1d1a      	adds	r2, r3, #4
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	9203      	str	r2, [sp, #12]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	bfb8      	it	lt
 8007d54:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d58:	3402      	adds	r4, #2
 8007d5a:	9305      	str	r3, [sp, #20]
 8007d5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007e28 <_svfiprintf_r+0x1fc>
 8007d60:	7821      	ldrb	r1, [r4, #0]
 8007d62:	2203      	movs	r2, #3
 8007d64:	4650      	mov	r0, sl
 8007d66:	f7f8 fa3b 	bl	80001e0 <memchr>
 8007d6a:	b140      	cbz	r0, 8007d7e <_svfiprintf_r+0x152>
 8007d6c:	2340      	movs	r3, #64	; 0x40
 8007d6e:	eba0 000a 	sub.w	r0, r0, sl
 8007d72:	fa03 f000 	lsl.w	r0, r3, r0
 8007d76:	9b04      	ldr	r3, [sp, #16]
 8007d78:	4303      	orrs	r3, r0
 8007d7a:	3401      	adds	r4, #1
 8007d7c:	9304      	str	r3, [sp, #16]
 8007d7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d82:	4826      	ldr	r0, [pc, #152]	; (8007e1c <_svfiprintf_r+0x1f0>)
 8007d84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d88:	2206      	movs	r2, #6
 8007d8a:	f7f8 fa29 	bl	80001e0 <memchr>
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	d038      	beq.n	8007e04 <_svfiprintf_r+0x1d8>
 8007d92:	4b23      	ldr	r3, [pc, #140]	; (8007e20 <_svfiprintf_r+0x1f4>)
 8007d94:	bb1b      	cbnz	r3, 8007dde <_svfiprintf_r+0x1b2>
 8007d96:	9b03      	ldr	r3, [sp, #12]
 8007d98:	3307      	adds	r3, #7
 8007d9a:	f023 0307 	bic.w	r3, r3, #7
 8007d9e:	3308      	adds	r3, #8
 8007da0:	9303      	str	r3, [sp, #12]
 8007da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007da4:	4433      	add	r3, r6
 8007da6:	9309      	str	r3, [sp, #36]	; 0x24
 8007da8:	e767      	b.n	8007c7a <_svfiprintf_r+0x4e>
 8007daa:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dae:	460c      	mov	r4, r1
 8007db0:	2001      	movs	r0, #1
 8007db2:	e7a5      	b.n	8007d00 <_svfiprintf_r+0xd4>
 8007db4:	2300      	movs	r3, #0
 8007db6:	3401      	adds	r4, #1
 8007db8:	9305      	str	r3, [sp, #20]
 8007dba:	4619      	mov	r1, r3
 8007dbc:	f04f 0c0a 	mov.w	ip, #10
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dc6:	3a30      	subs	r2, #48	; 0x30
 8007dc8:	2a09      	cmp	r2, #9
 8007dca:	d903      	bls.n	8007dd4 <_svfiprintf_r+0x1a8>
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d0c5      	beq.n	8007d5c <_svfiprintf_r+0x130>
 8007dd0:	9105      	str	r1, [sp, #20]
 8007dd2:	e7c3      	b.n	8007d5c <_svfiprintf_r+0x130>
 8007dd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dd8:	4604      	mov	r4, r0
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e7f0      	b.n	8007dc0 <_svfiprintf_r+0x194>
 8007dde:	ab03      	add	r3, sp, #12
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	462a      	mov	r2, r5
 8007de4:	4b0f      	ldr	r3, [pc, #60]	; (8007e24 <_svfiprintf_r+0x1f8>)
 8007de6:	a904      	add	r1, sp, #16
 8007de8:	4638      	mov	r0, r7
 8007dea:	f7fd ffcb 	bl	8005d84 <_printf_float>
 8007dee:	1c42      	adds	r2, r0, #1
 8007df0:	4606      	mov	r6, r0
 8007df2:	d1d6      	bne.n	8007da2 <_svfiprintf_r+0x176>
 8007df4:	89ab      	ldrh	r3, [r5, #12]
 8007df6:	065b      	lsls	r3, r3, #25
 8007df8:	f53f af2c 	bmi.w	8007c54 <_svfiprintf_r+0x28>
 8007dfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dfe:	b01d      	add	sp, #116	; 0x74
 8007e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e04:	ab03      	add	r3, sp, #12
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	462a      	mov	r2, r5
 8007e0a:	4b06      	ldr	r3, [pc, #24]	; (8007e24 <_svfiprintf_r+0x1f8>)
 8007e0c:	a904      	add	r1, sp, #16
 8007e0e:	4638      	mov	r0, r7
 8007e10:	f7fe fa5c 	bl	80062cc <_printf_i>
 8007e14:	e7eb      	b.n	8007dee <_svfiprintf_r+0x1c2>
 8007e16:	bf00      	nop
 8007e18:	080093b4 	.word	0x080093b4
 8007e1c:	080093be 	.word	0x080093be
 8007e20:	08005d85 	.word	0x08005d85
 8007e24:	08007b75 	.word	0x08007b75
 8007e28:	080093ba 	.word	0x080093ba

08007e2c <_sbrk_r>:
 8007e2c:	b538      	push	{r3, r4, r5, lr}
 8007e2e:	4d06      	ldr	r5, [pc, #24]	; (8007e48 <_sbrk_r+0x1c>)
 8007e30:	2300      	movs	r3, #0
 8007e32:	4604      	mov	r4, r0
 8007e34:	4608      	mov	r0, r1
 8007e36:	602b      	str	r3, [r5, #0]
 8007e38:	f7fa f994 	bl	8002164 <_sbrk>
 8007e3c:	1c43      	adds	r3, r0, #1
 8007e3e:	d102      	bne.n	8007e46 <_sbrk_r+0x1a>
 8007e40:	682b      	ldr	r3, [r5, #0]
 8007e42:	b103      	cbz	r3, 8007e46 <_sbrk_r+0x1a>
 8007e44:	6023      	str	r3, [r4, #0]
 8007e46:	bd38      	pop	{r3, r4, r5, pc}
 8007e48:	20000468 	.word	0x20000468

08007e4c <__assert_func>:
 8007e4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e4e:	4614      	mov	r4, r2
 8007e50:	461a      	mov	r2, r3
 8007e52:	4b09      	ldr	r3, [pc, #36]	; (8007e78 <__assert_func+0x2c>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4605      	mov	r5, r0
 8007e58:	68d8      	ldr	r0, [r3, #12]
 8007e5a:	b14c      	cbz	r4, 8007e70 <__assert_func+0x24>
 8007e5c:	4b07      	ldr	r3, [pc, #28]	; (8007e7c <__assert_func+0x30>)
 8007e5e:	9100      	str	r1, [sp, #0]
 8007e60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e64:	4906      	ldr	r1, [pc, #24]	; (8007e80 <__assert_func+0x34>)
 8007e66:	462b      	mov	r3, r5
 8007e68:	f000 f80e 	bl	8007e88 <fiprintf>
 8007e6c:	f000 faac 	bl	80083c8 <abort>
 8007e70:	4b04      	ldr	r3, [pc, #16]	; (8007e84 <__assert_func+0x38>)
 8007e72:	461c      	mov	r4, r3
 8007e74:	e7f3      	b.n	8007e5e <__assert_func+0x12>
 8007e76:	bf00      	nop
 8007e78:	200000a4 	.word	0x200000a4
 8007e7c:	080093c5 	.word	0x080093c5
 8007e80:	080093d2 	.word	0x080093d2
 8007e84:	08009400 	.word	0x08009400

08007e88 <fiprintf>:
 8007e88:	b40e      	push	{r1, r2, r3}
 8007e8a:	b503      	push	{r0, r1, lr}
 8007e8c:	4601      	mov	r1, r0
 8007e8e:	ab03      	add	r3, sp, #12
 8007e90:	4805      	ldr	r0, [pc, #20]	; (8007ea8 <fiprintf+0x20>)
 8007e92:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e96:	6800      	ldr	r0, [r0, #0]
 8007e98:	9301      	str	r3, [sp, #4]
 8007e9a:	f000 f897 	bl	8007fcc <_vfiprintf_r>
 8007e9e:	b002      	add	sp, #8
 8007ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ea4:	b003      	add	sp, #12
 8007ea6:	4770      	bx	lr
 8007ea8:	200000a4 	.word	0x200000a4

08007eac <__ascii_mbtowc>:
 8007eac:	b082      	sub	sp, #8
 8007eae:	b901      	cbnz	r1, 8007eb2 <__ascii_mbtowc+0x6>
 8007eb0:	a901      	add	r1, sp, #4
 8007eb2:	b142      	cbz	r2, 8007ec6 <__ascii_mbtowc+0x1a>
 8007eb4:	b14b      	cbz	r3, 8007eca <__ascii_mbtowc+0x1e>
 8007eb6:	7813      	ldrb	r3, [r2, #0]
 8007eb8:	600b      	str	r3, [r1, #0]
 8007eba:	7812      	ldrb	r2, [r2, #0]
 8007ebc:	1e10      	subs	r0, r2, #0
 8007ebe:	bf18      	it	ne
 8007ec0:	2001      	movne	r0, #1
 8007ec2:	b002      	add	sp, #8
 8007ec4:	4770      	bx	lr
 8007ec6:	4610      	mov	r0, r2
 8007ec8:	e7fb      	b.n	8007ec2 <__ascii_mbtowc+0x16>
 8007eca:	f06f 0001 	mvn.w	r0, #1
 8007ece:	e7f8      	b.n	8007ec2 <__ascii_mbtowc+0x16>

08007ed0 <memmove>:
 8007ed0:	4288      	cmp	r0, r1
 8007ed2:	b510      	push	{r4, lr}
 8007ed4:	eb01 0402 	add.w	r4, r1, r2
 8007ed8:	d902      	bls.n	8007ee0 <memmove+0x10>
 8007eda:	4284      	cmp	r4, r0
 8007edc:	4623      	mov	r3, r4
 8007ede:	d807      	bhi.n	8007ef0 <memmove+0x20>
 8007ee0:	1e43      	subs	r3, r0, #1
 8007ee2:	42a1      	cmp	r1, r4
 8007ee4:	d008      	beq.n	8007ef8 <memmove+0x28>
 8007ee6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007eea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007eee:	e7f8      	b.n	8007ee2 <memmove+0x12>
 8007ef0:	4402      	add	r2, r0
 8007ef2:	4601      	mov	r1, r0
 8007ef4:	428a      	cmp	r2, r1
 8007ef6:	d100      	bne.n	8007efa <memmove+0x2a>
 8007ef8:	bd10      	pop	{r4, pc}
 8007efa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007efe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f02:	e7f7      	b.n	8007ef4 <memmove+0x24>

08007f04 <__malloc_lock>:
 8007f04:	4801      	ldr	r0, [pc, #4]	; (8007f0c <__malloc_lock+0x8>)
 8007f06:	f000 bc1f 	b.w	8008748 <__retarget_lock_acquire_recursive>
 8007f0a:	bf00      	nop
 8007f0c:	2000046c 	.word	0x2000046c

08007f10 <__malloc_unlock>:
 8007f10:	4801      	ldr	r0, [pc, #4]	; (8007f18 <__malloc_unlock+0x8>)
 8007f12:	f000 bc1a 	b.w	800874a <__retarget_lock_release_recursive>
 8007f16:	bf00      	nop
 8007f18:	2000046c 	.word	0x2000046c

08007f1c <_realloc_r>:
 8007f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f20:	4680      	mov	r8, r0
 8007f22:	4614      	mov	r4, r2
 8007f24:	460e      	mov	r6, r1
 8007f26:	b921      	cbnz	r1, 8007f32 <_realloc_r+0x16>
 8007f28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f2c:	4611      	mov	r1, r2
 8007f2e:	f7ff bdad 	b.w	8007a8c <_malloc_r>
 8007f32:	b92a      	cbnz	r2, 8007f40 <_realloc_r+0x24>
 8007f34:	f7ff fd3e 	bl	80079b4 <_free_r>
 8007f38:	4625      	mov	r5, r4
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f40:	f000 fc6a 	bl	8008818 <_malloc_usable_size_r>
 8007f44:	4284      	cmp	r4, r0
 8007f46:	4607      	mov	r7, r0
 8007f48:	d802      	bhi.n	8007f50 <_realloc_r+0x34>
 8007f4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f4e:	d812      	bhi.n	8007f76 <_realloc_r+0x5a>
 8007f50:	4621      	mov	r1, r4
 8007f52:	4640      	mov	r0, r8
 8007f54:	f7ff fd9a 	bl	8007a8c <_malloc_r>
 8007f58:	4605      	mov	r5, r0
 8007f5a:	2800      	cmp	r0, #0
 8007f5c:	d0ed      	beq.n	8007f3a <_realloc_r+0x1e>
 8007f5e:	42bc      	cmp	r4, r7
 8007f60:	4622      	mov	r2, r4
 8007f62:	4631      	mov	r1, r6
 8007f64:	bf28      	it	cs
 8007f66:	463a      	movcs	r2, r7
 8007f68:	f7ff f97c 	bl	8007264 <memcpy>
 8007f6c:	4631      	mov	r1, r6
 8007f6e:	4640      	mov	r0, r8
 8007f70:	f7ff fd20 	bl	80079b4 <_free_r>
 8007f74:	e7e1      	b.n	8007f3a <_realloc_r+0x1e>
 8007f76:	4635      	mov	r5, r6
 8007f78:	e7df      	b.n	8007f3a <_realloc_r+0x1e>

08007f7a <__sfputc_r>:
 8007f7a:	6893      	ldr	r3, [r2, #8]
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	b410      	push	{r4}
 8007f82:	6093      	str	r3, [r2, #8]
 8007f84:	da08      	bge.n	8007f98 <__sfputc_r+0x1e>
 8007f86:	6994      	ldr	r4, [r2, #24]
 8007f88:	42a3      	cmp	r3, r4
 8007f8a:	db01      	blt.n	8007f90 <__sfputc_r+0x16>
 8007f8c:	290a      	cmp	r1, #10
 8007f8e:	d103      	bne.n	8007f98 <__sfputc_r+0x1e>
 8007f90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f94:	f000 b94a 	b.w	800822c <__swbuf_r>
 8007f98:	6813      	ldr	r3, [r2, #0]
 8007f9a:	1c58      	adds	r0, r3, #1
 8007f9c:	6010      	str	r0, [r2, #0]
 8007f9e:	7019      	strb	r1, [r3, #0]
 8007fa0:	4608      	mov	r0, r1
 8007fa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <__sfputs_r>:
 8007fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007faa:	4606      	mov	r6, r0
 8007fac:	460f      	mov	r7, r1
 8007fae:	4614      	mov	r4, r2
 8007fb0:	18d5      	adds	r5, r2, r3
 8007fb2:	42ac      	cmp	r4, r5
 8007fb4:	d101      	bne.n	8007fba <__sfputs_r+0x12>
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	e007      	b.n	8007fca <__sfputs_r+0x22>
 8007fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fbe:	463a      	mov	r2, r7
 8007fc0:	4630      	mov	r0, r6
 8007fc2:	f7ff ffda 	bl	8007f7a <__sfputc_r>
 8007fc6:	1c43      	adds	r3, r0, #1
 8007fc8:	d1f3      	bne.n	8007fb2 <__sfputs_r+0xa>
 8007fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007fcc <_vfiprintf_r>:
 8007fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd0:	460d      	mov	r5, r1
 8007fd2:	b09d      	sub	sp, #116	; 0x74
 8007fd4:	4614      	mov	r4, r2
 8007fd6:	4698      	mov	r8, r3
 8007fd8:	4606      	mov	r6, r0
 8007fda:	b118      	cbz	r0, 8007fe4 <_vfiprintf_r+0x18>
 8007fdc:	6983      	ldr	r3, [r0, #24]
 8007fde:	b90b      	cbnz	r3, 8007fe4 <_vfiprintf_r+0x18>
 8007fe0:	f000 fb14 	bl	800860c <__sinit>
 8007fe4:	4b89      	ldr	r3, [pc, #548]	; (800820c <_vfiprintf_r+0x240>)
 8007fe6:	429d      	cmp	r5, r3
 8007fe8:	d11b      	bne.n	8008022 <_vfiprintf_r+0x56>
 8007fea:	6875      	ldr	r5, [r6, #4]
 8007fec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fee:	07d9      	lsls	r1, r3, #31
 8007ff0:	d405      	bmi.n	8007ffe <_vfiprintf_r+0x32>
 8007ff2:	89ab      	ldrh	r3, [r5, #12]
 8007ff4:	059a      	lsls	r2, r3, #22
 8007ff6:	d402      	bmi.n	8007ffe <_vfiprintf_r+0x32>
 8007ff8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ffa:	f000 fba5 	bl	8008748 <__retarget_lock_acquire_recursive>
 8007ffe:	89ab      	ldrh	r3, [r5, #12]
 8008000:	071b      	lsls	r3, r3, #28
 8008002:	d501      	bpl.n	8008008 <_vfiprintf_r+0x3c>
 8008004:	692b      	ldr	r3, [r5, #16]
 8008006:	b9eb      	cbnz	r3, 8008044 <_vfiprintf_r+0x78>
 8008008:	4629      	mov	r1, r5
 800800a:	4630      	mov	r0, r6
 800800c:	f000 f96e 	bl	80082ec <__swsetup_r>
 8008010:	b1c0      	cbz	r0, 8008044 <_vfiprintf_r+0x78>
 8008012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008014:	07dc      	lsls	r4, r3, #31
 8008016:	d50e      	bpl.n	8008036 <_vfiprintf_r+0x6a>
 8008018:	f04f 30ff 	mov.w	r0, #4294967295
 800801c:	b01d      	add	sp, #116	; 0x74
 800801e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008022:	4b7b      	ldr	r3, [pc, #492]	; (8008210 <_vfiprintf_r+0x244>)
 8008024:	429d      	cmp	r5, r3
 8008026:	d101      	bne.n	800802c <_vfiprintf_r+0x60>
 8008028:	68b5      	ldr	r5, [r6, #8]
 800802a:	e7df      	b.n	8007fec <_vfiprintf_r+0x20>
 800802c:	4b79      	ldr	r3, [pc, #484]	; (8008214 <_vfiprintf_r+0x248>)
 800802e:	429d      	cmp	r5, r3
 8008030:	bf08      	it	eq
 8008032:	68f5      	ldreq	r5, [r6, #12]
 8008034:	e7da      	b.n	8007fec <_vfiprintf_r+0x20>
 8008036:	89ab      	ldrh	r3, [r5, #12]
 8008038:	0598      	lsls	r0, r3, #22
 800803a:	d4ed      	bmi.n	8008018 <_vfiprintf_r+0x4c>
 800803c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800803e:	f000 fb84 	bl	800874a <__retarget_lock_release_recursive>
 8008042:	e7e9      	b.n	8008018 <_vfiprintf_r+0x4c>
 8008044:	2300      	movs	r3, #0
 8008046:	9309      	str	r3, [sp, #36]	; 0x24
 8008048:	2320      	movs	r3, #32
 800804a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800804e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008052:	2330      	movs	r3, #48	; 0x30
 8008054:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008218 <_vfiprintf_r+0x24c>
 8008058:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800805c:	f04f 0901 	mov.w	r9, #1
 8008060:	4623      	mov	r3, r4
 8008062:	469a      	mov	sl, r3
 8008064:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008068:	b10a      	cbz	r2, 800806e <_vfiprintf_r+0xa2>
 800806a:	2a25      	cmp	r2, #37	; 0x25
 800806c:	d1f9      	bne.n	8008062 <_vfiprintf_r+0x96>
 800806e:	ebba 0b04 	subs.w	fp, sl, r4
 8008072:	d00b      	beq.n	800808c <_vfiprintf_r+0xc0>
 8008074:	465b      	mov	r3, fp
 8008076:	4622      	mov	r2, r4
 8008078:	4629      	mov	r1, r5
 800807a:	4630      	mov	r0, r6
 800807c:	f7ff ff94 	bl	8007fa8 <__sfputs_r>
 8008080:	3001      	adds	r0, #1
 8008082:	f000 80aa 	beq.w	80081da <_vfiprintf_r+0x20e>
 8008086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008088:	445a      	add	r2, fp
 800808a:	9209      	str	r2, [sp, #36]	; 0x24
 800808c:	f89a 3000 	ldrb.w	r3, [sl]
 8008090:	2b00      	cmp	r3, #0
 8008092:	f000 80a2 	beq.w	80081da <_vfiprintf_r+0x20e>
 8008096:	2300      	movs	r3, #0
 8008098:	f04f 32ff 	mov.w	r2, #4294967295
 800809c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080a0:	f10a 0a01 	add.w	sl, sl, #1
 80080a4:	9304      	str	r3, [sp, #16]
 80080a6:	9307      	str	r3, [sp, #28]
 80080a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080ac:	931a      	str	r3, [sp, #104]	; 0x68
 80080ae:	4654      	mov	r4, sl
 80080b0:	2205      	movs	r2, #5
 80080b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080b6:	4858      	ldr	r0, [pc, #352]	; (8008218 <_vfiprintf_r+0x24c>)
 80080b8:	f7f8 f892 	bl	80001e0 <memchr>
 80080bc:	9a04      	ldr	r2, [sp, #16]
 80080be:	b9d8      	cbnz	r0, 80080f8 <_vfiprintf_r+0x12c>
 80080c0:	06d1      	lsls	r1, r2, #27
 80080c2:	bf44      	itt	mi
 80080c4:	2320      	movmi	r3, #32
 80080c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080ca:	0713      	lsls	r3, r2, #28
 80080cc:	bf44      	itt	mi
 80080ce:	232b      	movmi	r3, #43	; 0x2b
 80080d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080d4:	f89a 3000 	ldrb.w	r3, [sl]
 80080d8:	2b2a      	cmp	r3, #42	; 0x2a
 80080da:	d015      	beq.n	8008108 <_vfiprintf_r+0x13c>
 80080dc:	9a07      	ldr	r2, [sp, #28]
 80080de:	4654      	mov	r4, sl
 80080e0:	2000      	movs	r0, #0
 80080e2:	f04f 0c0a 	mov.w	ip, #10
 80080e6:	4621      	mov	r1, r4
 80080e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080ec:	3b30      	subs	r3, #48	; 0x30
 80080ee:	2b09      	cmp	r3, #9
 80080f0:	d94e      	bls.n	8008190 <_vfiprintf_r+0x1c4>
 80080f2:	b1b0      	cbz	r0, 8008122 <_vfiprintf_r+0x156>
 80080f4:	9207      	str	r2, [sp, #28]
 80080f6:	e014      	b.n	8008122 <_vfiprintf_r+0x156>
 80080f8:	eba0 0308 	sub.w	r3, r0, r8
 80080fc:	fa09 f303 	lsl.w	r3, r9, r3
 8008100:	4313      	orrs	r3, r2
 8008102:	9304      	str	r3, [sp, #16]
 8008104:	46a2      	mov	sl, r4
 8008106:	e7d2      	b.n	80080ae <_vfiprintf_r+0xe2>
 8008108:	9b03      	ldr	r3, [sp, #12]
 800810a:	1d19      	adds	r1, r3, #4
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	9103      	str	r1, [sp, #12]
 8008110:	2b00      	cmp	r3, #0
 8008112:	bfbb      	ittet	lt
 8008114:	425b      	neglt	r3, r3
 8008116:	f042 0202 	orrlt.w	r2, r2, #2
 800811a:	9307      	strge	r3, [sp, #28]
 800811c:	9307      	strlt	r3, [sp, #28]
 800811e:	bfb8      	it	lt
 8008120:	9204      	strlt	r2, [sp, #16]
 8008122:	7823      	ldrb	r3, [r4, #0]
 8008124:	2b2e      	cmp	r3, #46	; 0x2e
 8008126:	d10c      	bne.n	8008142 <_vfiprintf_r+0x176>
 8008128:	7863      	ldrb	r3, [r4, #1]
 800812a:	2b2a      	cmp	r3, #42	; 0x2a
 800812c:	d135      	bne.n	800819a <_vfiprintf_r+0x1ce>
 800812e:	9b03      	ldr	r3, [sp, #12]
 8008130:	1d1a      	adds	r2, r3, #4
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	9203      	str	r2, [sp, #12]
 8008136:	2b00      	cmp	r3, #0
 8008138:	bfb8      	it	lt
 800813a:	f04f 33ff 	movlt.w	r3, #4294967295
 800813e:	3402      	adds	r4, #2
 8008140:	9305      	str	r3, [sp, #20]
 8008142:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008228 <_vfiprintf_r+0x25c>
 8008146:	7821      	ldrb	r1, [r4, #0]
 8008148:	2203      	movs	r2, #3
 800814a:	4650      	mov	r0, sl
 800814c:	f7f8 f848 	bl	80001e0 <memchr>
 8008150:	b140      	cbz	r0, 8008164 <_vfiprintf_r+0x198>
 8008152:	2340      	movs	r3, #64	; 0x40
 8008154:	eba0 000a 	sub.w	r0, r0, sl
 8008158:	fa03 f000 	lsl.w	r0, r3, r0
 800815c:	9b04      	ldr	r3, [sp, #16]
 800815e:	4303      	orrs	r3, r0
 8008160:	3401      	adds	r4, #1
 8008162:	9304      	str	r3, [sp, #16]
 8008164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008168:	482c      	ldr	r0, [pc, #176]	; (800821c <_vfiprintf_r+0x250>)
 800816a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800816e:	2206      	movs	r2, #6
 8008170:	f7f8 f836 	bl	80001e0 <memchr>
 8008174:	2800      	cmp	r0, #0
 8008176:	d03f      	beq.n	80081f8 <_vfiprintf_r+0x22c>
 8008178:	4b29      	ldr	r3, [pc, #164]	; (8008220 <_vfiprintf_r+0x254>)
 800817a:	bb1b      	cbnz	r3, 80081c4 <_vfiprintf_r+0x1f8>
 800817c:	9b03      	ldr	r3, [sp, #12]
 800817e:	3307      	adds	r3, #7
 8008180:	f023 0307 	bic.w	r3, r3, #7
 8008184:	3308      	adds	r3, #8
 8008186:	9303      	str	r3, [sp, #12]
 8008188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800818a:	443b      	add	r3, r7
 800818c:	9309      	str	r3, [sp, #36]	; 0x24
 800818e:	e767      	b.n	8008060 <_vfiprintf_r+0x94>
 8008190:	fb0c 3202 	mla	r2, ip, r2, r3
 8008194:	460c      	mov	r4, r1
 8008196:	2001      	movs	r0, #1
 8008198:	e7a5      	b.n	80080e6 <_vfiprintf_r+0x11a>
 800819a:	2300      	movs	r3, #0
 800819c:	3401      	adds	r4, #1
 800819e:	9305      	str	r3, [sp, #20]
 80081a0:	4619      	mov	r1, r3
 80081a2:	f04f 0c0a 	mov.w	ip, #10
 80081a6:	4620      	mov	r0, r4
 80081a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081ac:	3a30      	subs	r2, #48	; 0x30
 80081ae:	2a09      	cmp	r2, #9
 80081b0:	d903      	bls.n	80081ba <_vfiprintf_r+0x1ee>
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d0c5      	beq.n	8008142 <_vfiprintf_r+0x176>
 80081b6:	9105      	str	r1, [sp, #20]
 80081b8:	e7c3      	b.n	8008142 <_vfiprintf_r+0x176>
 80081ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80081be:	4604      	mov	r4, r0
 80081c0:	2301      	movs	r3, #1
 80081c2:	e7f0      	b.n	80081a6 <_vfiprintf_r+0x1da>
 80081c4:	ab03      	add	r3, sp, #12
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	462a      	mov	r2, r5
 80081ca:	4b16      	ldr	r3, [pc, #88]	; (8008224 <_vfiprintf_r+0x258>)
 80081cc:	a904      	add	r1, sp, #16
 80081ce:	4630      	mov	r0, r6
 80081d0:	f7fd fdd8 	bl	8005d84 <_printf_float>
 80081d4:	4607      	mov	r7, r0
 80081d6:	1c78      	adds	r0, r7, #1
 80081d8:	d1d6      	bne.n	8008188 <_vfiprintf_r+0x1bc>
 80081da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081dc:	07d9      	lsls	r1, r3, #31
 80081de:	d405      	bmi.n	80081ec <_vfiprintf_r+0x220>
 80081e0:	89ab      	ldrh	r3, [r5, #12]
 80081e2:	059a      	lsls	r2, r3, #22
 80081e4:	d402      	bmi.n	80081ec <_vfiprintf_r+0x220>
 80081e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081e8:	f000 faaf 	bl	800874a <__retarget_lock_release_recursive>
 80081ec:	89ab      	ldrh	r3, [r5, #12]
 80081ee:	065b      	lsls	r3, r3, #25
 80081f0:	f53f af12 	bmi.w	8008018 <_vfiprintf_r+0x4c>
 80081f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081f6:	e711      	b.n	800801c <_vfiprintf_r+0x50>
 80081f8:	ab03      	add	r3, sp, #12
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	462a      	mov	r2, r5
 80081fe:	4b09      	ldr	r3, [pc, #36]	; (8008224 <_vfiprintf_r+0x258>)
 8008200:	a904      	add	r1, sp, #16
 8008202:	4630      	mov	r0, r6
 8008204:	f7fe f862 	bl	80062cc <_printf_i>
 8008208:	e7e4      	b.n	80081d4 <_vfiprintf_r+0x208>
 800820a:	bf00      	nop
 800820c:	0800952c 	.word	0x0800952c
 8008210:	0800954c 	.word	0x0800954c
 8008214:	0800950c 	.word	0x0800950c
 8008218:	080093b4 	.word	0x080093b4
 800821c:	080093be 	.word	0x080093be
 8008220:	08005d85 	.word	0x08005d85
 8008224:	08007fa9 	.word	0x08007fa9
 8008228:	080093ba 	.word	0x080093ba

0800822c <__swbuf_r>:
 800822c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800822e:	460e      	mov	r6, r1
 8008230:	4614      	mov	r4, r2
 8008232:	4605      	mov	r5, r0
 8008234:	b118      	cbz	r0, 800823e <__swbuf_r+0x12>
 8008236:	6983      	ldr	r3, [r0, #24]
 8008238:	b90b      	cbnz	r3, 800823e <__swbuf_r+0x12>
 800823a:	f000 f9e7 	bl	800860c <__sinit>
 800823e:	4b21      	ldr	r3, [pc, #132]	; (80082c4 <__swbuf_r+0x98>)
 8008240:	429c      	cmp	r4, r3
 8008242:	d12b      	bne.n	800829c <__swbuf_r+0x70>
 8008244:	686c      	ldr	r4, [r5, #4]
 8008246:	69a3      	ldr	r3, [r4, #24]
 8008248:	60a3      	str	r3, [r4, #8]
 800824a:	89a3      	ldrh	r3, [r4, #12]
 800824c:	071a      	lsls	r2, r3, #28
 800824e:	d52f      	bpl.n	80082b0 <__swbuf_r+0x84>
 8008250:	6923      	ldr	r3, [r4, #16]
 8008252:	b36b      	cbz	r3, 80082b0 <__swbuf_r+0x84>
 8008254:	6923      	ldr	r3, [r4, #16]
 8008256:	6820      	ldr	r0, [r4, #0]
 8008258:	1ac0      	subs	r0, r0, r3
 800825a:	6963      	ldr	r3, [r4, #20]
 800825c:	b2f6      	uxtb	r6, r6
 800825e:	4283      	cmp	r3, r0
 8008260:	4637      	mov	r7, r6
 8008262:	dc04      	bgt.n	800826e <__swbuf_r+0x42>
 8008264:	4621      	mov	r1, r4
 8008266:	4628      	mov	r0, r5
 8008268:	f000 f93c 	bl	80084e4 <_fflush_r>
 800826c:	bb30      	cbnz	r0, 80082bc <__swbuf_r+0x90>
 800826e:	68a3      	ldr	r3, [r4, #8]
 8008270:	3b01      	subs	r3, #1
 8008272:	60a3      	str	r3, [r4, #8]
 8008274:	6823      	ldr	r3, [r4, #0]
 8008276:	1c5a      	adds	r2, r3, #1
 8008278:	6022      	str	r2, [r4, #0]
 800827a:	701e      	strb	r6, [r3, #0]
 800827c:	6963      	ldr	r3, [r4, #20]
 800827e:	3001      	adds	r0, #1
 8008280:	4283      	cmp	r3, r0
 8008282:	d004      	beq.n	800828e <__swbuf_r+0x62>
 8008284:	89a3      	ldrh	r3, [r4, #12]
 8008286:	07db      	lsls	r3, r3, #31
 8008288:	d506      	bpl.n	8008298 <__swbuf_r+0x6c>
 800828a:	2e0a      	cmp	r6, #10
 800828c:	d104      	bne.n	8008298 <__swbuf_r+0x6c>
 800828e:	4621      	mov	r1, r4
 8008290:	4628      	mov	r0, r5
 8008292:	f000 f927 	bl	80084e4 <_fflush_r>
 8008296:	b988      	cbnz	r0, 80082bc <__swbuf_r+0x90>
 8008298:	4638      	mov	r0, r7
 800829a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800829c:	4b0a      	ldr	r3, [pc, #40]	; (80082c8 <__swbuf_r+0x9c>)
 800829e:	429c      	cmp	r4, r3
 80082a0:	d101      	bne.n	80082a6 <__swbuf_r+0x7a>
 80082a2:	68ac      	ldr	r4, [r5, #8]
 80082a4:	e7cf      	b.n	8008246 <__swbuf_r+0x1a>
 80082a6:	4b09      	ldr	r3, [pc, #36]	; (80082cc <__swbuf_r+0xa0>)
 80082a8:	429c      	cmp	r4, r3
 80082aa:	bf08      	it	eq
 80082ac:	68ec      	ldreq	r4, [r5, #12]
 80082ae:	e7ca      	b.n	8008246 <__swbuf_r+0x1a>
 80082b0:	4621      	mov	r1, r4
 80082b2:	4628      	mov	r0, r5
 80082b4:	f000 f81a 	bl	80082ec <__swsetup_r>
 80082b8:	2800      	cmp	r0, #0
 80082ba:	d0cb      	beq.n	8008254 <__swbuf_r+0x28>
 80082bc:	f04f 37ff 	mov.w	r7, #4294967295
 80082c0:	e7ea      	b.n	8008298 <__swbuf_r+0x6c>
 80082c2:	bf00      	nop
 80082c4:	0800952c 	.word	0x0800952c
 80082c8:	0800954c 	.word	0x0800954c
 80082cc:	0800950c 	.word	0x0800950c

080082d0 <__ascii_wctomb>:
 80082d0:	b149      	cbz	r1, 80082e6 <__ascii_wctomb+0x16>
 80082d2:	2aff      	cmp	r2, #255	; 0xff
 80082d4:	bf85      	ittet	hi
 80082d6:	238a      	movhi	r3, #138	; 0x8a
 80082d8:	6003      	strhi	r3, [r0, #0]
 80082da:	700a      	strbls	r2, [r1, #0]
 80082dc:	f04f 30ff 	movhi.w	r0, #4294967295
 80082e0:	bf98      	it	ls
 80082e2:	2001      	movls	r0, #1
 80082e4:	4770      	bx	lr
 80082e6:	4608      	mov	r0, r1
 80082e8:	4770      	bx	lr
	...

080082ec <__swsetup_r>:
 80082ec:	4b32      	ldr	r3, [pc, #200]	; (80083b8 <__swsetup_r+0xcc>)
 80082ee:	b570      	push	{r4, r5, r6, lr}
 80082f0:	681d      	ldr	r5, [r3, #0]
 80082f2:	4606      	mov	r6, r0
 80082f4:	460c      	mov	r4, r1
 80082f6:	b125      	cbz	r5, 8008302 <__swsetup_r+0x16>
 80082f8:	69ab      	ldr	r3, [r5, #24]
 80082fa:	b913      	cbnz	r3, 8008302 <__swsetup_r+0x16>
 80082fc:	4628      	mov	r0, r5
 80082fe:	f000 f985 	bl	800860c <__sinit>
 8008302:	4b2e      	ldr	r3, [pc, #184]	; (80083bc <__swsetup_r+0xd0>)
 8008304:	429c      	cmp	r4, r3
 8008306:	d10f      	bne.n	8008328 <__swsetup_r+0x3c>
 8008308:	686c      	ldr	r4, [r5, #4]
 800830a:	89a3      	ldrh	r3, [r4, #12]
 800830c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008310:	0719      	lsls	r1, r3, #28
 8008312:	d42c      	bmi.n	800836e <__swsetup_r+0x82>
 8008314:	06dd      	lsls	r5, r3, #27
 8008316:	d411      	bmi.n	800833c <__swsetup_r+0x50>
 8008318:	2309      	movs	r3, #9
 800831a:	6033      	str	r3, [r6, #0]
 800831c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008320:	81a3      	strh	r3, [r4, #12]
 8008322:	f04f 30ff 	mov.w	r0, #4294967295
 8008326:	e03e      	b.n	80083a6 <__swsetup_r+0xba>
 8008328:	4b25      	ldr	r3, [pc, #148]	; (80083c0 <__swsetup_r+0xd4>)
 800832a:	429c      	cmp	r4, r3
 800832c:	d101      	bne.n	8008332 <__swsetup_r+0x46>
 800832e:	68ac      	ldr	r4, [r5, #8]
 8008330:	e7eb      	b.n	800830a <__swsetup_r+0x1e>
 8008332:	4b24      	ldr	r3, [pc, #144]	; (80083c4 <__swsetup_r+0xd8>)
 8008334:	429c      	cmp	r4, r3
 8008336:	bf08      	it	eq
 8008338:	68ec      	ldreq	r4, [r5, #12]
 800833a:	e7e6      	b.n	800830a <__swsetup_r+0x1e>
 800833c:	0758      	lsls	r0, r3, #29
 800833e:	d512      	bpl.n	8008366 <__swsetup_r+0x7a>
 8008340:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008342:	b141      	cbz	r1, 8008356 <__swsetup_r+0x6a>
 8008344:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008348:	4299      	cmp	r1, r3
 800834a:	d002      	beq.n	8008352 <__swsetup_r+0x66>
 800834c:	4630      	mov	r0, r6
 800834e:	f7ff fb31 	bl	80079b4 <_free_r>
 8008352:	2300      	movs	r3, #0
 8008354:	6363      	str	r3, [r4, #52]	; 0x34
 8008356:	89a3      	ldrh	r3, [r4, #12]
 8008358:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800835c:	81a3      	strh	r3, [r4, #12]
 800835e:	2300      	movs	r3, #0
 8008360:	6063      	str	r3, [r4, #4]
 8008362:	6923      	ldr	r3, [r4, #16]
 8008364:	6023      	str	r3, [r4, #0]
 8008366:	89a3      	ldrh	r3, [r4, #12]
 8008368:	f043 0308 	orr.w	r3, r3, #8
 800836c:	81a3      	strh	r3, [r4, #12]
 800836e:	6923      	ldr	r3, [r4, #16]
 8008370:	b94b      	cbnz	r3, 8008386 <__swsetup_r+0x9a>
 8008372:	89a3      	ldrh	r3, [r4, #12]
 8008374:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800837c:	d003      	beq.n	8008386 <__swsetup_r+0x9a>
 800837e:	4621      	mov	r1, r4
 8008380:	4630      	mov	r0, r6
 8008382:	f000 fa09 	bl	8008798 <__smakebuf_r>
 8008386:	89a0      	ldrh	r0, [r4, #12]
 8008388:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800838c:	f010 0301 	ands.w	r3, r0, #1
 8008390:	d00a      	beq.n	80083a8 <__swsetup_r+0xbc>
 8008392:	2300      	movs	r3, #0
 8008394:	60a3      	str	r3, [r4, #8]
 8008396:	6963      	ldr	r3, [r4, #20]
 8008398:	425b      	negs	r3, r3
 800839a:	61a3      	str	r3, [r4, #24]
 800839c:	6923      	ldr	r3, [r4, #16]
 800839e:	b943      	cbnz	r3, 80083b2 <__swsetup_r+0xc6>
 80083a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083a4:	d1ba      	bne.n	800831c <__swsetup_r+0x30>
 80083a6:	bd70      	pop	{r4, r5, r6, pc}
 80083a8:	0781      	lsls	r1, r0, #30
 80083aa:	bf58      	it	pl
 80083ac:	6963      	ldrpl	r3, [r4, #20]
 80083ae:	60a3      	str	r3, [r4, #8]
 80083b0:	e7f4      	b.n	800839c <__swsetup_r+0xb0>
 80083b2:	2000      	movs	r0, #0
 80083b4:	e7f7      	b.n	80083a6 <__swsetup_r+0xba>
 80083b6:	bf00      	nop
 80083b8:	200000a4 	.word	0x200000a4
 80083bc:	0800952c 	.word	0x0800952c
 80083c0:	0800954c 	.word	0x0800954c
 80083c4:	0800950c 	.word	0x0800950c

080083c8 <abort>:
 80083c8:	b508      	push	{r3, lr}
 80083ca:	2006      	movs	r0, #6
 80083cc:	f000 fa54 	bl	8008878 <raise>
 80083d0:	2001      	movs	r0, #1
 80083d2:	f7f9 fe50 	bl	8002076 <_exit>
	...

080083d8 <__sflush_r>:
 80083d8:	898a      	ldrh	r2, [r1, #12]
 80083da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083de:	4605      	mov	r5, r0
 80083e0:	0710      	lsls	r0, r2, #28
 80083e2:	460c      	mov	r4, r1
 80083e4:	d458      	bmi.n	8008498 <__sflush_r+0xc0>
 80083e6:	684b      	ldr	r3, [r1, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	dc05      	bgt.n	80083f8 <__sflush_r+0x20>
 80083ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	dc02      	bgt.n	80083f8 <__sflush_r+0x20>
 80083f2:	2000      	movs	r0, #0
 80083f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083fa:	2e00      	cmp	r6, #0
 80083fc:	d0f9      	beq.n	80083f2 <__sflush_r+0x1a>
 80083fe:	2300      	movs	r3, #0
 8008400:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008404:	682f      	ldr	r7, [r5, #0]
 8008406:	602b      	str	r3, [r5, #0]
 8008408:	d032      	beq.n	8008470 <__sflush_r+0x98>
 800840a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800840c:	89a3      	ldrh	r3, [r4, #12]
 800840e:	075a      	lsls	r2, r3, #29
 8008410:	d505      	bpl.n	800841e <__sflush_r+0x46>
 8008412:	6863      	ldr	r3, [r4, #4]
 8008414:	1ac0      	subs	r0, r0, r3
 8008416:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008418:	b10b      	cbz	r3, 800841e <__sflush_r+0x46>
 800841a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800841c:	1ac0      	subs	r0, r0, r3
 800841e:	2300      	movs	r3, #0
 8008420:	4602      	mov	r2, r0
 8008422:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008424:	6a21      	ldr	r1, [r4, #32]
 8008426:	4628      	mov	r0, r5
 8008428:	47b0      	blx	r6
 800842a:	1c43      	adds	r3, r0, #1
 800842c:	89a3      	ldrh	r3, [r4, #12]
 800842e:	d106      	bne.n	800843e <__sflush_r+0x66>
 8008430:	6829      	ldr	r1, [r5, #0]
 8008432:	291d      	cmp	r1, #29
 8008434:	d82c      	bhi.n	8008490 <__sflush_r+0xb8>
 8008436:	4a2a      	ldr	r2, [pc, #168]	; (80084e0 <__sflush_r+0x108>)
 8008438:	40ca      	lsrs	r2, r1
 800843a:	07d6      	lsls	r6, r2, #31
 800843c:	d528      	bpl.n	8008490 <__sflush_r+0xb8>
 800843e:	2200      	movs	r2, #0
 8008440:	6062      	str	r2, [r4, #4]
 8008442:	04d9      	lsls	r1, r3, #19
 8008444:	6922      	ldr	r2, [r4, #16]
 8008446:	6022      	str	r2, [r4, #0]
 8008448:	d504      	bpl.n	8008454 <__sflush_r+0x7c>
 800844a:	1c42      	adds	r2, r0, #1
 800844c:	d101      	bne.n	8008452 <__sflush_r+0x7a>
 800844e:	682b      	ldr	r3, [r5, #0]
 8008450:	b903      	cbnz	r3, 8008454 <__sflush_r+0x7c>
 8008452:	6560      	str	r0, [r4, #84]	; 0x54
 8008454:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008456:	602f      	str	r7, [r5, #0]
 8008458:	2900      	cmp	r1, #0
 800845a:	d0ca      	beq.n	80083f2 <__sflush_r+0x1a>
 800845c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008460:	4299      	cmp	r1, r3
 8008462:	d002      	beq.n	800846a <__sflush_r+0x92>
 8008464:	4628      	mov	r0, r5
 8008466:	f7ff faa5 	bl	80079b4 <_free_r>
 800846a:	2000      	movs	r0, #0
 800846c:	6360      	str	r0, [r4, #52]	; 0x34
 800846e:	e7c1      	b.n	80083f4 <__sflush_r+0x1c>
 8008470:	6a21      	ldr	r1, [r4, #32]
 8008472:	2301      	movs	r3, #1
 8008474:	4628      	mov	r0, r5
 8008476:	47b0      	blx	r6
 8008478:	1c41      	adds	r1, r0, #1
 800847a:	d1c7      	bne.n	800840c <__sflush_r+0x34>
 800847c:	682b      	ldr	r3, [r5, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d0c4      	beq.n	800840c <__sflush_r+0x34>
 8008482:	2b1d      	cmp	r3, #29
 8008484:	d001      	beq.n	800848a <__sflush_r+0xb2>
 8008486:	2b16      	cmp	r3, #22
 8008488:	d101      	bne.n	800848e <__sflush_r+0xb6>
 800848a:	602f      	str	r7, [r5, #0]
 800848c:	e7b1      	b.n	80083f2 <__sflush_r+0x1a>
 800848e:	89a3      	ldrh	r3, [r4, #12]
 8008490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008494:	81a3      	strh	r3, [r4, #12]
 8008496:	e7ad      	b.n	80083f4 <__sflush_r+0x1c>
 8008498:	690f      	ldr	r7, [r1, #16]
 800849a:	2f00      	cmp	r7, #0
 800849c:	d0a9      	beq.n	80083f2 <__sflush_r+0x1a>
 800849e:	0793      	lsls	r3, r2, #30
 80084a0:	680e      	ldr	r6, [r1, #0]
 80084a2:	bf08      	it	eq
 80084a4:	694b      	ldreq	r3, [r1, #20]
 80084a6:	600f      	str	r7, [r1, #0]
 80084a8:	bf18      	it	ne
 80084aa:	2300      	movne	r3, #0
 80084ac:	eba6 0807 	sub.w	r8, r6, r7
 80084b0:	608b      	str	r3, [r1, #8]
 80084b2:	f1b8 0f00 	cmp.w	r8, #0
 80084b6:	dd9c      	ble.n	80083f2 <__sflush_r+0x1a>
 80084b8:	6a21      	ldr	r1, [r4, #32]
 80084ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80084bc:	4643      	mov	r3, r8
 80084be:	463a      	mov	r2, r7
 80084c0:	4628      	mov	r0, r5
 80084c2:	47b0      	blx	r6
 80084c4:	2800      	cmp	r0, #0
 80084c6:	dc06      	bgt.n	80084d6 <__sflush_r+0xfe>
 80084c8:	89a3      	ldrh	r3, [r4, #12]
 80084ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084ce:	81a3      	strh	r3, [r4, #12]
 80084d0:	f04f 30ff 	mov.w	r0, #4294967295
 80084d4:	e78e      	b.n	80083f4 <__sflush_r+0x1c>
 80084d6:	4407      	add	r7, r0
 80084d8:	eba8 0800 	sub.w	r8, r8, r0
 80084dc:	e7e9      	b.n	80084b2 <__sflush_r+0xda>
 80084de:	bf00      	nop
 80084e0:	20400001 	.word	0x20400001

080084e4 <_fflush_r>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	690b      	ldr	r3, [r1, #16]
 80084e8:	4605      	mov	r5, r0
 80084ea:	460c      	mov	r4, r1
 80084ec:	b913      	cbnz	r3, 80084f4 <_fflush_r+0x10>
 80084ee:	2500      	movs	r5, #0
 80084f0:	4628      	mov	r0, r5
 80084f2:	bd38      	pop	{r3, r4, r5, pc}
 80084f4:	b118      	cbz	r0, 80084fe <_fflush_r+0x1a>
 80084f6:	6983      	ldr	r3, [r0, #24]
 80084f8:	b90b      	cbnz	r3, 80084fe <_fflush_r+0x1a>
 80084fa:	f000 f887 	bl	800860c <__sinit>
 80084fe:	4b14      	ldr	r3, [pc, #80]	; (8008550 <_fflush_r+0x6c>)
 8008500:	429c      	cmp	r4, r3
 8008502:	d11b      	bne.n	800853c <_fflush_r+0x58>
 8008504:	686c      	ldr	r4, [r5, #4]
 8008506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d0ef      	beq.n	80084ee <_fflush_r+0xa>
 800850e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008510:	07d0      	lsls	r0, r2, #31
 8008512:	d404      	bmi.n	800851e <_fflush_r+0x3a>
 8008514:	0599      	lsls	r1, r3, #22
 8008516:	d402      	bmi.n	800851e <_fflush_r+0x3a>
 8008518:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800851a:	f000 f915 	bl	8008748 <__retarget_lock_acquire_recursive>
 800851e:	4628      	mov	r0, r5
 8008520:	4621      	mov	r1, r4
 8008522:	f7ff ff59 	bl	80083d8 <__sflush_r>
 8008526:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008528:	07da      	lsls	r2, r3, #31
 800852a:	4605      	mov	r5, r0
 800852c:	d4e0      	bmi.n	80084f0 <_fflush_r+0xc>
 800852e:	89a3      	ldrh	r3, [r4, #12]
 8008530:	059b      	lsls	r3, r3, #22
 8008532:	d4dd      	bmi.n	80084f0 <_fflush_r+0xc>
 8008534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008536:	f000 f908 	bl	800874a <__retarget_lock_release_recursive>
 800853a:	e7d9      	b.n	80084f0 <_fflush_r+0xc>
 800853c:	4b05      	ldr	r3, [pc, #20]	; (8008554 <_fflush_r+0x70>)
 800853e:	429c      	cmp	r4, r3
 8008540:	d101      	bne.n	8008546 <_fflush_r+0x62>
 8008542:	68ac      	ldr	r4, [r5, #8]
 8008544:	e7df      	b.n	8008506 <_fflush_r+0x22>
 8008546:	4b04      	ldr	r3, [pc, #16]	; (8008558 <_fflush_r+0x74>)
 8008548:	429c      	cmp	r4, r3
 800854a:	bf08      	it	eq
 800854c:	68ec      	ldreq	r4, [r5, #12]
 800854e:	e7da      	b.n	8008506 <_fflush_r+0x22>
 8008550:	0800952c 	.word	0x0800952c
 8008554:	0800954c 	.word	0x0800954c
 8008558:	0800950c 	.word	0x0800950c

0800855c <std>:
 800855c:	2300      	movs	r3, #0
 800855e:	b510      	push	{r4, lr}
 8008560:	4604      	mov	r4, r0
 8008562:	e9c0 3300 	strd	r3, r3, [r0]
 8008566:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800856a:	6083      	str	r3, [r0, #8]
 800856c:	8181      	strh	r1, [r0, #12]
 800856e:	6643      	str	r3, [r0, #100]	; 0x64
 8008570:	81c2      	strh	r2, [r0, #14]
 8008572:	6183      	str	r3, [r0, #24]
 8008574:	4619      	mov	r1, r3
 8008576:	2208      	movs	r2, #8
 8008578:	305c      	adds	r0, #92	; 0x5c
 800857a:	f7fd fb5b 	bl	8005c34 <memset>
 800857e:	4b05      	ldr	r3, [pc, #20]	; (8008594 <std+0x38>)
 8008580:	6263      	str	r3, [r4, #36]	; 0x24
 8008582:	4b05      	ldr	r3, [pc, #20]	; (8008598 <std+0x3c>)
 8008584:	62a3      	str	r3, [r4, #40]	; 0x28
 8008586:	4b05      	ldr	r3, [pc, #20]	; (800859c <std+0x40>)
 8008588:	62e3      	str	r3, [r4, #44]	; 0x2c
 800858a:	4b05      	ldr	r3, [pc, #20]	; (80085a0 <std+0x44>)
 800858c:	6224      	str	r4, [r4, #32]
 800858e:	6323      	str	r3, [r4, #48]	; 0x30
 8008590:	bd10      	pop	{r4, pc}
 8008592:	bf00      	nop
 8008594:	080088b1 	.word	0x080088b1
 8008598:	080088d3 	.word	0x080088d3
 800859c:	0800890b 	.word	0x0800890b
 80085a0:	0800892f 	.word	0x0800892f

080085a4 <_cleanup_r>:
 80085a4:	4901      	ldr	r1, [pc, #4]	; (80085ac <_cleanup_r+0x8>)
 80085a6:	f000 b8af 	b.w	8008708 <_fwalk_reent>
 80085aa:	bf00      	nop
 80085ac:	080084e5 	.word	0x080084e5

080085b0 <__sfmoreglue>:
 80085b0:	b570      	push	{r4, r5, r6, lr}
 80085b2:	2268      	movs	r2, #104	; 0x68
 80085b4:	1e4d      	subs	r5, r1, #1
 80085b6:	4355      	muls	r5, r2
 80085b8:	460e      	mov	r6, r1
 80085ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80085be:	f7ff fa65 	bl	8007a8c <_malloc_r>
 80085c2:	4604      	mov	r4, r0
 80085c4:	b140      	cbz	r0, 80085d8 <__sfmoreglue+0x28>
 80085c6:	2100      	movs	r1, #0
 80085c8:	e9c0 1600 	strd	r1, r6, [r0]
 80085cc:	300c      	adds	r0, #12
 80085ce:	60a0      	str	r0, [r4, #8]
 80085d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80085d4:	f7fd fb2e 	bl	8005c34 <memset>
 80085d8:	4620      	mov	r0, r4
 80085da:	bd70      	pop	{r4, r5, r6, pc}

080085dc <__sfp_lock_acquire>:
 80085dc:	4801      	ldr	r0, [pc, #4]	; (80085e4 <__sfp_lock_acquire+0x8>)
 80085de:	f000 b8b3 	b.w	8008748 <__retarget_lock_acquire_recursive>
 80085e2:	bf00      	nop
 80085e4:	2000046d 	.word	0x2000046d

080085e8 <__sfp_lock_release>:
 80085e8:	4801      	ldr	r0, [pc, #4]	; (80085f0 <__sfp_lock_release+0x8>)
 80085ea:	f000 b8ae 	b.w	800874a <__retarget_lock_release_recursive>
 80085ee:	bf00      	nop
 80085f0:	2000046d 	.word	0x2000046d

080085f4 <__sinit_lock_acquire>:
 80085f4:	4801      	ldr	r0, [pc, #4]	; (80085fc <__sinit_lock_acquire+0x8>)
 80085f6:	f000 b8a7 	b.w	8008748 <__retarget_lock_acquire_recursive>
 80085fa:	bf00      	nop
 80085fc:	2000046e 	.word	0x2000046e

08008600 <__sinit_lock_release>:
 8008600:	4801      	ldr	r0, [pc, #4]	; (8008608 <__sinit_lock_release+0x8>)
 8008602:	f000 b8a2 	b.w	800874a <__retarget_lock_release_recursive>
 8008606:	bf00      	nop
 8008608:	2000046e 	.word	0x2000046e

0800860c <__sinit>:
 800860c:	b510      	push	{r4, lr}
 800860e:	4604      	mov	r4, r0
 8008610:	f7ff fff0 	bl	80085f4 <__sinit_lock_acquire>
 8008614:	69a3      	ldr	r3, [r4, #24]
 8008616:	b11b      	cbz	r3, 8008620 <__sinit+0x14>
 8008618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800861c:	f7ff bff0 	b.w	8008600 <__sinit_lock_release>
 8008620:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008624:	6523      	str	r3, [r4, #80]	; 0x50
 8008626:	4b13      	ldr	r3, [pc, #76]	; (8008674 <__sinit+0x68>)
 8008628:	4a13      	ldr	r2, [pc, #76]	; (8008678 <__sinit+0x6c>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	62a2      	str	r2, [r4, #40]	; 0x28
 800862e:	42a3      	cmp	r3, r4
 8008630:	bf04      	itt	eq
 8008632:	2301      	moveq	r3, #1
 8008634:	61a3      	streq	r3, [r4, #24]
 8008636:	4620      	mov	r0, r4
 8008638:	f000 f820 	bl	800867c <__sfp>
 800863c:	6060      	str	r0, [r4, #4]
 800863e:	4620      	mov	r0, r4
 8008640:	f000 f81c 	bl	800867c <__sfp>
 8008644:	60a0      	str	r0, [r4, #8]
 8008646:	4620      	mov	r0, r4
 8008648:	f000 f818 	bl	800867c <__sfp>
 800864c:	2200      	movs	r2, #0
 800864e:	60e0      	str	r0, [r4, #12]
 8008650:	2104      	movs	r1, #4
 8008652:	6860      	ldr	r0, [r4, #4]
 8008654:	f7ff ff82 	bl	800855c <std>
 8008658:	68a0      	ldr	r0, [r4, #8]
 800865a:	2201      	movs	r2, #1
 800865c:	2109      	movs	r1, #9
 800865e:	f7ff ff7d 	bl	800855c <std>
 8008662:	68e0      	ldr	r0, [r4, #12]
 8008664:	2202      	movs	r2, #2
 8008666:	2112      	movs	r1, #18
 8008668:	f7ff ff78 	bl	800855c <std>
 800866c:	2301      	movs	r3, #1
 800866e:	61a3      	str	r3, [r4, #24]
 8008670:	e7d2      	b.n	8008618 <__sinit+0xc>
 8008672:	bf00      	nop
 8008674:	08009190 	.word	0x08009190
 8008678:	080085a5 	.word	0x080085a5

0800867c <__sfp>:
 800867c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800867e:	4607      	mov	r7, r0
 8008680:	f7ff ffac 	bl	80085dc <__sfp_lock_acquire>
 8008684:	4b1e      	ldr	r3, [pc, #120]	; (8008700 <__sfp+0x84>)
 8008686:	681e      	ldr	r6, [r3, #0]
 8008688:	69b3      	ldr	r3, [r6, #24]
 800868a:	b913      	cbnz	r3, 8008692 <__sfp+0x16>
 800868c:	4630      	mov	r0, r6
 800868e:	f7ff ffbd 	bl	800860c <__sinit>
 8008692:	3648      	adds	r6, #72	; 0x48
 8008694:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008698:	3b01      	subs	r3, #1
 800869a:	d503      	bpl.n	80086a4 <__sfp+0x28>
 800869c:	6833      	ldr	r3, [r6, #0]
 800869e:	b30b      	cbz	r3, 80086e4 <__sfp+0x68>
 80086a0:	6836      	ldr	r6, [r6, #0]
 80086a2:	e7f7      	b.n	8008694 <__sfp+0x18>
 80086a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80086a8:	b9d5      	cbnz	r5, 80086e0 <__sfp+0x64>
 80086aa:	4b16      	ldr	r3, [pc, #88]	; (8008704 <__sfp+0x88>)
 80086ac:	60e3      	str	r3, [r4, #12]
 80086ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086b2:	6665      	str	r5, [r4, #100]	; 0x64
 80086b4:	f000 f847 	bl	8008746 <__retarget_lock_init_recursive>
 80086b8:	f7ff ff96 	bl	80085e8 <__sfp_lock_release>
 80086bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80086c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80086c4:	6025      	str	r5, [r4, #0]
 80086c6:	61a5      	str	r5, [r4, #24]
 80086c8:	2208      	movs	r2, #8
 80086ca:	4629      	mov	r1, r5
 80086cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80086d0:	f7fd fab0 	bl	8005c34 <memset>
 80086d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80086d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80086dc:	4620      	mov	r0, r4
 80086de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086e0:	3468      	adds	r4, #104	; 0x68
 80086e2:	e7d9      	b.n	8008698 <__sfp+0x1c>
 80086e4:	2104      	movs	r1, #4
 80086e6:	4638      	mov	r0, r7
 80086e8:	f7ff ff62 	bl	80085b0 <__sfmoreglue>
 80086ec:	4604      	mov	r4, r0
 80086ee:	6030      	str	r0, [r6, #0]
 80086f0:	2800      	cmp	r0, #0
 80086f2:	d1d5      	bne.n	80086a0 <__sfp+0x24>
 80086f4:	f7ff ff78 	bl	80085e8 <__sfp_lock_release>
 80086f8:	230c      	movs	r3, #12
 80086fa:	603b      	str	r3, [r7, #0]
 80086fc:	e7ee      	b.n	80086dc <__sfp+0x60>
 80086fe:	bf00      	nop
 8008700:	08009190 	.word	0x08009190
 8008704:	ffff0001 	.word	0xffff0001

08008708 <_fwalk_reent>:
 8008708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800870c:	4606      	mov	r6, r0
 800870e:	4688      	mov	r8, r1
 8008710:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008714:	2700      	movs	r7, #0
 8008716:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800871a:	f1b9 0901 	subs.w	r9, r9, #1
 800871e:	d505      	bpl.n	800872c <_fwalk_reent+0x24>
 8008720:	6824      	ldr	r4, [r4, #0]
 8008722:	2c00      	cmp	r4, #0
 8008724:	d1f7      	bne.n	8008716 <_fwalk_reent+0xe>
 8008726:	4638      	mov	r0, r7
 8008728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800872c:	89ab      	ldrh	r3, [r5, #12]
 800872e:	2b01      	cmp	r3, #1
 8008730:	d907      	bls.n	8008742 <_fwalk_reent+0x3a>
 8008732:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008736:	3301      	adds	r3, #1
 8008738:	d003      	beq.n	8008742 <_fwalk_reent+0x3a>
 800873a:	4629      	mov	r1, r5
 800873c:	4630      	mov	r0, r6
 800873e:	47c0      	blx	r8
 8008740:	4307      	orrs	r7, r0
 8008742:	3568      	adds	r5, #104	; 0x68
 8008744:	e7e9      	b.n	800871a <_fwalk_reent+0x12>

08008746 <__retarget_lock_init_recursive>:
 8008746:	4770      	bx	lr

08008748 <__retarget_lock_acquire_recursive>:
 8008748:	4770      	bx	lr

0800874a <__retarget_lock_release_recursive>:
 800874a:	4770      	bx	lr

0800874c <__swhatbuf_r>:
 800874c:	b570      	push	{r4, r5, r6, lr}
 800874e:	460e      	mov	r6, r1
 8008750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008754:	2900      	cmp	r1, #0
 8008756:	b096      	sub	sp, #88	; 0x58
 8008758:	4614      	mov	r4, r2
 800875a:	461d      	mov	r5, r3
 800875c:	da08      	bge.n	8008770 <__swhatbuf_r+0x24>
 800875e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	602a      	str	r2, [r5, #0]
 8008766:	061a      	lsls	r2, r3, #24
 8008768:	d410      	bmi.n	800878c <__swhatbuf_r+0x40>
 800876a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800876e:	e00e      	b.n	800878e <__swhatbuf_r+0x42>
 8008770:	466a      	mov	r2, sp
 8008772:	f000 f903 	bl	800897c <_fstat_r>
 8008776:	2800      	cmp	r0, #0
 8008778:	dbf1      	blt.n	800875e <__swhatbuf_r+0x12>
 800877a:	9a01      	ldr	r2, [sp, #4]
 800877c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008780:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008784:	425a      	negs	r2, r3
 8008786:	415a      	adcs	r2, r3
 8008788:	602a      	str	r2, [r5, #0]
 800878a:	e7ee      	b.n	800876a <__swhatbuf_r+0x1e>
 800878c:	2340      	movs	r3, #64	; 0x40
 800878e:	2000      	movs	r0, #0
 8008790:	6023      	str	r3, [r4, #0]
 8008792:	b016      	add	sp, #88	; 0x58
 8008794:	bd70      	pop	{r4, r5, r6, pc}
	...

08008798 <__smakebuf_r>:
 8008798:	898b      	ldrh	r3, [r1, #12]
 800879a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800879c:	079d      	lsls	r5, r3, #30
 800879e:	4606      	mov	r6, r0
 80087a0:	460c      	mov	r4, r1
 80087a2:	d507      	bpl.n	80087b4 <__smakebuf_r+0x1c>
 80087a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80087a8:	6023      	str	r3, [r4, #0]
 80087aa:	6123      	str	r3, [r4, #16]
 80087ac:	2301      	movs	r3, #1
 80087ae:	6163      	str	r3, [r4, #20]
 80087b0:	b002      	add	sp, #8
 80087b2:	bd70      	pop	{r4, r5, r6, pc}
 80087b4:	ab01      	add	r3, sp, #4
 80087b6:	466a      	mov	r2, sp
 80087b8:	f7ff ffc8 	bl	800874c <__swhatbuf_r>
 80087bc:	9900      	ldr	r1, [sp, #0]
 80087be:	4605      	mov	r5, r0
 80087c0:	4630      	mov	r0, r6
 80087c2:	f7ff f963 	bl	8007a8c <_malloc_r>
 80087c6:	b948      	cbnz	r0, 80087dc <__smakebuf_r+0x44>
 80087c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087cc:	059a      	lsls	r2, r3, #22
 80087ce:	d4ef      	bmi.n	80087b0 <__smakebuf_r+0x18>
 80087d0:	f023 0303 	bic.w	r3, r3, #3
 80087d4:	f043 0302 	orr.w	r3, r3, #2
 80087d8:	81a3      	strh	r3, [r4, #12]
 80087da:	e7e3      	b.n	80087a4 <__smakebuf_r+0xc>
 80087dc:	4b0d      	ldr	r3, [pc, #52]	; (8008814 <__smakebuf_r+0x7c>)
 80087de:	62b3      	str	r3, [r6, #40]	; 0x28
 80087e0:	89a3      	ldrh	r3, [r4, #12]
 80087e2:	6020      	str	r0, [r4, #0]
 80087e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087e8:	81a3      	strh	r3, [r4, #12]
 80087ea:	9b00      	ldr	r3, [sp, #0]
 80087ec:	6163      	str	r3, [r4, #20]
 80087ee:	9b01      	ldr	r3, [sp, #4]
 80087f0:	6120      	str	r0, [r4, #16]
 80087f2:	b15b      	cbz	r3, 800880c <__smakebuf_r+0x74>
 80087f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087f8:	4630      	mov	r0, r6
 80087fa:	f000 f8d1 	bl	80089a0 <_isatty_r>
 80087fe:	b128      	cbz	r0, 800880c <__smakebuf_r+0x74>
 8008800:	89a3      	ldrh	r3, [r4, #12]
 8008802:	f023 0303 	bic.w	r3, r3, #3
 8008806:	f043 0301 	orr.w	r3, r3, #1
 800880a:	81a3      	strh	r3, [r4, #12]
 800880c:	89a0      	ldrh	r0, [r4, #12]
 800880e:	4305      	orrs	r5, r0
 8008810:	81a5      	strh	r5, [r4, #12]
 8008812:	e7cd      	b.n	80087b0 <__smakebuf_r+0x18>
 8008814:	080085a5 	.word	0x080085a5

08008818 <_malloc_usable_size_r>:
 8008818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800881c:	1f18      	subs	r0, r3, #4
 800881e:	2b00      	cmp	r3, #0
 8008820:	bfbc      	itt	lt
 8008822:	580b      	ldrlt	r3, [r1, r0]
 8008824:	18c0      	addlt	r0, r0, r3
 8008826:	4770      	bx	lr

08008828 <_raise_r>:
 8008828:	291f      	cmp	r1, #31
 800882a:	b538      	push	{r3, r4, r5, lr}
 800882c:	4604      	mov	r4, r0
 800882e:	460d      	mov	r5, r1
 8008830:	d904      	bls.n	800883c <_raise_r+0x14>
 8008832:	2316      	movs	r3, #22
 8008834:	6003      	str	r3, [r0, #0]
 8008836:	f04f 30ff 	mov.w	r0, #4294967295
 800883a:	bd38      	pop	{r3, r4, r5, pc}
 800883c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800883e:	b112      	cbz	r2, 8008846 <_raise_r+0x1e>
 8008840:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008844:	b94b      	cbnz	r3, 800885a <_raise_r+0x32>
 8008846:	4620      	mov	r0, r4
 8008848:	f000 f830 	bl	80088ac <_getpid_r>
 800884c:	462a      	mov	r2, r5
 800884e:	4601      	mov	r1, r0
 8008850:	4620      	mov	r0, r4
 8008852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008856:	f000 b817 	b.w	8008888 <_kill_r>
 800885a:	2b01      	cmp	r3, #1
 800885c:	d00a      	beq.n	8008874 <_raise_r+0x4c>
 800885e:	1c59      	adds	r1, r3, #1
 8008860:	d103      	bne.n	800886a <_raise_r+0x42>
 8008862:	2316      	movs	r3, #22
 8008864:	6003      	str	r3, [r0, #0]
 8008866:	2001      	movs	r0, #1
 8008868:	e7e7      	b.n	800883a <_raise_r+0x12>
 800886a:	2400      	movs	r4, #0
 800886c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008870:	4628      	mov	r0, r5
 8008872:	4798      	blx	r3
 8008874:	2000      	movs	r0, #0
 8008876:	e7e0      	b.n	800883a <_raise_r+0x12>

08008878 <raise>:
 8008878:	4b02      	ldr	r3, [pc, #8]	; (8008884 <raise+0xc>)
 800887a:	4601      	mov	r1, r0
 800887c:	6818      	ldr	r0, [r3, #0]
 800887e:	f7ff bfd3 	b.w	8008828 <_raise_r>
 8008882:	bf00      	nop
 8008884:	200000a4 	.word	0x200000a4

08008888 <_kill_r>:
 8008888:	b538      	push	{r3, r4, r5, lr}
 800888a:	4d07      	ldr	r5, [pc, #28]	; (80088a8 <_kill_r+0x20>)
 800888c:	2300      	movs	r3, #0
 800888e:	4604      	mov	r4, r0
 8008890:	4608      	mov	r0, r1
 8008892:	4611      	mov	r1, r2
 8008894:	602b      	str	r3, [r5, #0]
 8008896:	f7f9 fbde 	bl	8002056 <_kill>
 800889a:	1c43      	adds	r3, r0, #1
 800889c:	d102      	bne.n	80088a4 <_kill_r+0x1c>
 800889e:	682b      	ldr	r3, [r5, #0]
 80088a0:	b103      	cbz	r3, 80088a4 <_kill_r+0x1c>
 80088a2:	6023      	str	r3, [r4, #0]
 80088a4:	bd38      	pop	{r3, r4, r5, pc}
 80088a6:	bf00      	nop
 80088a8:	20000468 	.word	0x20000468

080088ac <_getpid_r>:
 80088ac:	f7f9 bbcb 	b.w	8002046 <_getpid>

080088b0 <__sread>:
 80088b0:	b510      	push	{r4, lr}
 80088b2:	460c      	mov	r4, r1
 80088b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088b8:	f000 f894 	bl	80089e4 <_read_r>
 80088bc:	2800      	cmp	r0, #0
 80088be:	bfab      	itete	ge
 80088c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088c2:	89a3      	ldrhlt	r3, [r4, #12]
 80088c4:	181b      	addge	r3, r3, r0
 80088c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088ca:	bfac      	ite	ge
 80088cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80088ce:	81a3      	strhlt	r3, [r4, #12]
 80088d0:	bd10      	pop	{r4, pc}

080088d2 <__swrite>:
 80088d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088d6:	461f      	mov	r7, r3
 80088d8:	898b      	ldrh	r3, [r1, #12]
 80088da:	05db      	lsls	r3, r3, #23
 80088dc:	4605      	mov	r5, r0
 80088de:	460c      	mov	r4, r1
 80088e0:	4616      	mov	r6, r2
 80088e2:	d505      	bpl.n	80088f0 <__swrite+0x1e>
 80088e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088e8:	2302      	movs	r3, #2
 80088ea:	2200      	movs	r2, #0
 80088ec:	f000 f868 	bl	80089c0 <_lseek_r>
 80088f0:	89a3      	ldrh	r3, [r4, #12]
 80088f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088fa:	81a3      	strh	r3, [r4, #12]
 80088fc:	4632      	mov	r2, r6
 80088fe:	463b      	mov	r3, r7
 8008900:	4628      	mov	r0, r5
 8008902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008906:	f000 b817 	b.w	8008938 <_write_r>

0800890a <__sseek>:
 800890a:	b510      	push	{r4, lr}
 800890c:	460c      	mov	r4, r1
 800890e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008912:	f000 f855 	bl	80089c0 <_lseek_r>
 8008916:	1c43      	adds	r3, r0, #1
 8008918:	89a3      	ldrh	r3, [r4, #12]
 800891a:	bf15      	itete	ne
 800891c:	6560      	strne	r0, [r4, #84]	; 0x54
 800891e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008922:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008926:	81a3      	strheq	r3, [r4, #12]
 8008928:	bf18      	it	ne
 800892a:	81a3      	strhne	r3, [r4, #12]
 800892c:	bd10      	pop	{r4, pc}

0800892e <__sclose>:
 800892e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008932:	f000 b813 	b.w	800895c <_close_r>
	...

08008938 <_write_r>:
 8008938:	b538      	push	{r3, r4, r5, lr}
 800893a:	4d07      	ldr	r5, [pc, #28]	; (8008958 <_write_r+0x20>)
 800893c:	4604      	mov	r4, r0
 800893e:	4608      	mov	r0, r1
 8008940:	4611      	mov	r1, r2
 8008942:	2200      	movs	r2, #0
 8008944:	602a      	str	r2, [r5, #0]
 8008946:	461a      	mov	r2, r3
 8008948:	f7f9 fbbc 	bl	80020c4 <_write>
 800894c:	1c43      	adds	r3, r0, #1
 800894e:	d102      	bne.n	8008956 <_write_r+0x1e>
 8008950:	682b      	ldr	r3, [r5, #0]
 8008952:	b103      	cbz	r3, 8008956 <_write_r+0x1e>
 8008954:	6023      	str	r3, [r4, #0]
 8008956:	bd38      	pop	{r3, r4, r5, pc}
 8008958:	20000468 	.word	0x20000468

0800895c <_close_r>:
 800895c:	b538      	push	{r3, r4, r5, lr}
 800895e:	4d06      	ldr	r5, [pc, #24]	; (8008978 <_close_r+0x1c>)
 8008960:	2300      	movs	r3, #0
 8008962:	4604      	mov	r4, r0
 8008964:	4608      	mov	r0, r1
 8008966:	602b      	str	r3, [r5, #0]
 8008968:	f7f9 fbc8 	bl	80020fc <_close>
 800896c:	1c43      	adds	r3, r0, #1
 800896e:	d102      	bne.n	8008976 <_close_r+0x1a>
 8008970:	682b      	ldr	r3, [r5, #0]
 8008972:	b103      	cbz	r3, 8008976 <_close_r+0x1a>
 8008974:	6023      	str	r3, [r4, #0]
 8008976:	bd38      	pop	{r3, r4, r5, pc}
 8008978:	20000468 	.word	0x20000468

0800897c <_fstat_r>:
 800897c:	b538      	push	{r3, r4, r5, lr}
 800897e:	4d07      	ldr	r5, [pc, #28]	; (800899c <_fstat_r+0x20>)
 8008980:	2300      	movs	r3, #0
 8008982:	4604      	mov	r4, r0
 8008984:	4608      	mov	r0, r1
 8008986:	4611      	mov	r1, r2
 8008988:	602b      	str	r3, [r5, #0]
 800898a:	f7f9 fbc3 	bl	8002114 <_fstat>
 800898e:	1c43      	adds	r3, r0, #1
 8008990:	d102      	bne.n	8008998 <_fstat_r+0x1c>
 8008992:	682b      	ldr	r3, [r5, #0]
 8008994:	b103      	cbz	r3, 8008998 <_fstat_r+0x1c>
 8008996:	6023      	str	r3, [r4, #0]
 8008998:	bd38      	pop	{r3, r4, r5, pc}
 800899a:	bf00      	nop
 800899c:	20000468 	.word	0x20000468

080089a0 <_isatty_r>:
 80089a0:	b538      	push	{r3, r4, r5, lr}
 80089a2:	4d06      	ldr	r5, [pc, #24]	; (80089bc <_isatty_r+0x1c>)
 80089a4:	2300      	movs	r3, #0
 80089a6:	4604      	mov	r4, r0
 80089a8:	4608      	mov	r0, r1
 80089aa:	602b      	str	r3, [r5, #0]
 80089ac:	f7f9 fbc2 	bl	8002134 <_isatty>
 80089b0:	1c43      	adds	r3, r0, #1
 80089b2:	d102      	bne.n	80089ba <_isatty_r+0x1a>
 80089b4:	682b      	ldr	r3, [r5, #0]
 80089b6:	b103      	cbz	r3, 80089ba <_isatty_r+0x1a>
 80089b8:	6023      	str	r3, [r4, #0]
 80089ba:	bd38      	pop	{r3, r4, r5, pc}
 80089bc:	20000468 	.word	0x20000468

080089c0 <_lseek_r>:
 80089c0:	b538      	push	{r3, r4, r5, lr}
 80089c2:	4d07      	ldr	r5, [pc, #28]	; (80089e0 <_lseek_r+0x20>)
 80089c4:	4604      	mov	r4, r0
 80089c6:	4608      	mov	r0, r1
 80089c8:	4611      	mov	r1, r2
 80089ca:	2200      	movs	r2, #0
 80089cc:	602a      	str	r2, [r5, #0]
 80089ce:	461a      	mov	r2, r3
 80089d0:	f7f9 fbbb 	bl	800214a <_lseek>
 80089d4:	1c43      	adds	r3, r0, #1
 80089d6:	d102      	bne.n	80089de <_lseek_r+0x1e>
 80089d8:	682b      	ldr	r3, [r5, #0]
 80089da:	b103      	cbz	r3, 80089de <_lseek_r+0x1e>
 80089dc:	6023      	str	r3, [r4, #0]
 80089de:	bd38      	pop	{r3, r4, r5, pc}
 80089e0:	20000468 	.word	0x20000468

080089e4 <_read_r>:
 80089e4:	b538      	push	{r3, r4, r5, lr}
 80089e6:	4d07      	ldr	r5, [pc, #28]	; (8008a04 <_read_r+0x20>)
 80089e8:	4604      	mov	r4, r0
 80089ea:	4608      	mov	r0, r1
 80089ec:	4611      	mov	r1, r2
 80089ee:	2200      	movs	r2, #0
 80089f0:	602a      	str	r2, [r5, #0]
 80089f2:	461a      	mov	r2, r3
 80089f4:	f7f9 fb49 	bl	800208a <_read>
 80089f8:	1c43      	adds	r3, r0, #1
 80089fa:	d102      	bne.n	8008a02 <_read_r+0x1e>
 80089fc:	682b      	ldr	r3, [r5, #0]
 80089fe:	b103      	cbz	r3, 8008a02 <_read_r+0x1e>
 8008a00:	6023      	str	r3, [r4, #0]
 8008a02:	bd38      	pop	{r3, r4, r5, pc}
 8008a04:	20000468 	.word	0x20000468

08008a08 <atan>:
 8008a08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a0c:	ec55 4b10 	vmov	r4, r5, d0
 8008a10:	4bc3      	ldr	r3, [pc, #780]	; (8008d20 <atan+0x318>)
 8008a12:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008a16:	429e      	cmp	r6, r3
 8008a18:	46ab      	mov	fp, r5
 8008a1a:	dd18      	ble.n	8008a4e <atan+0x46>
 8008a1c:	4bc1      	ldr	r3, [pc, #772]	; (8008d24 <atan+0x31c>)
 8008a1e:	429e      	cmp	r6, r3
 8008a20:	dc01      	bgt.n	8008a26 <atan+0x1e>
 8008a22:	d109      	bne.n	8008a38 <atan+0x30>
 8008a24:	b144      	cbz	r4, 8008a38 <atan+0x30>
 8008a26:	4622      	mov	r2, r4
 8008a28:	462b      	mov	r3, r5
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	4629      	mov	r1, r5
 8008a2e:	f7f7 fc2d 	bl	800028c <__adddf3>
 8008a32:	4604      	mov	r4, r0
 8008a34:	460d      	mov	r5, r1
 8008a36:	e006      	b.n	8008a46 <atan+0x3e>
 8008a38:	f1bb 0f00 	cmp.w	fp, #0
 8008a3c:	f300 8131 	bgt.w	8008ca2 <atan+0x29a>
 8008a40:	a59b      	add	r5, pc, #620	; (adr r5, 8008cb0 <atan+0x2a8>)
 8008a42:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008a46:	ec45 4b10 	vmov	d0, r4, r5
 8008a4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a4e:	4bb6      	ldr	r3, [pc, #728]	; (8008d28 <atan+0x320>)
 8008a50:	429e      	cmp	r6, r3
 8008a52:	dc14      	bgt.n	8008a7e <atan+0x76>
 8008a54:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008a58:	429e      	cmp	r6, r3
 8008a5a:	dc0d      	bgt.n	8008a78 <atan+0x70>
 8008a5c:	a396      	add	r3, pc, #600	; (adr r3, 8008cb8 <atan+0x2b0>)
 8008a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a62:	ee10 0a10 	vmov	r0, s0
 8008a66:	4629      	mov	r1, r5
 8008a68:	f7f7 fc10 	bl	800028c <__adddf3>
 8008a6c:	4baf      	ldr	r3, [pc, #700]	; (8008d2c <atan+0x324>)
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f7f8 f852 	bl	8000b18 <__aeabi_dcmpgt>
 8008a74:	2800      	cmp	r0, #0
 8008a76:	d1e6      	bne.n	8008a46 <atan+0x3e>
 8008a78:	f04f 3aff 	mov.w	sl, #4294967295
 8008a7c:	e02b      	b.n	8008ad6 <atan+0xce>
 8008a7e:	f000 f963 	bl	8008d48 <fabs>
 8008a82:	4bab      	ldr	r3, [pc, #684]	; (8008d30 <atan+0x328>)
 8008a84:	429e      	cmp	r6, r3
 8008a86:	ec55 4b10 	vmov	r4, r5, d0
 8008a8a:	f300 80bf 	bgt.w	8008c0c <atan+0x204>
 8008a8e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008a92:	429e      	cmp	r6, r3
 8008a94:	f300 80a0 	bgt.w	8008bd8 <atan+0x1d0>
 8008a98:	ee10 2a10 	vmov	r2, s0
 8008a9c:	ee10 0a10 	vmov	r0, s0
 8008aa0:	462b      	mov	r3, r5
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	f7f7 fbf2 	bl	800028c <__adddf3>
 8008aa8:	4ba0      	ldr	r3, [pc, #640]	; (8008d2c <atan+0x324>)
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f7f7 fbec 	bl	8000288 <__aeabi_dsub>
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	4606      	mov	r6, r0
 8008ab4:	460f      	mov	r7, r1
 8008ab6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008aba:	4620      	mov	r0, r4
 8008abc:	4629      	mov	r1, r5
 8008abe:	f7f7 fbe5 	bl	800028c <__adddf3>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	4639      	mov	r1, r7
 8008aca:	f7f7 febf 	bl	800084c <__aeabi_ddiv>
 8008ace:	f04f 0a00 	mov.w	sl, #0
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	460d      	mov	r5, r1
 8008ad6:	4622      	mov	r2, r4
 8008ad8:	462b      	mov	r3, r5
 8008ada:	4620      	mov	r0, r4
 8008adc:	4629      	mov	r1, r5
 8008ade:	f7f7 fd8b 	bl	80005f8 <__aeabi_dmul>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	4680      	mov	r8, r0
 8008ae8:	4689      	mov	r9, r1
 8008aea:	f7f7 fd85 	bl	80005f8 <__aeabi_dmul>
 8008aee:	a374      	add	r3, pc, #464	; (adr r3, 8008cc0 <atan+0x2b8>)
 8008af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af4:	4606      	mov	r6, r0
 8008af6:	460f      	mov	r7, r1
 8008af8:	f7f7 fd7e 	bl	80005f8 <__aeabi_dmul>
 8008afc:	a372      	add	r3, pc, #456	; (adr r3, 8008cc8 <atan+0x2c0>)
 8008afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b02:	f7f7 fbc3 	bl	800028c <__adddf3>
 8008b06:	4632      	mov	r2, r6
 8008b08:	463b      	mov	r3, r7
 8008b0a:	f7f7 fd75 	bl	80005f8 <__aeabi_dmul>
 8008b0e:	a370      	add	r3, pc, #448	; (adr r3, 8008cd0 <atan+0x2c8>)
 8008b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b14:	f7f7 fbba 	bl	800028c <__adddf3>
 8008b18:	4632      	mov	r2, r6
 8008b1a:	463b      	mov	r3, r7
 8008b1c:	f7f7 fd6c 	bl	80005f8 <__aeabi_dmul>
 8008b20:	a36d      	add	r3, pc, #436	; (adr r3, 8008cd8 <atan+0x2d0>)
 8008b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b26:	f7f7 fbb1 	bl	800028c <__adddf3>
 8008b2a:	4632      	mov	r2, r6
 8008b2c:	463b      	mov	r3, r7
 8008b2e:	f7f7 fd63 	bl	80005f8 <__aeabi_dmul>
 8008b32:	a36b      	add	r3, pc, #428	; (adr r3, 8008ce0 <atan+0x2d8>)
 8008b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b38:	f7f7 fba8 	bl	800028c <__adddf3>
 8008b3c:	4632      	mov	r2, r6
 8008b3e:	463b      	mov	r3, r7
 8008b40:	f7f7 fd5a 	bl	80005f8 <__aeabi_dmul>
 8008b44:	a368      	add	r3, pc, #416	; (adr r3, 8008ce8 <atan+0x2e0>)
 8008b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b4a:	f7f7 fb9f 	bl	800028c <__adddf3>
 8008b4e:	4642      	mov	r2, r8
 8008b50:	464b      	mov	r3, r9
 8008b52:	f7f7 fd51 	bl	80005f8 <__aeabi_dmul>
 8008b56:	a366      	add	r3, pc, #408	; (adr r3, 8008cf0 <atan+0x2e8>)
 8008b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5c:	4680      	mov	r8, r0
 8008b5e:	4689      	mov	r9, r1
 8008b60:	4630      	mov	r0, r6
 8008b62:	4639      	mov	r1, r7
 8008b64:	f7f7 fd48 	bl	80005f8 <__aeabi_dmul>
 8008b68:	a363      	add	r3, pc, #396	; (adr r3, 8008cf8 <atan+0x2f0>)
 8008b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6e:	f7f7 fb8b 	bl	8000288 <__aeabi_dsub>
 8008b72:	4632      	mov	r2, r6
 8008b74:	463b      	mov	r3, r7
 8008b76:	f7f7 fd3f 	bl	80005f8 <__aeabi_dmul>
 8008b7a:	a361      	add	r3, pc, #388	; (adr r3, 8008d00 <atan+0x2f8>)
 8008b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b80:	f7f7 fb82 	bl	8000288 <__aeabi_dsub>
 8008b84:	4632      	mov	r2, r6
 8008b86:	463b      	mov	r3, r7
 8008b88:	f7f7 fd36 	bl	80005f8 <__aeabi_dmul>
 8008b8c:	a35e      	add	r3, pc, #376	; (adr r3, 8008d08 <atan+0x300>)
 8008b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b92:	f7f7 fb79 	bl	8000288 <__aeabi_dsub>
 8008b96:	4632      	mov	r2, r6
 8008b98:	463b      	mov	r3, r7
 8008b9a:	f7f7 fd2d 	bl	80005f8 <__aeabi_dmul>
 8008b9e:	a35c      	add	r3, pc, #368	; (adr r3, 8008d10 <atan+0x308>)
 8008ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba4:	f7f7 fb70 	bl	8000288 <__aeabi_dsub>
 8008ba8:	4632      	mov	r2, r6
 8008baa:	463b      	mov	r3, r7
 8008bac:	f7f7 fd24 	bl	80005f8 <__aeabi_dmul>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	4640      	mov	r0, r8
 8008bb6:	4649      	mov	r1, r9
 8008bb8:	f7f7 fb68 	bl	800028c <__adddf3>
 8008bbc:	4622      	mov	r2, r4
 8008bbe:	462b      	mov	r3, r5
 8008bc0:	f7f7 fd1a 	bl	80005f8 <__aeabi_dmul>
 8008bc4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008bc8:	4602      	mov	r2, r0
 8008bca:	460b      	mov	r3, r1
 8008bcc:	d14b      	bne.n	8008c66 <atan+0x25e>
 8008bce:	4620      	mov	r0, r4
 8008bd0:	4629      	mov	r1, r5
 8008bd2:	f7f7 fb59 	bl	8000288 <__aeabi_dsub>
 8008bd6:	e72c      	b.n	8008a32 <atan+0x2a>
 8008bd8:	ee10 0a10 	vmov	r0, s0
 8008bdc:	4b53      	ldr	r3, [pc, #332]	; (8008d2c <atan+0x324>)
 8008bde:	2200      	movs	r2, #0
 8008be0:	4629      	mov	r1, r5
 8008be2:	f7f7 fb51 	bl	8000288 <__aeabi_dsub>
 8008be6:	4b51      	ldr	r3, [pc, #324]	; (8008d2c <atan+0x324>)
 8008be8:	4606      	mov	r6, r0
 8008bea:	460f      	mov	r7, r1
 8008bec:	2200      	movs	r2, #0
 8008bee:	4620      	mov	r0, r4
 8008bf0:	4629      	mov	r1, r5
 8008bf2:	f7f7 fb4b 	bl	800028c <__adddf3>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	4639      	mov	r1, r7
 8008bfe:	f7f7 fe25 	bl	800084c <__aeabi_ddiv>
 8008c02:	f04f 0a01 	mov.w	sl, #1
 8008c06:	4604      	mov	r4, r0
 8008c08:	460d      	mov	r5, r1
 8008c0a:	e764      	b.n	8008ad6 <atan+0xce>
 8008c0c:	4b49      	ldr	r3, [pc, #292]	; (8008d34 <atan+0x32c>)
 8008c0e:	429e      	cmp	r6, r3
 8008c10:	da1d      	bge.n	8008c4e <atan+0x246>
 8008c12:	ee10 0a10 	vmov	r0, s0
 8008c16:	4b48      	ldr	r3, [pc, #288]	; (8008d38 <atan+0x330>)
 8008c18:	2200      	movs	r2, #0
 8008c1a:	4629      	mov	r1, r5
 8008c1c:	f7f7 fb34 	bl	8000288 <__aeabi_dsub>
 8008c20:	4b45      	ldr	r3, [pc, #276]	; (8008d38 <atan+0x330>)
 8008c22:	4606      	mov	r6, r0
 8008c24:	460f      	mov	r7, r1
 8008c26:	2200      	movs	r2, #0
 8008c28:	4620      	mov	r0, r4
 8008c2a:	4629      	mov	r1, r5
 8008c2c:	f7f7 fce4 	bl	80005f8 <__aeabi_dmul>
 8008c30:	4b3e      	ldr	r3, [pc, #248]	; (8008d2c <atan+0x324>)
 8008c32:	2200      	movs	r2, #0
 8008c34:	f7f7 fb2a 	bl	800028c <__adddf3>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	4639      	mov	r1, r7
 8008c40:	f7f7 fe04 	bl	800084c <__aeabi_ddiv>
 8008c44:	f04f 0a02 	mov.w	sl, #2
 8008c48:	4604      	mov	r4, r0
 8008c4a:	460d      	mov	r5, r1
 8008c4c:	e743      	b.n	8008ad6 <atan+0xce>
 8008c4e:	462b      	mov	r3, r5
 8008c50:	ee10 2a10 	vmov	r2, s0
 8008c54:	4939      	ldr	r1, [pc, #228]	; (8008d3c <atan+0x334>)
 8008c56:	2000      	movs	r0, #0
 8008c58:	f7f7 fdf8 	bl	800084c <__aeabi_ddiv>
 8008c5c:	f04f 0a03 	mov.w	sl, #3
 8008c60:	4604      	mov	r4, r0
 8008c62:	460d      	mov	r5, r1
 8008c64:	e737      	b.n	8008ad6 <atan+0xce>
 8008c66:	4b36      	ldr	r3, [pc, #216]	; (8008d40 <atan+0x338>)
 8008c68:	4e36      	ldr	r6, [pc, #216]	; (8008d44 <atan+0x33c>)
 8008c6a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008c6e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008c72:	e9da 2300 	ldrd	r2, r3, [sl]
 8008c76:	f7f7 fb07 	bl	8000288 <__aeabi_dsub>
 8008c7a:	4622      	mov	r2, r4
 8008c7c:	462b      	mov	r3, r5
 8008c7e:	f7f7 fb03 	bl	8000288 <__aeabi_dsub>
 8008c82:	4602      	mov	r2, r0
 8008c84:	460b      	mov	r3, r1
 8008c86:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008c8a:	f7f7 fafd 	bl	8000288 <__aeabi_dsub>
 8008c8e:	f1bb 0f00 	cmp.w	fp, #0
 8008c92:	4604      	mov	r4, r0
 8008c94:	460d      	mov	r5, r1
 8008c96:	f6bf aed6 	bge.w	8008a46 <atan+0x3e>
 8008c9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c9e:	461d      	mov	r5, r3
 8008ca0:	e6d1      	b.n	8008a46 <atan+0x3e>
 8008ca2:	a51d      	add	r5, pc, #116	; (adr r5, 8008d18 <atan+0x310>)
 8008ca4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008ca8:	e6cd      	b.n	8008a46 <atan+0x3e>
 8008caa:	bf00      	nop
 8008cac:	f3af 8000 	nop.w
 8008cb0:	54442d18 	.word	0x54442d18
 8008cb4:	bff921fb 	.word	0xbff921fb
 8008cb8:	8800759c 	.word	0x8800759c
 8008cbc:	7e37e43c 	.word	0x7e37e43c
 8008cc0:	e322da11 	.word	0xe322da11
 8008cc4:	3f90ad3a 	.word	0x3f90ad3a
 8008cc8:	24760deb 	.word	0x24760deb
 8008ccc:	3fa97b4b 	.word	0x3fa97b4b
 8008cd0:	a0d03d51 	.word	0xa0d03d51
 8008cd4:	3fb10d66 	.word	0x3fb10d66
 8008cd8:	c54c206e 	.word	0xc54c206e
 8008cdc:	3fb745cd 	.word	0x3fb745cd
 8008ce0:	920083ff 	.word	0x920083ff
 8008ce4:	3fc24924 	.word	0x3fc24924
 8008ce8:	5555550d 	.word	0x5555550d
 8008cec:	3fd55555 	.word	0x3fd55555
 8008cf0:	2c6a6c2f 	.word	0x2c6a6c2f
 8008cf4:	bfa2b444 	.word	0xbfa2b444
 8008cf8:	52defd9a 	.word	0x52defd9a
 8008cfc:	3fadde2d 	.word	0x3fadde2d
 8008d00:	af749a6d 	.word	0xaf749a6d
 8008d04:	3fb3b0f2 	.word	0x3fb3b0f2
 8008d08:	fe231671 	.word	0xfe231671
 8008d0c:	3fbc71c6 	.word	0x3fbc71c6
 8008d10:	9998ebc4 	.word	0x9998ebc4
 8008d14:	3fc99999 	.word	0x3fc99999
 8008d18:	54442d18 	.word	0x54442d18
 8008d1c:	3ff921fb 	.word	0x3ff921fb
 8008d20:	440fffff 	.word	0x440fffff
 8008d24:	7ff00000 	.word	0x7ff00000
 8008d28:	3fdbffff 	.word	0x3fdbffff
 8008d2c:	3ff00000 	.word	0x3ff00000
 8008d30:	3ff2ffff 	.word	0x3ff2ffff
 8008d34:	40038000 	.word	0x40038000
 8008d38:	3ff80000 	.word	0x3ff80000
 8008d3c:	bff00000 	.word	0xbff00000
 8008d40:	08009590 	.word	0x08009590
 8008d44:	08009570 	.word	0x08009570

08008d48 <fabs>:
 8008d48:	ec51 0b10 	vmov	r0, r1, d0
 8008d4c:	ee10 2a10 	vmov	r2, s0
 8008d50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008d54:	ec43 2b10 	vmov	d0, r2, r3
 8008d58:	4770      	bx	lr

08008d5a <atan2>:
 8008d5a:	f000 b82d 	b.w	8008db8 <__ieee754_atan2>

08008d5e <sqrt>:
 8008d5e:	b538      	push	{r3, r4, r5, lr}
 8008d60:	ed2d 8b02 	vpush	{d8}
 8008d64:	ec55 4b10 	vmov	r4, r5, d0
 8008d68:	f000 f8f0 	bl	8008f4c <__ieee754_sqrt>
 8008d6c:	4622      	mov	r2, r4
 8008d6e:	462b      	mov	r3, r5
 8008d70:	4620      	mov	r0, r4
 8008d72:	4629      	mov	r1, r5
 8008d74:	eeb0 8a40 	vmov.f32	s16, s0
 8008d78:	eef0 8a60 	vmov.f32	s17, s1
 8008d7c:	f7f7 fed6 	bl	8000b2c <__aeabi_dcmpun>
 8008d80:	b990      	cbnz	r0, 8008da8 <sqrt+0x4a>
 8008d82:	2200      	movs	r2, #0
 8008d84:	2300      	movs	r3, #0
 8008d86:	4620      	mov	r0, r4
 8008d88:	4629      	mov	r1, r5
 8008d8a:	f7f7 fea7 	bl	8000adc <__aeabi_dcmplt>
 8008d8e:	b158      	cbz	r0, 8008da8 <sqrt+0x4a>
 8008d90:	f7fc ff26 	bl	8005be0 <__errno>
 8008d94:	2321      	movs	r3, #33	; 0x21
 8008d96:	6003      	str	r3, [r0, #0]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	4610      	mov	r0, r2
 8008d9e:	4619      	mov	r1, r3
 8008da0:	f7f7 fd54 	bl	800084c <__aeabi_ddiv>
 8008da4:	ec41 0b18 	vmov	d8, r0, r1
 8008da8:	eeb0 0a48 	vmov.f32	s0, s16
 8008dac:	eef0 0a68 	vmov.f32	s1, s17
 8008db0:	ecbd 8b02 	vpop	{d8}
 8008db4:	bd38      	pop	{r3, r4, r5, pc}
	...

08008db8 <__ieee754_atan2>:
 8008db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dbc:	ec57 6b11 	vmov	r6, r7, d1
 8008dc0:	4273      	negs	r3, r6
 8008dc2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8008f48 <__ieee754_atan2+0x190>
 8008dc6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8008dca:	4333      	orrs	r3, r6
 8008dcc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008dd0:	4573      	cmp	r3, lr
 8008dd2:	ec51 0b10 	vmov	r0, r1, d0
 8008dd6:	ee11 8a10 	vmov	r8, s2
 8008dda:	d80a      	bhi.n	8008df2 <__ieee754_atan2+0x3a>
 8008ddc:	4244      	negs	r4, r0
 8008dde:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008de2:	4304      	orrs	r4, r0
 8008de4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008de8:	4574      	cmp	r4, lr
 8008dea:	ee10 9a10 	vmov	r9, s0
 8008dee:	468c      	mov	ip, r1
 8008df0:	d907      	bls.n	8008e02 <__ieee754_atan2+0x4a>
 8008df2:	4632      	mov	r2, r6
 8008df4:	463b      	mov	r3, r7
 8008df6:	f7f7 fa49 	bl	800028c <__adddf3>
 8008dfa:	ec41 0b10 	vmov	d0, r0, r1
 8008dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e02:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008e06:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008e0a:	4334      	orrs	r4, r6
 8008e0c:	d103      	bne.n	8008e16 <__ieee754_atan2+0x5e>
 8008e0e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e12:	f7ff bdf9 	b.w	8008a08 <atan>
 8008e16:	17bc      	asrs	r4, r7, #30
 8008e18:	f004 0402 	and.w	r4, r4, #2
 8008e1c:	ea53 0909 	orrs.w	r9, r3, r9
 8008e20:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008e24:	d107      	bne.n	8008e36 <__ieee754_atan2+0x7e>
 8008e26:	2c02      	cmp	r4, #2
 8008e28:	d060      	beq.n	8008eec <__ieee754_atan2+0x134>
 8008e2a:	2c03      	cmp	r4, #3
 8008e2c:	d1e5      	bne.n	8008dfa <__ieee754_atan2+0x42>
 8008e2e:	a142      	add	r1, pc, #264	; (adr r1, 8008f38 <__ieee754_atan2+0x180>)
 8008e30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e34:	e7e1      	b.n	8008dfa <__ieee754_atan2+0x42>
 8008e36:	ea52 0808 	orrs.w	r8, r2, r8
 8008e3a:	d106      	bne.n	8008e4a <__ieee754_atan2+0x92>
 8008e3c:	f1bc 0f00 	cmp.w	ip, #0
 8008e40:	da5f      	bge.n	8008f02 <__ieee754_atan2+0x14a>
 8008e42:	a13f      	add	r1, pc, #252	; (adr r1, 8008f40 <__ieee754_atan2+0x188>)
 8008e44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e48:	e7d7      	b.n	8008dfa <__ieee754_atan2+0x42>
 8008e4a:	4572      	cmp	r2, lr
 8008e4c:	d10f      	bne.n	8008e6e <__ieee754_atan2+0xb6>
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	f104 34ff 	add.w	r4, r4, #4294967295
 8008e54:	d107      	bne.n	8008e66 <__ieee754_atan2+0xae>
 8008e56:	2c02      	cmp	r4, #2
 8008e58:	d84c      	bhi.n	8008ef4 <__ieee754_atan2+0x13c>
 8008e5a:	4b35      	ldr	r3, [pc, #212]	; (8008f30 <__ieee754_atan2+0x178>)
 8008e5c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008e60:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008e64:	e7c9      	b.n	8008dfa <__ieee754_atan2+0x42>
 8008e66:	2c02      	cmp	r4, #2
 8008e68:	d848      	bhi.n	8008efc <__ieee754_atan2+0x144>
 8008e6a:	4b32      	ldr	r3, [pc, #200]	; (8008f34 <__ieee754_atan2+0x17c>)
 8008e6c:	e7f6      	b.n	8008e5c <__ieee754_atan2+0xa4>
 8008e6e:	4573      	cmp	r3, lr
 8008e70:	d0e4      	beq.n	8008e3c <__ieee754_atan2+0x84>
 8008e72:	1a9b      	subs	r3, r3, r2
 8008e74:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008e78:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008e7c:	da1e      	bge.n	8008ebc <__ieee754_atan2+0x104>
 8008e7e:	2f00      	cmp	r7, #0
 8008e80:	da01      	bge.n	8008e86 <__ieee754_atan2+0xce>
 8008e82:	323c      	adds	r2, #60	; 0x3c
 8008e84:	db1e      	blt.n	8008ec4 <__ieee754_atan2+0x10c>
 8008e86:	4632      	mov	r2, r6
 8008e88:	463b      	mov	r3, r7
 8008e8a:	f7f7 fcdf 	bl	800084c <__aeabi_ddiv>
 8008e8e:	ec41 0b10 	vmov	d0, r0, r1
 8008e92:	f7ff ff59 	bl	8008d48 <fabs>
 8008e96:	f7ff fdb7 	bl	8008a08 <atan>
 8008e9a:	ec51 0b10 	vmov	r0, r1, d0
 8008e9e:	2c01      	cmp	r4, #1
 8008ea0:	d013      	beq.n	8008eca <__ieee754_atan2+0x112>
 8008ea2:	2c02      	cmp	r4, #2
 8008ea4:	d015      	beq.n	8008ed2 <__ieee754_atan2+0x11a>
 8008ea6:	2c00      	cmp	r4, #0
 8008ea8:	d0a7      	beq.n	8008dfa <__ieee754_atan2+0x42>
 8008eaa:	a319      	add	r3, pc, #100	; (adr r3, 8008f10 <__ieee754_atan2+0x158>)
 8008eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb0:	f7f7 f9ea 	bl	8000288 <__aeabi_dsub>
 8008eb4:	a318      	add	r3, pc, #96	; (adr r3, 8008f18 <__ieee754_atan2+0x160>)
 8008eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eba:	e014      	b.n	8008ee6 <__ieee754_atan2+0x12e>
 8008ebc:	a118      	add	r1, pc, #96	; (adr r1, 8008f20 <__ieee754_atan2+0x168>)
 8008ebe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ec2:	e7ec      	b.n	8008e9e <__ieee754_atan2+0xe6>
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	e7e9      	b.n	8008e9e <__ieee754_atan2+0xe6>
 8008eca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ece:	4619      	mov	r1, r3
 8008ed0:	e793      	b.n	8008dfa <__ieee754_atan2+0x42>
 8008ed2:	a30f      	add	r3, pc, #60	; (adr r3, 8008f10 <__ieee754_atan2+0x158>)
 8008ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed8:	f7f7 f9d6 	bl	8000288 <__aeabi_dsub>
 8008edc:	4602      	mov	r2, r0
 8008ede:	460b      	mov	r3, r1
 8008ee0:	a10d      	add	r1, pc, #52	; (adr r1, 8008f18 <__ieee754_atan2+0x160>)
 8008ee2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ee6:	f7f7 f9cf 	bl	8000288 <__aeabi_dsub>
 8008eea:	e786      	b.n	8008dfa <__ieee754_atan2+0x42>
 8008eec:	a10a      	add	r1, pc, #40	; (adr r1, 8008f18 <__ieee754_atan2+0x160>)
 8008eee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ef2:	e782      	b.n	8008dfa <__ieee754_atan2+0x42>
 8008ef4:	a10c      	add	r1, pc, #48	; (adr r1, 8008f28 <__ieee754_atan2+0x170>)
 8008ef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008efa:	e77e      	b.n	8008dfa <__ieee754_atan2+0x42>
 8008efc:	2000      	movs	r0, #0
 8008efe:	2100      	movs	r1, #0
 8008f00:	e77b      	b.n	8008dfa <__ieee754_atan2+0x42>
 8008f02:	a107      	add	r1, pc, #28	; (adr r1, 8008f20 <__ieee754_atan2+0x168>)
 8008f04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f08:	e777      	b.n	8008dfa <__ieee754_atan2+0x42>
 8008f0a:	bf00      	nop
 8008f0c:	f3af 8000 	nop.w
 8008f10:	33145c07 	.word	0x33145c07
 8008f14:	3ca1a626 	.word	0x3ca1a626
 8008f18:	54442d18 	.word	0x54442d18
 8008f1c:	400921fb 	.word	0x400921fb
 8008f20:	54442d18 	.word	0x54442d18
 8008f24:	3ff921fb 	.word	0x3ff921fb
 8008f28:	54442d18 	.word	0x54442d18
 8008f2c:	3fe921fb 	.word	0x3fe921fb
 8008f30:	080095b0 	.word	0x080095b0
 8008f34:	080095c8 	.word	0x080095c8
 8008f38:	54442d18 	.word	0x54442d18
 8008f3c:	c00921fb 	.word	0xc00921fb
 8008f40:	54442d18 	.word	0x54442d18
 8008f44:	bff921fb 	.word	0xbff921fb
 8008f48:	7ff00000 	.word	0x7ff00000

08008f4c <__ieee754_sqrt>:
 8008f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f50:	ec55 4b10 	vmov	r4, r5, d0
 8008f54:	4e55      	ldr	r6, [pc, #340]	; (80090ac <__ieee754_sqrt+0x160>)
 8008f56:	43ae      	bics	r6, r5
 8008f58:	ee10 0a10 	vmov	r0, s0
 8008f5c:	ee10 3a10 	vmov	r3, s0
 8008f60:	462a      	mov	r2, r5
 8008f62:	4629      	mov	r1, r5
 8008f64:	d110      	bne.n	8008f88 <__ieee754_sqrt+0x3c>
 8008f66:	ee10 2a10 	vmov	r2, s0
 8008f6a:	462b      	mov	r3, r5
 8008f6c:	f7f7 fb44 	bl	80005f8 <__aeabi_dmul>
 8008f70:	4602      	mov	r2, r0
 8008f72:	460b      	mov	r3, r1
 8008f74:	4620      	mov	r0, r4
 8008f76:	4629      	mov	r1, r5
 8008f78:	f7f7 f988 	bl	800028c <__adddf3>
 8008f7c:	4604      	mov	r4, r0
 8008f7e:	460d      	mov	r5, r1
 8008f80:	ec45 4b10 	vmov	d0, r4, r5
 8008f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f88:	2d00      	cmp	r5, #0
 8008f8a:	dc10      	bgt.n	8008fae <__ieee754_sqrt+0x62>
 8008f8c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008f90:	4330      	orrs	r0, r6
 8008f92:	d0f5      	beq.n	8008f80 <__ieee754_sqrt+0x34>
 8008f94:	b15d      	cbz	r5, 8008fae <__ieee754_sqrt+0x62>
 8008f96:	ee10 2a10 	vmov	r2, s0
 8008f9a:	462b      	mov	r3, r5
 8008f9c:	ee10 0a10 	vmov	r0, s0
 8008fa0:	f7f7 f972 	bl	8000288 <__aeabi_dsub>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	f7f7 fc50 	bl	800084c <__aeabi_ddiv>
 8008fac:	e7e6      	b.n	8008f7c <__ieee754_sqrt+0x30>
 8008fae:	1512      	asrs	r2, r2, #20
 8008fb0:	d074      	beq.n	800909c <__ieee754_sqrt+0x150>
 8008fb2:	07d4      	lsls	r4, r2, #31
 8008fb4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008fb8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008fbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008fc0:	bf5e      	ittt	pl
 8008fc2:	0fda      	lsrpl	r2, r3, #31
 8008fc4:	005b      	lslpl	r3, r3, #1
 8008fc6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008fca:	2400      	movs	r4, #0
 8008fcc:	0fda      	lsrs	r2, r3, #31
 8008fce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008fd2:	107f      	asrs	r7, r7, #1
 8008fd4:	005b      	lsls	r3, r3, #1
 8008fd6:	2516      	movs	r5, #22
 8008fd8:	4620      	mov	r0, r4
 8008fda:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008fde:	1886      	adds	r6, r0, r2
 8008fe0:	428e      	cmp	r6, r1
 8008fe2:	bfde      	ittt	le
 8008fe4:	1b89      	suble	r1, r1, r6
 8008fe6:	18b0      	addle	r0, r6, r2
 8008fe8:	18a4      	addle	r4, r4, r2
 8008fea:	0049      	lsls	r1, r1, #1
 8008fec:	3d01      	subs	r5, #1
 8008fee:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008ff2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008ff6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ffa:	d1f0      	bne.n	8008fde <__ieee754_sqrt+0x92>
 8008ffc:	462a      	mov	r2, r5
 8008ffe:	f04f 0e20 	mov.w	lr, #32
 8009002:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009006:	4281      	cmp	r1, r0
 8009008:	eb06 0c05 	add.w	ip, r6, r5
 800900c:	dc02      	bgt.n	8009014 <__ieee754_sqrt+0xc8>
 800900e:	d113      	bne.n	8009038 <__ieee754_sqrt+0xec>
 8009010:	459c      	cmp	ip, r3
 8009012:	d811      	bhi.n	8009038 <__ieee754_sqrt+0xec>
 8009014:	f1bc 0f00 	cmp.w	ip, #0
 8009018:	eb0c 0506 	add.w	r5, ip, r6
 800901c:	da43      	bge.n	80090a6 <__ieee754_sqrt+0x15a>
 800901e:	2d00      	cmp	r5, #0
 8009020:	db41      	blt.n	80090a6 <__ieee754_sqrt+0x15a>
 8009022:	f100 0801 	add.w	r8, r0, #1
 8009026:	1a09      	subs	r1, r1, r0
 8009028:	459c      	cmp	ip, r3
 800902a:	bf88      	it	hi
 800902c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009030:	eba3 030c 	sub.w	r3, r3, ip
 8009034:	4432      	add	r2, r6
 8009036:	4640      	mov	r0, r8
 8009038:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800903c:	f1be 0e01 	subs.w	lr, lr, #1
 8009040:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009044:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009048:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800904c:	d1db      	bne.n	8009006 <__ieee754_sqrt+0xba>
 800904e:	430b      	orrs	r3, r1
 8009050:	d006      	beq.n	8009060 <__ieee754_sqrt+0x114>
 8009052:	1c50      	adds	r0, r2, #1
 8009054:	bf13      	iteet	ne
 8009056:	3201      	addne	r2, #1
 8009058:	3401      	addeq	r4, #1
 800905a:	4672      	moveq	r2, lr
 800905c:	f022 0201 	bicne.w	r2, r2, #1
 8009060:	1063      	asrs	r3, r4, #1
 8009062:	0852      	lsrs	r2, r2, #1
 8009064:	07e1      	lsls	r1, r4, #31
 8009066:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800906a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800906e:	bf48      	it	mi
 8009070:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009074:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009078:	4614      	mov	r4, r2
 800907a:	e781      	b.n	8008f80 <__ieee754_sqrt+0x34>
 800907c:	0ad9      	lsrs	r1, r3, #11
 800907e:	3815      	subs	r0, #21
 8009080:	055b      	lsls	r3, r3, #21
 8009082:	2900      	cmp	r1, #0
 8009084:	d0fa      	beq.n	800907c <__ieee754_sqrt+0x130>
 8009086:	02cd      	lsls	r5, r1, #11
 8009088:	d50a      	bpl.n	80090a0 <__ieee754_sqrt+0x154>
 800908a:	f1c2 0420 	rsb	r4, r2, #32
 800908e:	fa23 f404 	lsr.w	r4, r3, r4
 8009092:	1e55      	subs	r5, r2, #1
 8009094:	4093      	lsls	r3, r2
 8009096:	4321      	orrs	r1, r4
 8009098:	1b42      	subs	r2, r0, r5
 800909a:	e78a      	b.n	8008fb2 <__ieee754_sqrt+0x66>
 800909c:	4610      	mov	r0, r2
 800909e:	e7f0      	b.n	8009082 <__ieee754_sqrt+0x136>
 80090a0:	0049      	lsls	r1, r1, #1
 80090a2:	3201      	adds	r2, #1
 80090a4:	e7ef      	b.n	8009086 <__ieee754_sqrt+0x13a>
 80090a6:	4680      	mov	r8, r0
 80090a8:	e7bd      	b.n	8009026 <__ieee754_sqrt+0xda>
 80090aa:	bf00      	nop
 80090ac:	7ff00000 	.word	0x7ff00000

080090b0 <_init>:
 80090b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090b2:	bf00      	nop
 80090b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090b6:	bc08      	pop	{r3}
 80090b8:	469e      	mov	lr, r3
 80090ba:	4770      	bx	lr

080090bc <_fini>:
 80090bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090be:	bf00      	nop
 80090c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090c2:	bc08      	pop	{r3}
 80090c4:	469e      	mov	lr, r3
 80090c6:	4770      	bx	lr

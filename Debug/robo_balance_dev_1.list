
robo_balance_dev_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009400  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  08009590  08009590  00019590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ab0  08009ab0  00020274  2**0
                  CONTENTS
  4 .ARM          00000000  08009ab0  08009ab0  00020274  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ab0  08009ab0  00020274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ab0  08009ab0  00019ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ab4  08009ab4  00019ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  08009ab8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000278  08009d2c  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  08009d2c  00020470  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011248  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028c6  00000000  00000000  000314ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  00033db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  00034e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004191  00000000  00000000  00035e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014154  00000000  00000000  00039fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9dd4  00000000  00000000  0004e0f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00117ec9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057fc  00000000  00000000  00117f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000278 	.word	0x20000278
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009578 	.word	0x08009578

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000027c 	.word	0x2000027c
 80001cc:	08009578 	.word	0x08009578

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	4b38      	ldr	r3, [pc, #224]	; (8000ca0 <MX_GPIO_Init+0xf8>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	4a37      	ldr	r2, [pc, #220]	; (8000ca0 <MX_GPIO_Init+0xf8>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bca:	4b35      	ldr	r3, [pc, #212]	; (8000ca0 <MX_GPIO_Init+0xf8>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	4b32      	ldr	r3, [pc, #200]	; (8000ca0 <MX_GPIO_Init+0xf8>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	4a31      	ldr	r2, [pc, #196]	; (8000ca0 <MX_GPIO_Init+0xf8>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be2:	4b2f      	ldr	r3, [pc, #188]	; (8000ca0 <MX_GPIO_Init+0xf8>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_L_2_Pin|EN_R_2_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2190      	movs	r1, #144	; 0x90
 8000bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf6:	f002 f93d 	bl	8002e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_R_1_Pin|EN_L_1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	210b      	movs	r1, #11
 8000bfe:	4829      	ldr	r0, [pc, #164]	; (8000ca4 <MX_GPIO_Init+0xfc>)
 8000c00:	f002 f938 	bl	8002e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = EN_L_2_Pin|EN_R_2_Pin;
 8000c04:	2390      	movs	r3, #144	; 0x90
 8000c06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 030c 	add.w	r3, r7, #12
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1e:	f001 ffbf 	bl	8002ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = EN_R_1_Pin|EN_L_1_Pin|LD3_Pin;
 8000c22:	230b      	movs	r3, #11
 8000c24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	4619      	mov	r1, r3
 8000c38:	481a      	ldr	r0, [pc, #104]	; (8000ca4 <MX_GPIO_Init+0xfc>)
 8000c3a:	f001 ffb1 	bl	8002ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BTN_OK_Pin|BTN_NO_Pin|BTN_LE_Pin;
 8000c3e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c44:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 030c 	add.w	r3, r7, #12
 8000c52:	4619      	mov	r1, r3
 8000c54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c58:	f001 ffa2 	bl	8002ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_RI_Pin;
 8000c5c:	2320      	movs	r3, #32
 8000c5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c60:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_RI_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 030c 	add.w	r3, r7, #12
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <MX_GPIO_Init+0xfc>)
 8000c72:	f001 ff95 	bl	8002ba0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 12, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	210c      	movs	r1, #12
 8000c7a:	2017      	movs	r0, #23
 8000c7c:	f001 ff59 	bl	8002b32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c80:	2017      	movs	r0, #23
 8000c82:	f001 ff72 	bl	8002b6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 12, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	210c      	movs	r1, #12
 8000c8a:	2028      	movs	r0, #40	; 0x28
 8000c8c:	f001 ff51 	bl	8002b32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c90:	2028      	movs	r0, #40	; 0x28
 8000c92:	f001 ff6a 	bl	8002b6a <HAL_NVIC_EnableIRQ>

}
 8000c96:	bf00      	nop
 8000c98:	3720      	adds	r7, #32
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	48000400 	.word	0x48000400

08000ca8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af02      	add	r7, sp, #8
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	f023 030f 	bic.w	r3, r3, #15
 8000cb8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	011b      	lsls	r3, r3, #4
 8000cbe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	f043 030c 	orr.w	r3, r3, #12
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	f043 0308 	orr.w	r3, r3, #8
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000cd4:	7bbb      	ldrb	r3, [r7, #14]
 8000cd6:	f043 030c 	orr.w	r3, r3, #12
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000cde:	7bbb      	ldrb	r3, [r7, #14]
 8000ce0:	f043 0308 	orr.w	r3, r3, #8
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ce8:	f107 0208 	add.w	r2, r7, #8
 8000cec:	2364      	movs	r3, #100	; 0x64
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	214e      	movs	r1, #78	; 0x4e
 8000cf4:	4803      	ldr	r0, [pc, #12]	; (8000d04 <lcd_send_cmd+0x5c>)
 8000cf6:	f002 f997 	bl	8003028 <HAL_I2C_Master_Transmit>
}
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000294 	.word	0x20000294

08000d08 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af02      	add	r7, sp, #8
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	f023 030f 	bic.w	r3, r3, #15
 8000d18:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	011b      	lsls	r3, r3, #4
 8000d1e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	f043 030d 	orr.w	r3, r3, #13
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	f043 0309 	orr.w	r3, r3, #9
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000d34:	7bbb      	ldrb	r3, [r7, #14]
 8000d36:	f043 030d 	orr.w	r3, r3, #13
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000d3e:	7bbb      	ldrb	r3, [r7, #14]
 8000d40:	f043 0309 	orr.w	r3, r3, #9
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000d48:	f107 0208 	add.w	r2, r7, #8
 8000d4c:	2364      	movs	r3, #100	; 0x64
 8000d4e:	9300      	str	r3, [sp, #0]
 8000d50:	2304      	movs	r3, #4
 8000d52:	214e      	movs	r1, #78	; 0x4e
 8000d54:	4803      	ldr	r0, [pc, #12]	; (8000d64 <lcd_send_data+0x5c>)
 8000d56:	f002 f967 	bl	8003028 <HAL_I2C_Master_Transmit>
}
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000294 	.word	0x20000294

08000d68 <lcd_clear>:

void lcd_clear (void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000d6e:	2080      	movs	r0, #128	; 0x80
 8000d70:	f7ff ff9a 	bl	8000ca8 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000d74:	2300      	movs	r3, #0
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	e005      	b.n	8000d86 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000d7a:	2020      	movs	r0, #32
 8000d7c:	f7ff ffc4 	bl	8000d08 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3301      	adds	r3, #1
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b45      	cmp	r3, #69	; 0x45
 8000d8a:	ddf6      	ble.n	8000d7a <lcd_clear+0x12>
	}
}
 8000d8c:	bf00      	nop
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
 8000d9e:	6039      	str	r1, [r7, #0]
    switch (row)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d003      	beq.n	8000dae <lcd_put_cur+0x18>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d005      	beq.n	8000db8 <lcd_put_cur+0x22>
 8000dac:	e009      	b.n	8000dc2 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db4:	603b      	str	r3, [r7, #0]
            break;
 8000db6:	e004      	b.n	8000dc2 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000dbe:	603b      	str	r3, [r7, #0]
            break;
 8000dc0:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ff6e 	bl	8000ca8 <lcd_send_cmd>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <lcd_init>:


void lcd_init (void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000dd8:	2032      	movs	r0, #50	; 0x32
 8000dda:	f001 fdab 	bl	8002934 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000dde:	2030      	movs	r0, #48	; 0x30
 8000de0:	f7ff ff62 	bl	8000ca8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000de4:	2005      	movs	r0, #5
 8000de6:	f001 fda5 	bl	8002934 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000dea:	2030      	movs	r0, #48	; 0x30
 8000dec:	f7ff ff5c 	bl	8000ca8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000df0:	2001      	movs	r0, #1
 8000df2:	f001 fd9f 	bl	8002934 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000df6:	2030      	movs	r0, #48	; 0x30
 8000df8:	f7ff ff56 	bl	8000ca8 <lcd_send_cmd>
	HAL_Delay(10);
 8000dfc:	200a      	movs	r0, #10
 8000dfe:	f001 fd99 	bl	8002934 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000e02:	2020      	movs	r0, #32
 8000e04:	f7ff ff50 	bl	8000ca8 <lcd_send_cmd>
	HAL_Delay(10);
 8000e08:	200a      	movs	r0, #10
 8000e0a:	f001 fd93 	bl	8002934 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000e0e:	2028      	movs	r0, #40	; 0x28
 8000e10:	f7ff ff4a 	bl	8000ca8 <lcd_send_cmd>
	HAL_Delay(1);
 8000e14:	2001      	movs	r0, #1
 8000e16:	f001 fd8d 	bl	8002934 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000e1a:	2008      	movs	r0, #8
 8000e1c:	f7ff ff44 	bl	8000ca8 <lcd_send_cmd>
	HAL_Delay(1);
 8000e20:	2001      	movs	r0, #1
 8000e22:	f001 fd87 	bl	8002934 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000e26:	2001      	movs	r0, #1
 8000e28:	f7ff ff3e 	bl	8000ca8 <lcd_send_cmd>
	HAL_Delay(1);
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f001 fd81 	bl	8002934 <HAL_Delay>
	HAL_Delay(1);
 8000e32:	2001      	movs	r0, #1
 8000e34:	f001 fd7e 	bl	8002934 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000e38:	2006      	movs	r0, #6
 8000e3a:	f7ff ff35 	bl	8000ca8 <lcd_send_cmd>
	HAL_Delay(1);
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f001 fd78 	bl	8002934 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000e44:	200c      	movs	r0, #12
 8000e46:	f7ff ff2f 	bl	8000ca8 <lcd_send_cmd>
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000e56:	e006      	b.n	8000e66 <lcd_send_string+0x18>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	1c5a      	adds	r2, r3, #1
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff51 	bl	8000d08 <lcd_send_data>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d1f4      	bne.n	8000e58 <lcd_send_string+0xa>
}
 8000e6e:	bf00      	nop
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <MX_I2C1_Init+0x74>)
 8000e7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ef0 <MX_I2C1_Init+0x78>)
 8000e80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <MX_I2C1_Init+0x74>)
 8000e84:	4a1b      	ldr	r2, [pc, #108]	; (8000ef4 <MX_I2C1_Init+0x7c>)
 8000e86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e88:	4b18      	ldr	r3, [pc, #96]	; (8000eec <MX_I2C1_Init+0x74>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e8e:	4b17      	ldr	r3, [pc, #92]	; (8000eec <MX_I2C1_Init+0x74>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e94:	4b15      	ldr	r3, [pc, #84]	; (8000eec <MX_I2C1_Init+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <MX_I2C1_Init+0x74>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <MX_I2C1_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <MX_I2C1_Init+0x74>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <MX_I2C1_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eb2:	480e      	ldr	r0, [pc, #56]	; (8000eec <MX_I2C1_Init+0x74>)
 8000eb4:	f002 f828 	bl	8002f08 <HAL_I2C_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ebe:	f000 fdbb 	bl	8001a38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4809      	ldr	r0, [pc, #36]	; (8000eec <MX_I2C1_Init+0x74>)
 8000ec6:	f002 fe77 	bl	8003bb8 <HAL_I2CEx_ConfigAnalogFilter>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ed0:	f000 fdb2 	bl	8001a38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_I2C1_Init+0x74>)
 8000ed8:	f002 feb9 	bl	8003c4e <HAL_I2CEx_ConfigDigitalFilter>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ee2:	f000 fda9 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000294 	.word	0x20000294
 8000ef0:	40005400 	.word	0x40005400
 8000ef4:	10707dbc 	.word	0x10707dbc

08000ef8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b09e      	sub	sp, #120	; 0x78
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	2254      	movs	r2, #84	; 0x54
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f005 f8ef 	bl	80060fc <memset>
  if(i2cHandle->Instance==I2C1)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a1e      	ldr	r2, [pc, #120]	; (8000f9c <HAL_I2C_MspInit+0xa4>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d135      	bne.n	8000f94 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f28:	2340      	movs	r3, #64	; 0x40
 8000f2a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f30:	f107 0310 	add.w	r3, r7, #16
 8000f34:	4618      	mov	r0, r3
 8000f36:	f003 fd3b 	bl	80049b0 <HAL_RCCEx_PeriphCLKConfig>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f40:	f000 fd7a 	bl	8001a38 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <HAL_I2C_MspInit+0xa8>)
 8000f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f48:	4a15      	ldr	r2, [pc, #84]	; (8000fa0 <HAL_I2C_MspInit+0xa8>)
 8000f4a:	f043 0302 	orr.w	r3, r3, #2
 8000f4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <HAL_I2C_MspInit+0xa8>)
 8000f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f5c:	23c0      	movs	r3, #192	; 0xc0
 8000f5e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f60:	2312      	movs	r3, #18
 8000f62:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f70:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f74:	4619      	mov	r1, r3
 8000f76:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <HAL_I2C_MspInit+0xac>)
 8000f78:	f001 fe12 	bl	8002ba0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <HAL_I2C_MspInit+0xa8>)
 8000f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f80:	4a07      	ldr	r2, [pc, #28]	; (8000fa0 <HAL_I2C_MspInit+0xa8>)
 8000f82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f86:	6593      	str	r3, [r2, #88]	; 0x58
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <HAL_I2C_MspInit+0xa8>)
 8000f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f94:	bf00      	nop
 8000f96:	3778      	adds	r7, #120	; 0x78
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40005400 	.word	0x40005400
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	48000400 	.word	0x48000400

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fac:	f001 fc4d 	bl	800284a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb0:	f000 f854 	bl	800105c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb4:	f7ff fdf8 	bl	8000ba8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fb8:	f7ff ff5e 	bl	8000e78 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000fbc:	f001 fa16 	bl	80023ec <MX_TIM1_Init>
  MX_TIM2_Init();
 8000fc0:	f001 fa6e 	bl	80024a0 <MX_TIM2_Init>
  MX_TIM15_Init();
 8000fc4:	f001 fac0 	bl	8002548 <MX_TIM15_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_init();
 8000fc8:	f7ff ff04 	bl	8000dd4 <lcd_init>
  lcd_put_cur(0, 0);
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f7ff fee1 	bl	8000d96 <lcd_put_cur>
  lcd_send_string("Hello, world!");
 8000fd4:	481e      	ldr	r0, [pc, #120]	; (8001050 <main+0xa8>)
 8000fd6:	f7ff ff3a 	bl	8000e4e <lcd_send_string>

  MPU6050_Init(&hi2c1);
 8000fda:	481e      	ldr	r0, [pc, #120]	; (8001054 <main+0xac>)
 8000fdc:	f000 fd31 	bl	8001a42 <MPU6050_Init>
  HAL_Delay(1000);
 8000fe0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fe4:	f001 fca6 	bl	8002934 <HAL_Delay>

  while (1)
  {
	  switch (current_state) {
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <main+0xb0>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	3b01      	subs	r3, #1
 8000fee:	2b07      	cmp	r3, #7
 8000ff0:	d82a      	bhi.n	8001048 <main+0xa0>
 8000ff2:	a201      	add	r2, pc, #4	; (adr r2, 8000ff8 <main+0x50>)
 8000ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff8:	08001043 	.word	0x08001043
 8000ffc:	08001019 	.word	0x08001019
 8001000:	0800101f 	.word	0x0800101f
 8001004:	08001025 	.word	0x08001025
 8001008:	0800102b 	.word	0x0800102b
 800100c:	08001031 	.word	0x08001031
 8001010:	08001037 	.word	0x08001037
 8001014:	0800103d 	.word	0x0800103d
		case ENCODER_DISPLAY_state:
			stateENCODER();
 8001018:	f000 f93c 	bl	8001294 <stateENCODER>
			break;
 800101c:	e017      	b.n	800104e <main+0xa6>
		case IMU_DISPLAY_state:
			stateIMU();
 800101e:	f000 f9e9 	bl	80013f4 <stateIMU>
			break;
 8001022:	e014      	b.n	800104e <main+0xa6>
		case HOME_state:
			stateHOME();
 8001024:	f000 fa62 	bl	80014ec <stateHOME>
			break;
 8001028:	e011      	b.n	800104e <main+0xa6>
		case EEPROM_RW_state:
			stateEEPROM();
 800102a:	f000 fabf 	bl	80015ac <stateEEPROM>
			break;
 800102e:	e00e      	b.n	800104e <main+0xa6>
		case KP_state:
			stateKP();
 8001030:	f000 fb5a 	bl	80016e8 <stateKP>
			break;
 8001034:	e00b      	b.n	800104e <main+0xa6>
		case KI_state:
			stateKI();
 8001036:	f000 fbab 	bl	8001790 <stateKI>
			break;
 800103a:	e008      	b.n	800104e <main+0xa6>
		case KD_state:
			stateKD();
 800103c:	f000 fbfc 	bl	8001838 <stateKD>
			break;
 8001040:	e005      	b.n	800104e <main+0xa6>
		case BALANCE_state:
			stateBALANCE();
 8001042:	f000 f8db 	bl	80011fc <stateBALANCE>
			break;
 8001046:	e002      	b.n	800104e <main+0xa6>
		default:
			stateNULL();
 8001048:	f000 f884 	bl	8001154 <stateNULL>
			break;
 800104c:	bf00      	nop
	  switch (current_state) {
 800104e:	e7cb      	b.n	8000fe8 <main+0x40>
 8001050:	08009590 	.word	0x08009590
 8001054:	20000294 	.word	0x20000294
 8001058:	20000000 	.word	0x20000000

0800105c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b096      	sub	sp, #88	; 0x58
 8001060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	2244      	movs	r2, #68	; 0x44
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f005 f846 	bl	80060fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001070:	463b      	mov	r3, r7
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800107e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001082:	f002 fe3f 	bl	8003d04 <HAL_PWREx_ControlVoltageScaling>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800108c:	f000 fcd4 	bl	8001a38 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001090:	2302      	movs	r3, #2
 8001092:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001094:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001098:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800109a:	2310      	movs	r3, #16
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109e:	2302      	movs	r3, #2
 80010a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010a2:	2302      	movs	r3, #2
 80010a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010a6:	2301      	movs	r3, #1
 80010a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80010aa:	2310      	movs	r3, #16
 80010ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010ae:	2307      	movs	r3, #7
 80010b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010b2:	2302      	movs	r3, #2
 80010b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80010b6:	2304      	movs	r3, #4
 80010b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4618      	mov	r0, r3
 80010c0:	f002 fe76 	bl	8003db0 <HAL_RCC_OscConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <SystemClock_Config+0x72>
  {
    Error_Handler();
 80010ca:	f000 fcb5 	bl	8001a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ce:	230f      	movs	r3, #15
 80010d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d2:	2303      	movs	r3, #3
 80010d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010e2:	463b      	mov	r3, r7
 80010e4:	2103      	movs	r1, #3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f003 fa76 	bl	80045d8 <HAL_RCC_ClockConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010f2:	f000 fca1 	bl	8001a38 <Error_Handler>
  }
}
 80010f6:	bf00      	nop
 80010f8:	3758      	adds	r7, #88	; 0x58
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BTN_OK_Pin)
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001110:	d102      	bne.n	8001118 <HAL_GPIO_EXTI_Callback+0x18>
	{
		BTN.ok = BTN_pressed;
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <HAL_GPIO_EXTI_Callback+0x50>)
 8001114:	2201      	movs	r2, #1
 8001116:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == BTN_NO_Pin)
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800111e:	d102      	bne.n	8001126 <HAL_GPIO_EXTI_Callback+0x26>
	{
		BTN.no = BTN_pressed;
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <HAL_GPIO_EXTI_Callback+0x50>)
 8001122:	2201      	movs	r2, #1
 8001124:	705a      	strb	r2, [r3, #1]
	}
	if (GPIO_Pin == BTN_LE_Pin)
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800112c:	d102      	bne.n	8001134 <HAL_GPIO_EXTI_Callback+0x34>
	{
		BTN.left = BTN_pressed;
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <HAL_GPIO_EXTI_Callback+0x50>)
 8001130:	2201      	movs	r2, #1
 8001132:	709a      	strb	r2, [r3, #2]
		//HAL_Delay(2); // XDDDD INTERRUPTS ALE CALLED TWICE WITHOUT THIS DUDE RIGHT HERE XD
	}
	if (GPIO_Pin == BTN_RI_Pin)
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	2b20      	cmp	r3, #32
 8001138:	d105      	bne.n	8001146 <HAL_GPIO_EXTI_Callback+0x46>
	{
		BTN.right = BTN_pressed;
 800113a:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_GPIO_EXTI_Callback+0x50>)
 800113c:	2201      	movs	r2, #1
 800113e:	70da      	strb	r2, [r3, #3]
		HAL_Delay(2); // XDDDD INTERRUPTS ALE CALLED TWICE WITHOUT THIS DUDE RIGHT HERE XD
 8001140:	2002      	movs	r0, #2
 8001142:	f001 fbf7 	bl	8002934 <HAL_Delay>
	}
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	200002ec 	.word	0x200002ec

08001154 <stateNULL>:
void stateNULL(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 8001158:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <stateNULL+0x90>)
 800115a:	781a      	ldrb	r2, [r3, #0]
 800115c:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <stateNULL+0x94>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	429a      	cmp	r2, r3
 8001162:	d013      	beq.n	800118c <stateNULL+0x38>
	{
		previous_state = current_state;
 8001164:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <stateNULL+0x90>)
 8001166:	781a      	ldrb	r2, [r3, #0]
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <stateNULL+0x94>)
 800116a:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 800116c:	f7ff fdfc 	bl	8000d68 <lcd_clear>
		lcd_put_cur(0, 0);
 8001170:	2100      	movs	r1, #0
 8001172:	2000      	movs	r0, #0
 8001174:	f7ff fe0f 	bl	8000d96 <lcd_put_cur>
		lcd_send_string("oops NULL state?");
 8001178:	481c      	ldr	r0, [pc, #112]	; (80011ec <stateNULL+0x98>)
 800117a:	f7ff fe68 	bl	8000e4e <lcd_send_string>
		lcd_put_cur(1, 3);
 800117e:	2103      	movs	r1, #3
 8001180:	2001      	movs	r0, #1
 8001182:	f7ff fe08 	bl	8000d96 <lcd_put_cur>
		lcd_send_string("press ok");
 8001186:	481a      	ldr	r0, [pc, #104]	; (80011f0 <stateNULL+0x9c>)
 8001188:	f7ff fe61 	bl	8000e4e <lcd_send_string>
	}
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800118c:	2108      	movs	r1, #8
 800118e:	4819      	ldr	r0, [pc, #100]	; (80011f4 <stateNULL+0xa0>)
 8001190:	f001 fe88 	bl	8002ea4 <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 8001194:	20c8      	movs	r0, #200	; 0xc8
 8001196:	f001 fbcd 	bl	8002934 <HAL_Delay>
	if (BTN.ok == BTN_pressed)
 800119a:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <stateNULL+0xa4>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d105      	bne.n	80011b0 <stateNULL+0x5c>
	{
		BTN.ok = BTN_not_pressed;
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <stateNULL+0xa4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
		current_state = HOME_state;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <stateNULL+0x90>)
 80011ac:	2204      	movs	r2, #4
 80011ae:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.no == BTN_pressed) BTN.no = BTN_not_pressed;
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <stateNULL+0xa4>)
 80011b2:	785b      	ldrb	r3, [r3, #1]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d102      	bne.n	80011c0 <stateNULL+0x6c>
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <stateNULL+0xa4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	705a      	strb	r2, [r3, #1]
	if (BTN.left == BTN_pressed) BTN.left = BTN_not_pressed;
 80011c0:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <stateNULL+0xa4>)
 80011c2:	789b      	ldrb	r3, [r3, #2]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d102      	bne.n	80011d0 <stateNULL+0x7c>
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <stateNULL+0xa4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	709a      	strb	r2, [r3, #2]
	if (BTN.right == BTN_pressed) BTN.right = BTN_not_pressed;
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <stateNULL+0xa4>)
 80011d2:	78db      	ldrb	r3, [r3, #3]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d102      	bne.n	80011e0 <stateNULL+0x8c>
 80011da:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <stateNULL+0xa4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	70da      	strb	r2, [r3, #3]
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000000 	.word	0x20000000
 80011e8:	200002e8 	.word	0x200002e8
 80011ec:	080095a0 	.word	0x080095a0
 80011f0:	080095b4 	.word	0x080095b4
 80011f4:	48000400 	.word	0x48000400
 80011f8:	200002ec 	.word	0x200002ec

080011fc <stateBALANCE>:
void stateBALANCE(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 8001200:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <stateBALANCE+0x84>)
 8001202:	781a      	ldrb	r2, [r3, #0]
 8001204:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <stateBALANCE+0x88>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	429a      	cmp	r2, r3
 800120a:	d013      	beq.n	8001234 <stateBALANCE+0x38>
	{
		previous_state = current_state;
 800120c:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <stateBALANCE+0x84>)
 800120e:	781a      	ldrb	r2, [r3, #0]
 8001210:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <stateBALANCE+0x88>)
 8001212:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001214:	f7ff fda8 	bl	8000d68 <lcd_clear>
		lcd_put_cur(0, 0);
 8001218:	2100      	movs	r1, #0
 800121a:	2000      	movs	r0, #0
 800121c:	f7ff fdbb 	bl	8000d96 <lcd_put_cur>
		lcd_send_string("Balancing");
 8001220:	4819      	ldr	r0, [pc, #100]	; (8001288 <stateBALANCE+0x8c>)
 8001222:	f7ff fe14 	bl	8000e4e <lcd_send_string>
		lcd_put_cur(1, 0);
 8001226:	2100      	movs	r1, #0
 8001228:	2001      	movs	r0, #1
 800122a:	f7ff fdb4 	bl	8000d96 <lcd_put_cur>
		lcd_send_string("press no to exit");
 800122e:	4817      	ldr	r0, [pc, #92]	; (800128c <stateBALANCE+0x90>)
 8001230:	f7ff fe0d 	bl	8000e4e <lcd_send_string>
	}
//todo end this XD
	if (BTN.ok == BTN_pressed) BTN.ok = BTN_not_pressed;
 8001234:	4b16      	ldr	r3, [pc, #88]	; (8001290 <stateBALANCE+0x94>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b01      	cmp	r3, #1
 800123c:	d102      	bne.n	8001244 <stateBALANCE+0x48>
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <stateBALANCE+0x94>)
 8001240:	2200      	movs	r2, #0
 8001242:	701a      	strb	r2, [r3, #0]
	if (BTN.no == BTN_pressed)
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <stateBALANCE+0x94>)
 8001246:	785b      	ldrb	r3, [r3, #1]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b01      	cmp	r3, #1
 800124c:	d105      	bne.n	800125a <stateBALANCE+0x5e>
	{
		BTN.no = BTN_not_pressed;
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <stateBALANCE+0x94>)
 8001250:	2200      	movs	r2, #0
 8001252:	705a      	strb	r2, [r3, #1]
		current_state = HOME_state;
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <stateBALANCE+0x84>)
 8001256:	2204      	movs	r2, #4
 8001258:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.left == BTN_pressed) BTN.left = BTN_not_pressed;
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <stateBALANCE+0x94>)
 800125c:	789b      	ldrb	r3, [r3, #2]
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b01      	cmp	r3, #1
 8001262:	d102      	bne.n	800126a <stateBALANCE+0x6e>
 8001264:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <stateBALANCE+0x94>)
 8001266:	2200      	movs	r2, #0
 8001268:	709a      	strb	r2, [r3, #2]
	if (BTN.right == BTN_pressed) BTN.right = BTN_not_pressed;
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <stateBALANCE+0x94>)
 800126c:	78db      	ldrb	r3, [r3, #3]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b01      	cmp	r3, #1
 8001272:	d102      	bne.n	800127a <stateBALANCE+0x7e>
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <stateBALANCE+0x94>)
 8001276:	2200      	movs	r2, #0
 8001278:	70da      	strb	r2, [r3, #3]
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000000 	.word	0x20000000
 8001284:	200002e8 	.word	0x200002e8
 8001288:	080095c0 	.word	0x080095c0
 800128c:	080095cc 	.word	0x080095cc
 8001290:	200002ec 	.word	0x200002ec

08001294 <stateENCODER>:
void stateENCODER(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 8001298:	4b49      	ldr	r3, [pc, #292]	; (80013c0 <stateENCODER+0x12c>)
 800129a:	781a      	ldrb	r2, [r3, #0]
 800129c:	4b49      	ldr	r3, [pc, #292]	; (80013c4 <stateENCODER+0x130>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d024      	beq.n	80012ee <stateENCODER+0x5a>
	{
		previous_state = current_state;
 80012a4:	4b46      	ldr	r3, [pc, #280]	; (80013c0 <stateENCODER+0x12c>)
 80012a6:	781a      	ldrb	r2, [r3, #0]
 80012a8:	4b46      	ldr	r3, [pc, #280]	; (80013c4 <stateENCODER+0x130>)
 80012aa:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 80012ac:	f7ff fd5c 	bl	8000d68 <lcd_clear>
		lcd_put_cur(0, 0);
 80012b0:	2100      	movs	r1, #0
 80012b2:	2000      	movs	r0, #0
 80012b4:	f7ff fd6f 	bl	8000d96 <lcd_put_cur>
		lcd_send_string("ENCODER");
 80012b8:	4843      	ldr	r0, [pc, #268]	; (80013c8 <stateENCODER+0x134>)
 80012ba:	f7ff fdc8 	bl	8000e4e <lcd_send_string>
		lcd_put_cur(1, 15);
 80012be:	210f      	movs	r1, #15
 80012c0:	2001      	movs	r0, #1
 80012c2:	f7ff fd68 	bl	8000d96 <lcd_put_cur>
		lcd_send_data(LCD_RIGHT_ARROW);
 80012c6:	207e      	movs	r0, #126	; 0x7e
 80012c8:	f7ff fd1e 	bl	8000d08 <lcd_send_data>
		HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);	// encoder timer start
 80012cc:	213c      	movs	r1, #60	; 0x3c
 80012ce:	483f      	ldr	r0, [pc, #252]	; (80013cc <stateENCODER+0x138>)
 80012d0:	f004 f8ba 	bl	8005448 <HAL_TIM_Encoder_Start>
		HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);	// encoder timer start
 80012d4:	213c      	movs	r1, #60	; 0x3c
 80012d6:	483e      	ldr	r0, [pc, #248]	; (80013d0 <stateENCODER+0x13c>)
 80012d8:	f004 f8b6 	bl	8005448 <HAL_TIM_Encoder_Start>
		TIM1->CNT = 32767;	// wartosc rejestru na srodek ustawiona
 80012dc:	4b3d      	ldr	r3, [pc, #244]	; (80013d4 <stateENCODER+0x140>)
 80012de:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80012e2:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->CNT = 32767;
 80012e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012e8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24
	}
	// todo cyclic interrupt needed 10ms like
	encd_left = TIM2->CNT;
 80012ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	4b38      	ldr	r3, [pc, #224]	; (80013d8 <stateENCODER+0x144>)
 80012f8:	801a      	strh	r2, [r3, #0]
	encd_right = TIM1->CNT;
 80012fa:	4b36      	ldr	r3, [pc, #216]	; (80013d4 <stateENCODER+0x140>)
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fe:	b29a      	uxth	r2, r3
 8001300:	4b36      	ldr	r3, [pc, #216]	; (80013dc <stateENCODER+0x148>)
 8001302:	801a      	strh	r2, [r3, #0]

	//encd_right = TIM2->CNT;
	if (encd_left != old_encd_left || encd_right != old_encd_right)
 8001304:	4b34      	ldr	r3, [pc, #208]	; (80013d8 <stateENCODER+0x144>)
 8001306:	881a      	ldrh	r2, [r3, #0]
 8001308:	4b35      	ldr	r3, [pc, #212]	; (80013e0 <stateENCODER+0x14c>)
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	429a      	cmp	r2, r3
 800130e:	d105      	bne.n	800131c <stateENCODER+0x88>
 8001310:	4b32      	ldr	r3, [pc, #200]	; (80013dc <stateENCODER+0x148>)
 8001312:	881a      	ldrh	r2, [r3, #0]
 8001314:	4b33      	ldr	r3, [pc, #204]	; (80013e4 <stateENCODER+0x150>)
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	429a      	cmp	r2, r3
 800131a:	d023      	beq.n	8001364 <stateENCODER+0xd0>
	{
		old_encd_left = encd_left;
 800131c:	4b2e      	ldr	r3, [pc, #184]	; (80013d8 <stateENCODER+0x144>)
 800131e:	881a      	ldrh	r2, [r3, #0]
 8001320:	4b2f      	ldr	r3, [pc, #188]	; (80013e0 <stateENCODER+0x14c>)
 8001322:	801a      	strh	r2, [r3, #0]
		old_encd_right = encd_right;
 8001324:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <stateENCODER+0x148>)
 8001326:	881a      	ldrh	r2, [r3, #0]
 8001328:	4b2e      	ldr	r3, [pc, #184]	; (80013e4 <stateENCODER+0x150>)
 800132a:	801a      	strh	r2, [r3, #0]
		lcd_put_cur(1, 1);
 800132c:	2101      	movs	r1, #1
 800132e:	2001      	movs	r0, #1
 8001330:	f7ff fd31 	bl	8000d96 <lcd_put_cur>
		sprintf(MSG, "%+06d", encd_left);
 8001334:	4b28      	ldr	r3, [pc, #160]	; (80013d8 <stateENCODER+0x144>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	492b      	ldr	r1, [pc, #172]	; (80013e8 <stateENCODER+0x154>)
 800133c:	482b      	ldr	r0, [pc, #172]	; (80013ec <stateENCODER+0x158>)
 800133e:	f005 fb4f 	bl	80069e0 <siprintf>
		lcd_send_string(MSG);
 8001342:	482a      	ldr	r0, [pc, #168]	; (80013ec <stateENCODER+0x158>)
 8001344:	f7ff fd83 	bl	8000e4e <lcd_send_string>

		lcd_put_cur(1, 8);
 8001348:	2108      	movs	r1, #8
 800134a:	2001      	movs	r0, #1
 800134c:	f7ff fd23 	bl	8000d96 <lcd_put_cur>
		sprintf(MSG, "%+06d", encd_right);
 8001350:	4b22      	ldr	r3, [pc, #136]	; (80013dc <stateENCODER+0x148>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	4924      	ldr	r1, [pc, #144]	; (80013e8 <stateENCODER+0x154>)
 8001358:	4824      	ldr	r0, [pc, #144]	; (80013ec <stateENCODER+0x158>)
 800135a:	f005 fb41 	bl	80069e0 <siprintf>
		lcd_send_string(MSG);
 800135e:	4823      	ldr	r0, [pc, #140]	; (80013ec <stateENCODER+0x158>)
 8001360:	f7ff fd75 	bl	8000e4e <lcd_send_string>
	}

	if (BTN.ok == BTN_pressed)
 8001364:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <stateENCODER+0x15c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b01      	cmp	r3, #1
 800136c:	d102      	bne.n	8001374 <stateENCODER+0xe0>
	{
		BTN.ok = BTN_not_pressed;
 800136e:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <stateENCODER+0x15c>)
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.no == BTN_pressed)
 8001374:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <stateENCODER+0x15c>)
 8001376:	785b      	ldrb	r3, [r3, #1]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b01      	cmp	r3, #1
 800137c:	d102      	bne.n	8001384 <stateENCODER+0xf0>
	{
		BTN.no = BTN_not_pressed;
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <stateENCODER+0x15c>)
 8001380:	2200      	movs	r2, #0
 8001382:	705a      	strb	r2, [r3, #1]
	}
	if (BTN.left == BTN_pressed)
 8001384:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <stateENCODER+0x15c>)
 8001386:	789b      	ldrb	r3, [r3, #2]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b01      	cmp	r3, #1
 800138c:	d102      	bne.n	8001394 <stateENCODER+0x100>
	{
		BTN.left = BTN_not_pressed;
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <stateENCODER+0x15c>)
 8001390:	2200      	movs	r2, #0
 8001392:	709a      	strb	r2, [r3, #2]
	}
	if (BTN.right == BTN_pressed)
 8001394:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <stateENCODER+0x15c>)
 8001396:	78db      	ldrb	r3, [r3, #3]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b01      	cmp	r3, #1
 800139c:	d10d      	bne.n	80013ba <stateENCODER+0x126>
	{
		BTN.right = BTN_not_pressed;
 800139e:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <stateENCODER+0x15c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	70da      	strb	r2, [r3, #3]
		HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 80013a4:	213c      	movs	r1, #60	; 0x3c
 80013a6:	4809      	ldr	r0, [pc, #36]	; (80013cc <stateENCODER+0x138>)
 80013a8:	f004 f8dc 	bl	8005564 <HAL_TIM_Encoder_Stop>
		HAL_TIM_Encoder_Stop(&htim2, TIM_CHANNEL_ALL);
 80013ac:	213c      	movs	r1, #60	; 0x3c
 80013ae:	4808      	ldr	r0, [pc, #32]	; (80013d0 <stateENCODER+0x13c>)
 80013b0:	f004 f8d8 	bl	8005564 <HAL_TIM_Encoder_Stop>
		current_state = IMU_DISPLAY_state;
 80013b4:	4b02      	ldr	r3, [pc, #8]	; (80013c0 <stateENCODER+0x12c>)
 80013b6:	2203      	movs	r2, #3
 80013b8:	701a      	strb	r2, [r3, #0]
	}
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000000 	.word	0x20000000
 80013c4:	200002e8 	.word	0x200002e8
 80013c8:	080095e0 	.word	0x080095e0
 80013cc:	20000378 	.word	0x20000378
 80013d0:	200003c4 	.word	0x200003c4
 80013d4:	40012c00 	.word	0x40012c00
 80013d8:	20000362 	.word	0x20000362
 80013dc:	20000366 	.word	0x20000366
 80013e0:	20000360 	.word	0x20000360
 80013e4:	20000364 	.word	0x20000364
 80013e8:	080095e8 	.word	0x080095e8
 80013ec:	200002f0 	.word	0x200002f0
 80013f0:	200002ec 	.word	0x200002ec

080013f4 <stateIMU>:
void stateIMU(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 80013fa:	4b34      	ldr	r3, [pc, #208]	; (80014cc <stateIMU+0xd8>)
 80013fc:	781a      	ldrb	r2, [r3, #0]
 80013fe:	4b34      	ldr	r3, [pc, #208]	; (80014d0 <stateIMU+0xdc>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	d021      	beq.n	800144a <stateIMU+0x56>
	{
		previous_state = current_state;
 8001406:	4b31      	ldr	r3, [pc, #196]	; (80014cc <stateIMU+0xd8>)
 8001408:	781a      	ldrb	r2, [r3, #0]
 800140a:	4b31      	ldr	r3, [pc, #196]	; (80014d0 <stateIMU+0xdc>)
 800140c:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 800140e:	f7ff fcab 	bl	8000d68 <lcd_clear>
		lcd_put_cur(0, 0);
 8001412:	2100      	movs	r1, #0
 8001414:	2000      	movs	r0, #0
 8001416:	f7ff fcbe 	bl	8000d96 <lcd_put_cur>
		lcd_send_string("IMU");
 800141a:	482e      	ldr	r0, [pc, #184]	; (80014d4 <stateIMU+0xe0>)
 800141c:	f7ff fd17 	bl	8000e4e <lcd_send_string>
		lcd_put_cur(1, 0);
 8001420:	2100      	movs	r1, #0
 8001422:	2001      	movs	r0, #1
 8001424:	f7ff fcb7 	bl	8000d96 <lcd_put_cur>
		lcd_send_data(LCD_LEFT_ARROW);
 8001428:	207f      	movs	r0, #127	; 0x7f
 800142a:	f7ff fc6d 	bl	8000d08 <lcd_send_data>
		lcd_put_cur(1, 15);
 800142e:	210f      	movs	r1, #15
 8001430:	2001      	movs	r0, #1
 8001432:	f7ff fcb0 	bl	8000d96 <lcd_put_cur>
		lcd_send_data(LCD_RIGHT_ARROW);
 8001436:	207e      	movs	r0, #126	; 0x7e
 8001438:	f7ff fc66 	bl	8000d08 <lcd_send_data>
		lcd_put_cur(0, 10);
 800143c:	210a      	movs	r1, #10
 800143e:	2000      	movs	r0, #0
 8001440:	f7ff fca9 	bl	8000d96 <lcd_put_cur>
		lcd_send_data(LCD_DEGREE_SYMBOL);
 8001444:	20df      	movs	r0, #223	; 0xdf
 8001446:	f7ff fc5f 	bl	8000d08 <lcd_send_data>
	}

	// todo cyclic interrupt needed 10ms like
	// MPU READ ANGLE
	MPU6050_Read_All(&hi2c1, &MPU6050);
 800144a:	4923      	ldr	r1, [pc, #140]	; (80014d8 <stateIMU+0xe4>)
 800144c:	4823      	ldr	r0, [pc, #140]	; (80014dc <stateIMU+0xe8>)
 800144e:	f000 fb4f 	bl	8001af0 <MPU6050_Read_All>
	double angle = MPU6050.KalmanAngleX;
 8001452:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <stateIMU+0xe4>)
 8001454:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001458:	e9c7 2300 	strd	r2, r3, [r7]
	// MPU DISPLAY ANGLE
	lcd_put_cur(0, 4);
 800145c:	2104      	movs	r1, #4
 800145e:	2000      	movs	r0, #0
 8001460:	f7ff fc99 	bl	8000d96 <lcd_put_cur>
	sprintf(MSG, "%+06.2f", angle);
 8001464:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001468:	491d      	ldr	r1, [pc, #116]	; (80014e0 <stateIMU+0xec>)
 800146a:	481e      	ldr	r0, [pc, #120]	; (80014e4 <stateIMU+0xf0>)
 800146c:	f005 fab8 	bl	80069e0 <siprintf>
	lcd_send_string(MSG);
 8001470:	481c      	ldr	r0, [pc, #112]	; (80014e4 <stateIMU+0xf0>)
 8001472:	f7ff fcec 	bl	8000e4e <lcd_send_string>


	if (BTN.ok == BTN_pressed)
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <stateIMU+0xf4>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b01      	cmp	r3, #1
 800147e:	d102      	bne.n	8001486 <stateIMU+0x92>
	{
		BTN.ok = BTN_not_pressed;
 8001480:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <stateIMU+0xf4>)
 8001482:	2200      	movs	r2, #0
 8001484:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.no == BTN_pressed)
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <stateIMU+0xf4>)
 8001488:	785b      	ldrb	r3, [r3, #1]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b01      	cmp	r3, #1
 800148e:	d102      	bne.n	8001496 <stateIMU+0xa2>
	{
		BTN.no = BTN_not_pressed;
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <stateIMU+0xf4>)
 8001492:	2200      	movs	r2, #0
 8001494:	705a      	strb	r2, [r3, #1]
	}
	if (BTN.left == BTN_pressed)
 8001496:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <stateIMU+0xf4>)
 8001498:	789b      	ldrb	r3, [r3, #2]
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b01      	cmp	r3, #1
 800149e:	d105      	bne.n	80014ac <stateIMU+0xb8>
	{
		BTN.left = BTN_not_pressed;
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <stateIMU+0xf4>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	709a      	strb	r2, [r3, #2]
		current_state = ENCODER_DISPLAY_state;
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <stateIMU+0xd8>)
 80014a8:	2202      	movs	r2, #2
 80014aa:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.right == BTN_pressed)
 80014ac:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <stateIMU+0xf4>)
 80014ae:	78db      	ldrb	r3, [r3, #3]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d105      	bne.n	80014c2 <stateIMU+0xce>
	{
		BTN.right = BTN_not_pressed;
 80014b6:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <stateIMU+0xf4>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	70da      	strb	r2, [r3, #3]
		current_state = HOME_state;
 80014bc:	4b03      	ldr	r3, [pc, #12]	; (80014cc <stateIMU+0xd8>)
 80014be:	2204      	movs	r2, #4
 80014c0:	701a      	strb	r2, [r3, #0]
	}
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000000 	.word	0x20000000
 80014d0:	200002e8 	.word	0x200002e8
 80014d4:	080095f0 	.word	0x080095f0
 80014d8:	20000308 	.word	0x20000308
 80014dc:	20000294 	.word	0x20000294
 80014e0:	080095f4 	.word	0x080095f4
 80014e4:	200002f0 	.word	0x200002f0
 80014e8:	200002ec 	.word	0x200002ec

080014ec <stateHOME>:
void stateHOME(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 80014f0:	4b29      	ldr	r3, [pc, #164]	; (8001598 <stateHOME+0xac>)
 80014f2:	781a      	ldrb	r2, [r3, #0]
 80014f4:	4b29      	ldr	r3, [pc, #164]	; (800159c <stateHOME+0xb0>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d01a      	beq.n	8001532 <stateHOME+0x46>
	{
		previous_state = current_state;
 80014fc:	4b26      	ldr	r3, [pc, #152]	; (8001598 <stateHOME+0xac>)
 80014fe:	781a      	ldrb	r2, [r3, #0]
 8001500:	4b26      	ldr	r3, [pc, #152]	; (800159c <stateHOME+0xb0>)
 8001502:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001504:	f7ff fc30 	bl	8000d68 <lcd_clear>
		lcd_put_cur(0, 0);
 8001508:	2100      	movs	r1, #0
 800150a:	2000      	movs	r0, #0
 800150c:	f7ff fc43 	bl	8000d96 <lcd_put_cur>
		lcd_send_string("Home");
 8001510:	4823      	ldr	r0, [pc, #140]	; (80015a0 <stateHOME+0xb4>)
 8001512:	f7ff fc9c 	bl	8000e4e <lcd_send_string>
		lcd_put_cur(1, 0);
 8001516:	2100      	movs	r1, #0
 8001518:	2001      	movs	r0, #1
 800151a:	f7ff fc3c 	bl	8000d96 <lcd_put_cur>
		lcd_send_data(LCD_LEFT_ARROW);
 800151e:	207f      	movs	r0, #127	; 0x7f
 8001520:	f7ff fbf2 	bl	8000d08 <lcd_send_data>
		lcd_put_cur(1, 15);
 8001524:	210f      	movs	r1, #15
 8001526:	2001      	movs	r0, #1
 8001528:	f7ff fc35 	bl	8000d96 <lcd_put_cur>
		lcd_send_data(LCD_RIGHT_ARROW);
 800152c:	207e      	movs	r0, #126	; 0x7e
 800152e:	f7ff fbeb 	bl	8000d08 <lcd_send_data>
	}

	HAL_Delay(200);
 8001532:	20c8      	movs	r0, #200	; 0xc8
 8001534:	f001 f9fe 	bl	8002934 <HAL_Delay>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001538:	2108      	movs	r1, #8
 800153a:	481a      	ldr	r0, [pc, #104]	; (80015a4 <stateHOME+0xb8>)
 800153c:	f001 fcb2 	bl	8002ea4 <HAL_GPIO_TogglePin>

	if (BTN.ok == BTN_pressed)
 8001540:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <stateHOME+0xbc>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b01      	cmp	r3, #1
 8001548:	d105      	bne.n	8001556 <stateHOME+0x6a>
	{
		BTN.ok = BTN_not_pressed;
 800154a:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <stateHOME+0xbc>)
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
		current_state = BALANCE_state;
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <stateHOME+0xac>)
 8001552:	2201      	movs	r2, #1
 8001554:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.no == BTN_pressed)
 8001556:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <stateHOME+0xbc>)
 8001558:	785b      	ldrb	r3, [r3, #1]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b01      	cmp	r3, #1
 800155e:	d102      	bne.n	8001566 <stateHOME+0x7a>
	{
		BTN.no = BTN_not_pressed;
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <stateHOME+0xbc>)
 8001562:	2200      	movs	r2, #0
 8001564:	705a      	strb	r2, [r3, #1]
	}
	if (BTN.left == BTN_pressed)
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <stateHOME+0xbc>)
 8001568:	789b      	ldrb	r3, [r3, #2]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b01      	cmp	r3, #1
 800156e:	d105      	bne.n	800157c <stateHOME+0x90>
	{
		BTN.left = BTN_not_pressed;
 8001570:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <stateHOME+0xbc>)
 8001572:	2200      	movs	r2, #0
 8001574:	709a      	strb	r2, [r3, #2]
		current_state = IMU_DISPLAY_state;
 8001576:	4b08      	ldr	r3, [pc, #32]	; (8001598 <stateHOME+0xac>)
 8001578:	2203      	movs	r2, #3
 800157a:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.right == BTN_pressed)
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <stateHOME+0xbc>)
 800157e:	78db      	ldrb	r3, [r3, #3]
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b01      	cmp	r3, #1
 8001584:	d105      	bne.n	8001592 <stateHOME+0xa6>
	{
		BTN.right = BTN_not_pressed;
 8001586:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <stateHOME+0xbc>)
 8001588:	2200      	movs	r2, #0
 800158a:	70da      	strb	r2, [r3, #3]
		current_state = EEPROM_RW_state;
 800158c:	4b02      	ldr	r3, [pc, #8]	; (8001598 <stateHOME+0xac>)
 800158e:	2205      	movs	r2, #5
 8001590:	701a      	strb	r2, [r3, #0]
	}
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000000 	.word	0x20000000
 800159c:	200002e8 	.word	0x200002e8
 80015a0:	080095fc 	.word	0x080095fc
 80015a4:	48000400 	.word	0x48000400
 80015a8:	200002ec 	.word	0x200002ec

080015ac <stateEEPROM>:
void stateEEPROM(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 80015b0:	4b44      	ldr	r3, [pc, #272]	; (80016c4 <stateEEPROM+0x118>)
 80015b2:	781a      	ldrb	r2, [r3, #0]
 80015b4:	4b44      	ldr	r3, [pc, #272]	; (80016c8 <stateEEPROM+0x11c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d022      	beq.n	8001602 <stateEEPROM+0x56>
	{
		previous_state = current_state;
 80015bc:	4b41      	ldr	r3, [pc, #260]	; (80016c4 <stateEEPROM+0x118>)
 80015be:	781a      	ldrb	r2, [r3, #0]
 80015c0:	4b41      	ldr	r3, [pc, #260]	; (80016c8 <stateEEPROM+0x11c>)
 80015c2:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 80015c4:	f7ff fbd0 	bl	8000d68 <lcd_clear>
		lcd_put_cur(0, 0);
 80015c8:	2100      	movs	r1, #0
 80015ca:	2000      	movs	r0, #0
 80015cc:	f7ff fbe3 	bl	8000d96 <lcd_put_cur>
		lcd_send_string("EEPROM");
 80015d0:	483e      	ldr	r0, [pc, #248]	; (80016cc <stateEEPROM+0x120>)
 80015d2:	f7ff fc3c 	bl	8000e4e <lcd_send_string>
		lcd_put_cur(1, 0);
 80015d6:	2100      	movs	r1, #0
 80015d8:	2001      	movs	r0, #1
 80015da:	f7ff fbdc 	bl	8000d96 <lcd_put_cur>
		lcd_send_data(LCD_LEFT_ARROW);
 80015de:	207f      	movs	r0, #127	; 0x7f
 80015e0:	f7ff fb92 	bl	8000d08 <lcd_send_data>
		lcd_put_cur(1, 15);
 80015e4:	210f      	movs	r1, #15
 80015e6:	2001      	movs	r0, #1
 80015e8:	f7ff fbd5 	bl	8000d96 <lcd_put_cur>
		lcd_send_data(LCD_RIGHT_ARROW);
 80015ec:	207e      	movs	r0, #126	; 0x7e
 80015ee:	f7ff fb8b 	bl	8000d08 <lcd_send_data>

		HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80015f2:	2100      	movs	r1, #0
 80015f4:	4836      	ldr	r0, [pc, #216]	; (80016d0 <stateEEPROM+0x124>)
 80015f6:	f003 fd1b 	bl	8005030 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 80015fa:	2104      	movs	r1, #4
 80015fc:	4834      	ldr	r0, [pc, #208]	; (80016d0 <stateEEPROM+0x124>)
 80015fe:	f003 fd17 	bl	8005030 <HAL_TIM_PWM_Start>
	}

	lcd_put_cur(1, 3);
 8001602:	2103      	movs	r1, #3
 8001604:	2001      	movs	r0, #1
 8001606:	f7ff fbc6 	bl	8000d96 <lcd_put_cur>
	sprintf(MSG, "%+03d", duty_left);
 800160a:	4b32      	ldr	r3, [pc, #200]	; (80016d4 <stateEEPROM+0x128>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	4931      	ldr	r1, [pc, #196]	; (80016d8 <stateEEPROM+0x12c>)
 8001612:	4832      	ldr	r0, [pc, #200]	; (80016dc <stateEEPROM+0x130>)
 8001614:	f005 f9e4 	bl	80069e0 <siprintf>
	lcd_send_string(MSG);
 8001618:	4830      	ldr	r0, [pc, #192]	; (80016dc <stateEEPROM+0x130>)
 800161a:	f7ff fc18 	bl	8000e4e <lcd_send_string>

	if (BTN.ok == BTN_pressed)
 800161e:	4b30      	ldr	r3, [pc, #192]	; (80016e0 <stateEEPROM+0x134>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b01      	cmp	r3, #1
 8001626:	d10f      	bne.n	8001648 <stateEEPROM+0x9c>
	{
		BTN.ok = BTN_not_pressed;
 8001628:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <stateEEPROM+0x134>)
 800162a:	2200      	movs	r2, #0
 800162c:	701a      	strb	r2, [r3, #0]
		duty_left++;
 800162e:	4b29      	ldr	r3, [pc, #164]	; (80016d4 <stateEEPROM+0x128>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	3301      	adds	r3, #1
 8001634:	4a27      	ldr	r2, [pc, #156]	; (80016d4 <stateEEPROM+0x128>)
 8001636:	6013      	str	r3, [r2, #0]
		//duty_right++;
		setMotors(duty_left, duty_right, 0, 0);
 8001638:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <stateEEPROM+0x128>)
 800163a:	6818      	ldr	r0, [r3, #0]
 800163c:	4b29      	ldr	r3, [pc, #164]	; (80016e4 <stateEEPROM+0x138>)
 800163e:	6819      	ldr	r1, [r3, #0]
 8001640:	2300      	movs	r3, #0
 8001642:	2200      	movs	r2, #0
 8001644:	f000 f942 	bl	80018cc <setMotors>
	}
	if (BTN.no == BTN_pressed)
 8001648:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <stateEEPROM+0x134>)
 800164a:	785b      	ldrb	r3, [r3, #1]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b01      	cmp	r3, #1
 8001650:	d10f      	bne.n	8001672 <stateEEPROM+0xc6>
	{
		BTN.no = BTN_not_pressed;
 8001652:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <stateEEPROM+0x134>)
 8001654:	2200      	movs	r2, #0
 8001656:	705a      	strb	r2, [r3, #1]
		duty_left--;
 8001658:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <stateEEPROM+0x128>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3b01      	subs	r3, #1
 800165e:	4a1d      	ldr	r2, [pc, #116]	; (80016d4 <stateEEPROM+0x128>)
 8001660:	6013      	str	r3, [r2, #0]
		//duty_right--;
		setMotors(duty_left, duty_right, 0, 0);
 8001662:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <stateEEPROM+0x128>)
 8001664:	6818      	ldr	r0, [r3, #0]
 8001666:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <stateEEPROM+0x138>)
 8001668:	6819      	ldr	r1, [r3, #0]
 800166a:	2300      	movs	r3, #0
 800166c:	2200      	movs	r2, #0
 800166e:	f000 f92d 	bl	80018cc <setMotors>
	}
	if (BTN.left == BTN_pressed)
 8001672:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <stateEEPROM+0x134>)
 8001674:	789b      	ldrb	r3, [r3, #2]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b01      	cmp	r3, #1
 800167a:	d10d      	bne.n	8001698 <stateEEPROM+0xec>
	{
		BTN.left = BTN_not_pressed;
 800167c:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <stateEEPROM+0x134>)
 800167e:	2200      	movs	r2, #0
 8001680:	709a      	strb	r2, [r3, #2]
		HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);	// test
 8001682:	2100      	movs	r1, #0
 8001684:	4812      	ldr	r0, [pc, #72]	; (80016d0 <stateEEPROM+0x124>)
 8001686:	f003 fdb1 	bl	80051ec <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	// test
 800168a:	2104      	movs	r1, #4
 800168c:	4810      	ldr	r0, [pc, #64]	; (80016d0 <stateEEPROM+0x124>)
 800168e:	f003 fdad 	bl	80051ec <HAL_TIM_PWM_Stop>
		current_state = HOME_state;
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <stateEEPROM+0x118>)
 8001694:	2204      	movs	r2, #4
 8001696:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.right == BTN_pressed)
 8001698:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <stateEEPROM+0x134>)
 800169a:	78db      	ldrb	r3, [r3, #3]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d10d      	bne.n	80016be <stateEEPROM+0x112>
	{
		BTN.right = BTN_not_pressed;
 80016a2:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <stateEEPROM+0x134>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	70da      	strb	r2, [r3, #3]
		HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);	//test
 80016a8:	2100      	movs	r1, #0
 80016aa:	4809      	ldr	r0, [pc, #36]	; (80016d0 <stateEEPROM+0x124>)
 80016ac:	f003 fd9e 	bl	80051ec <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//test
 80016b0:	2104      	movs	r1, #4
 80016b2:	4807      	ldr	r0, [pc, #28]	; (80016d0 <stateEEPROM+0x124>)
 80016b4:	f003 fd9a 	bl	80051ec <HAL_TIM_PWM_Stop>
		current_state = KP_state;
 80016b8:	4b02      	ldr	r3, [pc, #8]	; (80016c4 <stateEEPROM+0x118>)
 80016ba:	2206      	movs	r2, #6
 80016bc:	701a      	strb	r2, [r3, #0]
	}
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000000 	.word	0x20000000
 80016c8:	200002e8 	.word	0x200002e8
 80016cc:	08009604 	.word	0x08009604
 80016d0:	20000410 	.word	0x20000410
 80016d4:	20000368 	.word	0x20000368
 80016d8:	0800960c 	.word	0x0800960c
 80016dc:	200002f0 	.word	0x200002f0
 80016e0:	200002ec 	.word	0x200002ec
 80016e4:	2000036c 	.word	0x2000036c

080016e8 <stateKP>:
void stateKP(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 80016ec:	4b24      	ldr	r3, [pc, #144]	; (8001780 <stateKP+0x98>)
 80016ee:	781a      	ldrb	r2, [r3, #0]
 80016f0:	4b24      	ldr	r3, [pc, #144]	; (8001784 <stateKP+0x9c>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d01a      	beq.n	800172e <stateKP+0x46>
	{
		previous_state = current_state;
 80016f8:	4b21      	ldr	r3, [pc, #132]	; (8001780 <stateKP+0x98>)
 80016fa:	781a      	ldrb	r2, [r3, #0]
 80016fc:	4b21      	ldr	r3, [pc, #132]	; (8001784 <stateKP+0x9c>)
 80016fe:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001700:	f7ff fb32 	bl	8000d68 <lcd_clear>
		lcd_put_cur(0, 0);
 8001704:	2100      	movs	r1, #0
 8001706:	2000      	movs	r0, #0
 8001708:	f7ff fb45 	bl	8000d96 <lcd_put_cur>
		lcd_send_string("KP");
 800170c:	481e      	ldr	r0, [pc, #120]	; (8001788 <stateKP+0xa0>)
 800170e:	f7ff fb9e 	bl	8000e4e <lcd_send_string>
		lcd_put_cur(1, 0);
 8001712:	2100      	movs	r1, #0
 8001714:	2001      	movs	r0, #1
 8001716:	f7ff fb3e 	bl	8000d96 <lcd_put_cur>
		lcd_send_data(LCD_LEFT_ARROW);
 800171a:	207f      	movs	r0, #127	; 0x7f
 800171c:	f7ff faf4 	bl	8000d08 <lcd_send_data>
		lcd_put_cur(1, 15);
 8001720:	210f      	movs	r1, #15
 8001722:	2001      	movs	r0, #1
 8001724:	f7ff fb37 	bl	8000d96 <lcd_put_cur>
		lcd_send_data(LCD_RIGHT_ARROW);
 8001728:	207e      	movs	r0, #126	; 0x7e
 800172a:	f7ff faed 	bl	8000d08 <lcd_send_data>
	}

	if (BTN.ok == BTN_pressed)
 800172e:	4b17      	ldr	r3, [pc, #92]	; (800178c <stateKP+0xa4>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b01      	cmp	r3, #1
 8001736:	d102      	bne.n	800173e <stateKP+0x56>
	{
		BTN.ok = BTN_not_pressed;
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <stateKP+0xa4>)
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.no == BTN_pressed)
 800173e:	4b13      	ldr	r3, [pc, #76]	; (800178c <stateKP+0xa4>)
 8001740:	785b      	ldrb	r3, [r3, #1]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b01      	cmp	r3, #1
 8001746:	d102      	bne.n	800174e <stateKP+0x66>
	{
		BTN.no = BTN_not_pressed;
 8001748:	4b10      	ldr	r3, [pc, #64]	; (800178c <stateKP+0xa4>)
 800174a:	2200      	movs	r2, #0
 800174c:	705a      	strb	r2, [r3, #1]
	}
	if (BTN.left == BTN_pressed)
 800174e:	4b0f      	ldr	r3, [pc, #60]	; (800178c <stateKP+0xa4>)
 8001750:	789b      	ldrb	r3, [r3, #2]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b01      	cmp	r3, #1
 8001756:	d105      	bne.n	8001764 <stateKP+0x7c>
	{
		BTN.left = BTN_not_pressed;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <stateKP+0xa4>)
 800175a:	2200      	movs	r2, #0
 800175c:	709a      	strb	r2, [r3, #2]
		current_state = EEPROM_RW_state;
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <stateKP+0x98>)
 8001760:	2205      	movs	r2, #5
 8001762:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.right == BTN_pressed)
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <stateKP+0xa4>)
 8001766:	78db      	ldrb	r3, [r3, #3]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b01      	cmp	r3, #1
 800176c:	d105      	bne.n	800177a <stateKP+0x92>
	{
		BTN.right = BTN_not_pressed;
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <stateKP+0xa4>)
 8001770:	2200      	movs	r2, #0
 8001772:	70da      	strb	r2, [r3, #3]
		current_state = KI_state;
 8001774:	4b02      	ldr	r3, [pc, #8]	; (8001780 <stateKP+0x98>)
 8001776:	2207      	movs	r2, #7
 8001778:	701a      	strb	r2, [r3, #0]
	}
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000000 	.word	0x20000000
 8001784:	200002e8 	.word	0x200002e8
 8001788:	08009614 	.word	0x08009614
 800178c:	200002ec 	.word	0x200002ec

08001790 <stateKI>:
void stateKI(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 8001794:	4b24      	ldr	r3, [pc, #144]	; (8001828 <stateKI+0x98>)
 8001796:	781a      	ldrb	r2, [r3, #0]
 8001798:	4b24      	ldr	r3, [pc, #144]	; (800182c <stateKI+0x9c>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d01a      	beq.n	80017d6 <stateKI+0x46>
	{
		previous_state = current_state;
 80017a0:	4b21      	ldr	r3, [pc, #132]	; (8001828 <stateKI+0x98>)
 80017a2:	781a      	ldrb	r2, [r3, #0]
 80017a4:	4b21      	ldr	r3, [pc, #132]	; (800182c <stateKI+0x9c>)
 80017a6:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 80017a8:	f7ff fade 	bl	8000d68 <lcd_clear>
		lcd_put_cur(0, 0);
 80017ac:	2100      	movs	r1, #0
 80017ae:	2000      	movs	r0, #0
 80017b0:	f7ff faf1 	bl	8000d96 <lcd_put_cur>
		lcd_send_string("KI");
 80017b4:	481e      	ldr	r0, [pc, #120]	; (8001830 <stateKI+0xa0>)
 80017b6:	f7ff fb4a 	bl	8000e4e <lcd_send_string>
		lcd_put_cur(1, 0);
 80017ba:	2100      	movs	r1, #0
 80017bc:	2001      	movs	r0, #1
 80017be:	f7ff faea 	bl	8000d96 <lcd_put_cur>
		lcd_send_data(LCD_LEFT_ARROW);
 80017c2:	207f      	movs	r0, #127	; 0x7f
 80017c4:	f7ff faa0 	bl	8000d08 <lcd_send_data>
		lcd_put_cur(1, 15);
 80017c8:	210f      	movs	r1, #15
 80017ca:	2001      	movs	r0, #1
 80017cc:	f7ff fae3 	bl	8000d96 <lcd_put_cur>
		lcd_send_data(LCD_RIGHT_ARROW);
 80017d0:	207e      	movs	r0, #126	; 0x7e
 80017d2:	f7ff fa99 	bl	8000d08 <lcd_send_data>
	}

	if (BTN.ok == BTN_pressed)
 80017d6:	4b17      	ldr	r3, [pc, #92]	; (8001834 <stateKI+0xa4>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d102      	bne.n	80017e6 <stateKI+0x56>
	{
		BTN.ok = BTN_not_pressed;
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <stateKI+0xa4>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.no == BTN_pressed)
 80017e6:	4b13      	ldr	r3, [pc, #76]	; (8001834 <stateKI+0xa4>)
 80017e8:	785b      	ldrb	r3, [r3, #1]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d102      	bne.n	80017f6 <stateKI+0x66>
	{
		BTN.no = BTN_not_pressed;
 80017f0:	4b10      	ldr	r3, [pc, #64]	; (8001834 <stateKI+0xa4>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	705a      	strb	r2, [r3, #1]
	}
	if (BTN.left == BTN_pressed)
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <stateKI+0xa4>)
 80017f8:	789b      	ldrb	r3, [r3, #2]
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d105      	bne.n	800180c <stateKI+0x7c>
	{
		BTN.left = BTN_not_pressed;
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <stateKI+0xa4>)
 8001802:	2200      	movs	r2, #0
 8001804:	709a      	strb	r2, [r3, #2]
		current_state = KP_state;
 8001806:	4b08      	ldr	r3, [pc, #32]	; (8001828 <stateKI+0x98>)
 8001808:	2206      	movs	r2, #6
 800180a:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.right == BTN_pressed)
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <stateKI+0xa4>)
 800180e:	78db      	ldrb	r3, [r3, #3]
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b01      	cmp	r3, #1
 8001814:	d105      	bne.n	8001822 <stateKI+0x92>
	{
		BTN.right = BTN_not_pressed;
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <stateKI+0xa4>)
 8001818:	2200      	movs	r2, #0
 800181a:	70da      	strb	r2, [r3, #3]
		current_state = KD_state;
 800181c:	4b02      	ldr	r3, [pc, #8]	; (8001828 <stateKI+0x98>)
 800181e:	2208      	movs	r2, #8
 8001820:	701a      	strb	r2, [r3, #0]
	}
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000000 	.word	0x20000000
 800182c:	200002e8 	.word	0x200002e8
 8001830:	08009618 	.word	0x08009618
 8001834:	200002ec 	.word	0x200002ec

08001838 <stateKD>:
void stateKD(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
	if (current_state != previous_state)
 800183c:	4b1f      	ldr	r3, [pc, #124]	; (80018bc <stateKD+0x84>)
 800183e:	781a      	ldrb	r2, [r3, #0]
 8001840:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <stateKD+0x88>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	429a      	cmp	r2, r3
 8001846:	d013      	beq.n	8001870 <stateKD+0x38>
	{
		previous_state = current_state;
 8001848:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <stateKD+0x84>)
 800184a:	781a      	ldrb	r2, [r3, #0]
 800184c:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <stateKD+0x88>)
 800184e:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001850:	f7ff fa8a 	bl	8000d68 <lcd_clear>
		lcd_put_cur(0, 0);
 8001854:	2100      	movs	r1, #0
 8001856:	2000      	movs	r0, #0
 8001858:	f7ff fa9d 	bl	8000d96 <lcd_put_cur>
		lcd_send_string("KD");
 800185c:	4819      	ldr	r0, [pc, #100]	; (80018c4 <stateKD+0x8c>)
 800185e:	f7ff faf6 	bl	8000e4e <lcd_send_string>
		lcd_put_cur(1, 0);
 8001862:	2100      	movs	r1, #0
 8001864:	2001      	movs	r0, #1
 8001866:	f7ff fa96 	bl	8000d96 <lcd_put_cur>
		lcd_send_data(LCD_LEFT_ARROW);
 800186a:	207f      	movs	r0, #127	; 0x7f
 800186c:	f7ff fa4c 	bl	8000d08 <lcd_send_data>
	}

	if (BTN.ok == BTN_pressed)
 8001870:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <stateKD+0x90>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b01      	cmp	r3, #1
 8001878:	d102      	bne.n	8001880 <stateKD+0x48>
	{
		BTN.ok = BTN_not_pressed;
 800187a:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <stateKD+0x90>)
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.no == BTN_pressed)
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <stateKD+0x90>)
 8001882:	785b      	ldrb	r3, [r3, #1]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b01      	cmp	r3, #1
 8001888:	d102      	bne.n	8001890 <stateKD+0x58>
	{
		BTN.no = BTN_not_pressed;
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <stateKD+0x90>)
 800188c:	2200      	movs	r2, #0
 800188e:	705a      	strb	r2, [r3, #1]
	}
	if (BTN.left == BTN_pressed)
 8001890:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <stateKD+0x90>)
 8001892:	789b      	ldrb	r3, [r3, #2]
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b01      	cmp	r3, #1
 8001898:	d105      	bne.n	80018a6 <stateKD+0x6e>
	{
		BTN.left = BTN_not_pressed;
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <stateKD+0x90>)
 800189c:	2200      	movs	r2, #0
 800189e:	709a      	strb	r2, [r3, #2]
		current_state = KI_state;
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <stateKD+0x84>)
 80018a2:	2207      	movs	r2, #7
 80018a4:	701a      	strb	r2, [r3, #0]
	}
	if (BTN.right == BTN_pressed)
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <stateKD+0x90>)
 80018a8:	78db      	ldrb	r3, [r3, #3]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d102      	bne.n	80018b6 <stateKD+0x7e>
	{
		BTN.right = BTN_not_pressed;
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <stateKD+0x90>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	70da      	strb	r2, [r3, #3]
	}
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000000 	.word	0x20000000
 80018c0:	200002e8 	.word	0x200002e8
 80018c4:	0800961c 	.word	0x0800961c
 80018c8:	200002ec 	.word	0x200002ec

080018cc <setMotors>:

// RANGE FROM -999 TO 999 	FIXME test range 20
void setMotors(int left_motor_speed, int right_motor_speed, int zero_speed, int offset_zero_speed) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af02      	add	r7, sp, #8
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	603b      	str	r3, [r7, #0]
	// -------- min -------------- -offset --- zero --- +offset --------------- max ------->
	// ------ zero+offset_pwm -------------- max_pwm ------>
	long left_duty = map(abs(left_motor_speed), 0, 20, 0, 999);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 80018e0:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 80018e4:	f240 33e7 	movw	r3, #999	; 0x3e7
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	2300      	movs	r3, #0
 80018ec:	2214      	movs	r2, #20
 80018ee:	2100      	movs	r1, #0
 80018f0:	f000 f886 	bl	8001a00 <map>
 80018f4:	6178      	str	r0, [r7, #20]
	long right_duty = map(abs(right_motor_speed), 0, 20, 0, 999);
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 80018fc:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8001900:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	2300      	movs	r3, #0
 8001908:	2214      	movs	r2, #20
 800190a:	2100      	movs	r1, #0
 800190c:	f000 f878 	bl	8001a00 <map>
 8001910:	6138      	str	r0, [r7, #16]

	if (left_motor_speed > zero_speed + offset_zero_speed) {	// LEFT MOTOR
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	4413      	add	r3, r2
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	429a      	cmp	r2, r3
 800191c:	dd0f      	ble.n	800193e <setMotors+0x72>
		HAL_GPIO_WritePin(GPIOB, EN_L_1_Pin, GPIO_PIN_SET); 	// HIGH
 800191e:	2201      	movs	r2, #1
 8001920:	2102      	movs	r1, #2
 8001922:	4835      	ldr	r0, [pc, #212]	; (80019f8 <setMotors+0x12c>)
 8001924:	f001 faa6 	bl	8002e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN_L_2_Pin, GPIO_PIN_RESET); 	// LOW
 8001928:	2200      	movs	r2, #0
 800192a:	2110      	movs	r1, #16
 800192c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001930:	f001 faa0 	bl	8002e74 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, left_duty);	// Timer
 8001934:	4b31      	ldr	r3, [pc, #196]	; (80019fc <setMotors+0x130>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	639a      	str	r2, [r3, #56]	; 0x38
 800193c:	e020      	b.n	8001980 <setMotors+0xb4>
	} else if (left_motor_speed < zero_speed - offset_zero_speed) {
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	429a      	cmp	r2, r3
 8001948:	da0f      	bge.n	800196a <setMotors+0x9e>
		HAL_GPIO_WritePin(GPIOB, EN_L_1_Pin, GPIO_PIN_RESET); 	// LOW
 800194a:	2200      	movs	r2, #0
 800194c:	2102      	movs	r1, #2
 800194e:	482a      	ldr	r0, [pc, #168]	; (80019f8 <setMotors+0x12c>)
 8001950:	f001 fa90 	bl	8002e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN_L_2_Pin, GPIO_PIN_SET); 	// HIGH
 8001954:	2201      	movs	r2, #1
 8001956:	2110      	movs	r1, #16
 8001958:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800195c:	f001 fa8a 	bl	8002e74 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, left_duty); 	// Timer set
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <setMotors+0x130>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	639a      	str	r2, [r3, #56]	; 0x38
 8001968:	e00a      	b.n	8001980 <setMotors+0xb4>
	} else {
		HAL_GPIO_WritePin(GPIOB, EN_L_1_Pin, GPIO_PIN_RESET); 	// LOW
 800196a:	2200      	movs	r2, #0
 800196c:	2102      	movs	r1, #2
 800196e:	4822      	ldr	r0, [pc, #136]	; (80019f8 <setMotors+0x12c>)
 8001970:	f001 fa80 	bl	8002e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN_L_2_Pin, GPIO_PIN_RESET); 	// LOW
 8001974:	2200      	movs	r2, #0
 8001976:	2110      	movs	r1, #16
 8001978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197c:	f001 fa7a 	bl	8002e74 <HAL_GPIO_WritePin>
	}
	if (right_motor_speed > zero_speed + offset_zero_speed) {	// RIGHT MOTOR
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	4413      	add	r3, r2
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	429a      	cmp	r2, r3
 800198a:	dd0f      	ble.n	80019ac <setMotors+0xe0>
		HAL_GPIO_WritePin(GPIOB, EN_R_1_Pin, GPIO_PIN_SET); 	// HIGH
 800198c:	2201      	movs	r2, #1
 800198e:	2101      	movs	r1, #1
 8001990:	4819      	ldr	r0, [pc, #100]	; (80019f8 <setMotors+0x12c>)
 8001992:	f001 fa6f 	bl	8002e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN_R_2_Pin, GPIO_PIN_RESET); 	// LOW
 8001996:	2200      	movs	r2, #0
 8001998:	2180      	movs	r1, #128	; 0x80
 800199a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800199e:	f001 fa69 	bl	8002e74 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, right_duty); 	// Timer
 80019a2:	4b16      	ldr	r3, [pc, #88]	; (80019fc <setMotors+0x130>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, right_duty); 	// Timer
	} else {
		HAL_GPIO_WritePin(GPIOB, EN_R_1_Pin, GPIO_PIN_RESET); 	// LOW
		HAL_GPIO_WritePin(GPIOA, EN_R_2_Pin, GPIO_PIN_RESET); 	// LOW
	}
}
 80019aa:	e020      	b.n	80019ee <setMotors+0x122>
	} else if (right_motor_speed < zero_speed - offset_zero_speed) {
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	da0f      	bge.n	80019d8 <setMotors+0x10c>
		HAL_GPIO_WritePin(GPIOB, EN_R_1_Pin, GPIO_PIN_RESET); 	// LOW
 80019b8:	2200      	movs	r2, #0
 80019ba:	2101      	movs	r1, #1
 80019bc:	480e      	ldr	r0, [pc, #56]	; (80019f8 <setMotors+0x12c>)
 80019be:	f001 fa59 	bl	8002e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN_R_2_Pin, GPIO_PIN_SET); 	// HIGH
 80019c2:	2201      	movs	r2, #1
 80019c4:	2180      	movs	r1, #128	; 0x80
 80019c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ca:	f001 fa53 	bl	8002e74 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, right_duty); 	// Timer
 80019ce:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <setMotors+0x130>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80019d6:	e00a      	b.n	80019ee <setMotors+0x122>
		HAL_GPIO_WritePin(GPIOB, EN_R_1_Pin, GPIO_PIN_RESET); 	// LOW
 80019d8:	2200      	movs	r2, #0
 80019da:	2101      	movs	r1, #1
 80019dc:	4806      	ldr	r0, [pc, #24]	; (80019f8 <setMotors+0x12c>)
 80019de:	f001 fa49 	bl	8002e74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN_R_2_Pin, GPIO_PIN_RESET); 	// LOW
 80019e2:	2200      	movs	r2, #0
 80019e4:	2180      	movs	r1, #128	; 0x80
 80019e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ea:	f001 fa43 	bl	8002e74 <HAL_GPIO_WritePin>
}
 80019ee:	bf00      	nop
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	48000400 	.word	0x48000400
 80019fc:	20000410 	.word	0x20000410

08001a00 <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max) {	// y = map(x, x_min, x_max, y_min, y_max); function known from Arduino
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
 8001a0c:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	69b9      	ldr	r1, [r7, #24]
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	1a8a      	subs	r2, r1, r2
 8001a1a:	fb03 f202 	mul.w	r2, r3, r2
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	1acb      	subs	r3, r1, r3
 8001a24:	fb92 f2f3 	sdiv	r2, r2, r3
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	4413      	add	r3, r2
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a3c:	b672      	cpsid	i
}
 8001a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <Error_Handler+0x8>

08001a42 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b088      	sub	sp, #32
 8001a46:	af04      	add	r7, sp, #16
 8001a48:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001a4a:	2364      	movs	r3, #100	; 0x64
 8001a4c:	9302      	str	r3, [sp, #8]
 8001a4e:	2301      	movs	r3, #1
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	f107 030f 	add.w	r3, r7, #15
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	2301      	movs	r3, #1
 8001a5a:	2275      	movs	r2, #117	; 0x75
 8001a5c:	21d0      	movs	r1, #208	; 0xd0
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f001 fcea 	bl	8003438 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	2b68      	cmp	r3, #104	; 0x68
 8001a68:	d13d      	bne.n	8001ae6 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001a6e:	2364      	movs	r3, #100	; 0x64
 8001a70:	9302      	str	r3, [sp, #8]
 8001a72:	2301      	movs	r3, #1
 8001a74:	9301      	str	r3, [sp, #4]
 8001a76:	f107 030e 	add.w	r3, r7, #14
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	226b      	movs	r2, #107	; 0x6b
 8001a80:	21d0      	movs	r1, #208	; 0xd0
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f001 fbc4 	bl	8003210 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001a88:	2307      	movs	r3, #7
 8001a8a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001a8c:	2364      	movs	r3, #100	; 0x64
 8001a8e:	9302      	str	r3, [sp, #8]
 8001a90:	2301      	movs	r3, #1
 8001a92:	9301      	str	r3, [sp, #4]
 8001a94:	f107 030e 	add.w	r3, r7, #14
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	2219      	movs	r2, #25
 8001a9e:	21d0      	movs	r1, #208	; 0xd0
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f001 fbb5 	bl	8003210 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001aaa:	2364      	movs	r3, #100	; 0x64
 8001aac:	9302      	str	r3, [sp, #8]
 8001aae:	2301      	movs	r3, #1
 8001ab0:	9301      	str	r3, [sp, #4]
 8001ab2:	f107 030e 	add.w	r3, r7, #14
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	2301      	movs	r3, #1
 8001aba:	221c      	movs	r2, #28
 8001abc:	21d0      	movs	r1, #208	; 0xd0
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f001 fba6 	bl	8003210 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001ac8:	2364      	movs	r3, #100	; 0x64
 8001aca:	9302      	str	r3, [sp, #8]
 8001acc:	2301      	movs	r3, #1
 8001ace:	9301      	str	r3, [sp, #4]
 8001ad0:	f107 030e 	add.w	r3, r7, #14
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	221b      	movs	r2, #27
 8001ada:	21d0      	movs	r1, #208	; 0xd0
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f001 fb97 	bl	8003210 <HAL_I2C_Mem_Write>
        return 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e000      	b.n	8001ae8 <MPU6050_Init+0xa6>
    }
    return 1;
 8001ae6:	2301      	movs	r3, #1
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001af4:	b094      	sub	sp, #80	; 0x50
 8001af6:	af04      	add	r7, sp, #16
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001afc:	2364      	movs	r3, #100	; 0x64
 8001afe:	9302      	str	r3, [sp, #8]
 8001b00:	230e      	movs	r3, #14
 8001b02:	9301      	str	r3, [sp, #4]
 8001b04:	f107 0308 	add.w	r3, r7, #8
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	223b      	movs	r2, #59	; 0x3b
 8001b0e:	21d0      	movs	r1, #208	; 0xd0
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f001 fc91 	bl	8003438 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001b16:	7a3b      	ldrb	r3, [r7, #8]
 8001b18:	021b      	lsls	r3, r3, #8
 8001b1a:	b21a      	sxth	r2, r3
 8001b1c:	7a7b      	ldrb	r3, [r7, #9]
 8001b1e:	b21b      	sxth	r3, r3
 8001b20:	4313      	orrs	r3, r2
 8001b22:	b21a      	sxth	r2, r3
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001b28:	7abb      	ldrb	r3, [r7, #10]
 8001b2a:	021b      	lsls	r3, r3, #8
 8001b2c:	b21a      	sxth	r2, r3
 8001b2e:	7afb      	ldrb	r3, [r7, #11]
 8001b30:	b21b      	sxth	r3, r3
 8001b32:	4313      	orrs	r3, r2
 8001b34:	b21a      	sxth	r2, r3
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001b3a:	7b3b      	ldrb	r3, [r7, #12]
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	b21a      	sxth	r2, r3
 8001b40:	7b7b      	ldrb	r3, [r7, #13]
 8001b42:	b21b      	sxth	r3, r3
 8001b44:	4313      	orrs	r3, r2
 8001b46:	b21a      	sxth	r2, r3
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001b4c:	7bbb      	ldrb	r3, [r7, #14]
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	b21a      	sxth	r2, r3
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	b21b      	sxth	r3, r3
 8001b56:	4313      	orrs	r3, r2
 8001b58:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001b5a:	7c3b      	ldrb	r3, [r7, #16]
 8001b5c:	021b      	lsls	r3, r3, #8
 8001b5e:	b21a      	sxth	r2, r3
 8001b60:	7c7b      	ldrb	r3, [r7, #17]
 8001b62:	b21b      	sxth	r3, r3
 8001b64:	4313      	orrs	r3, r2
 8001b66:	b21a      	sxth	r2, r3
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001b6c:	7cbb      	ldrb	r3, [r7, #18]
 8001b6e:	021b      	lsls	r3, r3, #8
 8001b70:	b21a      	sxth	r2, r3
 8001b72:	7cfb      	ldrb	r3, [r7, #19]
 8001b74:	b21b      	sxth	r3, r3
 8001b76:	4313      	orrs	r3, r2
 8001b78:	b21a      	sxth	r2, r3
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001b7e:	7d3b      	ldrb	r3, [r7, #20]
 8001b80:	021b      	lsls	r3, r3, #8
 8001b82:	b21a      	sxth	r2, r3
 8001b84:	7d7b      	ldrb	r3, [r7, #21]
 8001b86:	b21b      	sxth	r3, r3
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	b21a      	sxth	r2, r3
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fcc4 	bl	8000524 <__aeabi_i2d>
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	4bbd      	ldr	r3, [pc, #756]	; (8001e98 <MPU6050_Read_All+0x3a8>)
 8001ba2:	f7fe fe53 	bl	800084c <__aeabi_ddiv>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	6839      	ldr	r1, [r7, #0]
 8001bac:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fcb4 	bl	8000524 <__aeabi_i2d>
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	4bb5      	ldr	r3, [pc, #724]	; (8001e98 <MPU6050_Read_All+0x3a8>)
 8001bc2:	f7fe fe43 	bl	800084c <__aeabi_ddiv>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	6839      	ldr	r1, [r7, #0]
 8001bcc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fca4 	bl	8000524 <__aeabi_i2d>
 8001bdc:	a3a8      	add	r3, pc, #672	; (adr r3, 8001e80 <MPU6050_Read_All+0x390>)
 8001bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be2:	f7fe fe33 	bl	800084c <__aeabi_ddiv>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	6839      	ldr	r1, [r7, #0]
 8001bec:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001bf0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001bf4:	ee07 3a90 	vmov	s15, r3
 8001bf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bfc:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8001e9c <MPU6050_Read_All+0x3ac>
 8001c00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c04:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001ea0 <MPU6050_Read_All+0x3b0>
 8001c08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fc83 	bl	8000524 <__aeabi_i2d>
 8001c1e:	a39a      	add	r3, pc, #616	; (adr r3, 8001e88 <MPU6050_Read_All+0x398>)
 8001c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c24:	f7fe fe12 	bl	800084c <__aeabi_ddiv>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	6839      	ldr	r1, [r7, #0]
 8001c2e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fc73 	bl	8000524 <__aeabi_i2d>
 8001c3e:	a392      	add	r3, pc, #584	; (adr r3, 8001e88 <MPU6050_Read_All+0x398>)
 8001c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c44:	f7fe fe02 	bl	800084c <__aeabi_ddiv>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	6839      	ldr	r1, [r7, #0]
 8001c4e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fc63 	bl	8000524 <__aeabi_i2d>
 8001c5e:	a38a      	add	r3, pc, #552	; (adr r3, 8001e88 <MPU6050_Read_All+0x398>)
 8001c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c64:	f7fe fdf2 	bl	800084c <__aeabi_ddiv>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	6839      	ldr	r1, [r7, #0]
 8001c6e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001c72:	f000 fe53 	bl	800291c <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	4b8a      	ldr	r3, [pc, #552]	; (8001ea4 <MPU6050_Read_All+0x3b4>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fc40 	bl	8000504 <__aeabi_ui2d>
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	4b87      	ldr	r3, [pc, #540]	; (8001ea8 <MPU6050_Read_All+0x3b8>)
 8001c8a:	f7fe fddf 	bl	800084c <__aeabi_ddiv>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001c96:	f000 fe41 	bl	800291c <HAL_GetTick>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	4a81      	ldr	r2, [pc, #516]	; (8001ea4 <MPU6050_Read_All+0x3b4>)
 8001c9e:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cae:	fb03 f202 	mul.w	r2, r3, r2
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001cc0:	fb01 f303 	mul.w	r3, r1, r3
 8001cc4:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fc2c 	bl	8000524 <__aeabi_i2d>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	ec43 2b10 	vmov	d0, r2, r3
 8001cd4:	f007 faa7 	bl	8009226 <sqrt>
 8001cd8:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8001cdc:	f04f 0200 	mov.w	r2, #0
 8001ce0:	f04f 0300 	mov.w	r3, #0
 8001ce4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ce8:	f7fe feee 	bl	8000ac8 <__aeabi_dcmpeq>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d11f      	bne.n	8001d32 <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fc13 	bl	8000524 <__aeabi_i2d>
 8001cfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d02:	f7fe fda3 	bl	800084c <__aeabi_ddiv>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	ec43 2b17 	vmov	d7, r2, r3
 8001d0e:	eeb0 0a47 	vmov.f32	s0, s14
 8001d12:	eef0 0a67 	vmov.f32	s1, s15
 8001d16:	f007 f8db 	bl	8008ed0 <atan>
 8001d1a:	ec51 0b10 	vmov	r0, r1, d0
 8001d1e:	a35c      	add	r3, pc, #368	; (adr r3, 8001e90 <MPU6050_Read_All+0x3a0>)
 8001d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d24:	f7fe fc68 	bl	80005f8 <__aeabi_dmul>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001d30:	e005      	b.n	8001d3e <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d44:	425b      	negs	r3, r3
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fbec 	bl	8000524 <__aeabi_i2d>
 8001d4c:	4682      	mov	sl, r0
 8001d4e:	468b      	mov	fp, r1
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fbe4 	bl	8000524 <__aeabi_i2d>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	ec43 2b11 	vmov	d1, r2, r3
 8001d64:	ec4b ab10 	vmov	d0, sl, fp
 8001d68:	f007 fa5b 	bl	8009222 <atan2>
 8001d6c:	ec51 0b10 	vmov	r0, r1, d0
 8001d70:	a347      	add	r3, pc, #284	; (adr r3, 8001e90 <MPU6050_Read_All+0x3a0>)
 8001d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d76:	f7fe fc3f 	bl	80005f8 <__aeabi_dmul>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	4b49      	ldr	r3, [pc, #292]	; (8001eac <MPU6050_Read_All+0x3bc>)
 8001d88:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d8c:	f7fe fea6 	bl	8000adc <__aeabi_dcmplt>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00a      	beq.n	8001dac <MPU6050_Read_All+0x2bc>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	4b43      	ldr	r3, [pc, #268]	; (8001eb0 <MPU6050_Read_All+0x3c0>)
 8001da2:	f7fe feb9 	bl	8000b18 <__aeabi_dcmpgt>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d114      	bne.n	8001dd6 <MPU6050_Read_All+0x2e6>
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	4b3f      	ldr	r3, [pc, #252]	; (8001eb0 <MPU6050_Read_All+0x3c0>)
 8001db2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001db6:	f7fe feaf 	bl	8000b18 <__aeabi_dcmpgt>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d015      	beq.n	8001dec <MPU6050_Read_All+0x2fc>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	4b38      	ldr	r3, [pc, #224]	; (8001eac <MPU6050_Read_All+0x3bc>)
 8001dcc:	f7fe fe86 	bl	8000adc <__aeabi_dcmplt>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00a      	beq.n	8001dec <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8001dd6:	4937      	ldr	r1, [pc, #220]	; (8001eb4 <MPU6050_Read_All+0x3c4>)
 8001dd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ddc:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001de0:	6839      	ldr	r1, [r7, #0]
 8001de2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001de6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001dea:	e014      	b.n	8001e16 <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001df2:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001df6:	eeb0 1a47 	vmov.f32	s2, s14
 8001dfa:	eef0 1a67 	vmov.f32	s3, s15
 8001dfe:	ed97 0b06 	vldr	d0, [r7, #24]
 8001e02:	482c      	ldr	r0, [pc, #176]	; (8001eb4 <MPU6050_Read_All+0x3c4>)
 8001e04:	f000 f85a 	bl	8001ebc <Kalman_getAngle>
 8001e08:	eeb0 7a40 	vmov.f32	s14, s0
 8001e0c:	eef0 7a60 	vmov.f32	s15, s1
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001e1c:	4690      	mov	r8, r2
 8001e1e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	4b22      	ldr	r3, [pc, #136]	; (8001eb0 <MPU6050_Read_All+0x3c0>)
 8001e28:	4640      	mov	r0, r8
 8001e2a:	4649      	mov	r1, r9
 8001e2c:	f7fe fe74 	bl	8000b18 <__aeabi_dcmpgt>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d008      	beq.n	8001e48 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001e3c:	4614      	mov	r4, r2
 8001e3e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001e4e:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001e52:	eeb0 1a47 	vmov.f32	s2, s14
 8001e56:	eef0 1a67 	vmov.f32	s3, s15
 8001e5a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001e5e:	4816      	ldr	r0, [pc, #88]	; (8001eb8 <MPU6050_Read_All+0x3c8>)
 8001e60:	f000 f82c 	bl	8001ebc <Kalman_getAngle>
 8001e64:	eeb0 7a40 	vmov.f32	s14, s0
 8001e68:	eef0 7a60 	vmov.f32	s15, s1
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 8001e72:	bf00      	nop
 8001e74:	3740      	adds	r7, #64	; 0x40
 8001e76:	46bd      	mov	sp, r7
 8001e78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e7c:	f3af 8000 	nop.w
 8001e80:	00000000 	.word	0x00000000
 8001e84:	40cc2900 	.word	0x40cc2900
 8001e88:	00000000 	.word	0x00000000
 8001e8c:	40606000 	.word	0x40606000
 8001e90:	1a63c1f8 	.word	0x1a63c1f8
 8001e94:	404ca5dc 	.word	0x404ca5dc
 8001e98:	40d00000 	.word	0x40d00000
 8001e9c:	43aa0000 	.word	0x43aa0000
 8001ea0:	42121eb8 	.word	0x42121eb8
 8001ea4:	20000370 	.word	0x20000370
 8001ea8:	408f4000 	.word	0x408f4000
 8001eac:	c0568000 	.word	0xc0568000
 8001eb0:	40568000 	.word	0x40568000
 8001eb4:	20000050 	.word	0x20000050
 8001eb8:	20000008 	.word	0x20000008

08001ebc <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001ebc:	b5b0      	push	{r4, r5, r7, lr}
 8001ebe:	b096      	sub	sp, #88	; 0x58
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	61f8      	str	r0, [r7, #28]
 8001ec4:	ed87 0b04 	vstr	d0, [r7, #16]
 8001ec8:	ed87 1b02 	vstr	d1, [r7, #8]
 8001ecc:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001ed6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001eda:	f7fe f9d5 	bl	8000288 <__aeabi_dsub>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001eec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001ef0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ef4:	f7fe fb80 	bl	80005f8 <__aeabi_dmul>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4620      	mov	r0, r4
 8001efe:	4629      	mov	r1, r5
 8001f00:	f7fe f9c4 	bl	800028c <__adddf3>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	69f9      	ldr	r1, [r7, #28]
 8001f0a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001f1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f1e:	f7fe fb6b 	bl	80005f8 <__aeabi_dmul>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4610      	mov	r0, r2
 8001f28:	4619      	mov	r1, r3
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001f30:	f7fe f9aa 	bl	8000288 <__aeabi_dsub>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4610      	mov	r0, r2
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001f42:	f7fe f9a1 	bl	8000288 <__aeabi_dsub>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f54:	f7fe f99a 	bl	800028c <__adddf3>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4619      	mov	r1, r3
 8001f60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f64:	f7fe fb48 	bl	80005f8 <__aeabi_dmul>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	4629      	mov	r1, r5
 8001f70:	f7fe f98c 	bl	800028c <__adddf3>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	69f9      	ldr	r1, [r7, #28]
 8001f7a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001f8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f8e:	f7fe fb33 	bl	80005f8 <__aeabi_dmul>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4620      	mov	r0, r4
 8001f98:	4629      	mov	r1, r5
 8001f9a:	f7fe f975 	bl	8000288 <__aeabi_dsub>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	69f9      	ldr	r1, [r7, #28]
 8001fa4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001fb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fb8:	f7fe fb1e 	bl	80005f8 <__aeabi_dmul>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	4629      	mov	r1, r5
 8001fc4:	f7fe f960 	bl	8000288 <__aeabi_dsub>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	69f9      	ldr	r1, [r7, #28]
 8001fce:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001fde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fe2:	f7fe fb09 	bl	80005f8 <__aeabi_dmul>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4620      	mov	r0, r4
 8001fec:	4629      	mov	r1, r5
 8001fee:	f7fe f94d 	bl	800028c <__adddf3>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	69f9      	ldr	r1, [r7, #28]
 8001ff8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002008:	f7fe f940 	bl	800028c <__adddf3>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800201a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800201e:	f7fe fc15 	bl	800084c <__aeabi_ddiv>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002030:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002034:	f7fe fc0a 	bl	800084c <__aeabi_ddiv>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002046:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800204a:	f7fe f91d 	bl	8000288 <__aeabi_dsub>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800205c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002060:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002064:	f7fe fac8 	bl	80005f8 <__aeabi_dmul>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4620      	mov	r0, r4
 800206e:	4629      	mov	r1, r5
 8002070:	f7fe f90c 	bl	800028c <__adddf3>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	69f9      	ldr	r1, [r7, #28]
 800207a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002084:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002088:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800208c:	f7fe fab4 	bl	80005f8 <__aeabi_dmul>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4620      	mov	r0, r4
 8002096:	4629      	mov	r1, r5
 8002098:	f7fe f8f8 	bl	800028c <__adddf3>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	69f9      	ldr	r1, [r7, #28]
 80020a2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80020ac:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80020b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80020c0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80020c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80020c8:	f7fe fa96 	bl	80005f8 <__aeabi_dmul>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	4620      	mov	r0, r4
 80020d2:	4629      	mov	r1, r5
 80020d4:	f7fe f8d8 	bl	8000288 <__aeabi_dsub>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	69f9      	ldr	r1, [r7, #28]
 80020de:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80020e8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80020ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80020f0:	f7fe fa82 	bl	80005f8 <__aeabi_dmul>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4620      	mov	r0, r4
 80020fa:	4629      	mov	r1, r5
 80020fc:	f7fe f8c4 	bl	8000288 <__aeabi_dsub>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	69f9      	ldr	r1, [r7, #28]
 8002106:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002110:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002114:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002118:	f7fe fa6e 	bl	80005f8 <__aeabi_dmul>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	4620      	mov	r0, r4
 8002122:	4629      	mov	r1, r5
 8002124:	f7fe f8b0 	bl	8000288 <__aeabi_dsub>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	69f9      	ldr	r1, [r7, #28]
 800212e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002138:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800213c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002140:	f7fe fa5a 	bl	80005f8 <__aeabi_dmul>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4620      	mov	r0, r4
 800214a:	4629      	mov	r1, r5
 800214c:	f7fe f89c 	bl	8000288 <__aeabi_dsub>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	69f9      	ldr	r1, [r7, #28]
 8002156:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002160:	ec43 2b17 	vmov	d7, r2, r3
};
 8002164:	eeb0 0a47 	vmov.f32	s0, s14
 8002168:	eef0 0a67 	vmov.f32	s1, s15
 800216c:	3758      	adds	r7, #88	; 0x58
 800216e:	46bd      	mov	sp, r7
 8002170:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002174 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217a:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <HAL_MspInit+0x44>)
 800217c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800217e:	4a0e      	ldr	r2, [pc, #56]	; (80021b8 <HAL_MspInit+0x44>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	6613      	str	r3, [r2, #96]	; 0x60
 8002186:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <HAL_MspInit+0x44>)
 8002188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	607b      	str	r3, [r7, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002192:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <HAL_MspInit+0x44>)
 8002194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002196:	4a08      	ldr	r2, [pc, #32]	; (80021b8 <HAL_MspInit+0x44>)
 8002198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800219c:	6593      	str	r3, [r2, #88]	; 0x58
 800219e:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <HAL_MspInit+0x44>)
 80021a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a6:	603b      	str	r3, [r7, #0]
 80021a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40021000 	.word	0x40021000

080021bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021c0:	e7fe      	b.n	80021c0 <NMI_Handler+0x4>

080021c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021c2:	b480      	push	{r7}
 80021c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021c6:	e7fe      	b.n	80021c6 <HardFault_Handler+0x4>

080021c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021cc:	e7fe      	b.n	80021cc <MemManage_Handler+0x4>

080021ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021d2:	e7fe      	b.n	80021d2 <BusFault_Handler+0x4>

080021d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d8:	e7fe      	b.n	80021d8 <UsageFault_Handler+0x4>

080021da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002208:	f000 fb74 	bl	80028f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}

08002210 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_RI_Pin);
 8002214:	2020      	movs	r0, #32
 8002216:	f000 fe5f 	bl	8002ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}

0800221e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_OK_Pin);
 8002222:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002226:	f000 fe57 	bl	8002ed8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_NO_Pin);
 800222a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800222e:	f000 fe53 	bl	8002ed8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_LE_Pin);
 8002232:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002236:	f000 fe4f 	bl	8002ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}

0800223e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0
	return 1;
 8002242:	2301      	movs	r3, #1
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <_kill>:

int _kill(int pid, int sig)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
 8002256:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002258:	f003 ff26 	bl	80060a8 <__errno>
 800225c:	4603      	mov	r3, r0
 800225e:	2216      	movs	r2, #22
 8002260:	601a      	str	r2, [r3, #0]
	return -1;
 8002262:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <_exit>:

void _exit (int status)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002276:	f04f 31ff 	mov.w	r1, #4294967295
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff ffe7 	bl	800224e <_kill>
	while (1) {}		/* Make sure we hang here */
 8002280:	e7fe      	b.n	8002280 <_exit+0x12>

08002282 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b086      	sub	sp, #24
 8002286:	af00      	add	r7, sp, #0
 8002288:	60f8      	str	r0, [r7, #12]
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	e00a      	b.n	80022aa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002294:	f3af 8000 	nop.w
 8002298:	4601      	mov	r1, r0
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	60ba      	str	r2, [r7, #8]
 80022a0:	b2ca      	uxtb	r2, r1
 80022a2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	3301      	adds	r3, #1
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	dbf0      	blt.n	8002294 <_read+0x12>
	}

return len;
 80022b2:	687b      	ldr	r3, [r7, #4]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	e009      	b.n	80022e2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	1c5a      	adds	r2, r3, #1
 80022d2:	60ba      	str	r2, [r7, #8]
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	3301      	adds	r3, #1
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	dbf1      	blt.n	80022ce <_write+0x12>
	}
	return len;
 80022ea:	687b      	ldr	r3, [r7, #4]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <_close>:

int _close(int file)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
	return -1;
 80022fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002300:	4618      	mov	r0, r3
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800231c:	605a      	str	r2, [r3, #4]
	return 0;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <_isatty>:

int _isatty(int file)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
	return 1;
 8002334:	2301      	movs	r3, #1
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002342:	b480      	push	{r7}
 8002344:	b085      	sub	sp, #20
 8002346:	af00      	add	r7, sp, #0
 8002348:	60f8      	str	r0, [r7, #12]
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	607a      	str	r2, [r7, #4]
	return 0;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002364:	4a14      	ldr	r2, [pc, #80]	; (80023b8 <_sbrk+0x5c>)
 8002366:	4b15      	ldr	r3, [pc, #84]	; (80023bc <_sbrk+0x60>)
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002370:	4b13      	ldr	r3, [pc, #76]	; (80023c0 <_sbrk+0x64>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d102      	bne.n	800237e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002378:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <_sbrk+0x64>)
 800237a:	4a12      	ldr	r2, [pc, #72]	; (80023c4 <_sbrk+0x68>)
 800237c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800237e:	4b10      	ldr	r3, [pc, #64]	; (80023c0 <_sbrk+0x64>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	429a      	cmp	r2, r3
 800238a:	d207      	bcs.n	800239c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800238c:	f003 fe8c 	bl	80060a8 <__errno>
 8002390:	4603      	mov	r3, r0
 8002392:	220c      	movs	r2, #12
 8002394:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002396:	f04f 33ff 	mov.w	r3, #4294967295
 800239a:	e009      	b.n	80023b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800239c:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <_sbrk+0x64>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023a2:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <_sbrk+0x64>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	4a05      	ldr	r2, [pc, #20]	; (80023c0 <_sbrk+0x64>)
 80023ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ae:	68fb      	ldr	r3, [r7, #12]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20010000 	.word	0x20010000
 80023bc:	00000400 	.word	0x00000400
 80023c0:	20000374 	.word	0x20000374
 80023c4:	20000470 	.word	0x20000470

080023c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <SystemInit+0x20>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d2:	4a05      	ldr	r2, [pc, #20]	; (80023e8 <SystemInit+0x20>)
 80023d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08c      	sub	sp, #48	; 0x30
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023f2:	f107 030c 	add.w	r3, r7, #12
 80023f6:	2224      	movs	r2, #36	; 0x24
 80023f8:	2100      	movs	r1, #0
 80023fa:	4618      	mov	r0, r3
 80023fc:	f003 fe7e 	bl	80060fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002400:	463b      	mov	r3, r7
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	605a      	str	r2, [r3, #4]
 8002408:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800240a:	4b23      	ldr	r3, [pc, #140]	; (8002498 <MX_TIM1_Init+0xac>)
 800240c:	4a23      	ldr	r2, [pc, #140]	; (800249c <MX_TIM1_Init+0xb0>)
 800240e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002410:	4b21      	ldr	r3, [pc, #132]	; (8002498 <MX_TIM1_Init+0xac>)
 8002412:	2200      	movs	r2, #0
 8002414:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002416:	4b20      	ldr	r3, [pc, #128]	; (8002498 <MX_TIM1_Init+0xac>)
 8002418:	2200      	movs	r2, #0
 800241a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800241c:	4b1e      	ldr	r3, [pc, #120]	; (8002498 <MX_TIM1_Init+0xac>)
 800241e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002422:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002424:	4b1c      	ldr	r3, [pc, #112]	; (8002498 <MX_TIM1_Init+0xac>)
 8002426:	2200      	movs	r2, #0
 8002428:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800242a:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <MX_TIM1_Init+0xac>)
 800242c:	2200      	movs	r2, #0
 800242e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002430:	4b19      	ldr	r3, [pc, #100]	; (8002498 <MX_TIM1_Init+0xac>)
 8002432:	2200      	movs	r2, #0
 8002434:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002436:	2301      	movs	r3, #1
 8002438:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800243a:	2300      	movs	r3, #0
 800243c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800243e:	2301      	movs	r3, #1
 8002440:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002442:	2300      	movs	r3, #0
 8002444:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800244a:	2300      	movs	r3, #0
 800244c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800244e:	2301      	movs	r3, #1
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002452:	2300      	movs	r3, #0
 8002454:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800245a:	f107 030c 	add.w	r3, r7, #12
 800245e:	4619      	mov	r1, r3
 8002460:	480d      	ldr	r0, [pc, #52]	; (8002498 <MX_TIM1_Init+0xac>)
 8002462:	f002 ff4b 	bl	80052fc <HAL_TIM_Encoder_Init>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800246c:	f7ff fae4 	bl	8001a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002470:	2300      	movs	r3, #0
 8002472:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002474:	2300      	movs	r3, #0
 8002476:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002478:	2300      	movs	r3, #0
 800247a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800247c:	463b      	mov	r3, r7
 800247e:	4619      	mov	r1, r3
 8002480:	4805      	ldr	r0, [pc, #20]	; (8002498 <MX_TIM1_Init+0xac>)
 8002482:	f003 fd33 	bl	8005eec <HAL_TIMEx_MasterConfigSynchronization>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800248c:	f7ff fad4 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002490:	bf00      	nop
 8002492:	3730      	adds	r7, #48	; 0x30
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	20000378 	.word	0x20000378
 800249c:	40012c00 	.word	0x40012c00

080024a0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08c      	sub	sp, #48	; 0x30
 80024a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024a6:	f107 030c 	add.w	r3, r7, #12
 80024aa:	2224      	movs	r2, #36	; 0x24
 80024ac:	2100      	movs	r1, #0
 80024ae:	4618      	mov	r0, r3
 80024b0:	f003 fe24 	bl	80060fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b4:	463b      	mov	r3, r7
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	605a      	str	r2, [r3, #4]
 80024bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024be:	4b21      	ldr	r3, [pc, #132]	; (8002544 <MX_TIM2_Init+0xa4>)
 80024c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80024c6:	4b1f      	ldr	r3, [pc, #124]	; (8002544 <MX_TIM2_Init+0xa4>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024cc:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <MX_TIM2_Init+0xa4>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535 - 1;
 80024d2:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <MX_TIM2_Init+0xa4>)
 80024d4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80024d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024da:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <MX_TIM2_Init+0xa4>)
 80024dc:	2200      	movs	r2, #0
 80024de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e0:	4b18      	ldr	r3, [pc, #96]	; (8002544 <MX_TIM2_Init+0xa4>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80024e6:	2301      	movs	r3, #1
 80024e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024ee:	2301      	movs	r3, #1
 80024f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024fa:	2300      	movs	r3, #0
 80024fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024fe:	2301      	movs	r3, #1
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002502:	2300      	movs	r3, #0
 8002504:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002506:	2300      	movs	r3, #0
 8002508:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800250a:	f107 030c 	add.w	r3, r7, #12
 800250e:	4619      	mov	r1, r3
 8002510:	480c      	ldr	r0, [pc, #48]	; (8002544 <MX_TIM2_Init+0xa4>)
 8002512:	f002 fef3 	bl	80052fc <HAL_TIM_Encoder_Init>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800251c:	f7ff fa8c 	bl	8001a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002520:	2300      	movs	r3, #0
 8002522:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002524:	2300      	movs	r3, #0
 8002526:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002528:	463b      	mov	r3, r7
 800252a:	4619      	mov	r1, r3
 800252c:	4805      	ldr	r0, [pc, #20]	; (8002544 <MX_TIM2_Init+0xa4>)
 800252e:	f003 fcdd 	bl	8005eec <HAL_TIMEx_MasterConfigSynchronization>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002538:	f7ff fa7e 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800253c:	bf00      	nop
 800253e:	3730      	adds	r7, #48	; 0x30
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	200003c4 	.word	0x200003c4

08002548 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b096      	sub	sp, #88	; 0x58
 800254c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800254e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800255a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	609a      	str	r2, [r3, #8]
 8002566:	60da      	str	r2, [r3, #12]
 8002568:	611a      	str	r2, [r3, #16]
 800256a:	615a      	str	r2, [r3, #20]
 800256c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800256e:	1d3b      	adds	r3, r7, #4
 8002570:	222c      	movs	r2, #44	; 0x2c
 8002572:	2100      	movs	r1, #0
 8002574:	4618      	mov	r0, r3
 8002576:	f003 fdc1 	bl	80060fc <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800257a:	4b39      	ldr	r3, [pc, #228]	; (8002660 <MX_TIM15_Init+0x118>)
 800257c:	4a39      	ldr	r2, [pc, #228]	; (8002664 <MX_TIM15_Init+0x11c>)
 800257e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 64 - 1;
 8002580:	4b37      	ldr	r3, [pc, #220]	; (8002660 <MX_TIM15_Init+0x118>)
 8002582:	223f      	movs	r2, #63	; 0x3f
 8002584:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002586:	4b36      	ldr	r3, [pc, #216]	; (8002660 <MX_TIM15_Init+0x118>)
 8002588:	2200      	movs	r2, #0
 800258a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 100 - 1;
 800258c:	4b34      	ldr	r3, [pc, #208]	; (8002660 <MX_TIM15_Init+0x118>)
 800258e:	2263      	movs	r2, #99	; 0x63
 8002590:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002592:	4b33      	ldr	r3, [pc, #204]	; (8002660 <MX_TIM15_Init+0x118>)
 8002594:	2200      	movs	r2, #0
 8002596:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002598:	4b31      	ldr	r3, [pc, #196]	; (8002660 <MX_TIM15_Init+0x118>)
 800259a:	2200      	movs	r2, #0
 800259c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800259e:	4b30      	ldr	r3, [pc, #192]	; (8002660 <MX_TIM15_Init+0x118>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80025a4:	482e      	ldr	r0, [pc, #184]	; (8002660 <MX_TIM15_Init+0x118>)
 80025a6:	f002 fceb 	bl	8004f80 <HAL_TIM_PWM_Init>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_TIM15_Init+0x6c>
  {
    Error_Handler();
 80025b0:	f7ff fa42 	bl	8001a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025b4:	2300      	movs	r3, #0
 80025b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025b8:	2300      	movs	r3, #0
 80025ba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80025bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025c0:	4619      	mov	r1, r3
 80025c2:	4827      	ldr	r0, [pc, #156]	; (8002660 <MX_TIM15_Init+0x118>)
 80025c4:	f003 fc92 	bl	8005eec <HAL_TIMEx_MasterConfigSynchronization>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <MX_TIM15_Init+0x8a>
  {
    Error_Handler();
 80025ce:	f7ff fa33 	bl	8001a38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025d2:	2360      	movs	r3, #96	; 0x60
 80025d4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025da:	2300      	movs	r3, #0
 80025dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025de:	2300      	movs	r3, #0
 80025e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025e2:	2300      	movs	r3, #0
 80025e4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025e6:	2300      	movs	r3, #0
 80025e8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025ea:	2300      	movs	r3, #0
 80025ec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025f2:	2200      	movs	r2, #0
 80025f4:	4619      	mov	r1, r3
 80025f6:	481a      	ldr	r0, [pc, #104]	; (8002660 <MX_TIM15_Init+0x118>)
 80025f8:	f003 f85c 	bl	80056b4 <HAL_TIM_PWM_ConfigChannel>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_TIM15_Init+0xbe>
  {
    Error_Handler();
 8002602:	f7ff fa19 	bl	8001a38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002606:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800260a:	2204      	movs	r2, #4
 800260c:	4619      	mov	r1, r3
 800260e:	4814      	ldr	r0, [pc, #80]	; (8002660 <MX_TIM15_Init+0x118>)
 8002610:	f003 f850 	bl	80056b4 <HAL_TIM_PWM_ConfigChannel>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_TIM15_Init+0xd6>
  {
    Error_Handler();
 800261a:	f7ff fa0d 	bl	8001a38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800261e:	2300      	movs	r3, #0
 8002620:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002622:	2300      	movs	r3, #0
 8002624:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002632:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002636:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002638:	2300      	movs	r3, #0
 800263a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800263c:	1d3b      	adds	r3, r7, #4
 800263e:	4619      	mov	r1, r3
 8002640:	4807      	ldr	r0, [pc, #28]	; (8002660 <MX_TIM15_Init+0x118>)
 8002642:	f003 fcb9 	bl	8005fb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <MX_TIM15_Init+0x108>
  {
    Error_Handler();
 800264c:	f7ff f9f4 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002650:	4803      	ldr	r0, [pc, #12]	; (8002660 <MX_TIM15_Init+0x118>)
 8002652:	f000 f89b 	bl	800278c <HAL_TIM_MspPostInit>

}
 8002656:	bf00      	nop
 8002658:	3758      	adds	r7, #88	; 0x58
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000410 	.word	0x20000410
 8002664:	40014000 	.word	0x40014000

08002668 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08c      	sub	sp, #48	; 0x30
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002670:	f107 031c 	add.w	r3, r7, #28
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	60da      	str	r2, [r3, #12]
 800267e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a2f      	ldr	r2, [pc, #188]	; (8002744 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d12a      	bne.n	80026e0 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800268a:	4b2f      	ldr	r3, [pc, #188]	; (8002748 <HAL_TIM_Encoder_MspInit+0xe0>)
 800268c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800268e:	4a2e      	ldr	r2, [pc, #184]	; (8002748 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002690:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002694:	6613      	str	r3, [r2, #96]	; 0x60
 8002696:	4b2c      	ldr	r3, [pc, #176]	; (8002748 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800269a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800269e:	61bb      	str	r3, [r7, #24]
 80026a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a2:	4b29      	ldr	r3, [pc, #164]	; (8002748 <HAL_TIM_Encoder_MspInit+0xe0>)
 80026a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a6:	4a28      	ldr	r2, [pc, #160]	; (8002748 <HAL_TIM_Encoder_MspInit+0xe0>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ae:	4b26      	ldr	r3, [pc, #152]	; (8002748 <HAL_TIM_Encoder_MspInit+0xe0>)
 80026b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c0:	2302      	movs	r3, #2
 80026c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c8:	2300      	movs	r3, #0
 80026ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026cc:	2301      	movs	r3, #1
 80026ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d0:	f107 031c 	add.w	r3, r7, #28
 80026d4:	4619      	mov	r1, r3
 80026d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026da:	f000 fa61 	bl	8002ba0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80026de:	e02d      	b.n	800273c <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM2)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e8:	d128      	bne.n	800273c <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026ea:	4b17      	ldr	r3, [pc, #92]	; (8002748 <HAL_TIM_Encoder_MspInit+0xe0>)
 80026ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ee:	4a16      	ldr	r2, [pc, #88]	; (8002748 <HAL_TIM_Encoder_MspInit+0xe0>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	6593      	str	r3, [r2, #88]	; 0x58
 80026f6:	4b14      	ldr	r3, [pc, #80]	; (8002748 <HAL_TIM_Encoder_MspInit+0xe0>)
 80026f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002702:	4b11      	ldr	r3, [pc, #68]	; (8002748 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002706:	4a10      	ldr	r2, [pc, #64]	; (8002748 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800270e:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800271a:	2303      	movs	r3, #3
 800271c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271e:	2302      	movs	r3, #2
 8002720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002726:	2300      	movs	r3, #0
 8002728:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800272a:	2301      	movs	r3, #1
 800272c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272e:	f107 031c 	add.w	r3, r7, #28
 8002732:	4619      	mov	r1, r3
 8002734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002738:	f000 fa32 	bl	8002ba0 <HAL_GPIO_Init>
}
 800273c:	bf00      	nop
 800273e:	3730      	adds	r7, #48	; 0x30
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40012c00 	.word	0x40012c00
 8002748:	40021000 	.word	0x40021000

0800274c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a0a      	ldr	r2, [pc, #40]	; (8002784 <HAL_TIM_PWM_MspInit+0x38>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d10b      	bne.n	8002776 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800275e:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <HAL_TIM_PWM_MspInit+0x3c>)
 8002760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002762:	4a09      	ldr	r2, [pc, #36]	; (8002788 <HAL_TIM_PWM_MspInit+0x3c>)
 8002764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002768:	6613      	str	r3, [r2, #96]	; 0x60
 800276a:	4b07      	ldr	r3, [pc, #28]	; (8002788 <HAL_TIM_PWM_MspInit+0x3c>)
 800276c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800276e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002776:	bf00      	nop
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40014000 	.word	0x40014000
 8002788:	40021000 	.word	0x40021000

0800278c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002794:	f107 030c 	add.w	r3, r7, #12
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	60da      	str	r2, [r3, #12]
 80027a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a11      	ldr	r2, [pc, #68]	; (80027f0 <HAL_TIM_MspPostInit+0x64>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d11c      	bne.n	80027e8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ae:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <HAL_TIM_MspPostInit+0x68>)
 80027b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b2:	4a10      	ldr	r2, [pc, #64]	; (80027f4 <HAL_TIM_MspPostInit+0x68>)
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ba:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <HAL_TIM_MspPostInit+0x68>)
 80027bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    PA3     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027c6:	230c      	movs	r3, #12
 80027c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ca:	2302      	movs	r3, #2
 80027cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80027d6:	230e      	movs	r3, #14
 80027d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027da:	f107 030c 	add.w	r3, r7, #12
 80027de:	4619      	mov	r1, r3
 80027e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027e4:	f000 f9dc 	bl	8002ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80027e8:	bf00      	nop
 80027ea:	3720      	adds	r7, #32
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40014000 	.word	0x40014000
 80027f4:	40021000 	.word	0x40021000

080027f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80027f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002830 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027fc:	f7ff fde4 	bl	80023c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002800:	480c      	ldr	r0, [pc, #48]	; (8002834 <LoopForever+0x6>)
  ldr r1, =_edata
 8002802:	490d      	ldr	r1, [pc, #52]	; (8002838 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002804:	4a0d      	ldr	r2, [pc, #52]	; (800283c <LoopForever+0xe>)
  movs r3, #0
 8002806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002808:	e002      	b.n	8002810 <LoopCopyDataInit>

0800280a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800280a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800280c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800280e:	3304      	adds	r3, #4

08002810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002814:	d3f9      	bcc.n	800280a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002816:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002818:	4c0a      	ldr	r4, [pc, #40]	; (8002844 <LoopForever+0x16>)
  movs r3, #0
 800281a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800281c:	e001      	b.n	8002822 <LoopFillZerobss>

0800281e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800281e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002820:	3204      	adds	r2, #4

08002822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002824:	d3fb      	bcc.n	800281e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002826:	f003 fc45 	bl	80060b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800282a:	f7fe fbbd 	bl	8000fa8 <main>

0800282e <LoopForever>:

LoopForever:
    b LoopForever
 800282e:	e7fe      	b.n	800282e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002830:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002838:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 800283c:	08009ab8 	.word	0x08009ab8
  ldr r2, =_sbss
 8002840:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8002844:	20000470 	.word	0x20000470

08002848 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002848:	e7fe      	b.n	8002848 <ADC1_IRQHandler>

0800284a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002850:	2300      	movs	r3, #0
 8002852:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002854:	2003      	movs	r0, #3
 8002856:	f000 f961 	bl	8002b1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800285a:	2000      	movs	r0, #0
 800285c:	f000 f80e 	bl	800287c <HAL_InitTick>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	71fb      	strb	r3, [r7, #7]
 800286a:	e001      	b.n	8002870 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800286c:	f7ff fc82 	bl	8002174 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002870:	79fb      	ldrb	r3, [r7, #7]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002888:	4b17      	ldr	r3, [pc, #92]	; (80028e8 <HAL_InitTick+0x6c>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d023      	beq.n	80028d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002890:	4b16      	ldr	r3, [pc, #88]	; (80028ec <HAL_InitTick+0x70>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4b14      	ldr	r3, [pc, #80]	; (80028e8 <HAL_InitTick+0x6c>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	4619      	mov	r1, r3
 800289a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800289e:	fbb3 f3f1 	udiv	r3, r3, r1
 80028a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 f96d 	bl	8002b86 <HAL_SYSTICK_Config>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10f      	bne.n	80028d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b0f      	cmp	r3, #15
 80028b6:	d809      	bhi.n	80028cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028b8:	2200      	movs	r2, #0
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	f04f 30ff 	mov.w	r0, #4294967295
 80028c0:	f000 f937 	bl	8002b32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028c4:	4a0a      	ldr	r2, [pc, #40]	; (80028f0 <HAL_InitTick+0x74>)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	e007      	b.n	80028dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
 80028d0:	e004      	b.n	80028dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	73fb      	strb	r3, [r7, #15]
 80028d6:	e001      	b.n	80028dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	200000a0 	.word	0x200000a0
 80028ec:	20000098 	.word	0x20000098
 80028f0:	2000009c 	.word	0x2000009c

080028f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_IncTick+0x20>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	461a      	mov	r2, r3
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_IncTick+0x24>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4413      	add	r3, r2
 8002904:	4a04      	ldr	r2, [pc, #16]	; (8002918 <HAL_IncTick+0x24>)
 8002906:	6013      	str	r3, [r2, #0]
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	200000a0 	.word	0x200000a0
 8002918:	2000045c 	.word	0x2000045c

0800291c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return uwTick;
 8002920:	4b03      	ldr	r3, [pc, #12]	; (8002930 <HAL_GetTick+0x14>)
 8002922:	681b      	ldr	r3, [r3, #0]
}
 8002924:	4618      	mov	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	2000045c 	.word	0x2000045c

08002934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800293c:	f7ff ffee 	bl	800291c <HAL_GetTick>
 8002940:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294c:	d005      	beq.n	800295a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800294e:	4b0a      	ldr	r3, [pc, #40]	; (8002978 <HAL_Delay+0x44>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	461a      	mov	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4413      	add	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800295a:	bf00      	nop
 800295c:	f7ff ffde 	bl	800291c <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	429a      	cmp	r2, r3
 800296a:	d8f7      	bhi.n	800295c <HAL_Delay+0x28>
  {
  }
}
 800296c:	bf00      	nop
 800296e:	bf00      	nop
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	200000a0 	.word	0x200000a0

0800297c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800298c:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <__NVIC_SetPriorityGrouping+0x44>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002998:	4013      	ands	r3, r2
 800299a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ae:	4a04      	ldr	r2, [pc, #16]	; (80029c0 <__NVIC_SetPriorityGrouping+0x44>)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	60d3      	str	r3, [r2, #12]
}
 80029b4:	bf00      	nop
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	e000ed00 	.word	0xe000ed00

080029c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029c8:	4b04      	ldr	r3, [pc, #16]	; (80029dc <__NVIC_GetPriorityGrouping+0x18>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	0a1b      	lsrs	r3, r3, #8
 80029ce:	f003 0307 	and.w	r3, r3, #7
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	e000ed00 	.word	0xe000ed00

080029e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	db0b      	blt.n	8002a0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029f2:	79fb      	ldrb	r3, [r7, #7]
 80029f4:	f003 021f 	and.w	r2, r3, #31
 80029f8:	4907      	ldr	r1, [pc, #28]	; (8002a18 <__NVIC_EnableIRQ+0x38>)
 80029fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fe:	095b      	lsrs	r3, r3, #5
 8002a00:	2001      	movs	r0, #1
 8002a02:	fa00 f202 	lsl.w	r2, r0, r2
 8002a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	e000e100 	.word	0xe000e100

08002a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	4603      	mov	r3, r0
 8002a24:	6039      	str	r1, [r7, #0]
 8002a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	db0a      	blt.n	8002a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	490c      	ldr	r1, [pc, #48]	; (8002a68 <__NVIC_SetPriority+0x4c>)
 8002a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3a:	0112      	lsls	r2, r2, #4
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	440b      	add	r3, r1
 8002a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a44:	e00a      	b.n	8002a5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	4908      	ldr	r1, [pc, #32]	; (8002a6c <__NVIC_SetPriority+0x50>)
 8002a4c:	79fb      	ldrb	r3, [r7, #7]
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	3b04      	subs	r3, #4
 8002a54:	0112      	lsls	r2, r2, #4
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	440b      	add	r3, r1
 8002a5a:	761a      	strb	r2, [r3, #24]
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	e000e100 	.word	0xe000e100
 8002a6c:	e000ed00 	.word	0xe000ed00

08002a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b089      	sub	sp, #36	; 0x24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	f1c3 0307 	rsb	r3, r3, #7
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	bf28      	it	cs
 8002a8e:	2304      	movcs	r3, #4
 8002a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	3304      	adds	r3, #4
 8002a96:	2b06      	cmp	r3, #6
 8002a98:	d902      	bls.n	8002aa0 <NVIC_EncodePriority+0x30>
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	3b03      	subs	r3, #3
 8002a9e:	e000      	b.n	8002aa2 <NVIC_EncodePriority+0x32>
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43da      	mvns	r2, r3
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	401a      	ands	r2, r3
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac2:	43d9      	mvns	r1, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac8:	4313      	orrs	r3, r2
         );
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3724      	adds	r7, #36	; 0x24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
	...

08002ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ae8:	d301      	bcc.n	8002aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aea:	2301      	movs	r3, #1
 8002aec:	e00f      	b.n	8002b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aee:	4a0a      	ldr	r2, [pc, #40]	; (8002b18 <SysTick_Config+0x40>)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002af6:	210f      	movs	r1, #15
 8002af8:	f04f 30ff 	mov.w	r0, #4294967295
 8002afc:	f7ff ff8e 	bl	8002a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b00:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <SysTick_Config+0x40>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b06:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <SysTick_Config+0x40>)
 8002b08:	2207      	movs	r2, #7
 8002b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	e000e010 	.word	0xe000e010

08002b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7ff ff29 	bl	800297c <__NVIC_SetPriorityGrouping>
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b086      	sub	sp, #24
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	4603      	mov	r3, r0
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
 8002b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b44:	f7ff ff3e 	bl	80029c4 <__NVIC_GetPriorityGrouping>
 8002b48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	68b9      	ldr	r1, [r7, #8]
 8002b4e:	6978      	ldr	r0, [r7, #20]
 8002b50:	f7ff ff8e 	bl	8002a70 <NVIC_EncodePriority>
 8002b54:	4602      	mov	r2, r0
 8002b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff ff5d 	bl	8002a1c <__NVIC_SetPriority>
}
 8002b62:	bf00      	nop
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b082      	sub	sp, #8
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	4603      	mov	r3, r0
 8002b72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff ff31 	bl	80029e0 <__NVIC_EnableIRQ>
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff ffa2 	bl	8002ad8 <SysTick_Config>
 8002b94:	4603      	mov	r3, r0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b087      	sub	sp, #28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bae:	e148      	b.n	8002e42 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 813a 	beq.w	8002e3c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d005      	beq.n	8002be0 <HAL_GPIO_Init+0x40>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d130      	bne.n	8002c42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	2203      	movs	r2, #3
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c16:	2201      	movs	r2, #1
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4013      	ands	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	091b      	lsrs	r3, r3, #4
 8002c2c:	f003 0201 	and.w	r2, r3, #1
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	d017      	beq.n	8002c7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	2203      	movs	r2, #3
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4013      	ands	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d123      	bne.n	8002cd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	08da      	lsrs	r2, r3, #3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3208      	adds	r2, #8
 8002c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4013      	ands	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	691a      	ldr	r2, [r3, #16]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	08da      	lsrs	r2, r3, #3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3208      	adds	r2, #8
 8002ccc:	6939      	ldr	r1, [r7, #16]
 8002cce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	2203      	movs	r2, #3
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 0203 	and.w	r2, r3, #3
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 8094 	beq.w	8002e3c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d14:	4b52      	ldr	r3, [pc, #328]	; (8002e60 <HAL_GPIO_Init+0x2c0>)
 8002d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d18:	4a51      	ldr	r2, [pc, #324]	; (8002e60 <HAL_GPIO_Init+0x2c0>)
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	6613      	str	r3, [r2, #96]	; 0x60
 8002d20:	4b4f      	ldr	r3, [pc, #316]	; (8002e60 <HAL_GPIO_Init+0x2c0>)
 8002d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d2c:	4a4d      	ldr	r2, [pc, #308]	; (8002e64 <HAL_GPIO_Init+0x2c4>)
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	089b      	lsrs	r3, r3, #2
 8002d32:	3302      	adds	r3, #2
 8002d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	220f      	movs	r2, #15
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d56:	d00d      	beq.n	8002d74 <HAL_GPIO_Init+0x1d4>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a43      	ldr	r2, [pc, #268]	; (8002e68 <HAL_GPIO_Init+0x2c8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d007      	beq.n	8002d70 <HAL_GPIO_Init+0x1d0>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a42      	ldr	r2, [pc, #264]	; (8002e6c <HAL_GPIO_Init+0x2cc>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d101      	bne.n	8002d6c <HAL_GPIO_Init+0x1cc>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	e004      	b.n	8002d76 <HAL_GPIO_Init+0x1d6>
 8002d6c:	2307      	movs	r3, #7
 8002d6e:	e002      	b.n	8002d76 <HAL_GPIO_Init+0x1d6>
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <HAL_GPIO_Init+0x1d6>
 8002d74:	2300      	movs	r3, #0
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	f002 0203 	and.w	r2, r2, #3
 8002d7c:	0092      	lsls	r2, r2, #2
 8002d7e:	4093      	lsls	r3, r2
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d86:	4937      	ldr	r1, [pc, #220]	; (8002e64 <HAL_GPIO_Init+0x2c4>)
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	089b      	lsrs	r3, r3, #2
 8002d8c:	3302      	adds	r3, #2
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d94:	4b36      	ldr	r3, [pc, #216]	; (8002e70 <HAL_GPIO_Init+0x2d0>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4013      	ands	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002db8:	4a2d      	ldr	r2, [pc, #180]	; (8002e70 <HAL_GPIO_Init+0x2d0>)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002dbe:	4b2c      	ldr	r3, [pc, #176]	; (8002e70 <HAL_GPIO_Init+0x2d0>)
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002de2:	4a23      	ldr	r2, [pc, #140]	; (8002e70 <HAL_GPIO_Init+0x2d0>)
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002de8:	4b21      	ldr	r3, [pc, #132]	; (8002e70 <HAL_GPIO_Init+0x2d0>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	43db      	mvns	r3, r3
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	4013      	ands	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e0c:	4a18      	ldr	r2, [pc, #96]	; (8002e70 <HAL_GPIO_Init+0x2d0>)
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002e12:	4b17      	ldr	r3, [pc, #92]	; (8002e70 <HAL_GPIO_Init+0x2d0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e36:	4a0e      	ldr	r2, [pc, #56]	; (8002e70 <HAL_GPIO_Init+0x2d0>)
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f47f aeaf 	bne.w	8002bb0 <HAL_GPIO_Init+0x10>
  }
}
 8002e52:	bf00      	nop
 8002e54:	bf00      	nop
 8002e56:	371c      	adds	r7, #28
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	40021000 	.word	0x40021000
 8002e64:	40010000 	.word	0x40010000
 8002e68:	48000400 	.word	0x48000400
 8002e6c:	48000800 	.word	0x48000800
 8002e70:	40010400 	.word	0x40010400

08002e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	807b      	strh	r3, [r7, #2]
 8002e80:	4613      	mov	r3, r2
 8002e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e84:	787b      	ldrb	r3, [r7, #1]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e8a:	887a      	ldrh	r2, [r7, #2]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e90:	e002      	b.n	8002e98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e92:	887a      	ldrh	r2, [r7, #2]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002eb6:	887a      	ldrh	r2, [r7, #2]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	041a      	lsls	r2, r3, #16
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	43d9      	mvns	r1, r3
 8002ec2:	887b      	ldrh	r3, [r7, #2]
 8002ec4:	400b      	ands	r3, r1
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	619a      	str	r2, [r3, #24]
}
 8002ecc:	bf00      	nop
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ee2:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ee4:	695a      	ldr	r2, [r3, #20]
 8002ee6:	88fb      	ldrh	r3, [r7, #6]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d006      	beq.n	8002efc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002eee:	4a05      	ldr	r2, [pc, #20]	; (8002f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ef0:	88fb      	ldrh	r3, [r7, #6]
 8002ef2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fe f902 	bl	8001100 <HAL_GPIO_EXTI_Callback>
  }
}
 8002efc:	bf00      	nop
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40010400 	.word	0x40010400

08002f08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e081      	b.n	800301e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7fd ffe2 	bl	8000ef8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2224      	movs	r2, #36	; 0x24
 8002f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0201 	bic.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d107      	bne.n	8002f82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	e006      	b.n	8002f90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d104      	bne.n	8002fa2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fa0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6812      	ldr	r2, [r2, #0]
 8002fac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fb4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fc4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691a      	ldr	r2, [r3, #16]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69d9      	ldr	r1, [r3, #28]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a1a      	ldr	r2, [r3, #32]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af02      	add	r7, sp, #8
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	607a      	str	r2, [r7, #4]
 8003032:	461a      	mov	r2, r3
 8003034:	460b      	mov	r3, r1
 8003036:	817b      	strh	r3, [r7, #10]
 8003038:	4613      	mov	r3, r2
 800303a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b20      	cmp	r3, #32
 8003046:	f040 80da 	bne.w	80031fe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_I2C_Master_Transmit+0x30>
 8003054:	2302      	movs	r3, #2
 8003056:	e0d3      	b.n	8003200 <HAL_I2C_Master_Transmit+0x1d8>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003060:	f7ff fc5c 	bl	800291c <HAL_GetTick>
 8003064:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	2319      	movs	r3, #25
 800306c:	2201      	movs	r2, #1
 800306e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 fbc6 	bl	8003804 <I2C_WaitOnFlagUntilTimeout>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e0be      	b.n	8003200 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2221      	movs	r2, #33	; 0x21
 8003086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2210      	movs	r2, #16
 800308e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	893a      	ldrh	r2, [r7, #8]
 80030a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2bff      	cmp	r3, #255	; 0xff
 80030b2:	d90e      	bls.n	80030d2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	22ff      	movs	r2, #255	; 0xff
 80030b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	8979      	ldrh	r1, [r7, #10]
 80030c2:	4b51      	ldr	r3, [pc, #324]	; (8003208 <HAL_I2C_Master_Transmit+0x1e0>)
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 fd42 	bl	8003b54 <I2C_TransferConfig>
 80030d0:	e06c      	b.n	80031ac <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	8979      	ldrh	r1, [r7, #10]
 80030e4:	4b48      	ldr	r3, [pc, #288]	; (8003208 <HAL_I2C_Master_Transmit+0x1e0>)
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 fd31 	bl	8003b54 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80030f2:	e05b      	b.n	80031ac <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	6a39      	ldr	r1, [r7, #32]
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 fbc3 	bl	8003884 <I2C_WaitOnTXISFlagUntilTimeout>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e07b      	b.n	8003200 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	781a      	ldrb	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313c:	b29b      	uxth	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d034      	beq.n	80031ac <HAL_I2C_Master_Transmit+0x184>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003146:	2b00      	cmp	r3, #0
 8003148:	d130      	bne.n	80031ac <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	2200      	movs	r2, #0
 8003152:	2180      	movs	r1, #128	; 0x80
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 fb55 	bl	8003804 <I2C_WaitOnFlagUntilTimeout>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e04d      	b.n	8003200 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003168:	b29b      	uxth	r3, r3
 800316a:	2bff      	cmp	r3, #255	; 0xff
 800316c:	d90e      	bls.n	800318c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	22ff      	movs	r2, #255	; 0xff
 8003172:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003178:	b2da      	uxtb	r2, r3
 800317a:	8979      	ldrh	r1, [r7, #10]
 800317c:	2300      	movs	r3, #0
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 fce5 	bl	8003b54 <I2C_TransferConfig>
 800318a:	e00f      	b.n	80031ac <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003190:	b29a      	uxth	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319a:	b2da      	uxtb	r2, r3
 800319c:	8979      	ldrh	r1, [r7, #10]
 800319e:	2300      	movs	r3, #0
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 fcd4 	bl	8003b54 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d19e      	bne.n	80030f4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	6a39      	ldr	r1, [r7, #32]
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 fba2 	bl	8003904 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e01a      	b.n	8003200 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2220      	movs	r2, #32
 80031d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6859      	ldr	r1, [r3, #4]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	4b0b      	ldr	r3, [pc, #44]	; (800320c <HAL_I2C_Master_Transmit+0x1e4>)
 80031de:	400b      	ands	r3, r1
 80031e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	e000      	b.n	8003200 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80031fe:	2302      	movs	r3, #2
  }
}
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	80002000 	.word	0x80002000
 800320c:	fe00e800 	.word	0xfe00e800

08003210 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b088      	sub	sp, #32
 8003214:	af02      	add	r7, sp, #8
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	4608      	mov	r0, r1
 800321a:	4611      	mov	r1, r2
 800321c:	461a      	mov	r2, r3
 800321e:	4603      	mov	r3, r0
 8003220:	817b      	strh	r3, [r7, #10]
 8003222:	460b      	mov	r3, r1
 8003224:	813b      	strh	r3, [r7, #8]
 8003226:	4613      	mov	r3, r2
 8003228:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b20      	cmp	r3, #32
 8003234:	f040 80f9 	bne.w	800342a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <HAL_I2C_Mem_Write+0x34>
 800323e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003240:	2b00      	cmp	r3, #0
 8003242:	d105      	bne.n	8003250 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f44f 7200 	mov.w	r2, #512	; 0x200
 800324a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e0ed      	b.n	800342c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <HAL_I2C_Mem_Write+0x4e>
 800325a:	2302      	movs	r3, #2
 800325c:	e0e6      	b.n	800342c <HAL_I2C_Mem_Write+0x21c>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003266:	f7ff fb59 	bl	800291c <HAL_GetTick>
 800326a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	2319      	movs	r3, #25
 8003272:	2201      	movs	r2, #1
 8003274:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 fac3 	bl	8003804 <I2C_WaitOnFlagUntilTimeout>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0d1      	b.n	800342c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2221      	movs	r2, #33	; 0x21
 800328c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2240      	movs	r2, #64	; 0x40
 8003294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a3a      	ldr	r2, [r7, #32]
 80032a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032b0:	88f8      	ldrh	r0, [r7, #6]
 80032b2:	893a      	ldrh	r2, [r7, #8]
 80032b4:	8979      	ldrh	r1, [r7, #10]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	9301      	str	r3, [sp, #4]
 80032ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	4603      	mov	r3, r0
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 f9d3 	bl	800366c <I2C_RequestMemoryWrite>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0a9      	b.n	800342c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032dc:	b29b      	uxth	r3, r3
 80032de:	2bff      	cmp	r3, #255	; 0xff
 80032e0:	d90e      	bls.n	8003300 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	22ff      	movs	r2, #255	; 0xff
 80032e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	8979      	ldrh	r1, [r7, #10]
 80032f0:	2300      	movs	r3, #0
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 fc2b 	bl	8003b54 <I2C_TransferConfig>
 80032fe:	e00f      	b.n	8003320 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330e:	b2da      	uxtb	r2, r3
 8003310:	8979      	ldrh	r1, [r7, #10]
 8003312:	2300      	movs	r3, #0
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 fc1a 	bl	8003b54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 faad 	bl	8003884 <I2C_WaitOnTXISFlagUntilTimeout>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e07b      	b.n	800342c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	781a      	ldrb	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334e:	b29b      	uxth	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335c:	3b01      	subs	r3, #1
 800335e:	b29a      	uxth	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003368:	b29b      	uxth	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d034      	beq.n	80033d8 <HAL_I2C_Mem_Write+0x1c8>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003372:	2b00      	cmp	r3, #0
 8003374:	d130      	bne.n	80033d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337c:	2200      	movs	r2, #0
 800337e:	2180      	movs	r1, #128	; 0x80
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 fa3f 	bl	8003804 <I2C_WaitOnFlagUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e04d      	b.n	800342c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003394:	b29b      	uxth	r3, r3
 8003396:	2bff      	cmp	r3, #255	; 0xff
 8003398:	d90e      	bls.n	80033b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	22ff      	movs	r2, #255	; 0xff
 800339e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	8979      	ldrh	r1, [r7, #10]
 80033a8:	2300      	movs	r3, #0
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 fbcf 	bl	8003b54 <I2C_TransferConfig>
 80033b6:	e00f      	b.n	80033d8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033bc:	b29a      	uxth	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	8979      	ldrh	r1, [r7, #10]
 80033ca:	2300      	movs	r3, #0
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 fbbe 	bl	8003b54 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033dc:	b29b      	uxth	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d19e      	bne.n	8003320 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 fa8c 	bl	8003904 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e01a      	b.n	800342c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2220      	movs	r2, #32
 80033fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6859      	ldr	r1, [r3, #4]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <HAL_I2C_Mem_Write+0x224>)
 800340a:	400b      	ands	r3, r1
 800340c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2220      	movs	r2, #32
 8003412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	e000      	b.n	800342c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800342a:	2302      	movs	r3, #2
  }
}
 800342c:	4618      	mov	r0, r3
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	fe00e800 	.word	0xfe00e800

08003438 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b088      	sub	sp, #32
 800343c:	af02      	add	r7, sp, #8
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	4608      	mov	r0, r1
 8003442:	4611      	mov	r1, r2
 8003444:	461a      	mov	r2, r3
 8003446:	4603      	mov	r3, r0
 8003448:	817b      	strh	r3, [r7, #10]
 800344a:	460b      	mov	r3, r1
 800344c:	813b      	strh	r3, [r7, #8]
 800344e:	4613      	mov	r3, r2
 8003450:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b20      	cmp	r3, #32
 800345c:	f040 80fd 	bne.w	800365a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d002      	beq.n	800346c <HAL_I2C_Mem_Read+0x34>
 8003466:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003468:	2b00      	cmp	r3, #0
 800346a:	d105      	bne.n	8003478 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003472:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e0f1      	b.n	800365c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <HAL_I2C_Mem_Read+0x4e>
 8003482:	2302      	movs	r3, #2
 8003484:	e0ea      	b.n	800365c <HAL_I2C_Mem_Read+0x224>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800348e:	f7ff fa45 	bl	800291c <HAL_GetTick>
 8003492:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	2319      	movs	r3, #25
 800349a:	2201      	movs	r2, #1
 800349c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 f9af 	bl	8003804 <I2C_WaitOnFlagUntilTimeout>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0d5      	b.n	800365c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2222      	movs	r2, #34	; 0x22
 80034b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2240      	movs	r2, #64	; 0x40
 80034bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a3a      	ldr	r2, [r7, #32]
 80034ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80034d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034d8:	88f8      	ldrh	r0, [r7, #6]
 80034da:	893a      	ldrh	r2, [r7, #8]
 80034dc:	8979      	ldrh	r1, [r7, #10]
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	9301      	str	r3, [sp, #4]
 80034e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	4603      	mov	r3, r0
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f913 	bl	8003714 <I2C_RequestMemoryRead>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d005      	beq.n	8003500 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e0ad      	b.n	800365c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003504:	b29b      	uxth	r3, r3
 8003506:	2bff      	cmp	r3, #255	; 0xff
 8003508:	d90e      	bls.n	8003528 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	22ff      	movs	r2, #255	; 0xff
 800350e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003514:	b2da      	uxtb	r2, r3
 8003516:	8979      	ldrh	r1, [r7, #10]
 8003518:	4b52      	ldr	r3, [pc, #328]	; (8003664 <HAL_I2C_Mem_Read+0x22c>)
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 fb17 	bl	8003b54 <I2C_TransferConfig>
 8003526:	e00f      	b.n	8003548 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003536:	b2da      	uxtb	r2, r3
 8003538:	8979      	ldrh	r1, [r7, #10]
 800353a:	4b4a      	ldr	r3, [pc, #296]	; (8003664 <HAL_I2C_Mem_Read+0x22c>)
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 fb06 	bl	8003b54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354e:	2200      	movs	r2, #0
 8003550:	2104      	movs	r1, #4
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 f956 	bl	8003804 <I2C_WaitOnFlagUntilTimeout>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e07c      	b.n	800365c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357e:	3b01      	subs	r3, #1
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003598:	b29b      	uxth	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d034      	beq.n	8003608 <HAL_I2C_Mem_Read+0x1d0>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d130      	bne.n	8003608 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ac:	2200      	movs	r2, #0
 80035ae:	2180      	movs	r1, #128	; 0x80
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 f927 	bl	8003804 <I2C_WaitOnFlagUntilTimeout>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e04d      	b.n	800365c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2bff      	cmp	r3, #255	; 0xff
 80035c8:	d90e      	bls.n	80035e8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	22ff      	movs	r2, #255	; 0xff
 80035ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	8979      	ldrh	r1, [r7, #10]
 80035d8:	2300      	movs	r3, #0
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 fab7 	bl	8003b54 <I2C_TransferConfig>
 80035e6:	e00f      	b.n	8003608 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	8979      	ldrh	r1, [r7, #10]
 80035fa:	2300      	movs	r3, #0
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 faa6 	bl	8003b54 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360c:	b29b      	uxth	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d19a      	bne.n	8003548 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 f974 	bl	8003904 <I2C_WaitOnSTOPFlagUntilTimeout>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e01a      	b.n	800365c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2220      	movs	r2, #32
 800362c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6859      	ldr	r1, [r3, #4]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <HAL_I2C_Mem_Read+0x230>)
 800363a:	400b      	ands	r3, r1
 800363c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2220      	movs	r2, #32
 8003642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003656:	2300      	movs	r3, #0
 8003658:	e000      	b.n	800365c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800365a:	2302      	movs	r3, #2
  }
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	80002400 	.word	0x80002400
 8003668:	fe00e800 	.word	0xfe00e800

0800366c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af02      	add	r7, sp, #8
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	4608      	mov	r0, r1
 8003676:	4611      	mov	r1, r2
 8003678:	461a      	mov	r2, r3
 800367a:	4603      	mov	r3, r0
 800367c:	817b      	strh	r3, [r7, #10]
 800367e:	460b      	mov	r3, r1
 8003680:	813b      	strh	r3, [r7, #8]
 8003682:	4613      	mov	r3, r2
 8003684:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003686:	88fb      	ldrh	r3, [r7, #6]
 8003688:	b2da      	uxtb	r2, r3
 800368a:	8979      	ldrh	r1, [r7, #10]
 800368c:	4b20      	ldr	r3, [pc, #128]	; (8003710 <I2C_RequestMemoryWrite+0xa4>)
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 fa5d 	bl	8003b54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800369a:	69fa      	ldr	r2, [r7, #28]
 800369c:	69b9      	ldr	r1, [r7, #24]
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f8f0 	bl	8003884 <I2C_WaitOnTXISFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e02c      	b.n	8003708 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036ae:	88fb      	ldrh	r3, [r7, #6]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d105      	bne.n	80036c0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036b4:	893b      	ldrh	r3, [r7, #8]
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	629a      	str	r2, [r3, #40]	; 0x28
 80036be:	e015      	b.n	80036ec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80036c0:	893b      	ldrh	r3, [r7, #8]
 80036c2:	0a1b      	lsrs	r3, r3, #8
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ce:	69fa      	ldr	r2, [r7, #28]
 80036d0:	69b9      	ldr	r1, [r7, #24]
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f000 f8d6 	bl	8003884 <I2C_WaitOnTXISFlagUntilTimeout>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e012      	b.n	8003708 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036e2:	893b      	ldrh	r3, [r7, #8]
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	2200      	movs	r2, #0
 80036f4:	2180      	movs	r1, #128	; 0x80
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 f884 	bl	8003804 <I2C_WaitOnFlagUntilTimeout>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e000      	b.n	8003708 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	80002000 	.word	0x80002000

08003714 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af02      	add	r7, sp, #8
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	4608      	mov	r0, r1
 800371e:	4611      	mov	r1, r2
 8003720:	461a      	mov	r2, r3
 8003722:	4603      	mov	r3, r0
 8003724:	817b      	strh	r3, [r7, #10]
 8003726:	460b      	mov	r3, r1
 8003728:	813b      	strh	r3, [r7, #8]
 800372a:	4613      	mov	r3, r2
 800372c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800372e:	88fb      	ldrh	r3, [r7, #6]
 8003730:	b2da      	uxtb	r2, r3
 8003732:	8979      	ldrh	r1, [r7, #10]
 8003734:	4b20      	ldr	r3, [pc, #128]	; (80037b8 <I2C_RequestMemoryRead+0xa4>)
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	2300      	movs	r3, #0
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 fa0a 	bl	8003b54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003740:	69fa      	ldr	r2, [r7, #28]
 8003742:	69b9      	ldr	r1, [r7, #24]
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 f89d 	bl	8003884 <I2C_WaitOnTXISFlagUntilTimeout>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e02c      	b.n	80037ae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003754:	88fb      	ldrh	r3, [r7, #6]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d105      	bne.n	8003766 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800375a:	893b      	ldrh	r3, [r7, #8]
 800375c:	b2da      	uxtb	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	629a      	str	r2, [r3, #40]	; 0x28
 8003764:	e015      	b.n	8003792 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003766:	893b      	ldrh	r3, [r7, #8]
 8003768:	0a1b      	lsrs	r3, r3, #8
 800376a:	b29b      	uxth	r3, r3
 800376c:	b2da      	uxtb	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003774:	69fa      	ldr	r2, [r7, #28]
 8003776:	69b9      	ldr	r1, [r7, #24]
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 f883 	bl	8003884 <I2C_WaitOnTXISFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e012      	b.n	80037ae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003788:	893b      	ldrh	r3, [r7, #8]
 800378a:	b2da      	uxtb	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	2200      	movs	r2, #0
 800379a:	2140      	movs	r1, #64	; 0x40
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 f831 	bl	8003804 <I2C_WaitOnFlagUntilTimeout>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e000      	b.n	80037ae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	80002000 	.word	0x80002000

080037bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d103      	bne.n	80037da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2200      	movs	r2, #0
 80037d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d007      	beq.n	80037f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699a      	ldr	r2, [r3, #24]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0201 	orr.w	r2, r2, #1
 80037f6:	619a      	str	r2, [r3, #24]
  }
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	603b      	str	r3, [r7, #0]
 8003810:	4613      	mov	r3, r2
 8003812:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003814:	e022      	b.n	800385c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381c:	d01e      	beq.n	800385c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800381e:	f7ff f87d 	bl	800291c <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	d302      	bcc.n	8003834 <I2C_WaitOnFlagUntilTimeout+0x30>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d113      	bne.n	800385c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003838:	f043 0220 	orr.w	r2, r3, #32
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e00f      	b.n	800387c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699a      	ldr	r2, [r3, #24]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	4013      	ands	r3, r2
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	429a      	cmp	r2, r3
 800386a:	bf0c      	ite	eq
 800386c:	2301      	moveq	r3, #1
 800386e:	2300      	movne	r3, #0
 8003870:	b2db      	uxtb	r3, r3
 8003872:	461a      	mov	r2, r3
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	429a      	cmp	r2, r3
 8003878:	d0cd      	beq.n	8003816 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003890:	e02c      	b.n	80038ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	68b9      	ldr	r1, [r7, #8]
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 f870 	bl	800397c <I2C_IsErrorOccurred>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e02a      	b.n	80038fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ac:	d01e      	beq.n	80038ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ae:	f7ff f835 	bl	800291c <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d302      	bcc.n	80038c4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d113      	bne.n	80038ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c8:	f043 0220 	orr.w	r2, r3, #32
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e007      	b.n	80038fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d1cb      	bne.n	8003892 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003910:	e028      	b.n	8003964 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	68b9      	ldr	r1, [r7, #8]
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 f830 	bl	800397c <I2C_IsErrorOccurred>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e026      	b.n	8003974 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003926:	f7fe fff9 	bl	800291c <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	429a      	cmp	r2, r3
 8003934:	d302      	bcc.n	800393c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d113      	bne.n	8003964 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003940:	f043 0220 	orr.w	r2, r3, #32
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e007      	b.n	8003974 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	f003 0320 	and.w	r3, r3, #32
 800396e:	2b20      	cmp	r3, #32
 8003970:	d1cf      	bne.n	8003912 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08a      	sub	sp, #40	; 0x28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003996:	2300      	movs	r3, #0
 8003998:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	f003 0310 	and.w	r3, r3, #16
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d075      	beq.n	8003a94 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2210      	movs	r2, #16
 80039ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039b0:	e056      	b.n	8003a60 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b8:	d052      	beq.n	8003a60 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039ba:	f7fe ffaf 	bl	800291c <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d302      	bcc.n	80039d0 <I2C_IsErrorOccurred+0x54>
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d147      	bne.n	8003a60 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039f2:	d12e      	bne.n	8003a52 <I2C_IsErrorOccurred+0xd6>
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039fa:	d02a      	beq.n	8003a52 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80039fc:	7cfb      	ldrb	r3, [r7, #19]
 80039fe:	2b20      	cmp	r3, #32
 8003a00:	d027      	beq.n	8003a52 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a10:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a12:	f7fe ff83 	bl	800291c <HAL_GetTick>
 8003a16:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a18:	e01b      	b.n	8003a52 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a1a:	f7fe ff7f 	bl	800291c <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b19      	cmp	r3, #25
 8003a26:	d914      	bls.n	8003a52 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2c:	f043 0220 	orr.w	r2, r3, #32
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	f003 0320 	and.w	r3, r3, #32
 8003a5c:	2b20      	cmp	r3, #32
 8003a5e:	d1dc      	bne.n	8003a1a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	2b20      	cmp	r3, #32
 8003a6c:	d003      	beq.n	8003a76 <I2C_IsErrorOccurred+0xfa>
 8003a6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d09d      	beq.n	80039b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d103      	bne.n	8003a86 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2220      	movs	r2, #32
 8003a84:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	f043 0304 	orr.w	r3, r3, #4
 8003a8c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00b      	beq.n	8003abe <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	f043 0301 	orr.w	r3, r3, #1
 8003aac:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ab6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00b      	beq.n	8003ae0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	f043 0308 	orr.w	r3, r3, #8
 8003ace:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ad8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00b      	beq.n	8003b02 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	f043 0302 	orr.w	r3, r3, #2
 8003af0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003afa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003b02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d01c      	beq.n	8003b44 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f7ff fe56 	bl	80037bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6859      	ldr	r1, [r3, #4]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	4b0d      	ldr	r3, [pc, #52]	; (8003b50 <I2C_IsErrorOccurred+0x1d4>)
 8003b1c:	400b      	ands	r3, r1
 8003b1e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	431a      	orrs	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003b44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3728      	adds	r7, #40	; 0x28
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	fe00e800 	.word	0xfe00e800

08003b54 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b087      	sub	sp, #28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	607b      	str	r3, [r7, #4]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	817b      	strh	r3, [r7, #10]
 8003b62:	4613      	mov	r3, r2
 8003b64:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b66:	897b      	ldrh	r3, [r7, #10]
 8003b68:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b6c:	7a7b      	ldrb	r3, [r7, #9]
 8003b6e:	041b      	lsls	r3, r3, #16
 8003b70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b74:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b82:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	0d5b      	lsrs	r3, r3, #21
 8003b8e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003b92:	4b08      	ldr	r3, [pc, #32]	; (8003bb4 <I2C_TransferConfig+0x60>)
 8003b94:	430b      	orrs	r3, r1
 8003b96:	43db      	mvns	r3, r3
 8003b98:	ea02 0103 	and.w	r1, r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003ba6:	bf00      	nop
 8003ba8:	371c      	adds	r7, #28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	03ff63ff 	.word	0x03ff63ff

08003bb8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b20      	cmp	r3, #32
 8003bcc:	d138      	bne.n	8003c40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d101      	bne.n	8003bdc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e032      	b.n	8003c42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2224      	movs	r2, #36	; 0x24
 8003be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0201 	bic.w	r2, r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6819      	ldr	r1, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0201 	orr.w	r2, r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	e000      	b.n	8003c42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c40:	2302      	movs	r3, #2
  }
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b085      	sub	sp, #20
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b20      	cmp	r3, #32
 8003c62:	d139      	bne.n	8003cd8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d101      	bne.n	8003c72 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e033      	b.n	8003cda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2224      	movs	r2, #36	; 0x24
 8003c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0201 	bic.w	r2, r2, #1
 8003c90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ca0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	021b      	lsls	r3, r3, #8
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0201 	orr.w	r2, r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	e000      	b.n	8003cda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cd8:	2302      	movs	r3, #2
  }
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
	...

08003ce8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003cec:	4b04      	ldr	r3, [pc, #16]	; (8003d00 <HAL_PWREx_GetVoltageRange+0x18>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	40007000 	.word	0x40007000

08003d04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d12:	d130      	bne.n	8003d76 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d14:	4b23      	ldr	r3, [pc, #140]	; (8003da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d20:	d038      	beq.n	8003d94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d22:	4b20      	ldr	r3, [pc, #128]	; (8003da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d2a:	4a1e      	ldr	r2, [pc, #120]	; (8003da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d30:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d32:	4b1d      	ldr	r3, [pc, #116]	; (8003da8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2232      	movs	r2, #50	; 0x32
 8003d38:	fb02 f303 	mul.w	r3, r2, r3
 8003d3c:	4a1b      	ldr	r2, [pc, #108]	; (8003dac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d42:	0c9b      	lsrs	r3, r3, #18
 8003d44:	3301      	adds	r3, #1
 8003d46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d48:	e002      	b.n	8003d50 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d50:	4b14      	ldr	r3, [pc, #80]	; (8003da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d5c:	d102      	bne.n	8003d64 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1f2      	bne.n	8003d4a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d64:	4b0f      	ldr	r3, [pc, #60]	; (8003da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d70:	d110      	bne.n	8003d94 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e00f      	b.n	8003d96 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d76:	4b0b      	ldr	r3, [pc, #44]	; (8003da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d82:	d007      	beq.n	8003d94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d84:	4b07      	ldr	r3, [pc, #28]	; (8003da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d8c:	4a05      	ldr	r2, [pc, #20]	; (8003da4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d92:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40007000 	.word	0x40007000
 8003da8:	20000098 	.word	0x20000098
 8003dac:	431bde83 	.word	0x431bde83

08003db0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d102      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	f000 bc02 	b.w	80045c8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dc4:	4b96      	ldr	r3, [pc, #600]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 030c 	and.w	r3, r3, #12
 8003dcc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dce:	4b94      	ldr	r3, [pc, #592]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f003 0303 	and.w	r3, r3, #3
 8003dd6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0310 	and.w	r3, r3, #16
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 80e4 	beq.w	8003fae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d007      	beq.n	8003dfc <HAL_RCC_OscConfig+0x4c>
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	2b0c      	cmp	r3, #12
 8003df0:	f040 808b 	bne.w	8003f0a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	f040 8087 	bne.w	8003f0a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003dfc:	4b88      	ldr	r3, [pc, #544]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_RCC_OscConfig+0x64>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e3d9      	b.n	80045c8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1a      	ldr	r2, [r3, #32]
 8003e18:	4b81      	ldr	r3, [pc, #516]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d004      	beq.n	8003e2e <HAL_RCC_OscConfig+0x7e>
 8003e24:	4b7e      	ldr	r3, [pc, #504]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e2c:	e005      	b.n	8003e3a <HAL_RCC_OscConfig+0x8a>
 8003e2e:	4b7c      	ldr	r3, [pc, #496]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e34:	091b      	lsrs	r3, r3, #4
 8003e36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d223      	bcs.n	8003e86 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 fd54 	bl	80048f0 <RCC_SetFlashLatencyFromMSIRange>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e3ba      	b.n	80045c8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e52:	4b73      	ldr	r3, [pc, #460]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a72      	ldr	r2, [pc, #456]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003e58:	f043 0308 	orr.w	r3, r3, #8
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	4b70      	ldr	r3, [pc, #448]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	496d      	ldr	r1, [pc, #436]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e70:	4b6b      	ldr	r3, [pc, #428]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	021b      	lsls	r3, r3, #8
 8003e7e:	4968      	ldr	r1, [pc, #416]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	604b      	str	r3, [r1, #4]
 8003e84:	e025      	b.n	8003ed2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e86:	4b66      	ldr	r3, [pc, #408]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a65      	ldr	r2, [pc, #404]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003e8c:	f043 0308 	orr.w	r3, r3, #8
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	4b63      	ldr	r3, [pc, #396]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	4960      	ldr	r1, [pc, #384]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ea4:	4b5e      	ldr	r3, [pc, #376]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	021b      	lsls	r3, r3, #8
 8003eb2:	495b      	ldr	r1, [pc, #364]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d109      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fd14 	bl	80048f0 <RCC_SetFlashLatencyFromMSIRange>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e37a      	b.n	80045c8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ed2:	f000 fc81 	bl	80047d8 <HAL_RCC_GetSysClockFreq>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	4b51      	ldr	r3, [pc, #324]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	091b      	lsrs	r3, r3, #4
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	4950      	ldr	r1, [pc, #320]	; (8004024 <HAL_RCC_OscConfig+0x274>)
 8003ee4:	5ccb      	ldrb	r3, [r1, r3]
 8003ee6:	f003 031f 	and.w	r3, r3, #31
 8003eea:	fa22 f303 	lsr.w	r3, r2, r3
 8003eee:	4a4e      	ldr	r2, [pc, #312]	; (8004028 <HAL_RCC_OscConfig+0x278>)
 8003ef0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ef2:	4b4e      	ldr	r3, [pc, #312]	; (800402c <HAL_RCC_OscConfig+0x27c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fe fcc0 	bl	800287c <HAL_InitTick>
 8003efc:	4603      	mov	r3, r0
 8003efe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d052      	beq.n	8003fac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003f06:	7bfb      	ldrb	r3, [r7, #15]
 8003f08:	e35e      	b.n	80045c8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d032      	beq.n	8003f78 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f12:	4b43      	ldr	r3, [pc, #268]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a42      	ldr	r2, [pc, #264]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003f18:	f043 0301 	orr.w	r3, r3, #1
 8003f1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f1e:	f7fe fcfd 	bl	800291c <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f24:	e008      	b.n	8003f38 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f26:	f7fe fcf9 	bl	800291c <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e347      	b.n	80045c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f38:	4b39      	ldr	r3, [pc, #228]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0f0      	beq.n	8003f26 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f44:	4b36      	ldr	r3, [pc, #216]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a35      	ldr	r2, [pc, #212]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003f4a:	f043 0308 	orr.w	r3, r3, #8
 8003f4e:	6013      	str	r3, [r2, #0]
 8003f50:	4b33      	ldr	r3, [pc, #204]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	4930      	ldr	r1, [pc, #192]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f62:	4b2f      	ldr	r3, [pc, #188]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	021b      	lsls	r3, r3, #8
 8003f70:	492b      	ldr	r1, [pc, #172]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	604b      	str	r3, [r1, #4]
 8003f76:	e01a      	b.n	8003fae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f78:	4b29      	ldr	r3, [pc, #164]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a28      	ldr	r2, [pc, #160]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003f7e:	f023 0301 	bic.w	r3, r3, #1
 8003f82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f84:	f7fe fcca 	bl	800291c <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f8c:	f7fe fcc6 	bl	800291c <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e314      	b.n	80045c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f9e:	4b20      	ldr	r3, [pc, #128]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f0      	bne.n	8003f8c <HAL_RCC_OscConfig+0x1dc>
 8003faa:	e000      	b.n	8003fae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d073      	beq.n	80040a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d005      	beq.n	8003fcc <HAL_RCC_OscConfig+0x21c>
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	2b0c      	cmp	r3, #12
 8003fc4:	d10e      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2b03      	cmp	r3, #3
 8003fca:	d10b      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fcc:	4b14      	ldr	r3, [pc, #80]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d063      	beq.n	80040a0 <HAL_RCC_OscConfig+0x2f0>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d15f      	bne.n	80040a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e2f1      	b.n	80045c8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fec:	d106      	bne.n	8003ffc <HAL_RCC_OscConfig+0x24c>
 8003fee:	4b0c      	ldr	r3, [pc, #48]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a0b      	ldr	r2, [pc, #44]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8003ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	e025      	b.n	8004048 <HAL_RCC_OscConfig+0x298>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004004:	d114      	bne.n	8004030 <HAL_RCC_OscConfig+0x280>
 8004006:	4b06      	ldr	r3, [pc, #24]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a05      	ldr	r2, [pc, #20]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 800400c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004010:	6013      	str	r3, [r2, #0]
 8004012:	4b03      	ldr	r3, [pc, #12]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a02      	ldr	r2, [pc, #8]	; (8004020 <HAL_RCC_OscConfig+0x270>)
 8004018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	e013      	b.n	8004048 <HAL_RCC_OscConfig+0x298>
 8004020:	40021000 	.word	0x40021000
 8004024:	08009620 	.word	0x08009620
 8004028:	20000098 	.word	0x20000098
 800402c:	2000009c 	.word	0x2000009c
 8004030:	4ba0      	ldr	r3, [pc, #640]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a9f      	ldr	r2, [pc, #636]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 8004036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800403a:	6013      	str	r3, [r2, #0]
 800403c:	4b9d      	ldr	r3, [pc, #628]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a9c      	ldr	r2, [pc, #624]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 8004042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d013      	beq.n	8004078 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004050:	f7fe fc64 	bl	800291c <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004058:	f7fe fc60 	bl	800291c <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b64      	cmp	r3, #100	; 0x64
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e2ae      	b.n	80045c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800406a:	4b92      	ldr	r3, [pc, #584]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0f0      	beq.n	8004058 <HAL_RCC_OscConfig+0x2a8>
 8004076:	e014      	b.n	80040a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004078:	f7fe fc50 	bl	800291c <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004080:	f7fe fc4c 	bl	800291c <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b64      	cmp	r3, #100	; 0x64
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e29a      	b.n	80045c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004092:	4b88      	ldr	r3, [pc, #544]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1f0      	bne.n	8004080 <HAL_RCC_OscConfig+0x2d0>
 800409e:	e000      	b.n	80040a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d060      	beq.n	8004170 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d005      	beq.n	80040c0 <HAL_RCC_OscConfig+0x310>
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	2b0c      	cmp	r3, #12
 80040b8:	d119      	bne.n	80040ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d116      	bne.n	80040ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040c0:	4b7c      	ldr	r3, [pc, #496]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d005      	beq.n	80040d8 <HAL_RCC_OscConfig+0x328>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e277      	b.n	80045c8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d8:	4b76      	ldr	r3, [pc, #472]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	061b      	lsls	r3, r3, #24
 80040e6:	4973      	ldr	r1, [pc, #460]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040ec:	e040      	b.n	8004170 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d023      	beq.n	800413e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040f6:	4b6f      	ldr	r3, [pc, #444]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a6e      	ldr	r2, [pc, #440]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 80040fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004100:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004102:	f7fe fc0b 	bl	800291c <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004108:	e008      	b.n	800411c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800410a:	f7fe fc07 	bl	800291c <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e255      	b.n	80045c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800411c:	4b65      	ldr	r3, [pc, #404]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0f0      	beq.n	800410a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004128:	4b62      	ldr	r3, [pc, #392]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	061b      	lsls	r3, r3, #24
 8004136:	495f      	ldr	r1, [pc, #380]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 8004138:	4313      	orrs	r3, r2
 800413a:	604b      	str	r3, [r1, #4]
 800413c:	e018      	b.n	8004170 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800413e:	4b5d      	ldr	r3, [pc, #372]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a5c      	ldr	r2, [pc, #368]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 8004144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414a:	f7fe fbe7 	bl	800291c <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004152:	f7fe fbe3 	bl	800291c <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e231      	b.n	80045c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004164:	4b53      	ldr	r3, [pc, #332]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1f0      	bne.n	8004152 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0308 	and.w	r3, r3, #8
 8004178:	2b00      	cmp	r3, #0
 800417a:	d03c      	beq.n	80041f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d01c      	beq.n	80041be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004184:	4b4b      	ldr	r3, [pc, #300]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 8004186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800418a:	4a4a      	ldr	r2, [pc, #296]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 800418c:	f043 0301 	orr.w	r3, r3, #1
 8004190:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004194:	f7fe fbc2 	bl	800291c <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800419c:	f7fe fbbe 	bl	800291c <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e20c      	b.n	80045c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041ae:	4b41      	ldr	r3, [pc, #260]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 80041b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d0ef      	beq.n	800419c <HAL_RCC_OscConfig+0x3ec>
 80041bc:	e01b      	b.n	80041f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041be:	4b3d      	ldr	r3, [pc, #244]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 80041c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041c4:	4a3b      	ldr	r2, [pc, #236]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 80041c6:	f023 0301 	bic.w	r3, r3, #1
 80041ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ce:	f7fe fba5 	bl	800291c <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041d6:	f7fe fba1 	bl	800291c <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e1ef      	b.n	80045c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041e8:	4b32      	ldr	r3, [pc, #200]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 80041ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1ef      	bne.n	80041d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 80a6 	beq.w	8004350 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004204:	2300      	movs	r3, #0
 8004206:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004208:	4b2a      	ldr	r3, [pc, #168]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 800420a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10d      	bne.n	8004230 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004214:	4b27      	ldr	r3, [pc, #156]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 8004216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004218:	4a26      	ldr	r2, [pc, #152]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 800421a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800421e:	6593      	str	r3, [r2, #88]	; 0x58
 8004220:	4b24      	ldr	r3, [pc, #144]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 8004222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004228:	60bb      	str	r3, [r7, #8]
 800422a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800422c:	2301      	movs	r3, #1
 800422e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004230:	4b21      	ldr	r3, [pc, #132]	; (80042b8 <HAL_RCC_OscConfig+0x508>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004238:	2b00      	cmp	r3, #0
 800423a:	d118      	bne.n	800426e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800423c:	4b1e      	ldr	r3, [pc, #120]	; (80042b8 <HAL_RCC_OscConfig+0x508>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a1d      	ldr	r2, [pc, #116]	; (80042b8 <HAL_RCC_OscConfig+0x508>)
 8004242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004246:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004248:	f7fe fb68 	bl	800291c <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004250:	f7fe fb64 	bl	800291c <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e1b2      	b.n	80045c8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004262:	4b15      	ldr	r3, [pc, #84]	; (80042b8 <HAL_RCC_OscConfig+0x508>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0f0      	beq.n	8004250 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d108      	bne.n	8004288 <HAL_RCC_OscConfig+0x4d8>
 8004276:	4b0f      	ldr	r3, [pc, #60]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 8004278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427c:	4a0d      	ldr	r2, [pc, #52]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 800427e:	f043 0301 	orr.w	r3, r3, #1
 8004282:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004286:	e029      	b.n	80042dc <HAL_RCC_OscConfig+0x52c>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2b05      	cmp	r3, #5
 800428e:	d115      	bne.n	80042bc <HAL_RCC_OscConfig+0x50c>
 8004290:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 8004292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004296:	4a07      	ldr	r2, [pc, #28]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 8004298:	f043 0304 	orr.w	r3, r3, #4
 800429c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042a0:	4b04      	ldr	r3, [pc, #16]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 80042a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a6:	4a03      	ldr	r2, [pc, #12]	; (80042b4 <HAL_RCC_OscConfig+0x504>)
 80042a8:	f043 0301 	orr.w	r3, r3, #1
 80042ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042b0:	e014      	b.n	80042dc <HAL_RCC_OscConfig+0x52c>
 80042b2:	bf00      	nop
 80042b4:	40021000 	.word	0x40021000
 80042b8:	40007000 	.word	0x40007000
 80042bc:	4b9a      	ldr	r3, [pc, #616]	; (8004528 <HAL_RCC_OscConfig+0x778>)
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c2:	4a99      	ldr	r2, [pc, #612]	; (8004528 <HAL_RCC_OscConfig+0x778>)
 80042c4:	f023 0301 	bic.w	r3, r3, #1
 80042c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042cc:	4b96      	ldr	r3, [pc, #600]	; (8004528 <HAL_RCC_OscConfig+0x778>)
 80042ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d2:	4a95      	ldr	r2, [pc, #596]	; (8004528 <HAL_RCC_OscConfig+0x778>)
 80042d4:	f023 0304 	bic.w	r3, r3, #4
 80042d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d016      	beq.n	8004312 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e4:	f7fe fb1a 	bl	800291c <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ea:	e00a      	b.n	8004302 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ec:	f7fe fb16 	bl	800291c <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e162      	b.n	80045c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004302:	4b89      	ldr	r3, [pc, #548]	; (8004528 <HAL_RCC_OscConfig+0x778>)
 8004304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0ed      	beq.n	80042ec <HAL_RCC_OscConfig+0x53c>
 8004310:	e015      	b.n	800433e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004312:	f7fe fb03 	bl	800291c <HAL_GetTick>
 8004316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004318:	e00a      	b.n	8004330 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800431a:	f7fe faff 	bl	800291c <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	f241 3288 	movw	r2, #5000	; 0x1388
 8004328:	4293      	cmp	r3, r2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e14b      	b.n	80045c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004330:	4b7d      	ldr	r3, [pc, #500]	; (8004528 <HAL_RCC_OscConfig+0x778>)
 8004332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1ed      	bne.n	800431a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800433e:	7ffb      	ldrb	r3, [r7, #31]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d105      	bne.n	8004350 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004344:	4b78      	ldr	r3, [pc, #480]	; (8004528 <HAL_RCC_OscConfig+0x778>)
 8004346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004348:	4a77      	ldr	r2, [pc, #476]	; (8004528 <HAL_RCC_OscConfig+0x778>)
 800434a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800434e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	2b00      	cmp	r3, #0
 800435a:	d03c      	beq.n	80043d6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	2b00      	cmp	r3, #0
 8004362:	d01c      	beq.n	800439e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004364:	4b70      	ldr	r3, [pc, #448]	; (8004528 <HAL_RCC_OscConfig+0x778>)
 8004366:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800436a:	4a6f      	ldr	r2, [pc, #444]	; (8004528 <HAL_RCC_OscConfig+0x778>)
 800436c:	f043 0301 	orr.w	r3, r3, #1
 8004370:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004374:	f7fe fad2 	bl	800291c <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800437c:	f7fe face 	bl	800291c <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e11c      	b.n	80045c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800438e:	4b66      	ldr	r3, [pc, #408]	; (8004528 <HAL_RCC_OscConfig+0x778>)
 8004390:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0ef      	beq.n	800437c <HAL_RCC_OscConfig+0x5cc>
 800439c:	e01b      	b.n	80043d6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800439e:	4b62      	ldr	r3, [pc, #392]	; (8004528 <HAL_RCC_OscConfig+0x778>)
 80043a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043a4:	4a60      	ldr	r2, [pc, #384]	; (8004528 <HAL_RCC_OscConfig+0x778>)
 80043a6:	f023 0301 	bic.w	r3, r3, #1
 80043aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ae:	f7fe fab5 	bl	800291c <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043b6:	f7fe fab1 	bl	800291c <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e0ff      	b.n	80045c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043c8:	4b57      	ldr	r3, [pc, #348]	; (8004528 <HAL_RCC_OscConfig+0x778>)
 80043ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1ef      	bne.n	80043b6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 80f3 	beq.w	80045c6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	f040 80c9 	bne.w	800457c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80043ea:	4b4f      	ldr	r3, [pc, #316]	; (8004528 <HAL_RCC_OscConfig+0x778>)
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f003 0203 	and.w	r2, r3, #3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d12c      	bne.n	8004458 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004408:	3b01      	subs	r3, #1
 800440a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800440c:	429a      	cmp	r2, r3
 800440e:	d123      	bne.n	8004458 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800441c:	429a      	cmp	r2, r3
 800441e:	d11b      	bne.n	8004458 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800442c:	429a      	cmp	r2, r3
 800442e:	d113      	bne.n	8004458 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443a:	085b      	lsrs	r3, r3, #1
 800443c:	3b01      	subs	r3, #1
 800443e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004440:	429a      	cmp	r2, r3
 8004442:	d109      	bne.n	8004458 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	085b      	lsrs	r3, r3, #1
 8004450:	3b01      	subs	r3, #1
 8004452:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004454:	429a      	cmp	r2, r3
 8004456:	d06b      	beq.n	8004530 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	2b0c      	cmp	r3, #12
 800445c:	d062      	beq.n	8004524 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800445e:	4b32      	ldr	r3, [pc, #200]	; (8004528 <HAL_RCC_OscConfig+0x778>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e0ac      	b.n	80045c8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800446e:	4b2e      	ldr	r3, [pc, #184]	; (8004528 <HAL_RCC_OscConfig+0x778>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a2d      	ldr	r2, [pc, #180]	; (8004528 <HAL_RCC_OscConfig+0x778>)
 8004474:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004478:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800447a:	f7fe fa4f 	bl	800291c <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004482:	f7fe fa4b 	bl	800291c <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e099      	b.n	80045c8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004494:	4b24      	ldr	r3, [pc, #144]	; (8004528 <HAL_RCC_OscConfig+0x778>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1f0      	bne.n	8004482 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044a0:	4b21      	ldr	r3, [pc, #132]	; (8004528 <HAL_RCC_OscConfig+0x778>)
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	4b21      	ldr	r3, [pc, #132]	; (800452c <HAL_RCC_OscConfig+0x77c>)
 80044a6:	4013      	ands	r3, r2
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80044b0:	3a01      	subs	r2, #1
 80044b2:	0112      	lsls	r2, r2, #4
 80044b4:	4311      	orrs	r1, r2
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044ba:	0212      	lsls	r2, r2, #8
 80044bc:	4311      	orrs	r1, r2
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80044c2:	0852      	lsrs	r2, r2, #1
 80044c4:	3a01      	subs	r2, #1
 80044c6:	0552      	lsls	r2, r2, #21
 80044c8:	4311      	orrs	r1, r2
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80044ce:	0852      	lsrs	r2, r2, #1
 80044d0:	3a01      	subs	r2, #1
 80044d2:	0652      	lsls	r2, r2, #25
 80044d4:	4311      	orrs	r1, r2
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044da:	06d2      	lsls	r2, r2, #27
 80044dc:	430a      	orrs	r2, r1
 80044de:	4912      	ldr	r1, [pc, #72]	; (8004528 <HAL_RCC_OscConfig+0x778>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80044e4:	4b10      	ldr	r3, [pc, #64]	; (8004528 <HAL_RCC_OscConfig+0x778>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a0f      	ldr	r2, [pc, #60]	; (8004528 <HAL_RCC_OscConfig+0x778>)
 80044ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044f0:	4b0d      	ldr	r3, [pc, #52]	; (8004528 <HAL_RCC_OscConfig+0x778>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	4a0c      	ldr	r2, [pc, #48]	; (8004528 <HAL_RCC_OscConfig+0x778>)
 80044f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044fc:	f7fe fa0e 	bl	800291c <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004504:	f7fe fa0a 	bl	800291c <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e058      	b.n	80045c8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004516:	4b04      	ldr	r3, [pc, #16]	; (8004528 <HAL_RCC_OscConfig+0x778>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0f0      	beq.n	8004504 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004522:	e050      	b.n	80045c6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e04f      	b.n	80045c8 <HAL_RCC_OscConfig+0x818>
 8004528:	40021000 	.word	0x40021000
 800452c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004530:	4b27      	ldr	r3, [pc, #156]	; (80045d0 <HAL_RCC_OscConfig+0x820>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d144      	bne.n	80045c6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800453c:	4b24      	ldr	r3, [pc, #144]	; (80045d0 <HAL_RCC_OscConfig+0x820>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a23      	ldr	r2, [pc, #140]	; (80045d0 <HAL_RCC_OscConfig+0x820>)
 8004542:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004546:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004548:	4b21      	ldr	r3, [pc, #132]	; (80045d0 <HAL_RCC_OscConfig+0x820>)
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	4a20      	ldr	r2, [pc, #128]	; (80045d0 <HAL_RCC_OscConfig+0x820>)
 800454e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004552:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004554:	f7fe f9e2 	bl	800291c <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800455c:	f7fe f9de 	bl	800291c <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e02c      	b.n	80045c8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800456e:	4b18      	ldr	r3, [pc, #96]	; (80045d0 <HAL_RCC_OscConfig+0x820>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0f0      	beq.n	800455c <HAL_RCC_OscConfig+0x7ac>
 800457a:	e024      	b.n	80045c6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	2b0c      	cmp	r3, #12
 8004580:	d01f      	beq.n	80045c2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004582:	4b13      	ldr	r3, [pc, #76]	; (80045d0 <HAL_RCC_OscConfig+0x820>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a12      	ldr	r2, [pc, #72]	; (80045d0 <HAL_RCC_OscConfig+0x820>)
 8004588:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800458c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458e:	f7fe f9c5 	bl	800291c <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004596:	f7fe f9c1 	bl	800291c <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e00f      	b.n	80045c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045a8:	4b09      	ldr	r3, [pc, #36]	; (80045d0 <HAL_RCC_OscConfig+0x820>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1f0      	bne.n	8004596 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80045b4:	4b06      	ldr	r3, [pc, #24]	; (80045d0 <HAL_RCC_OscConfig+0x820>)
 80045b6:	68da      	ldr	r2, [r3, #12]
 80045b8:	4905      	ldr	r1, [pc, #20]	; (80045d0 <HAL_RCC_OscConfig+0x820>)
 80045ba:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <HAL_RCC_OscConfig+0x824>)
 80045bc:	4013      	ands	r3, r2
 80045be:	60cb      	str	r3, [r1, #12]
 80045c0:	e001      	b.n	80045c6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e000      	b.n	80045c8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3720      	adds	r7, #32
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40021000 	.word	0x40021000
 80045d4:	feeefffc 	.word	0xfeeefffc

080045d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e0e7      	b.n	80047bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045ec:	4b75      	ldr	r3, [pc, #468]	; (80047c4 <HAL_RCC_ClockConfig+0x1ec>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0307 	and.w	r3, r3, #7
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d910      	bls.n	800461c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045fa:	4b72      	ldr	r3, [pc, #456]	; (80047c4 <HAL_RCC_ClockConfig+0x1ec>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f023 0207 	bic.w	r2, r3, #7
 8004602:	4970      	ldr	r1, [pc, #448]	; (80047c4 <HAL_RCC_ClockConfig+0x1ec>)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	4313      	orrs	r3, r2
 8004608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800460a:	4b6e      	ldr	r3, [pc, #440]	; (80047c4 <HAL_RCC_ClockConfig+0x1ec>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d001      	beq.n	800461c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e0cf      	b.n	80047bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d010      	beq.n	800464a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	4b66      	ldr	r3, [pc, #408]	; (80047c8 <HAL_RCC_ClockConfig+0x1f0>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004634:	429a      	cmp	r2, r3
 8004636:	d908      	bls.n	800464a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004638:	4b63      	ldr	r3, [pc, #396]	; (80047c8 <HAL_RCC_ClockConfig+0x1f0>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	4960      	ldr	r1, [pc, #384]	; (80047c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004646:	4313      	orrs	r3, r2
 8004648:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d04c      	beq.n	80046f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b03      	cmp	r3, #3
 800465c:	d107      	bne.n	800466e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800465e:	4b5a      	ldr	r3, [pc, #360]	; (80047c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d121      	bne.n	80046ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e0a6      	b.n	80047bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2b02      	cmp	r3, #2
 8004674:	d107      	bne.n	8004686 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004676:	4b54      	ldr	r3, [pc, #336]	; (80047c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d115      	bne.n	80046ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e09a      	b.n	80047bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d107      	bne.n	800469e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800468e:	4b4e      	ldr	r3, [pc, #312]	; (80047c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d109      	bne.n	80046ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e08e      	b.n	80047bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800469e:	4b4a      	ldr	r3, [pc, #296]	; (80047c8 <HAL_RCC_ClockConfig+0x1f0>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e086      	b.n	80047bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046ae:	4b46      	ldr	r3, [pc, #280]	; (80047c8 <HAL_RCC_ClockConfig+0x1f0>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f023 0203 	bic.w	r2, r3, #3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	4943      	ldr	r1, [pc, #268]	; (80047c8 <HAL_RCC_ClockConfig+0x1f0>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046c0:	f7fe f92c 	bl	800291c <HAL_GetTick>
 80046c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046c6:	e00a      	b.n	80046de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046c8:	f7fe f928 	bl	800291c <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e06e      	b.n	80047bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046de:	4b3a      	ldr	r3, [pc, #232]	; (80047c8 <HAL_RCC_ClockConfig+0x1f0>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f003 020c 	and.w	r2, r3, #12
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d1eb      	bne.n	80046c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d010      	beq.n	800471e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	4b31      	ldr	r3, [pc, #196]	; (80047c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004708:	429a      	cmp	r2, r3
 800470a:	d208      	bcs.n	800471e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800470c:	4b2e      	ldr	r3, [pc, #184]	; (80047c8 <HAL_RCC_ClockConfig+0x1f0>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	492b      	ldr	r1, [pc, #172]	; (80047c8 <HAL_RCC_ClockConfig+0x1f0>)
 800471a:	4313      	orrs	r3, r2
 800471c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800471e:	4b29      	ldr	r3, [pc, #164]	; (80047c4 <HAL_RCC_ClockConfig+0x1ec>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0307 	and.w	r3, r3, #7
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	429a      	cmp	r2, r3
 800472a:	d210      	bcs.n	800474e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800472c:	4b25      	ldr	r3, [pc, #148]	; (80047c4 <HAL_RCC_ClockConfig+0x1ec>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f023 0207 	bic.w	r2, r3, #7
 8004734:	4923      	ldr	r1, [pc, #140]	; (80047c4 <HAL_RCC_ClockConfig+0x1ec>)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	4313      	orrs	r3, r2
 800473a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800473c:	4b21      	ldr	r3, [pc, #132]	; (80047c4 <HAL_RCC_ClockConfig+0x1ec>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	429a      	cmp	r2, r3
 8004748:	d001      	beq.n	800474e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e036      	b.n	80047bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0304 	and.w	r3, r3, #4
 8004756:	2b00      	cmp	r3, #0
 8004758:	d008      	beq.n	800476c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800475a:	4b1b      	ldr	r3, [pc, #108]	; (80047c8 <HAL_RCC_ClockConfig+0x1f0>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	4918      	ldr	r1, [pc, #96]	; (80047c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004768:	4313      	orrs	r3, r2
 800476a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0308 	and.w	r3, r3, #8
 8004774:	2b00      	cmp	r3, #0
 8004776:	d009      	beq.n	800478c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004778:	4b13      	ldr	r3, [pc, #76]	; (80047c8 <HAL_RCC_ClockConfig+0x1f0>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	00db      	lsls	r3, r3, #3
 8004786:	4910      	ldr	r1, [pc, #64]	; (80047c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004788:	4313      	orrs	r3, r2
 800478a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800478c:	f000 f824 	bl	80047d8 <HAL_RCC_GetSysClockFreq>
 8004790:	4602      	mov	r2, r0
 8004792:	4b0d      	ldr	r3, [pc, #52]	; (80047c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	091b      	lsrs	r3, r3, #4
 8004798:	f003 030f 	and.w	r3, r3, #15
 800479c:	490b      	ldr	r1, [pc, #44]	; (80047cc <HAL_RCC_ClockConfig+0x1f4>)
 800479e:	5ccb      	ldrb	r3, [r1, r3]
 80047a0:	f003 031f 	and.w	r3, r3, #31
 80047a4:	fa22 f303 	lsr.w	r3, r2, r3
 80047a8:	4a09      	ldr	r2, [pc, #36]	; (80047d0 <HAL_RCC_ClockConfig+0x1f8>)
 80047aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80047ac:	4b09      	ldr	r3, [pc, #36]	; (80047d4 <HAL_RCC_ClockConfig+0x1fc>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7fe f863 	bl	800287c <HAL_InitTick>
 80047b6:	4603      	mov	r3, r0
 80047b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80047ba:	7afb      	ldrb	r3, [r7, #11]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40022000 	.word	0x40022000
 80047c8:	40021000 	.word	0x40021000
 80047cc:	08009620 	.word	0x08009620
 80047d0:	20000098 	.word	0x20000098
 80047d4:	2000009c 	.word	0x2000009c

080047d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	b089      	sub	sp, #36	; 0x24
 80047dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80047de:	2300      	movs	r3, #0
 80047e0:	61fb      	str	r3, [r7, #28]
 80047e2:	2300      	movs	r3, #0
 80047e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047e6:	4b3e      	ldr	r3, [pc, #248]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 030c 	and.w	r3, r3, #12
 80047ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047f0:	4b3b      	ldr	r3, [pc, #236]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f003 0303 	and.w	r3, r3, #3
 80047f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <HAL_RCC_GetSysClockFreq+0x34>
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	2b0c      	cmp	r3, #12
 8004804:	d121      	bne.n	800484a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d11e      	bne.n	800484a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800480c:	4b34      	ldr	r3, [pc, #208]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0308 	and.w	r3, r3, #8
 8004814:	2b00      	cmp	r3, #0
 8004816:	d107      	bne.n	8004828 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004818:	4b31      	ldr	r3, [pc, #196]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800481a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800481e:	0a1b      	lsrs	r3, r3, #8
 8004820:	f003 030f 	and.w	r3, r3, #15
 8004824:	61fb      	str	r3, [r7, #28]
 8004826:	e005      	b.n	8004834 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004828:	4b2d      	ldr	r3, [pc, #180]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	091b      	lsrs	r3, r3, #4
 800482e:	f003 030f 	and.w	r3, r3, #15
 8004832:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004834:	4a2b      	ldr	r2, [pc, #172]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800483c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10d      	bne.n	8004860 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004848:	e00a      	b.n	8004860 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	2b04      	cmp	r3, #4
 800484e:	d102      	bne.n	8004856 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004850:	4b25      	ldr	r3, [pc, #148]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004852:	61bb      	str	r3, [r7, #24]
 8004854:	e004      	b.n	8004860 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	2b08      	cmp	r3, #8
 800485a:	d101      	bne.n	8004860 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800485c:	4b23      	ldr	r3, [pc, #140]	; (80048ec <HAL_RCC_GetSysClockFreq+0x114>)
 800485e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	2b0c      	cmp	r3, #12
 8004864:	d134      	bne.n	80048d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004866:	4b1e      	ldr	r3, [pc, #120]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	2b02      	cmp	r3, #2
 8004874:	d003      	beq.n	800487e <HAL_RCC_GetSysClockFreq+0xa6>
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	2b03      	cmp	r3, #3
 800487a:	d003      	beq.n	8004884 <HAL_RCC_GetSysClockFreq+0xac>
 800487c:	e005      	b.n	800488a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800487e:	4b1a      	ldr	r3, [pc, #104]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004880:	617b      	str	r3, [r7, #20]
      break;
 8004882:	e005      	b.n	8004890 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004884:	4b19      	ldr	r3, [pc, #100]	; (80048ec <HAL_RCC_GetSysClockFreq+0x114>)
 8004886:	617b      	str	r3, [r7, #20]
      break;
 8004888:	e002      	b.n	8004890 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	617b      	str	r3, [r7, #20]
      break;
 800488e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004890:	4b13      	ldr	r3, [pc, #76]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	091b      	lsrs	r3, r3, #4
 8004896:	f003 0307 	and.w	r3, r3, #7
 800489a:	3301      	adds	r3, #1
 800489c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800489e:	4b10      	ldr	r3, [pc, #64]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	0a1b      	lsrs	r3, r3, #8
 80048a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	fb03 f202 	mul.w	r2, r3, r2
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048b6:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	0e5b      	lsrs	r3, r3, #25
 80048bc:	f003 0303 	and.w	r3, r3, #3
 80048c0:	3301      	adds	r3, #1
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80048d0:	69bb      	ldr	r3, [r7, #24]
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3724      	adds	r7, #36	; 0x24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	40021000 	.word	0x40021000
 80048e4:	08009630 	.word	0x08009630
 80048e8:	00f42400 	.word	0x00f42400
 80048ec:	007a1200 	.word	0x007a1200

080048f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048f8:	2300      	movs	r3, #0
 80048fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048fc:	4b2a      	ldr	r3, [pc, #168]	; (80049a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004908:	f7ff f9ee 	bl	8003ce8 <HAL_PWREx_GetVoltageRange>
 800490c:	6178      	str	r0, [r7, #20]
 800490e:	e014      	b.n	800493a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004910:	4b25      	ldr	r3, [pc, #148]	; (80049a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004914:	4a24      	ldr	r2, [pc, #144]	; (80049a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800491a:	6593      	str	r3, [r2, #88]	; 0x58
 800491c:	4b22      	ldr	r3, [pc, #136]	; (80049a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800491e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004928:	f7ff f9de 	bl	8003ce8 <HAL_PWREx_GetVoltageRange>
 800492c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800492e:	4b1e      	ldr	r3, [pc, #120]	; (80049a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004932:	4a1d      	ldr	r2, [pc, #116]	; (80049a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004938:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004940:	d10b      	bne.n	800495a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b80      	cmp	r3, #128	; 0x80
 8004946:	d919      	bls.n	800497c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2ba0      	cmp	r3, #160	; 0xa0
 800494c:	d902      	bls.n	8004954 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800494e:	2302      	movs	r3, #2
 8004950:	613b      	str	r3, [r7, #16]
 8004952:	e013      	b.n	800497c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004954:	2301      	movs	r3, #1
 8004956:	613b      	str	r3, [r7, #16]
 8004958:	e010      	b.n	800497c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b80      	cmp	r3, #128	; 0x80
 800495e:	d902      	bls.n	8004966 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004960:	2303      	movs	r3, #3
 8004962:	613b      	str	r3, [r7, #16]
 8004964:	e00a      	b.n	800497c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b80      	cmp	r3, #128	; 0x80
 800496a:	d102      	bne.n	8004972 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800496c:	2302      	movs	r3, #2
 800496e:	613b      	str	r3, [r7, #16]
 8004970:	e004      	b.n	800497c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b70      	cmp	r3, #112	; 0x70
 8004976:	d101      	bne.n	800497c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004978:	2301      	movs	r3, #1
 800497a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800497c:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f023 0207 	bic.w	r2, r3, #7
 8004984:	4909      	ldr	r1, [pc, #36]	; (80049ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800498c:	4b07      	ldr	r3, [pc, #28]	; (80049ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	429a      	cmp	r2, r3
 8004998:	d001      	beq.n	800499e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40021000 	.word	0x40021000
 80049ac:	40022000 	.word	0x40022000

080049b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049b8:	2300      	movs	r3, #0
 80049ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049bc:	2300      	movs	r3, #0
 80049be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d031      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049d4:	d01a      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80049d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049da:	d814      	bhi.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d009      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80049e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049e4:	d10f      	bne.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80049e6:	4b5d      	ldr	r3, [pc, #372]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	4a5c      	ldr	r2, [pc, #368]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049f0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049f2:	e00c      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3304      	adds	r3, #4
 80049f8:	2100      	movs	r1, #0
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 f9ce 	bl	8004d9c <RCCEx_PLLSAI1_Config>
 8004a00:	4603      	mov	r3, r0
 8004a02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a04:	e003      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	74fb      	strb	r3, [r7, #19]
      break;
 8004a0a:	e000      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004a0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a0e:	7cfb      	ldrb	r3, [r7, #19]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10b      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a14:	4b51      	ldr	r3, [pc, #324]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a22:	494e      	ldr	r1, [pc, #312]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a2a:	e001      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a2c:	7cfb      	ldrb	r3, [r7, #19]
 8004a2e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 809e 	beq.w	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a42:	4b46      	ldr	r3, [pc, #280]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e000      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004a52:	2300      	movs	r3, #0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00d      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a58:	4b40      	ldr	r3, [pc, #256]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5c:	4a3f      	ldr	r2, [pc, #252]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a62:	6593      	str	r3, [r2, #88]	; 0x58
 8004a64:	4b3d      	ldr	r3, [pc, #244]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a6c:	60bb      	str	r3, [r7, #8]
 8004a6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a70:	2301      	movs	r3, #1
 8004a72:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a74:	4b3a      	ldr	r3, [pc, #232]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a39      	ldr	r2, [pc, #228]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a80:	f7fd ff4c 	bl	800291c <HAL_GetTick>
 8004a84:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a86:	e009      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a88:	f7fd ff48 	bl	800291c <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d902      	bls.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	74fb      	strb	r3, [r7, #19]
        break;
 8004a9a:	e005      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a9c:	4b30      	ldr	r3, [pc, #192]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d0ef      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004aa8:	7cfb      	ldrb	r3, [r7, #19]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d15a      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004aae:	4b2b      	ldr	r3, [pc, #172]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d01e      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d019      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004aca:	4b24      	ldr	r3, [pc, #144]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ad4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ad6:	4b21      	ldr	r3, [pc, #132]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004adc:	4a1f      	ldr	r2, [pc, #124]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ae6:	4b1d      	ldr	r3, [pc, #116]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aec:	4a1b      	ldr	r2, [pc, #108]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004af2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004af6:	4a19      	ldr	r2, [pc, #100]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d016      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b08:	f7fd ff08 	bl	800291c <HAL_GetTick>
 8004b0c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b0e:	e00b      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b10:	f7fd ff04 	bl	800291c <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d902      	bls.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	74fb      	strb	r3, [r7, #19]
            break;
 8004b26:	e006      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b28:	4b0c      	ldr	r3, [pc, #48]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d0ec      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004b36:	7cfb      	ldrb	r3, [r7, #19]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10b      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b3c:	4b07      	ldr	r3, [pc, #28]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b4a:	4904      	ldr	r1, [pc, #16]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004b52:	e009      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b54:	7cfb      	ldrb	r3, [r7, #19]
 8004b56:	74bb      	strb	r3, [r7, #18]
 8004b58:	e006      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004b5a:	bf00      	nop
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b64:	7cfb      	ldrb	r3, [r7, #19]
 8004b66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b68:	7c7b      	ldrb	r3, [r7, #17]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d105      	bne.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b6e:	4b8a      	ldr	r3, [pc, #552]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b72:	4a89      	ldr	r2, [pc, #548]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00a      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b86:	4b84      	ldr	r3, [pc, #528]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8c:	f023 0203 	bic.w	r2, r3, #3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	4980      	ldr	r1, [pc, #512]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00a      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ba8:	4b7b      	ldr	r3, [pc, #492]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bae:	f023 020c 	bic.w	r2, r3, #12
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	4978      	ldr	r1, [pc, #480]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0320 	and.w	r3, r3, #32
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00a      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bca:	4b73      	ldr	r3, [pc, #460]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd8:	496f      	ldr	r1, [pc, #444]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00a      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bec:	4b6a      	ldr	r3, [pc, #424]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bfa:	4967      	ldr	r1, [pc, #412]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00a      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c0e:	4b62      	ldr	r3, [pc, #392]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	495e      	ldr	r1, [pc, #376]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00a      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c30:	4b59      	ldr	r3, [pc, #356]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c36:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3e:	4956      	ldr	r1, [pc, #344]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c52:	4b51      	ldr	r3, [pc, #324]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c60:	494d      	ldr	r1, [pc, #308]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d028      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c74:	4b48      	ldr	r3, [pc, #288]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	4945      	ldr	r1, [pc, #276]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c92:	d106      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c94:	4b40      	ldr	r3, [pc, #256]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	4a3f      	ldr	r2, [pc, #252]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c9e:	60d3      	str	r3, [r2, #12]
 8004ca0:	e011      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004caa:	d10c      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 f872 	bl	8004d9c <RCCEx_PLLSAI1_Config>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004cbc:	7cfb      	ldrb	r3, [r7, #19]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004cc2:	7cfb      	ldrb	r3, [r7, #19]
 8004cc4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d028      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cd2:	4b31      	ldr	r3, [pc, #196]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce0:	492d      	ldr	r1, [pc, #180]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cf0:	d106      	bne.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cf2:	4b29      	ldr	r3, [pc, #164]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	4a28      	ldr	r2, [pc, #160]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cfc:	60d3      	str	r3, [r2, #12]
 8004cfe:	e011      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d08:	d10c      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	2101      	movs	r1, #1
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 f843 	bl	8004d9c <RCCEx_PLLSAI1_Config>
 8004d16:	4603      	mov	r3, r0
 8004d18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d1a:	7cfb      	ldrb	r3, [r7, #19]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004d20:	7cfb      	ldrb	r3, [r7, #19]
 8004d22:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d01c      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d30:	4b19      	ldr	r3, [pc, #100]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d3e:	4916      	ldr	r1, [pc, #88]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d4e:	d10c      	bne.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3304      	adds	r3, #4
 8004d54:	2102      	movs	r1, #2
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 f820 	bl	8004d9c <RCCEx_PLLSAI1_Config>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d60:	7cfb      	ldrb	r3, [r7, #19]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004d66:	7cfb      	ldrb	r3, [r7, #19]
 8004d68:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00a      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d76:	4b08      	ldr	r3, [pc, #32]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d84:	4904      	ldr	r1, [pc, #16]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d8c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	40021000 	.word	0x40021000

08004d9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004da6:	2300      	movs	r3, #0
 8004da8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004daa:	4b74      	ldr	r3, [pc, #464]	; (8004f7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d018      	beq.n	8004de8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004db6:	4b71      	ldr	r3, [pc, #452]	; (8004f7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f003 0203 	and.w	r2, r3, #3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d10d      	bne.n	8004de2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
       ||
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d009      	beq.n	8004de2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004dce:	4b6b      	ldr	r3, [pc, #428]	; (8004f7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	091b      	lsrs	r3, r3, #4
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
       ||
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d047      	beq.n	8004e72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	73fb      	strb	r3, [r7, #15]
 8004de6:	e044      	b.n	8004e72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d018      	beq.n	8004e22 <RCCEx_PLLSAI1_Config+0x86>
 8004df0:	2b03      	cmp	r3, #3
 8004df2:	d825      	bhi.n	8004e40 <RCCEx_PLLSAI1_Config+0xa4>
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d002      	beq.n	8004dfe <RCCEx_PLLSAI1_Config+0x62>
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d009      	beq.n	8004e10 <RCCEx_PLLSAI1_Config+0x74>
 8004dfc:	e020      	b.n	8004e40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004dfe:	4b5f      	ldr	r3, [pc, #380]	; (8004f7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d11d      	bne.n	8004e46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e0e:	e01a      	b.n	8004e46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e10:	4b5a      	ldr	r3, [pc, #360]	; (8004f7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d116      	bne.n	8004e4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e20:	e013      	b.n	8004e4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e22:	4b56      	ldr	r3, [pc, #344]	; (8004f7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10f      	bne.n	8004e4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e2e:	4b53      	ldr	r3, [pc, #332]	; (8004f7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d109      	bne.n	8004e4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e3e:	e006      	b.n	8004e4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	73fb      	strb	r3, [r7, #15]
      break;
 8004e44:	e004      	b.n	8004e50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e46:	bf00      	nop
 8004e48:	e002      	b.n	8004e50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e4a:	bf00      	nop
 8004e4c:	e000      	b.n	8004e50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10d      	bne.n	8004e72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e56:	4b49      	ldr	r3, [pc, #292]	; (8004f7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6819      	ldr	r1, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	011b      	lsls	r3, r3, #4
 8004e6a:	430b      	orrs	r3, r1
 8004e6c:	4943      	ldr	r1, [pc, #268]	; (8004f7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e72:	7bfb      	ldrb	r3, [r7, #15]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d17c      	bne.n	8004f72 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e78:	4b40      	ldr	r3, [pc, #256]	; (8004f7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a3f      	ldr	r2, [pc, #252]	; (8004f7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e84:	f7fd fd4a 	bl	800291c <HAL_GetTick>
 8004e88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e8a:	e009      	b.n	8004ea0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e8c:	f7fd fd46 	bl	800291c <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d902      	bls.n	8004ea0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	73fb      	strb	r3, [r7, #15]
        break;
 8004e9e:	e005      	b.n	8004eac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ea0:	4b36      	ldr	r3, [pc, #216]	; (8004f7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1ef      	bne.n	8004e8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004eac:	7bfb      	ldrb	r3, [r7, #15]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d15f      	bne.n	8004f72 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d110      	bne.n	8004eda <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004eb8:	4b30      	ldr	r3, [pc, #192]	; (8004f7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004ec0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6892      	ldr	r2, [r2, #8]
 8004ec8:	0211      	lsls	r1, r2, #8
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	68d2      	ldr	r2, [r2, #12]
 8004ece:	06d2      	lsls	r2, r2, #27
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	492a      	ldr	r1, [pc, #168]	; (8004f7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	610b      	str	r3, [r1, #16]
 8004ed8:	e027      	b.n	8004f2a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d112      	bne.n	8004f06 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ee0:	4b26      	ldr	r3, [pc, #152]	; (8004f7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004ee8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	6892      	ldr	r2, [r2, #8]
 8004ef0:	0211      	lsls	r1, r2, #8
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6912      	ldr	r2, [r2, #16]
 8004ef6:	0852      	lsrs	r2, r2, #1
 8004ef8:	3a01      	subs	r2, #1
 8004efa:	0552      	lsls	r2, r2, #21
 8004efc:	430a      	orrs	r2, r1
 8004efe:	491f      	ldr	r1, [pc, #124]	; (8004f7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	610b      	str	r3, [r1, #16]
 8004f04:	e011      	b.n	8004f2a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f06:	4b1d      	ldr	r3, [pc, #116]	; (8004f7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	6892      	ldr	r2, [r2, #8]
 8004f16:	0211      	lsls	r1, r2, #8
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6952      	ldr	r2, [r2, #20]
 8004f1c:	0852      	lsrs	r2, r2, #1
 8004f1e:	3a01      	subs	r2, #1
 8004f20:	0652      	lsls	r2, r2, #25
 8004f22:	430a      	orrs	r2, r1
 8004f24:	4915      	ldr	r1, [pc, #84]	; (8004f7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f2a:	4b14      	ldr	r3, [pc, #80]	; (8004f7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a13      	ldr	r2, [pc, #76]	; (8004f7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f34:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f36:	f7fd fcf1 	bl	800291c <HAL_GetTick>
 8004f3a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f3c:	e009      	b.n	8004f52 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f3e:	f7fd fced 	bl	800291c <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d902      	bls.n	8004f52 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	73fb      	strb	r3, [r7, #15]
          break;
 8004f50:	e005      	b.n	8004f5e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f52:	4b0a      	ldr	r3, [pc, #40]	; (8004f7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0ef      	beq.n	8004f3e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d106      	bne.n	8004f72 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f64:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f66:	691a      	ldr	r2, [r3, #16]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	4903      	ldr	r1, [pc, #12]	; (8004f7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	40021000 	.word	0x40021000

08004f80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e049      	b.n	8005026 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d106      	bne.n	8004fac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7fd fbd0 	bl	800274c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	3304      	adds	r3, #4
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	4610      	mov	r0, r2
 8004fc0:	f000 fc8c 	bl	80058dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
	...

08005030 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d109      	bne.n	8005054 <HAL_TIM_PWM_Start+0x24>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b01      	cmp	r3, #1
 800504a:	bf14      	ite	ne
 800504c:	2301      	movne	r3, #1
 800504e:	2300      	moveq	r3, #0
 8005050:	b2db      	uxtb	r3, r3
 8005052:	e03c      	b.n	80050ce <HAL_TIM_PWM_Start+0x9e>
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	2b04      	cmp	r3, #4
 8005058:	d109      	bne.n	800506e <HAL_TIM_PWM_Start+0x3e>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b01      	cmp	r3, #1
 8005064:	bf14      	ite	ne
 8005066:	2301      	movne	r3, #1
 8005068:	2300      	moveq	r3, #0
 800506a:	b2db      	uxtb	r3, r3
 800506c:	e02f      	b.n	80050ce <HAL_TIM_PWM_Start+0x9e>
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b08      	cmp	r3, #8
 8005072:	d109      	bne.n	8005088 <HAL_TIM_PWM_Start+0x58>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b01      	cmp	r3, #1
 800507e:	bf14      	ite	ne
 8005080:	2301      	movne	r3, #1
 8005082:	2300      	moveq	r3, #0
 8005084:	b2db      	uxtb	r3, r3
 8005086:	e022      	b.n	80050ce <HAL_TIM_PWM_Start+0x9e>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	2b0c      	cmp	r3, #12
 800508c:	d109      	bne.n	80050a2 <HAL_TIM_PWM_Start+0x72>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b01      	cmp	r3, #1
 8005098:	bf14      	ite	ne
 800509a:	2301      	movne	r3, #1
 800509c:	2300      	moveq	r3, #0
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	e015      	b.n	80050ce <HAL_TIM_PWM_Start+0x9e>
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b10      	cmp	r3, #16
 80050a6:	d109      	bne.n	80050bc <HAL_TIM_PWM_Start+0x8c>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	bf14      	ite	ne
 80050b4:	2301      	movne	r3, #1
 80050b6:	2300      	moveq	r3, #0
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	e008      	b.n	80050ce <HAL_TIM_PWM_Start+0x9e>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	bf14      	ite	ne
 80050c8:	2301      	movne	r3, #1
 80050ca:	2300      	moveq	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e07e      	b.n	80051d4 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d104      	bne.n	80050e6 <HAL_TIM_PWM_Start+0xb6>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2202      	movs	r2, #2
 80050e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050e4:	e023      	b.n	800512e <HAL_TIM_PWM_Start+0xfe>
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b04      	cmp	r3, #4
 80050ea:	d104      	bne.n	80050f6 <HAL_TIM_PWM_Start+0xc6>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050f4:	e01b      	b.n	800512e <HAL_TIM_PWM_Start+0xfe>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d104      	bne.n	8005106 <HAL_TIM_PWM_Start+0xd6>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005104:	e013      	b.n	800512e <HAL_TIM_PWM_Start+0xfe>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b0c      	cmp	r3, #12
 800510a:	d104      	bne.n	8005116 <HAL_TIM_PWM_Start+0xe6>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005114:	e00b      	b.n	800512e <HAL_TIM_PWM_Start+0xfe>
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b10      	cmp	r3, #16
 800511a:	d104      	bne.n	8005126 <HAL_TIM_PWM_Start+0xf6>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005124:	e003      	b.n	800512e <HAL_TIM_PWM_Start+0xfe>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2202      	movs	r2, #2
 800512a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2201      	movs	r2, #1
 8005134:	6839      	ldr	r1, [r7, #0]
 8005136:	4618      	mov	r0, r3
 8005138:	f000 feb2 	bl	8005ea0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a26      	ldr	r2, [pc, #152]	; (80051dc <HAL_TIM_PWM_Start+0x1ac>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d009      	beq.n	800515a <HAL_TIM_PWM_Start+0x12a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a25      	ldr	r2, [pc, #148]	; (80051e0 <HAL_TIM_PWM_Start+0x1b0>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d004      	beq.n	800515a <HAL_TIM_PWM_Start+0x12a>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a23      	ldr	r2, [pc, #140]	; (80051e4 <HAL_TIM_PWM_Start+0x1b4>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d101      	bne.n	800515e <HAL_TIM_PWM_Start+0x12e>
 800515a:	2301      	movs	r3, #1
 800515c:	e000      	b.n	8005160 <HAL_TIM_PWM_Start+0x130>
 800515e:	2300      	movs	r3, #0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d007      	beq.n	8005174 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005172:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a18      	ldr	r2, [pc, #96]	; (80051dc <HAL_TIM_PWM_Start+0x1ac>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d009      	beq.n	8005192 <HAL_TIM_PWM_Start+0x162>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005186:	d004      	beq.n	8005192 <HAL_TIM_PWM_Start+0x162>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a14      	ldr	r2, [pc, #80]	; (80051e0 <HAL_TIM_PWM_Start+0x1b0>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d115      	bne.n	80051be <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	4b13      	ldr	r3, [pc, #76]	; (80051e8 <HAL_TIM_PWM_Start+0x1b8>)
 800519a:	4013      	ands	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2b06      	cmp	r3, #6
 80051a2:	d015      	beq.n	80051d0 <HAL_TIM_PWM_Start+0x1a0>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051aa:	d011      	beq.n	80051d0 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0201 	orr.w	r2, r2, #1
 80051ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051bc:	e008      	b.n	80051d0 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f042 0201 	orr.w	r2, r2, #1
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	e000      	b.n	80051d2 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	40012c00 	.word	0x40012c00
 80051e0:	40014000 	.word	0x40014000
 80051e4:	40014400 	.word	0x40014400
 80051e8:	00010007 	.word	0x00010007

080051ec <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2200      	movs	r2, #0
 80051fc:	6839      	ldr	r1, [r7, #0]
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 fe4e 	bl	8005ea0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a39      	ldr	r2, [pc, #228]	; (80052f0 <HAL_TIM_PWM_Stop+0x104>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d009      	beq.n	8005222 <HAL_TIM_PWM_Stop+0x36>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a38      	ldr	r2, [pc, #224]	; (80052f4 <HAL_TIM_PWM_Stop+0x108>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d004      	beq.n	8005222 <HAL_TIM_PWM_Stop+0x36>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a36      	ldr	r2, [pc, #216]	; (80052f8 <HAL_TIM_PWM_Stop+0x10c>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d101      	bne.n	8005226 <HAL_TIM_PWM_Stop+0x3a>
 8005222:	2301      	movs	r3, #1
 8005224:	e000      	b.n	8005228 <HAL_TIM_PWM_Stop+0x3c>
 8005226:	2300      	movs	r3, #0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d017      	beq.n	800525c <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6a1a      	ldr	r2, [r3, #32]
 8005232:	f241 1311 	movw	r3, #4369	; 0x1111
 8005236:	4013      	ands	r3, r2
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10f      	bne.n	800525c <HAL_TIM_PWM_Stop+0x70>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6a1a      	ldr	r2, [r3, #32]
 8005242:	f240 4344 	movw	r3, #1092	; 0x444
 8005246:	4013      	ands	r3, r2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d107      	bne.n	800525c <HAL_TIM_PWM_Stop+0x70>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800525a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6a1a      	ldr	r2, [r3, #32]
 8005262:	f241 1311 	movw	r3, #4369	; 0x1111
 8005266:	4013      	ands	r3, r2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10f      	bne.n	800528c <HAL_TIM_PWM_Stop+0xa0>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6a1a      	ldr	r2, [r3, #32]
 8005272:	f240 4344 	movw	r3, #1092	; 0x444
 8005276:	4013      	ands	r3, r2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d107      	bne.n	800528c <HAL_TIM_PWM_Stop+0xa0>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 0201 	bic.w	r2, r2, #1
 800528a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d104      	bne.n	800529c <HAL_TIM_PWM_Stop+0xb0>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800529a:	e023      	b.n	80052e4 <HAL_TIM_PWM_Stop+0xf8>
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	2b04      	cmp	r3, #4
 80052a0:	d104      	bne.n	80052ac <HAL_TIM_PWM_Stop+0xc0>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052aa:	e01b      	b.n	80052e4 <HAL_TIM_PWM_Stop+0xf8>
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2b08      	cmp	r3, #8
 80052b0:	d104      	bne.n	80052bc <HAL_TIM_PWM_Stop+0xd0>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052ba:	e013      	b.n	80052e4 <HAL_TIM_PWM_Stop+0xf8>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2b0c      	cmp	r3, #12
 80052c0:	d104      	bne.n	80052cc <HAL_TIM_PWM_Stop+0xe0>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052ca:	e00b      	b.n	80052e4 <HAL_TIM_PWM_Stop+0xf8>
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2b10      	cmp	r3, #16
 80052d0:	d104      	bne.n	80052dc <HAL_TIM_PWM_Stop+0xf0>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052da:	e003      	b.n	80052e4 <HAL_TIM_PWM_Stop+0xf8>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	40012c00 	.word	0x40012c00
 80052f4:	40014000 	.word	0x40014000
 80052f8:	40014400 	.word	0x40014400

080052fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e097      	b.n	8005440 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	d106      	bne.n	800532a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7fd f99f 	bl	8002668 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2202      	movs	r2, #2
 800532e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6812      	ldr	r2, [r2, #0]
 800533c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005340:	f023 0307 	bic.w	r3, r3, #7
 8005344:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	3304      	adds	r3, #4
 800534e:	4619      	mov	r1, r3
 8005350:	4610      	mov	r0, r2
 8005352:	f000 fac3 	bl	80058dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	4313      	orrs	r3, r2
 8005376:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800537e:	f023 0303 	bic.w	r3, r3, #3
 8005382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	021b      	lsls	r3, r3, #8
 800538e:	4313      	orrs	r3, r2
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	4313      	orrs	r3, r2
 8005394:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800539c:	f023 030c 	bic.w	r3, r3, #12
 80053a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	021b      	lsls	r3, r3, #8
 80053b8:	4313      	orrs	r3, r2
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	4313      	orrs	r3, r2
 80053be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	011a      	lsls	r2, r3, #4
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	031b      	lsls	r3, r3, #12
 80053cc:	4313      	orrs	r3, r2
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80053da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80053e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	011b      	lsls	r3, r3, #4
 80053ee:	4313      	orrs	r3, r2
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005458:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005460:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005468:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005470:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d110      	bne.n	800549a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005478:	7bfb      	ldrb	r3, [r7, #15]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d102      	bne.n	8005484 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800547e:	7b7b      	ldrb	r3, [r7, #13]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d001      	beq.n	8005488 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e069      	b.n	800555c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005498:	e031      	b.n	80054fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b04      	cmp	r3, #4
 800549e:	d110      	bne.n	80054c2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054a0:	7bbb      	ldrb	r3, [r7, #14]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d102      	bne.n	80054ac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054a6:	7b3b      	ldrb	r3, [r7, #12]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d001      	beq.n	80054b0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e055      	b.n	800555c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054c0:	e01d      	b.n	80054fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054c2:	7bfb      	ldrb	r3, [r7, #15]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d108      	bne.n	80054da <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054c8:	7bbb      	ldrb	r3, [r7, #14]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d105      	bne.n	80054da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054ce:	7b7b      	ldrb	r3, [r7, #13]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d102      	bne.n	80054da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054d4:	7b3b      	ldrb	r3, [r7, #12]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d001      	beq.n	80054de <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e03e      	b.n	800555c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2202      	movs	r2, #2
 80054e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2202      	movs	r2, #2
 80054ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2202      	movs	r2, #2
 80054f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2202      	movs	r2, #2
 80054fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <HAL_TIM_Encoder_Start+0xc4>
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	2b04      	cmp	r3, #4
 8005508:	d008      	beq.n	800551c <HAL_TIM_Encoder_Start+0xd4>
 800550a:	e00f      	b.n	800552c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2201      	movs	r2, #1
 8005512:	2100      	movs	r1, #0
 8005514:	4618      	mov	r0, r3
 8005516:	f000 fcc3 	bl	8005ea0 <TIM_CCxChannelCmd>
      break;
 800551a:	e016      	b.n	800554a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2201      	movs	r2, #1
 8005522:	2104      	movs	r1, #4
 8005524:	4618      	mov	r0, r3
 8005526:	f000 fcbb 	bl	8005ea0 <TIM_CCxChannelCmd>
      break;
 800552a:	e00e      	b.n	800554a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2201      	movs	r2, #1
 8005532:	2100      	movs	r1, #0
 8005534:	4618      	mov	r0, r3
 8005536:	f000 fcb3 	bl	8005ea0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2201      	movs	r2, #1
 8005540:	2104      	movs	r1, #4
 8005542:	4618      	mov	r0, r3
 8005544:	f000 fcac 	bl	8005ea0 <TIM_CCxChannelCmd>
      break;
 8005548:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f042 0201 	orr.w	r2, r2, #1
 8005558:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <HAL_TIM_Encoder_Stop+0x18>
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	2b04      	cmp	r3, #4
 8005578:	d008      	beq.n	800558c <HAL_TIM_Encoder_Stop+0x28>
 800557a:	e00f      	b.n	800559c <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2200      	movs	r2, #0
 8005582:	2100      	movs	r1, #0
 8005584:	4618      	mov	r0, r3
 8005586:	f000 fc8b 	bl	8005ea0 <TIM_CCxChannelCmd>
      break;
 800558a:	e016      	b.n	80055ba <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2200      	movs	r2, #0
 8005592:	2104      	movs	r1, #4
 8005594:	4618      	mov	r0, r3
 8005596:	f000 fc83 	bl	8005ea0 <TIM_CCxChannelCmd>
      break;
 800559a:	e00e      	b.n	80055ba <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2200      	movs	r2, #0
 80055a2:	2100      	movs	r1, #0
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 fc7b 	bl	8005ea0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2200      	movs	r2, #0
 80055b0:	2104      	movs	r1, #4
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 fc74 	bl	8005ea0 <TIM_CCxChannelCmd>
      break;
 80055b8:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6a1a      	ldr	r2, [r3, #32]
 80055c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80055c4:	4013      	ands	r3, r2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10f      	bne.n	80055ea <HAL_TIM_Encoder_Stop+0x86>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6a1a      	ldr	r2, [r3, #32]
 80055d0:	f240 4344 	movw	r3, #1092	; 0x444
 80055d4:	4013      	ands	r3, r2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d107      	bne.n	80055ea <HAL_TIM_Encoder_Stop+0x86>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 0201 	bic.w	r2, r2, #1
 80055e8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <HAL_TIM_Encoder_Stop+0x92>
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	d148      	bne.n	8005688 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d104      	bne.n	8005606 <HAL_TIM_Encoder_Stop+0xa2>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005604:	e023      	b.n	800564e <HAL_TIM_Encoder_Stop+0xea>
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b04      	cmp	r3, #4
 800560a:	d104      	bne.n	8005616 <HAL_TIM_Encoder_Stop+0xb2>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005614:	e01b      	b.n	800564e <HAL_TIM_Encoder_Stop+0xea>
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	2b08      	cmp	r3, #8
 800561a:	d104      	bne.n	8005626 <HAL_TIM_Encoder_Stop+0xc2>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005624:	e013      	b.n	800564e <HAL_TIM_Encoder_Stop+0xea>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b0c      	cmp	r3, #12
 800562a:	d104      	bne.n	8005636 <HAL_TIM_Encoder_Stop+0xd2>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005634:	e00b      	b.n	800564e <HAL_TIM_Encoder_Stop+0xea>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b10      	cmp	r3, #16
 800563a:	d104      	bne.n	8005646 <HAL_TIM_Encoder_Stop+0xe2>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005644:	e003      	b.n	800564e <HAL_TIM_Encoder_Stop+0xea>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d104      	bne.n	800565e <HAL_TIM_Encoder_Stop+0xfa>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800565c:	e024      	b.n	80056a8 <HAL_TIM_Encoder_Stop+0x144>
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b04      	cmp	r3, #4
 8005662:	d104      	bne.n	800566e <HAL_TIM_Encoder_Stop+0x10a>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800566c:	e01c      	b.n	80056a8 <HAL_TIM_Encoder_Stop+0x144>
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2b08      	cmp	r3, #8
 8005672:	d104      	bne.n	800567e <HAL_TIM_Encoder_Stop+0x11a>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800567c:	e014      	b.n	80056a8 <HAL_TIM_Encoder_Stop+0x144>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8005686:	e00f      	b.n	80056a8 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
	...

080056b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056c0:	2300      	movs	r3, #0
 80056c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d101      	bne.n	80056d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056ce:	2302      	movs	r3, #2
 80056d0:	e0ff      	b.n	80058d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b14      	cmp	r3, #20
 80056de:	f200 80f0 	bhi.w	80058c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80056e2:	a201      	add	r2, pc, #4	; (adr r2, 80056e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e8:	0800573d 	.word	0x0800573d
 80056ec:	080058c3 	.word	0x080058c3
 80056f0:	080058c3 	.word	0x080058c3
 80056f4:	080058c3 	.word	0x080058c3
 80056f8:	0800577d 	.word	0x0800577d
 80056fc:	080058c3 	.word	0x080058c3
 8005700:	080058c3 	.word	0x080058c3
 8005704:	080058c3 	.word	0x080058c3
 8005708:	080057bf 	.word	0x080057bf
 800570c:	080058c3 	.word	0x080058c3
 8005710:	080058c3 	.word	0x080058c3
 8005714:	080058c3 	.word	0x080058c3
 8005718:	080057ff 	.word	0x080057ff
 800571c:	080058c3 	.word	0x080058c3
 8005720:	080058c3 	.word	0x080058c3
 8005724:	080058c3 	.word	0x080058c3
 8005728:	08005841 	.word	0x08005841
 800572c:	080058c3 	.word	0x080058c3
 8005730:	080058c3 	.word	0x080058c3
 8005734:	080058c3 	.word	0x080058c3
 8005738:	08005881 	.word	0x08005881
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68b9      	ldr	r1, [r7, #8]
 8005742:	4618      	mov	r0, r3
 8005744:	f000 f92e 	bl	80059a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	699a      	ldr	r2, [r3, #24]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f042 0208 	orr.w	r2, r2, #8
 8005756:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	699a      	ldr	r2, [r3, #24]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f022 0204 	bic.w	r2, r2, #4
 8005766:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6999      	ldr	r1, [r3, #24]
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	691a      	ldr	r2, [r3, #16]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	619a      	str	r2, [r3, #24]
      break;
 800577a:	e0a5      	b.n	80058c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68b9      	ldr	r1, [r7, #8]
 8005782:	4618      	mov	r0, r3
 8005784:	f000 f98a 	bl	8005a9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	699a      	ldr	r2, [r3, #24]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005796:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	699a      	ldr	r2, [r3, #24]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6999      	ldr	r1, [r3, #24]
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	021a      	lsls	r2, r3, #8
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	430a      	orrs	r2, r1
 80057ba:	619a      	str	r2, [r3, #24]
      break;
 80057bc:	e084      	b.n	80058c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68b9      	ldr	r1, [r7, #8]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 f9e3 	bl	8005b90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	69da      	ldr	r2, [r3, #28]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f042 0208 	orr.w	r2, r2, #8
 80057d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	69da      	ldr	r2, [r3, #28]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 0204 	bic.w	r2, r2, #4
 80057e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	69d9      	ldr	r1, [r3, #28]
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	691a      	ldr	r2, [r3, #16]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	61da      	str	r2, [r3, #28]
      break;
 80057fc:	e064      	b.n	80058c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68b9      	ldr	r1, [r7, #8]
 8005804:	4618      	mov	r0, r3
 8005806:	f000 fa3b 	bl	8005c80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	69da      	ldr	r2, [r3, #28]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005818:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	69da      	ldr	r2, [r3, #28]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005828:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	69d9      	ldr	r1, [r3, #28]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	021a      	lsls	r2, r3, #8
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	61da      	str	r2, [r3, #28]
      break;
 800583e:	e043      	b.n	80058c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68b9      	ldr	r1, [r7, #8]
 8005846:	4618      	mov	r0, r3
 8005848:	f000 fa78 	bl	8005d3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0208 	orr.w	r2, r2, #8
 800585a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f022 0204 	bic.w	r2, r2, #4
 800586a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	691a      	ldr	r2, [r3, #16]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800587e:	e023      	b.n	80058c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68b9      	ldr	r1, [r7, #8]
 8005886:	4618      	mov	r0, r3
 8005888:	f000 fab0 	bl	8005dec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800589a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	021a      	lsls	r2, r3, #8
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80058c0:	e002      	b.n	80058c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	75fb      	strb	r3, [r7, #23]
      break;
 80058c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop

080058dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a2a      	ldr	r2, [pc, #168]	; (8005998 <TIM_Base_SetConfig+0xbc>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d003      	beq.n	80058fc <TIM_Base_SetConfig+0x20>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058fa:	d108      	bne.n	800590e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	4313      	orrs	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a21      	ldr	r2, [pc, #132]	; (8005998 <TIM_Base_SetConfig+0xbc>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d00b      	beq.n	800592e <TIM_Base_SetConfig+0x52>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800591c:	d007      	beq.n	800592e <TIM_Base_SetConfig+0x52>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a1e      	ldr	r2, [pc, #120]	; (800599c <TIM_Base_SetConfig+0xc0>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d003      	beq.n	800592e <TIM_Base_SetConfig+0x52>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a1d      	ldr	r2, [pc, #116]	; (80059a0 <TIM_Base_SetConfig+0xc4>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d108      	bne.n	8005940 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	4313      	orrs	r3, r2
 800593e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	4313      	orrs	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a0c      	ldr	r2, [pc, #48]	; (8005998 <TIM_Base_SetConfig+0xbc>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d007      	beq.n	800597c <TIM_Base_SetConfig+0xa0>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a0b      	ldr	r2, [pc, #44]	; (800599c <TIM_Base_SetConfig+0xc0>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d003      	beq.n	800597c <TIM_Base_SetConfig+0xa0>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a0a      	ldr	r2, [pc, #40]	; (80059a0 <TIM_Base_SetConfig+0xc4>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d103      	bne.n	8005984 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	691a      	ldr	r2, [r3, #16]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	615a      	str	r2, [r3, #20]
}
 800598a:	bf00      	nop
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	40012c00 	.word	0x40012c00
 800599c:	40014000 	.word	0x40014000
 80059a0:	40014400 	.word	0x40014400

080059a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	f023 0201 	bic.w	r2, r3, #1
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 0303 	bic.w	r3, r3, #3
 80059de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f023 0302 	bic.w	r3, r3, #2
 80059f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a24      	ldr	r2, [pc, #144]	; (8005a90 <TIM_OC1_SetConfig+0xec>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d007      	beq.n	8005a14 <TIM_OC1_SetConfig+0x70>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a23      	ldr	r2, [pc, #140]	; (8005a94 <TIM_OC1_SetConfig+0xf0>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d003      	beq.n	8005a14 <TIM_OC1_SetConfig+0x70>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a22      	ldr	r2, [pc, #136]	; (8005a98 <TIM_OC1_SetConfig+0xf4>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d10c      	bne.n	8005a2e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f023 0308 	bic.w	r3, r3, #8
 8005a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f023 0304 	bic.w	r3, r3, #4
 8005a2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a17      	ldr	r2, [pc, #92]	; (8005a90 <TIM_OC1_SetConfig+0xec>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d007      	beq.n	8005a46 <TIM_OC1_SetConfig+0xa2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a16      	ldr	r2, [pc, #88]	; (8005a94 <TIM_OC1_SetConfig+0xf0>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d003      	beq.n	8005a46 <TIM_OC1_SetConfig+0xa2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a15      	ldr	r2, [pc, #84]	; (8005a98 <TIM_OC1_SetConfig+0xf4>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d111      	bne.n	8005a6a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	621a      	str	r2, [r3, #32]
}
 8005a84:	bf00      	nop
 8005a86:	371c      	adds	r7, #28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	40012c00 	.word	0x40012c00
 8005a94:	40014000 	.word	0x40014000
 8005a98:	40014400 	.word	0x40014400

08005a9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	f023 0210 	bic.w	r2, r3, #16
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	021b      	lsls	r3, r3, #8
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	f023 0320 	bic.w	r3, r3, #32
 8005aea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	011b      	lsls	r3, r3, #4
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a22      	ldr	r2, [pc, #136]	; (8005b84 <TIM_OC2_SetConfig+0xe8>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d10d      	bne.n	8005b1c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	011b      	lsls	r3, r3, #4
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a19      	ldr	r2, [pc, #100]	; (8005b84 <TIM_OC2_SetConfig+0xe8>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d007      	beq.n	8005b34 <TIM_OC2_SetConfig+0x98>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a18      	ldr	r2, [pc, #96]	; (8005b88 <TIM_OC2_SetConfig+0xec>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d003      	beq.n	8005b34 <TIM_OC2_SetConfig+0x98>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a17      	ldr	r2, [pc, #92]	; (8005b8c <TIM_OC2_SetConfig+0xf0>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d113      	bne.n	8005b5c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	621a      	str	r2, [r3, #32]
}
 8005b76:	bf00      	nop
 8005b78:	371c      	adds	r7, #28
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	40012c00 	.word	0x40012c00
 8005b88:	40014000 	.word	0x40014000
 8005b8c:	40014400 	.word	0x40014400

08005b90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0303 	bic.w	r3, r3, #3
 8005bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	021b      	lsls	r3, r3, #8
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a21      	ldr	r2, [pc, #132]	; (8005c74 <TIM_OC3_SetConfig+0xe4>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d10d      	bne.n	8005c0e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	021b      	lsls	r3, r3, #8
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a18      	ldr	r2, [pc, #96]	; (8005c74 <TIM_OC3_SetConfig+0xe4>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d007      	beq.n	8005c26 <TIM_OC3_SetConfig+0x96>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a17      	ldr	r2, [pc, #92]	; (8005c78 <TIM_OC3_SetConfig+0xe8>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d003      	beq.n	8005c26 <TIM_OC3_SetConfig+0x96>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a16      	ldr	r2, [pc, #88]	; (8005c7c <TIM_OC3_SetConfig+0xec>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d113      	bne.n	8005c4e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	011b      	lsls	r3, r3, #4
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	621a      	str	r2, [r3, #32]
}
 8005c68:	bf00      	nop
 8005c6a:	371c      	adds	r7, #28
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	40012c00 	.word	0x40012c00
 8005c78:	40014000 	.word	0x40014000
 8005c7c:	40014400 	.word	0x40014400

08005c80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	021b      	lsls	r3, r3, #8
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	031b      	lsls	r3, r3, #12
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a14      	ldr	r2, [pc, #80]	; (8005d30 <TIM_OC4_SetConfig+0xb0>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d007      	beq.n	8005cf4 <TIM_OC4_SetConfig+0x74>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a13      	ldr	r2, [pc, #76]	; (8005d34 <TIM_OC4_SetConfig+0xb4>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d003      	beq.n	8005cf4 <TIM_OC4_SetConfig+0x74>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a12      	ldr	r2, [pc, #72]	; (8005d38 <TIM_OC4_SetConfig+0xb8>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d109      	bne.n	8005d08 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	019b      	lsls	r3, r3, #6
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	621a      	str	r2, [r3, #32]
}
 8005d22:	bf00      	nop
 8005d24:	371c      	adds	r7, #28
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	40012c00 	.word	0x40012c00
 8005d34:	40014000 	.word	0x40014000
 8005d38:	40014400 	.word	0x40014400

08005d3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	041b      	lsls	r3, r3, #16
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a13      	ldr	r2, [pc, #76]	; (8005de0 <TIM_OC5_SetConfig+0xa4>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d007      	beq.n	8005da6 <TIM_OC5_SetConfig+0x6a>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a12      	ldr	r2, [pc, #72]	; (8005de4 <TIM_OC5_SetConfig+0xa8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d003      	beq.n	8005da6 <TIM_OC5_SetConfig+0x6a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a11      	ldr	r2, [pc, #68]	; (8005de8 <TIM_OC5_SetConfig+0xac>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d109      	bne.n	8005dba <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	021b      	lsls	r3, r3, #8
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	621a      	str	r2, [r3, #32]
}
 8005dd4:	bf00      	nop
 8005dd6:	371c      	adds	r7, #28
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	40012c00 	.word	0x40012c00
 8005de4:	40014000 	.word	0x40014000
 8005de8:	40014400 	.word	0x40014400

08005dec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	021b      	lsls	r3, r3, #8
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	051b      	lsls	r3, r3, #20
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a14      	ldr	r2, [pc, #80]	; (8005e94 <TIM_OC6_SetConfig+0xa8>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d007      	beq.n	8005e58 <TIM_OC6_SetConfig+0x6c>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a13      	ldr	r2, [pc, #76]	; (8005e98 <TIM_OC6_SetConfig+0xac>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d003      	beq.n	8005e58 <TIM_OC6_SetConfig+0x6c>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a12      	ldr	r2, [pc, #72]	; (8005e9c <TIM_OC6_SetConfig+0xb0>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d109      	bne.n	8005e6c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	695b      	ldr	r3, [r3, #20]
 8005e64:	029b      	lsls	r3, r3, #10
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	621a      	str	r2, [r3, #32]
}
 8005e86:	bf00      	nop
 8005e88:	371c      	adds	r7, #28
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	40012c00 	.word	0x40012c00
 8005e98:	40014000 	.word	0x40014000
 8005e9c:	40014400 	.word	0x40014400

08005ea0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	f003 031f 	and.w	r3, r3, #31
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6a1a      	ldr	r2, [r3, #32]
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	43db      	mvns	r3, r3
 8005ec2:	401a      	ands	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6a1a      	ldr	r2, [r3, #32]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	f003 031f 	and.w	r3, r3, #31
 8005ed2:	6879      	ldr	r1, [r7, #4]
 8005ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed8:	431a      	orrs	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	621a      	str	r2, [r3, #32]
}
 8005ede:	bf00      	nop
 8005ee0:	371c      	adds	r7, #28
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
	...

08005eec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d101      	bne.n	8005f04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f00:	2302      	movs	r3, #2
 8005f02:	e04f      	b.n	8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2202      	movs	r2, #2
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a21      	ldr	r2, [pc, #132]	; (8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d108      	bne.n	8005f40 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f34:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a14      	ldr	r2, [pc, #80]	; (8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d009      	beq.n	8005f78 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f6c:	d004      	beq.n	8005f78 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a10      	ldr	r2, [pc, #64]	; (8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d10c      	bne.n	8005f92 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	40012c00 	.word	0x40012c00
 8005fb4:	40014000 	.word	0x40014000

08005fb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d101      	bne.n	8005fd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	e060      	b.n	8006096 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	4313      	orrs	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4313      	orrs	r3, r2
 8006012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	4313      	orrs	r3, r2
 800602e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603a:	4313      	orrs	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	041b      	lsls	r3, r3, #16
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a14      	ldr	r2, [pc, #80]	; (80060a4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d115      	bne.n	8006084 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006062:	051b      	lsls	r3, r3, #20
 8006064:	4313      	orrs	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	4313      	orrs	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	4313      	orrs	r3, r2
 8006082:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3714      	adds	r7, #20
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	40012c00 	.word	0x40012c00

080060a8 <__errno>:
 80060a8:	4b01      	ldr	r3, [pc, #4]	; (80060b0 <__errno+0x8>)
 80060aa:	6818      	ldr	r0, [r3, #0]
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	200000a4 	.word	0x200000a4

080060b4 <__libc_init_array>:
 80060b4:	b570      	push	{r4, r5, r6, lr}
 80060b6:	4d0d      	ldr	r5, [pc, #52]	; (80060ec <__libc_init_array+0x38>)
 80060b8:	4c0d      	ldr	r4, [pc, #52]	; (80060f0 <__libc_init_array+0x3c>)
 80060ba:	1b64      	subs	r4, r4, r5
 80060bc:	10a4      	asrs	r4, r4, #2
 80060be:	2600      	movs	r6, #0
 80060c0:	42a6      	cmp	r6, r4
 80060c2:	d109      	bne.n	80060d8 <__libc_init_array+0x24>
 80060c4:	4d0b      	ldr	r5, [pc, #44]	; (80060f4 <__libc_init_array+0x40>)
 80060c6:	4c0c      	ldr	r4, [pc, #48]	; (80060f8 <__libc_init_array+0x44>)
 80060c8:	f003 fa56 	bl	8009578 <_init>
 80060cc:	1b64      	subs	r4, r4, r5
 80060ce:	10a4      	asrs	r4, r4, #2
 80060d0:	2600      	movs	r6, #0
 80060d2:	42a6      	cmp	r6, r4
 80060d4:	d105      	bne.n	80060e2 <__libc_init_array+0x2e>
 80060d6:	bd70      	pop	{r4, r5, r6, pc}
 80060d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80060dc:	4798      	blx	r3
 80060de:	3601      	adds	r6, #1
 80060e0:	e7ee      	b.n	80060c0 <__libc_init_array+0xc>
 80060e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80060e6:	4798      	blx	r3
 80060e8:	3601      	adds	r6, #1
 80060ea:	e7f2      	b.n	80060d2 <__libc_init_array+0x1e>
 80060ec:	08009ab0 	.word	0x08009ab0
 80060f0:	08009ab0 	.word	0x08009ab0
 80060f4:	08009ab0 	.word	0x08009ab0
 80060f8:	08009ab4 	.word	0x08009ab4

080060fc <memset>:
 80060fc:	4402      	add	r2, r0
 80060fe:	4603      	mov	r3, r0
 8006100:	4293      	cmp	r3, r2
 8006102:	d100      	bne.n	8006106 <memset+0xa>
 8006104:	4770      	bx	lr
 8006106:	f803 1b01 	strb.w	r1, [r3], #1
 800610a:	e7f9      	b.n	8006100 <memset+0x4>

0800610c <__cvt>:
 800610c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006110:	ec55 4b10 	vmov	r4, r5, d0
 8006114:	2d00      	cmp	r5, #0
 8006116:	460e      	mov	r6, r1
 8006118:	4619      	mov	r1, r3
 800611a:	462b      	mov	r3, r5
 800611c:	bfbb      	ittet	lt
 800611e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006122:	461d      	movlt	r5, r3
 8006124:	2300      	movge	r3, #0
 8006126:	232d      	movlt	r3, #45	; 0x2d
 8006128:	700b      	strb	r3, [r1, #0]
 800612a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800612c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006130:	4691      	mov	r9, r2
 8006132:	f023 0820 	bic.w	r8, r3, #32
 8006136:	bfbc      	itt	lt
 8006138:	4622      	movlt	r2, r4
 800613a:	4614      	movlt	r4, r2
 800613c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006140:	d005      	beq.n	800614e <__cvt+0x42>
 8006142:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006146:	d100      	bne.n	800614a <__cvt+0x3e>
 8006148:	3601      	adds	r6, #1
 800614a:	2102      	movs	r1, #2
 800614c:	e000      	b.n	8006150 <__cvt+0x44>
 800614e:	2103      	movs	r1, #3
 8006150:	ab03      	add	r3, sp, #12
 8006152:	9301      	str	r3, [sp, #4]
 8006154:	ab02      	add	r3, sp, #8
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	ec45 4b10 	vmov	d0, r4, r5
 800615c:	4653      	mov	r3, sl
 800615e:	4632      	mov	r2, r6
 8006160:	f000 fcea 	bl	8006b38 <_dtoa_r>
 8006164:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006168:	4607      	mov	r7, r0
 800616a:	d102      	bne.n	8006172 <__cvt+0x66>
 800616c:	f019 0f01 	tst.w	r9, #1
 8006170:	d022      	beq.n	80061b8 <__cvt+0xac>
 8006172:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006176:	eb07 0906 	add.w	r9, r7, r6
 800617a:	d110      	bne.n	800619e <__cvt+0x92>
 800617c:	783b      	ldrb	r3, [r7, #0]
 800617e:	2b30      	cmp	r3, #48	; 0x30
 8006180:	d10a      	bne.n	8006198 <__cvt+0x8c>
 8006182:	2200      	movs	r2, #0
 8006184:	2300      	movs	r3, #0
 8006186:	4620      	mov	r0, r4
 8006188:	4629      	mov	r1, r5
 800618a:	f7fa fc9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800618e:	b918      	cbnz	r0, 8006198 <__cvt+0x8c>
 8006190:	f1c6 0601 	rsb	r6, r6, #1
 8006194:	f8ca 6000 	str.w	r6, [sl]
 8006198:	f8da 3000 	ldr.w	r3, [sl]
 800619c:	4499      	add	r9, r3
 800619e:	2200      	movs	r2, #0
 80061a0:	2300      	movs	r3, #0
 80061a2:	4620      	mov	r0, r4
 80061a4:	4629      	mov	r1, r5
 80061a6:	f7fa fc8f 	bl	8000ac8 <__aeabi_dcmpeq>
 80061aa:	b108      	cbz	r0, 80061b0 <__cvt+0xa4>
 80061ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80061b0:	2230      	movs	r2, #48	; 0x30
 80061b2:	9b03      	ldr	r3, [sp, #12]
 80061b4:	454b      	cmp	r3, r9
 80061b6:	d307      	bcc.n	80061c8 <__cvt+0xbc>
 80061b8:	9b03      	ldr	r3, [sp, #12]
 80061ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061bc:	1bdb      	subs	r3, r3, r7
 80061be:	4638      	mov	r0, r7
 80061c0:	6013      	str	r3, [r2, #0]
 80061c2:	b004      	add	sp, #16
 80061c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c8:	1c59      	adds	r1, r3, #1
 80061ca:	9103      	str	r1, [sp, #12]
 80061cc:	701a      	strb	r2, [r3, #0]
 80061ce:	e7f0      	b.n	80061b2 <__cvt+0xa6>

080061d0 <__exponent>:
 80061d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061d2:	4603      	mov	r3, r0
 80061d4:	2900      	cmp	r1, #0
 80061d6:	bfb8      	it	lt
 80061d8:	4249      	neglt	r1, r1
 80061da:	f803 2b02 	strb.w	r2, [r3], #2
 80061de:	bfb4      	ite	lt
 80061e0:	222d      	movlt	r2, #45	; 0x2d
 80061e2:	222b      	movge	r2, #43	; 0x2b
 80061e4:	2909      	cmp	r1, #9
 80061e6:	7042      	strb	r2, [r0, #1]
 80061e8:	dd2a      	ble.n	8006240 <__exponent+0x70>
 80061ea:	f10d 0407 	add.w	r4, sp, #7
 80061ee:	46a4      	mov	ip, r4
 80061f0:	270a      	movs	r7, #10
 80061f2:	46a6      	mov	lr, r4
 80061f4:	460a      	mov	r2, r1
 80061f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80061fa:	fb07 1516 	mls	r5, r7, r6, r1
 80061fe:	3530      	adds	r5, #48	; 0x30
 8006200:	2a63      	cmp	r2, #99	; 0x63
 8006202:	f104 34ff 	add.w	r4, r4, #4294967295
 8006206:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800620a:	4631      	mov	r1, r6
 800620c:	dcf1      	bgt.n	80061f2 <__exponent+0x22>
 800620e:	3130      	adds	r1, #48	; 0x30
 8006210:	f1ae 0502 	sub.w	r5, lr, #2
 8006214:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006218:	1c44      	adds	r4, r0, #1
 800621a:	4629      	mov	r1, r5
 800621c:	4561      	cmp	r1, ip
 800621e:	d30a      	bcc.n	8006236 <__exponent+0x66>
 8006220:	f10d 0209 	add.w	r2, sp, #9
 8006224:	eba2 020e 	sub.w	r2, r2, lr
 8006228:	4565      	cmp	r5, ip
 800622a:	bf88      	it	hi
 800622c:	2200      	movhi	r2, #0
 800622e:	4413      	add	r3, r2
 8006230:	1a18      	subs	r0, r3, r0
 8006232:	b003      	add	sp, #12
 8006234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006236:	f811 2b01 	ldrb.w	r2, [r1], #1
 800623a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800623e:	e7ed      	b.n	800621c <__exponent+0x4c>
 8006240:	2330      	movs	r3, #48	; 0x30
 8006242:	3130      	adds	r1, #48	; 0x30
 8006244:	7083      	strb	r3, [r0, #2]
 8006246:	70c1      	strb	r1, [r0, #3]
 8006248:	1d03      	adds	r3, r0, #4
 800624a:	e7f1      	b.n	8006230 <__exponent+0x60>

0800624c <_printf_float>:
 800624c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006250:	ed2d 8b02 	vpush	{d8}
 8006254:	b08d      	sub	sp, #52	; 0x34
 8006256:	460c      	mov	r4, r1
 8006258:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800625c:	4616      	mov	r6, r2
 800625e:	461f      	mov	r7, r3
 8006260:	4605      	mov	r5, r0
 8006262:	f001 fa57 	bl	8007714 <_localeconv_r>
 8006266:	f8d0 a000 	ldr.w	sl, [r0]
 800626a:	4650      	mov	r0, sl
 800626c:	f7f9 ffb0 	bl	80001d0 <strlen>
 8006270:	2300      	movs	r3, #0
 8006272:	930a      	str	r3, [sp, #40]	; 0x28
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	9305      	str	r3, [sp, #20]
 8006278:	f8d8 3000 	ldr.w	r3, [r8]
 800627c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006280:	3307      	adds	r3, #7
 8006282:	f023 0307 	bic.w	r3, r3, #7
 8006286:	f103 0208 	add.w	r2, r3, #8
 800628a:	f8c8 2000 	str.w	r2, [r8]
 800628e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006292:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006296:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800629a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800629e:	9307      	str	r3, [sp, #28]
 80062a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80062a4:	ee08 0a10 	vmov	s16, r0
 80062a8:	4b9f      	ldr	r3, [pc, #636]	; (8006528 <_printf_float+0x2dc>)
 80062aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062ae:	f04f 32ff 	mov.w	r2, #4294967295
 80062b2:	f7fa fc3b 	bl	8000b2c <__aeabi_dcmpun>
 80062b6:	bb88      	cbnz	r0, 800631c <_printf_float+0xd0>
 80062b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062bc:	4b9a      	ldr	r3, [pc, #616]	; (8006528 <_printf_float+0x2dc>)
 80062be:	f04f 32ff 	mov.w	r2, #4294967295
 80062c2:	f7fa fc15 	bl	8000af0 <__aeabi_dcmple>
 80062c6:	bb48      	cbnz	r0, 800631c <_printf_float+0xd0>
 80062c8:	2200      	movs	r2, #0
 80062ca:	2300      	movs	r3, #0
 80062cc:	4640      	mov	r0, r8
 80062ce:	4649      	mov	r1, r9
 80062d0:	f7fa fc04 	bl	8000adc <__aeabi_dcmplt>
 80062d4:	b110      	cbz	r0, 80062dc <_printf_float+0x90>
 80062d6:	232d      	movs	r3, #45	; 0x2d
 80062d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062dc:	4b93      	ldr	r3, [pc, #588]	; (800652c <_printf_float+0x2e0>)
 80062de:	4894      	ldr	r0, [pc, #592]	; (8006530 <_printf_float+0x2e4>)
 80062e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80062e4:	bf94      	ite	ls
 80062e6:	4698      	movls	r8, r3
 80062e8:	4680      	movhi	r8, r0
 80062ea:	2303      	movs	r3, #3
 80062ec:	6123      	str	r3, [r4, #16]
 80062ee:	9b05      	ldr	r3, [sp, #20]
 80062f0:	f023 0204 	bic.w	r2, r3, #4
 80062f4:	6022      	str	r2, [r4, #0]
 80062f6:	f04f 0900 	mov.w	r9, #0
 80062fa:	9700      	str	r7, [sp, #0]
 80062fc:	4633      	mov	r3, r6
 80062fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8006300:	4621      	mov	r1, r4
 8006302:	4628      	mov	r0, r5
 8006304:	f000 f9d8 	bl	80066b8 <_printf_common>
 8006308:	3001      	adds	r0, #1
 800630a:	f040 8090 	bne.w	800642e <_printf_float+0x1e2>
 800630e:	f04f 30ff 	mov.w	r0, #4294967295
 8006312:	b00d      	add	sp, #52	; 0x34
 8006314:	ecbd 8b02 	vpop	{d8}
 8006318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800631c:	4642      	mov	r2, r8
 800631e:	464b      	mov	r3, r9
 8006320:	4640      	mov	r0, r8
 8006322:	4649      	mov	r1, r9
 8006324:	f7fa fc02 	bl	8000b2c <__aeabi_dcmpun>
 8006328:	b140      	cbz	r0, 800633c <_printf_float+0xf0>
 800632a:	464b      	mov	r3, r9
 800632c:	2b00      	cmp	r3, #0
 800632e:	bfbc      	itt	lt
 8006330:	232d      	movlt	r3, #45	; 0x2d
 8006332:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006336:	487f      	ldr	r0, [pc, #508]	; (8006534 <_printf_float+0x2e8>)
 8006338:	4b7f      	ldr	r3, [pc, #508]	; (8006538 <_printf_float+0x2ec>)
 800633a:	e7d1      	b.n	80062e0 <_printf_float+0x94>
 800633c:	6863      	ldr	r3, [r4, #4]
 800633e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006342:	9206      	str	r2, [sp, #24]
 8006344:	1c5a      	adds	r2, r3, #1
 8006346:	d13f      	bne.n	80063c8 <_printf_float+0x17c>
 8006348:	2306      	movs	r3, #6
 800634a:	6063      	str	r3, [r4, #4]
 800634c:	9b05      	ldr	r3, [sp, #20]
 800634e:	6861      	ldr	r1, [r4, #4]
 8006350:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006354:	2300      	movs	r3, #0
 8006356:	9303      	str	r3, [sp, #12]
 8006358:	ab0a      	add	r3, sp, #40	; 0x28
 800635a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800635e:	ab09      	add	r3, sp, #36	; 0x24
 8006360:	ec49 8b10 	vmov	d0, r8, r9
 8006364:	9300      	str	r3, [sp, #0]
 8006366:	6022      	str	r2, [r4, #0]
 8006368:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800636c:	4628      	mov	r0, r5
 800636e:	f7ff fecd 	bl	800610c <__cvt>
 8006372:	9b06      	ldr	r3, [sp, #24]
 8006374:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006376:	2b47      	cmp	r3, #71	; 0x47
 8006378:	4680      	mov	r8, r0
 800637a:	d108      	bne.n	800638e <_printf_float+0x142>
 800637c:	1cc8      	adds	r0, r1, #3
 800637e:	db02      	blt.n	8006386 <_printf_float+0x13a>
 8006380:	6863      	ldr	r3, [r4, #4]
 8006382:	4299      	cmp	r1, r3
 8006384:	dd41      	ble.n	800640a <_printf_float+0x1be>
 8006386:	f1ab 0b02 	sub.w	fp, fp, #2
 800638a:	fa5f fb8b 	uxtb.w	fp, fp
 800638e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006392:	d820      	bhi.n	80063d6 <_printf_float+0x18a>
 8006394:	3901      	subs	r1, #1
 8006396:	465a      	mov	r2, fp
 8006398:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800639c:	9109      	str	r1, [sp, #36]	; 0x24
 800639e:	f7ff ff17 	bl	80061d0 <__exponent>
 80063a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063a4:	1813      	adds	r3, r2, r0
 80063a6:	2a01      	cmp	r2, #1
 80063a8:	4681      	mov	r9, r0
 80063aa:	6123      	str	r3, [r4, #16]
 80063ac:	dc02      	bgt.n	80063b4 <_printf_float+0x168>
 80063ae:	6822      	ldr	r2, [r4, #0]
 80063b0:	07d2      	lsls	r2, r2, #31
 80063b2:	d501      	bpl.n	80063b8 <_printf_float+0x16c>
 80063b4:	3301      	adds	r3, #1
 80063b6:	6123      	str	r3, [r4, #16]
 80063b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d09c      	beq.n	80062fa <_printf_float+0xae>
 80063c0:	232d      	movs	r3, #45	; 0x2d
 80063c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063c6:	e798      	b.n	80062fa <_printf_float+0xae>
 80063c8:	9a06      	ldr	r2, [sp, #24]
 80063ca:	2a47      	cmp	r2, #71	; 0x47
 80063cc:	d1be      	bne.n	800634c <_printf_float+0x100>
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1bc      	bne.n	800634c <_printf_float+0x100>
 80063d2:	2301      	movs	r3, #1
 80063d4:	e7b9      	b.n	800634a <_printf_float+0xfe>
 80063d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80063da:	d118      	bne.n	800640e <_printf_float+0x1c2>
 80063dc:	2900      	cmp	r1, #0
 80063de:	6863      	ldr	r3, [r4, #4]
 80063e0:	dd0b      	ble.n	80063fa <_printf_float+0x1ae>
 80063e2:	6121      	str	r1, [r4, #16]
 80063e4:	b913      	cbnz	r3, 80063ec <_printf_float+0x1a0>
 80063e6:	6822      	ldr	r2, [r4, #0]
 80063e8:	07d0      	lsls	r0, r2, #31
 80063ea:	d502      	bpl.n	80063f2 <_printf_float+0x1a6>
 80063ec:	3301      	adds	r3, #1
 80063ee:	440b      	add	r3, r1
 80063f0:	6123      	str	r3, [r4, #16]
 80063f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80063f4:	f04f 0900 	mov.w	r9, #0
 80063f8:	e7de      	b.n	80063b8 <_printf_float+0x16c>
 80063fa:	b913      	cbnz	r3, 8006402 <_printf_float+0x1b6>
 80063fc:	6822      	ldr	r2, [r4, #0]
 80063fe:	07d2      	lsls	r2, r2, #31
 8006400:	d501      	bpl.n	8006406 <_printf_float+0x1ba>
 8006402:	3302      	adds	r3, #2
 8006404:	e7f4      	b.n	80063f0 <_printf_float+0x1a4>
 8006406:	2301      	movs	r3, #1
 8006408:	e7f2      	b.n	80063f0 <_printf_float+0x1a4>
 800640a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800640e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006410:	4299      	cmp	r1, r3
 8006412:	db05      	blt.n	8006420 <_printf_float+0x1d4>
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	6121      	str	r1, [r4, #16]
 8006418:	07d8      	lsls	r0, r3, #31
 800641a:	d5ea      	bpl.n	80063f2 <_printf_float+0x1a6>
 800641c:	1c4b      	adds	r3, r1, #1
 800641e:	e7e7      	b.n	80063f0 <_printf_float+0x1a4>
 8006420:	2900      	cmp	r1, #0
 8006422:	bfd4      	ite	le
 8006424:	f1c1 0202 	rsble	r2, r1, #2
 8006428:	2201      	movgt	r2, #1
 800642a:	4413      	add	r3, r2
 800642c:	e7e0      	b.n	80063f0 <_printf_float+0x1a4>
 800642e:	6823      	ldr	r3, [r4, #0]
 8006430:	055a      	lsls	r2, r3, #21
 8006432:	d407      	bmi.n	8006444 <_printf_float+0x1f8>
 8006434:	6923      	ldr	r3, [r4, #16]
 8006436:	4642      	mov	r2, r8
 8006438:	4631      	mov	r1, r6
 800643a:	4628      	mov	r0, r5
 800643c:	47b8      	blx	r7
 800643e:	3001      	adds	r0, #1
 8006440:	d12c      	bne.n	800649c <_printf_float+0x250>
 8006442:	e764      	b.n	800630e <_printf_float+0xc2>
 8006444:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006448:	f240 80e0 	bls.w	800660c <_printf_float+0x3c0>
 800644c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006450:	2200      	movs	r2, #0
 8006452:	2300      	movs	r3, #0
 8006454:	f7fa fb38 	bl	8000ac8 <__aeabi_dcmpeq>
 8006458:	2800      	cmp	r0, #0
 800645a:	d034      	beq.n	80064c6 <_printf_float+0x27a>
 800645c:	4a37      	ldr	r2, [pc, #220]	; (800653c <_printf_float+0x2f0>)
 800645e:	2301      	movs	r3, #1
 8006460:	4631      	mov	r1, r6
 8006462:	4628      	mov	r0, r5
 8006464:	47b8      	blx	r7
 8006466:	3001      	adds	r0, #1
 8006468:	f43f af51 	beq.w	800630e <_printf_float+0xc2>
 800646c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006470:	429a      	cmp	r2, r3
 8006472:	db02      	blt.n	800647a <_printf_float+0x22e>
 8006474:	6823      	ldr	r3, [r4, #0]
 8006476:	07d8      	lsls	r0, r3, #31
 8006478:	d510      	bpl.n	800649c <_printf_float+0x250>
 800647a:	ee18 3a10 	vmov	r3, s16
 800647e:	4652      	mov	r2, sl
 8006480:	4631      	mov	r1, r6
 8006482:	4628      	mov	r0, r5
 8006484:	47b8      	blx	r7
 8006486:	3001      	adds	r0, #1
 8006488:	f43f af41 	beq.w	800630e <_printf_float+0xc2>
 800648c:	f04f 0800 	mov.w	r8, #0
 8006490:	f104 091a 	add.w	r9, r4, #26
 8006494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006496:	3b01      	subs	r3, #1
 8006498:	4543      	cmp	r3, r8
 800649a:	dc09      	bgt.n	80064b0 <_printf_float+0x264>
 800649c:	6823      	ldr	r3, [r4, #0]
 800649e:	079b      	lsls	r3, r3, #30
 80064a0:	f100 8105 	bmi.w	80066ae <_printf_float+0x462>
 80064a4:	68e0      	ldr	r0, [r4, #12]
 80064a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064a8:	4298      	cmp	r0, r3
 80064aa:	bfb8      	it	lt
 80064ac:	4618      	movlt	r0, r3
 80064ae:	e730      	b.n	8006312 <_printf_float+0xc6>
 80064b0:	2301      	movs	r3, #1
 80064b2:	464a      	mov	r2, r9
 80064b4:	4631      	mov	r1, r6
 80064b6:	4628      	mov	r0, r5
 80064b8:	47b8      	blx	r7
 80064ba:	3001      	adds	r0, #1
 80064bc:	f43f af27 	beq.w	800630e <_printf_float+0xc2>
 80064c0:	f108 0801 	add.w	r8, r8, #1
 80064c4:	e7e6      	b.n	8006494 <_printf_float+0x248>
 80064c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	dc39      	bgt.n	8006540 <_printf_float+0x2f4>
 80064cc:	4a1b      	ldr	r2, [pc, #108]	; (800653c <_printf_float+0x2f0>)
 80064ce:	2301      	movs	r3, #1
 80064d0:	4631      	mov	r1, r6
 80064d2:	4628      	mov	r0, r5
 80064d4:	47b8      	blx	r7
 80064d6:	3001      	adds	r0, #1
 80064d8:	f43f af19 	beq.w	800630e <_printf_float+0xc2>
 80064dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064e0:	4313      	orrs	r3, r2
 80064e2:	d102      	bne.n	80064ea <_printf_float+0x29e>
 80064e4:	6823      	ldr	r3, [r4, #0]
 80064e6:	07d9      	lsls	r1, r3, #31
 80064e8:	d5d8      	bpl.n	800649c <_printf_float+0x250>
 80064ea:	ee18 3a10 	vmov	r3, s16
 80064ee:	4652      	mov	r2, sl
 80064f0:	4631      	mov	r1, r6
 80064f2:	4628      	mov	r0, r5
 80064f4:	47b8      	blx	r7
 80064f6:	3001      	adds	r0, #1
 80064f8:	f43f af09 	beq.w	800630e <_printf_float+0xc2>
 80064fc:	f04f 0900 	mov.w	r9, #0
 8006500:	f104 0a1a 	add.w	sl, r4, #26
 8006504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006506:	425b      	negs	r3, r3
 8006508:	454b      	cmp	r3, r9
 800650a:	dc01      	bgt.n	8006510 <_printf_float+0x2c4>
 800650c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800650e:	e792      	b.n	8006436 <_printf_float+0x1ea>
 8006510:	2301      	movs	r3, #1
 8006512:	4652      	mov	r2, sl
 8006514:	4631      	mov	r1, r6
 8006516:	4628      	mov	r0, r5
 8006518:	47b8      	blx	r7
 800651a:	3001      	adds	r0, #1
 800651c:	f43f aef7 	beq.w	800630e <_printf_float+0xc2>
 8006520:	f109 0901 	add.w	r9, r9, #1
 8006524:	e7ee      	b.n	8006504 <_printf_float+0x2b8>
 8006526:	bf00      	nop
 8006528:	7fefffff 	.word	0x7fefffff
 800652c:	08009664 	.word	0x08009664
 8006530:	08009668 	.word	0x08009668
 8006534:	08009670 	.word	0x08009670
 8006538:	0800966c 	.word	0x0800966c
 800653c:	08009674 	.word	0x08009674
 8006540:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006542:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006544:	429a      	cmp	r2, r3
 8006546:	bfa8      	it	ge
 8006548:	461a      	movge	r2, r3
 800654a:	2a00      	cmp	r2, #0
 800654c:	4691      	mov	r9, r2
 800654e:	dc37      	bgt.n	80065c0 <_printf_float+0x374>
 8006550:	f04f 0b00 	mov.w	fp, #0
 8006554:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006558:	f104 021a 	add.w	r2, r4, #26
 800655c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800655e:	9305      	str	r3, [sp, #20]
 8006560:	eba3 0309 	sub.w	r3, r3, r9
 8006564:	455b      	cmp	r3, fp
 8006566:	dc33      	bgt.n	80065d0 <_printf_float+0x384>
 8006568:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800656c:	429a      	cmp	r2, r3
 800656e:	db3b      	blt.n	80065e8 <_printf_float+0x39c>
 8006570:	6823      	ldr	r3, [r4, #0]
 8006572:	07da      	lsls	r2, r3, #31
 8006574:	d438      	bmi.n	80065e8 <_printf_float+0x39c>
 8006576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006578:	9a05      	ldr	r2, [sp, #20]
 800657a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800657c:	1a9a      	subs	r2, r3, r2
 800657e:	eba3 0901 	sub.w	r9, r3, r1
 8006582:	4591      	cmp	r9, r2
 8006584:	bfa8      	it	ge
 8006586:	4691      	movge	r9, r2
 8006588:	f1b9 0f00 	cmp.w	r9, #0
 800658c:	dc35      	bgt.n	80065fa <_printf_float+0x3ae>
 800658e:	f04f 0800 	mov.w	r8, #0
 8006592:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006596:	f104 0a1a 	add.w	sl, r4, #26
 800659a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800659e:	1a9b      	subs	r3, r3, r2
 80065a0:	eba3 0309 	sub.w	r3, r3, r9
 80065a4:	4543      	cmp	r3, r8
 80065a6:	f77f af79 	ble.w	800649c <_printf_float+0x250>
 80065aa:	2301      	movs	r3, #1
 80065ac:	4652      	mov	r2, sl
 80065ae:	4631      	mov	r1, r6
 80065b0:	4628      	mov	r0, r5
 80065b2:	47b8      	blx	r7
 80065b4:	3001      	adds	r0, #1
 80065b6:	f43f aeaa 	beq.w	800630e <_printf_float+0xc2>
 80065ba:	f108 0801 	add.w	r8, r8, #1
 80065be:	e7ec      	b.n	800659a <_printf_float+0x34e>
 80065c0:	4613      	mov	r3, r2
 80065c2:	4631      	mov	r1, r6
 80065c4:	4642      	mov	r2, r8
 80065c6:	4628      	mov	r0, r5
 80065c8:	47b8      	blx	r7
 80065ca:	3001      	adds	r0, #1
 80065cc:	d1c0      	bne.n	8006550 <_printf_float+0x304>
 80065ce:	e69e      	b.n	800630e <_printf_float+0xc2>
 80065d0:	2301      	movs	r3, #1
 80065d2:	4631      	mov	r1, r6
 80065d4:	4628      	mov	r0, r5
 80065d6:	9205      	str	r2, [sp, #20]
 80065d8:	47b8      	blx	r7
 80065da:	3001      	adds	r0, #1
 80065dc:	f43f ae97 	beq.w	800630e <_printf_float+0xc2>
 80065e0:	9a05      	ldr	r2, [sp, #20]
 80065e2:	f10b 0b01 	add.w	fp, fp, #1
 80065e6:	e7b9      	b.n	800655c <_printf_float+0x310>
 80065e8:	ee18 3a10 	vmov	r3, s16
 80065ec:	4652      	mov	r2, sl
 80065ee:	4631      	mov	r1, r6
 80065f0:	4628      	mov	r0, r5
 80065f2:	47b8      	blx	r7
 80065f4:	3001      	adds	r0, #1
 80065f6:	d1be      	bne.n	8006576 <_printf_float+0x32a>
 80065f8:	e689      	b.n	800630e <_printf_float+0xc2>
 80065fa:	9a05      	ldr	r2, [sp, #20]
 80065fc:	464b      	mov	r3, r9
 80065fe:	4442      	add	r2, r8
 8006600:	4631      	mov	r1, r6
 8006602:	4628      	mov	r0, r5
 8006604:	47b8      	blx	r7
 8006606:	3001      	adds	r0, #1
 8006608:	d1c1      	bne.n	800658e <_printf_float+0x342>
 800660a:	e680      	b.n	800630e <_printf_float+0xc2>
 800660c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800660e:	2a01      	cmp	r2, #1
 8006610:	dc01      	bgt.n	8006616 <_printf_float+0x3ca>
 8006612:	07db      	lsls	r3, r3, #31
 8006614:	d538      	bpl.n	8006688 <_printf_float+0x43c>
 8006616:	2301      	movs	r3, #1
 8006618:	4642      	mov	r2, r8
 800661a:	4631      	mov	r1, r6
 800661c:	4628      	mov	r0, r5
 800661e:	47b8      	blx	r7
 8006620:	3001      	adds	r0, #1
 8006622:	f43f ae74 	beq.w	800630e <_printf_float+0xc2>
 8006626:	ee18 3a10 	vmov	r3, s16
 800662a:	4652      	mov	r2, sl
 800662c:	4631      	mov	r1, r6
 800662e:	4628      	mov	r0, r5
 8006630:	47b8      	blx	r7
 8006632:	3001      	adds	r0, #1
 8006634:	f43f ae6b 	beq.w	800630e <_printf_float+0xc2>
 8006638:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800663c:	2200      	movs	r2, #0
 800663e:	2300      	movs	r3, #0
 8006640:	f7fa fa42 	bl	8000ac8 <__aeabi_dcmpeq>
 8006644:	b9d8      	cbnz	r0, 800667e <_printf_float+0x432>
 8006646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006648:	f108 0201 	add.w	r2, r8, #1
 800664c:	3b01      	subs	r3, #1
 800664e:	4631      	mov	r1, r6
 8006650:	4628      	mov	r0, r5
 8006652:	47b8      	blx	r7
 8006654:	3001      	adds	r0, #1
 8006656:	d10e      	bne.n	8006676 <_printf_float+0x42a>
 8006658:	e659      	b.n	800630e <_printf_float+0xc2>
 800665a:	2301      	movs	r3, #1
 800665c:	4652      	mov	r2, sl
 800665e:	4631      	mov	r1, r6
 8006660:	4628      	mov	r0, r5
 8006662:	47b8      	blx	r7
 8006664:	3001      	adds	r0, #1
 8006666:	f43f ae52 	beq.w	800630e <_printf_float+0xc2>
 800666a:	f108 0801 	add.w	r8, r8, #1
 800666e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006670:	3b01      	subs	r3, #1
 8006672:	4543      	cmp	r3, r8
 8006674:	dcf1      	bgt.n	800665a <_printf_float+0x40e>
 8006676:	464b      	mov	r3, r9
 8006678:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800667c:	e6dc      	b.n	8006438 <_printf_float+0x1ec>
 800667e:	f04f 0800 	mov.w	r8, #0
 8006682:	f104 0a1a 	add.w	sl, r4, #26
 8006686:	e7f2      	b.n	800666e <_printf_float+0x422>
 8006688:	2301      	movs	r3, #1
 800668a:	4642      	mov	r2, r8
 800668c:	e7df      	b.n	800664e <_printf_float+0x402>
 800668e:	2301      	movs	r3, #1
 8006690:	464a      	mov	r2, r9
 8006692:	4631      	mov	r1, r6
 8006694:	4628      	mov	r0, r5
 8006696:	47b8      	blx	r7
 8006698:	3001      	adds	r0, #1
 800669a:	f43f ae38 	beq.w	800630e <_printf_float+0xc2>
 800669e:	f108 0801 	add.w	r8, r8, #1
 80066a2:	68e3      	ldr	r3, [r4, #12]
 80066a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066a6:	1a5b      	subs	r3, r3, r1
 80066a8:	4543      	cmp	r3, r8
 80066aa:	dcf0      	bgt.n	800668e <_printf_float+0x442>
 80066ac:	e6fa      	b.n	80064a4 <_printf_float+0x258>
 80066ae:	f04f 0800 	mov.w	r8, #0
 80066b2:	f104 0919 	add.w	r9, r4, #25
 80066b6:	e7f4      	b.n	80066a2 <_printf_float+0x456>

080066b8 <_printf_common>:
 80066b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066bc:	4616      	mov	r6, r2
 80066be:	4699      	mov	r9, r3
 80066c0:	688a      	ldr	r2, [r1, #8]
 80066c2:	690b      	ldr	r3, [r1, #16]
 80066c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066c8:	4293      	cmp	r3, r2
 80066ca:	bfb8      	it	lt
 80066cc:	4613      	movlt	r3, r2
 80066ce:	6033      	str	r3, [r6, #0]
 80066d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066d4:	4607      	mov	r7, r0
 80066d6:	460c      	mov	r4, r1
 80066d8:	b10a      	cbz	r2, 80066de <_printf_common+0x26>
 80066da:	3301      	adds	r3, #1
 80066dc:	6033      	str	r3, [r6, #0]
 80066de:	6823      	ldr	r3, [r4, #0]
 80066e0:	0699      	lsls	r1, r3, #26
 80066e2:	bf42      	ittt	mi
 80066e4:	6833      	ldrmi	r3, [r6, #0]
 80066e6:	3302      	addmi	r3, #2
 80066e8:	6033      	strmi	r3, [r6, #0]
 80066ea:	6825      	ldr	r5, [r4, #0]
 80066ec:	f015 0506 	ands.w	r5, r5, #6
 80066f0:	d106      	bne.n	8006700 <_printf_common+0x48>
 80066f2:	f104 0a19 	add.w	sl, r4, #25
 80066f6:	68e3      	ldr	r3, [r4, #12]
 80066f8:	6832      	ldr	r2, [r6, #0]
 80066fa:	1a9b      	subs	r3, r3, r2
 80066fc:	42ab      	cmp	r3, r5
 80066fe:	dc26      	bgt.n	800674e <_printf_common+0x96>
 8006700:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006704:	1e13      	subs	r3, r2, #0
 8006706:	6822      	ldr	r2, [r4, #0]
 8006708:	bf18      	it	ne
 800670a:	2301      	movne	r3, #1
 800670c:	0692      	lsls	r2, r2, #26
 800670e:	d42b      	bmi.n	8006768 <_printf_common+0xb0>
 8006710:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006714:	4649      	mov	r1, r9
 8006716:	4638      	mov	r0, r7
 8006718:	47c0      	blx	r8
 800671a:	3001      	adds	r0, #1
 800671c:	d01e      	beq.n	800675c <_printf_common+0xa4>
 800671e:	6823      	ldr	r3, [r4, #0]
 8006720:	68e5      	ldr	r5, [r4, #12]
 8006722:	6832      	ldr	r2, [r6, #0]
 8006724:	f003 0306 	and.w	r3, r3, #6
 8006728:	2b04      	cmp	r3, #4
 800672a:	bf08      	it	eq
 800672c:	1aad      	subeq	r5, r5, r2
 800672e:	68a3      	ldr	r3, [r4, #8]
 8006730:	6922      	ldr	r2, [r4, #16]
 8006732:	bf0c      	ite	eq
 8006734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006738:	2500      	movne	r5, #0
 800673a:	4293      	cmp	r3, r2
 800673c:	bfc4      	itt	gt
 800673e:	1a9b      	subgt	r3, r3, r2
 8006740:	18ed      	addgt	r5, r5, r3
 8006742:	2600      	movs	r6, #0
 8006744:	341a      	adds	r4, #26
 8006746:	42b5      	cmp	r5, r6
 8006748:	d11a      	bne.n	8006780 <_printf_common+0xc8>
 800674a:	2000      	movs	r0, #0
 800674c:	e008      	b.n	8006760 <_printf_common+0xa8>
 800674e:	2301      	movs	r3, #1
 8006750:	4652      	mov	r2, sl
 8006752:	4649      	mov	r1, r9
 8006754:	4638      	mov	r0, r7
 8006756:	47c0      	blx	r8
 8006758:	3001      	adds	r0, #1
 800675a:	d103      	bne.n	8006764 <_printf_common+0xac>
 800675c:	f04f 30ff 	mov.w	r0, #4294967295
 8006760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006764:	3501      	adds	r5, #1
 8006766:	e7c6      	b.n	80066f6 <_printf_common+0x3e>
 8006768:	18e1      	adds	r1, r4, r3
 800676a:	1c5a      	adds	r2, r3, #1
 800676c:	2030      	movs	r0, #48	; 0x30
 800676e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006772:	4422      	add	r2, r4
 8006774:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006778:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800677c:	3302      	adds	r3, #2
 800677e:	e7c7      	b.n	8006710 <_printf_common+0x58>
 8006780:	2301      	movs	r3, #1
 8006782:	4622      	mov	r2, r4
 8006784:	4649      	mov	r1, r9
 8006786:	4638      	mov	r0, r7
 8006788:	47c0      	blx	r8
 800678a:	3001      	adds	r0, #1
 800678c:	d0e6      	beq.n	800675c <_printf_common+0xa4>
 800678e:	3601      	adds	r6, #1
 8006790:	e7d9      	b.n	8006746 <_printf_common+0x8e>
	...

08006794 <_printf_i>:
 8006794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006798:	7e0f      	ldrb	r7, [r1, #24]
 800679a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800679c:	2f78      	cmp	r7, #120	; 0x78
 800679e:	4691      	mov	r9, r2
 80067a0:	4680      	mov	r8, r0
 80067a2:	460c      	mov	r4, r1
 80067a4:	469a      	mov	sl, r3
 80067a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067aa:	d807      	bhi.n	80067bc <_printf_i+0x28>
 80067ac:	2f62      	cmp	r7, #98	; 0x62
 80067ae:	d80a      	bhi.n	80067c6 <_printf_i+0x32>
 80067b0:	2f00      	cmp	r7, #0
 80067b2:	f000 80d8 	beq.w	8006966 <_printf_i+0x1d2>
 80067b6:	2f58      	cmp	r7, #88	; 0x58
 80067b8:	f000 80a3 	beq.w	8006902 <_printf_i+0x16e>
 80067bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067c4:	e03a      	b.n	800683c <_printf_i+0xa8>
 80067c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067ca:	2b15      	cmp	r3, #21
 80067cc:	d8f6      	bhi.n	80067bc <_printf_i+0x28>
 80067ce:	a101      	add	r1, pc, #4	; (adr r1, 80067d4 <_printf_i+0x40>)
 80067d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067d4:	0800682d 	.word	0x0800682d
 80067d8:	08006841 	.word	0x08006841
 80067dc:	080067bd 	.word	0x080067bd
 80067e0:	080067bd 	.word	0x080067bd
 80067e4:	080067bd 	.word	0x080067bd
 80067e8:	080067bd 	.word	0x080067bd
 80067ec:	08006841 	.word	0x08006841
 80067f0:	080067bd 	.word	0x080067bd
 80067f4:	080067bd 	.word	0x080067bd
 80067f8:	080067bd 	.word	0x080067bd
 80067fc:	080067bd 	.word	0x080067bd
 8006800:	0800694d 	.word	0x0800694d
 8006804:	08006871 	.word	0x08006871
 8006808:	0800692f 	.word	0x0800692f
 800680c:	080067bd 	.word	0x080067bd
 8006810:	080067bd 	.word	0x080067bd
 8006814:	0800696f 	.word	0x0800696f
 8006818:	080067bd 	.word	0x080067bd
 800681c:	08006871 	.word	0x08006871
 8006820:	080067bd 	.word	0x080067bd
 8006824:	080067bd 	.word	0x080067bd
 8006828:	08006937 	.word	0x08006937
 800682c:	682b      	ldr	r3, [r5, #0]
 800682e:	1d1a      	adds	r2, r3, #4
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	602a      	str	r2, [r5, #0]
 8006834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006838:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800683c:	2301      	movs	r3, #1
 800683e:	e0a3      	b.n	8006988 <_printf_i+0x1f4>
 8006840:	6820      	ldr	r0, [r4, #0]
 8006842:	6829      	ldr	r1, [r5, #0]
 8006844:	0606      	lsls	r6, r0, #24
 8006846:	f101 0304 	add.w	r3, r1, #4
 800684a:	d50a      	bpl.n	8006862 <_printf_i+0xce>
 800684c:	680e      	ldr	r6, [r1, #0]
 800684e:	602b      	str	r3, [r5, #0]
 8006850:	2e00      	cmp	r6, #0
 8006852:	da03      	bge.n	800685c <_printf_i+0xc8>
 8006854:	232d      	movs	r3, #45	; 0x2d
 8006856:	4276      	negs	r6, r6
 8006858:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800685c:	485e      	ldr	r0, [pc, #376]	; (80069d8 <_printf_i+0x244>)
 800685e:	230a      	movs	r3, #10
 8006860:	e019      	b.n	8006896 <_printf_i+0x102>
 8006862:	680e      	ldr	r6, [r1, #0]
 8006864:	602b      	str	r3, [r5, #0]
 8006866:	f010 0f40 	tst.w	r0, #64	; 0x40
 800686a:	bf18      	it	ne
 800686c:	b236      	sxthne	r6, r6
 800686e:	e7ef      	b.n	8006850 <_printf_i+0xbc>
 8006870:	682b      	ldr	r3, [r5, #0]
 8006872:	6820      	ldr	r0, [r4, #0]
 8006874:	1d19      	adds	r1, r3, #4
 8006876:	6029      	str	r1, [r5, #0]
 8006878:	0601      	lsls	r1, r0, #24
 800687a:	d501      	bpl.n	8006880 <_printf_i+0xec>
 800687c:	681e      	ldr	r6, [r3, #0]
 800687e:	e002      	b.n	8006886 <_printf_i+0xf2>
 8006880:	0646      	lsls	r6, r0, #25
 8006882:	d5fb      	bpl.n	800687c <_printf_i+0xe8>
 8006884:	881e      	ldrh	r6, [r3, #0]
 8006886:	4854      	ldr	r0, [pc, #336]	; (80069d8 <_printf_i+0x244>)
 8006888:	2f6f      	cmp	r7, #111	; 0x6f
 800688a:	bf0c      	ite	eq
 800688c:	2308      	moveq	r3, #8
 800688e:	230a      	movne	r3, #10
 8006890:	2100      	movs	r1, #0
 8006892:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006896:	6865      	ldr	r5, [r4, #4]
 8006898:	60a5      	str	r5, [r4, #8]
 800689a:	2d00      	cmp	r5, #0
 800689c:	bfa2      	ittt	ge
 800689e:	6821      	ldrge	r1, [r4, #0]
 80068a0:	f021 0104 	bicge.w	r1, r1, #4
 80068a4:	6021      	strge	r1, [r4, #0]
 80068a6:	b90e      	cbnz	r6, 80068ac <_printf_i+0x118>
 80068a8:	2d00      	cmp	r5, #0
 80068aa:	d04d      	beq.n	8006948 <_printf_i+0x1b4>
 80068ac:	4615      	mov	r5, r2
 80068ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80068b2:	fb03 6711 	mls	r7, r3, r1, r6
 80068b6:	5dc7      	ldrb	r7, [r0, r7]
 80068b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068bc:	4637      	mov	r7, r6
 80068be:	42bb      	cmp	r3, r7
 80068c0:	460e      	mov	r6, r1
 80068c2:	d9f4      	bls.n	80068ae <_printf_i+0x11a>
 80068c4:	2b08      	cmp	r3, #8
 80068c6:	d10b      	bne.n	80068e0 <_printf_i+0x14c>
 80068c8:	6823      	ldr	r3, [r4, #0]
 80068ca:	07de      	lsls	r6, r3, #31
 80068cc:	d508      	bpl.n	80068e0 <_printf_i+0x14c>
 80068ce:	6923      	ldr	r3, [r4, #16]
 80068d0:	6861      	ldr	r1, [r4, #4]
 80068d2:	4299      	cmp	r1, r3
 80068d4:	bfde      	ittt	le
 80068d6:	2330      	movle	r3, #48	; 0x30
 80068d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068e0:	1b52      	subs	r2, r2, r5
 80068e2:	6122      	str	r2, [r4, #16]
 80068e4:	f8cd a000 	str.w	sl, [sp]
 80068e8:	464b      	mov	r3, r9
 80068ea:	aa03      	add	r2, sp, #12
 80068ec:	4621      	mov	r1, r4
 80068ee:	4640      	mov	r0, r8
 80068f0:	f7ff fee2 	bl	80066b8 <_printf_common>
 80068f4:	3001      	adds	r0, #1
 80068f6:	d14c      	bne.n	8006992 <_printf_i+0x1fe>
 80068f8:	f04f 30ff 	mov.w	r0, #4294967295
 80068fc:	b004      	add	sp, #16
 80068fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006902:	4835      	ldr	r0, [pc, #212]	; (80069d8 <_printf_i+0x244>)
 8006904:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006908:	6829      	ldr	r1, [r5, #0]
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006910:	6029      	str	r1, [r5, #0]
 8006912:	061d      	lsls	r5, r3, #24
 8006914:	d514      	bpl.n	8006940 <_printf_i+0x1ac>
 8006916:	07df      	lsls	r7, r3, #31
 8006918:	bf44      	itt	mi
 800691a:	f043 0320 	orrmi.w	r3, r3, #32
 800691e:	6023      	strmi	r3, [r4, #0]
 8006920:	b91e      	cbnz	r6, 800692a <_printf_i+0x196>
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	f023 0320 	bic.w	r3, r3, #32
 8006928:	6023      	str	r3, [r4, #0]
 800692a:	2310      	movs	r3, #16
 800692c:	e7b0      	b.n	8006890 <_printf_i+0xfc>
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	f043 0320 	orr.w	r3, r3, #32
 8006934:	6023      	str	r3, [r4, #0]
 8006936:	2378      	movs	r3, #120	; 0x78
 8006938:	4828      	ldr	r0, [pc, #160]	; (80069dc <_printf_i+0x248>)
 800693a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800693e:	e7e3      	b.n	8006908 <_printf_i+0x174>
 8006940:	0659      	lsls	r1, r3, #25
 8006942:	bf48      	it	mi
 8006944:	b2b6      	uxthmi	r6, r6
 8006946:	e7e6      	b.n	8006916 <_printf_i+0x182>
 8006948:	4615      	mov	r5, r2
 800694a:	e7bb      	b.n	80068c4 <_printf_i+0x130>
 800694c:	682b      	ldr	r3, [r5, #0]
 800694e:	6826      	ldr	r6, [r4, #0]
 8006950:	6961      	ldr	r1, [r4, #20]
 8006952:	1d18      	adds	r0, r3, #4
 8006954:	6028      	str	r0, [r5, #0]
 8006956:	0635      	lsls	r5, r6, #24
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	d501      	bpl.n	8006960 <_printf_i+0x1cc>
 800695c:	6019      	str	r1, [r3, #0]
 800695e:	e002      	b.n	8006966 <_printf_i+0x1d2>
 8006960:	0670      	lsls	r0, r6, #25
 8006962:	d5fb      	bpl.n	800695c <_printf_i+0x1c8>
 8006964:	8019      	strh	r1, [r3, #0]
 8006966:	2300      	movs	r3, #0
 8006968:	6123      	str	r3, [r4, #16]
 800696a:	4615      	mov	r5, r2
 800696c:	e7ba      	b.n	80068e4 <_printf_i+0x150>
 800696e:	682b      	ldr	r3, [r5, #0]
 8006970:	1d1a      	adds	r2, r3, #4
 8006972:	602a      	str	r2, [r5, #0]
 8006974:	681d      	ldr	r5, [r3, #0]
 8006976:	6862      	ldr	r2, [r4, #4]
 8006978:	2100      	movs	r1, #0
 800697a:	4628      	mov	r0, r5
 800697c:	f7f9 fc30 	bl	80001e0 <memchr>
 8006980:	b108      	cbz	r0, 8006986 <_printf_i+0x1f2>
 8006982:	1b40      	subs	r0, r0, r5
 8006984:	6060      	str	r0, [r4, #4]
 8006986:	6863      	ldr	r3, [r4, #4]
 8006988:	6123      	str	r3, [r4, #16]
 800698a:	2300      	movs	r3, #0
 800698c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006990:	e7a8      	b.n	80068e4 <_printf_i+0x150>
 8006992:	6923      	ldr	r3, [r4, #16]
 8006994:	462a      	mov	r2, r5
 8006996:	4649      	mov	r1, r9
 8006998:	4640      	mov	r0, r8
 800699a:	47d0      	blx	sl
 800699c:	3001      	adds	r0, #1
 800699e:	d0ab      	beq.n	80068f8 <_printf_i+0x164>
 80069a0:	6823      	ldr	r3, [r4, #0]
 80069a2:	079b      	lsls	r3, r3, #30
 80069a4:	d413      	bmi.n	80069ce <_printf_i+0x23a>
 80069a6:	68e0      	ldr	r0, [r4, #12]
 80069a8:	9b03      	ldr	r3, [sp, #12]
 80069aa:	4298      	cmp	r0, r3
 80069ac:	bfb8      	it	lt
 80069ae:	4618      	movlt	r0, r3
 80069b0:	e7a4      	b.n	80068fc <_printf_i+0x168>
 80069b2:	2301      	movs	r3, #1
 80069b4:	4632      	mov	r2, r6
 80069b6:	4649      	mov	r1, r9
 80069b8:	4640      	mov	r0, r8
 80069ba:	47d0      	blx	sl
 80069bc:	3001      	adds	r0, #1
 80069be:	d09b      	beq.n	80068f8 <_printf_i+0x164>
 80069c0:	3501      	adds	r5, #1
 80069c2:	68e3      	ldr	r3, [r4, #12]
 80069c4:	9903      	ldr	r1, [sp, #12]
 80069c6:	1a5b      	subs	r3, r3, r1
 80069c8:	42ab      	cmp	r3, r5
 80069ca:	dcf2      	bgt.n	80069b2 <_printf_i+0x21e>
 80069cc:	e7eb      	b.n	80069a6 <_printf_i+0x212>
 80069ce:	2500      	movs	r5, #0
 80069d0:	f104 0619 	add.w	r6, r4, #25
 80069d4:	e7f5      	b.n	80069c2 <_printf_i+0x22e>
 80069d6:	bf00      	nop
 80069d8:	08009676 	.word	0x08009676
 80069dc:	08009687 	.word	0x08009687

080069e0 <siprintf>:
 80069e0:	b40e      	push	{r1, r2, r3}
 80069e2:	b500      	push	{lr}
 80069e4:	b09c      	sub	sp, #112	; 0x70
 80069e6:	ab1d      	add	r3, sp, #116	; 0x74
 80069e8:	9002      	str	r0, [sp, #8]
 80069ea:	9006      	str	r0, [sp, #24]
 80069ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80069f0:	4809      	ldr	r0, [pc, #36]	; (8006a18 <siprintf+0x38>)
 80069f2:	9107      	str	r1, [sp, #28]
 80069f4:	9104      	str	r1, [sp, #16]
 80069f6:	4909      	ldr	r1, [pc, #36]	; (8006a1c <siprintf+0x3c>)
 80069f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80069fc:	9105      	str	r1, [sp, #20]
 80069fe:	6800      	ldr	r0, [r0, #0]
 8006a00:	9301      	str	r3, [sp, #4]
 8006a02:	a902      	add	r1, sp, #8
 8006a04:	f001 fb76 	bl	80080f4 <_svfiprintf_r>
 8006a08:	9b02      	ldr	r3, [sp, #8]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	701a      	strb	r2, [r3, #0]
 8006a0e:	b01c      	add	sp, #112	; 0x70
 8006a10:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a14:	b003      	add	sp, #12
 8006a16:	4770      	bx	lr
 8006a18:	200000a4 	.word	0x200000a4
 8006a1c:	ffff0208 	.word	0xffff0208

08006a20 <quorem>:
 8006a20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a24:	6903      	ldr	r3, [r0, #16]
 8006a26:	690c      	ldr	r4, [r1, #16]
 8006a28:	42a3      	cmp	r3, r4
 8006a2a:	4607      	mov	r7, r0
 8006a2c:	f2c0 8081 	blt.w	8006b32 <quorem+0x112>
 8006a30:	3c01      	subs	r4, #1
 8006a32:	f101 0814 	add.w	r8, r1, #20
 8006a36:	f100 0514 	add.w	r5, r0, #20
 8006a3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a3e:	9301      	str	r3, [sp, #4]
 8006a40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a54:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a58:	d331      	bcc.n	8006abe <quorem+0x9e>
 8006a5a:	f04f 0e00 	mov.w	lr, #0
 8006a5e:	4640      	mov	r0, r8
 8006a60:	46ac      	mov	ip, r5
 8006a62:	46f2      	mov	sl, lr
 8006a64:	f850 2b04 	ldr.w	r2, [r0], #4
 8006a68:	b293      	uxth	r3, r2
 8006a6a:	fb06 e303 	mla	r3, r6, r3, lr
 8006a6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	ebaa 0303 	sub.w	r3, sl, r3
 8006a78:	f8dc a000 	ldr.w	sl, [ip]
 8006a7c:	0c12      	lsrs	r2, r2, #16
 8006a7e:	fa13 f38a 	uxtah	r3, r3, sl
 8006a82:	fb06 e202 	mla	r2, r6, r2, lr
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	9b00      	ldr	r3, [sp, #0]
 8006a8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a8e:	b292      	uxth	r2, r2
 8006a90:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006a94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a98:	f8bd 3000 	ldrh.w	r3, [sp]
 8006a9c:	4581      	cmp	r9, r0
 8006a9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006aa2:	f84c 3b04 	str.w	r3, [ip], #4
 8006aa6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006aaa:	d2db      	bcs.n	8006a64 <quorem+0x44>
 8006aac:	f855 300b 	ldr.w	r3, [r5, fp]
 8006ab0:	b92b      	cbnz	r3, 8006abe <quorem+0x9e>
 8006ab2:	9b01      	ldr	r3, [sp, #4]
 8006ab4:	3b04      	subs	r3, #4
 8006ab6:	429d      	cmp	r5, r3
 8006ab8:	461a      	mov	r2, r3
 8006aba:	d32e      	bcc.n	8006b1a <quorem+0xfa>
 8006abc:	613c      	str	r4, [r7, #16]
 8006abe:	4638      	mov	r0, r7
 8006ac0:	f001 f8c4 	bl	8007c4c <__mcmp>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	db24      	blt.n	8006b12 <quorem+0xf2>
 8006ac8:	3601      	adds	r6, #1
 8006aca:	4628      	mov	r0, r5
 8006acc:	f04f 0c00 	mov.w	ip, #0
 8006ad0:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ad4:	f8d0 e000 	ldr.w	lr, [r0]
 8006ad8:	b293      	uxth	r3, r2
 8006ada:	ebac 0303 	sub.w	r3, ip, r3
 8006ade:	0c12      	lsrs	r2, r2, #16
 8006ae0:	fa13 f38e 	uxtah	r3, r3, lr
 8006ae4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006ae8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006af2:	45c1      	cmp	r9, r8
 8006af4:	f840 3b04 	str.w	r3, [r0], #4
 8006af8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006afc:	d2e8      	bcs.n	8006ad0 <quorem+0xb0>
 8006afe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b06:	b922      	cbnz	r2, 8006b12 <quorem+0xf2>
 8006b08:	3b04      	subs	r3, #4
 8006b0a:	429d      	cmp	r5, r3
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	d30a      	bcc.n	8006b26 <quorem+0x106>
 8006b10:	613c      	str	r4, [r7, #16]
 8006b12:	4630      	mov	r0, r6
 8006b14:	b003      	add	sp, #12
 8006b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b1a:	6812      	ldr	r2, [r2, #0]
 8006b1c:	3b04      	subs	r3, #4
 8006b1e:	2a00      	cmp	r2, #0
 8006b20:	d1cc      	bne.n	8006abc <quorem+0x9c>
 8006b22:	3c01      	subs	r4, #1
 8006b24:	e7c7      	b.n	8006ab6 <quorem+0x96>
 8006b26:	6812      	ldr	r2, [r2, #0]
 8006b28:	3b04      	subs	r3, #4
 8006b2a:	2a00      	cmp	r2, #0
 8006b2c:	d1f0      	bne.n	8006b10 <quorem+0xf0>
 8006b2e:	3c01      	subs	r4, #1
 8006b30:	e7eb      	b.n	8006b0a <quorem+0xea>
 8006b32:	2000      	movs	r0, #0
 8006b34:	e7ee      	b.n	8006b14 <quorem+0xf4>
	...

08006b38 <_dtoa_r>:
 8006b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b3c:	ed2d 8b04 	vpush	{d8-d9}
 8006b40:	ec57 6b10 	vmov	r6, r7, d0
 8006b44:	b093      	sub	sp, #76	; 0x4c
 8006b46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006b48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006b4c:	9106      	str	r1, [sp, #24]
 8006b4e:	ee10 aa10 	vmov	sl, s0
 8006b52:	4604      	mov	r4, r0
 8006b54:	9209      	str	r2, [sp, #36]	; 0x24
 8006b56:	930c      	str	r3, [sp, #48]	; 0x30
 8006b58:	46bb      	mov	fp, r7
 8006b5a:	b975      	cbnz	r5, 8006b7a <_dtoa_r+0x42>
 8006b5c:	2010      	movs	r0, #16
 8006b5e:	f000 fddd 	bl	800771c <malloc>
 8006b62:	4602      	mov	r2, r0
 8006b64:	6260      	str	r0, [r4, #36]	; 0x24
 8006b66:	b920      	cbnz	r0, 8006b72 <_dtoa_r+0x3a>
 8006b68:	4ba7      	ldr	r3, [pc, #668]	; (8006e08 <_dtoa_r+0x2d0>)
 8006b6a:	21ea      	movs	r1, #234	; 0xea
 8006b6c:	48a7      	ldr	r0, [pc, #668]	; (8006e0c <_dtoa_r+0x2d4>)
 8006b6e:	f001 fbd1 	bl	8008314 <__assert_func>
 8006b72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006b76:	6005      	str	r5, [r0, #0]
 8006b78:	60c5      	str	r5, [r0, #12]
 8006b7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b7c:	6819      	ldr	r1, [r3, #0]
 8006b7e:	b151      	cbz	r1, 8006b96 <_dtoa_r+0x5e>
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	604a      	str	r2, [r1, #4]
 8006b84:	2301      	movs	r3, #1
 8006b86:	4093      	lsls	r3, r2
 8006b88:	608b      	str	r3, [r1, #8]
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	f000 fe1c 	bl	80077c8 <_Bfree>
 8006b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b92:	2200      	movs	r2, #0
 8006b94:	601a      	str	r2, [r3, #0]
 8006b96:	1e3b      	subs	r3, r7, #0
 8006b98:	bfaa      	itet	ge
 8006b9a:	2300      	movge	r3, #0
 8006b9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006ba0:	f8c8 3000 	strge.w	r3, [r8]
 8006ba4:	4b9a      	ldr	r3, [pc, #616]	; (8006e10 <_dtoa_r+0x2d8>)
 8006ba6:	bfbc      	itt	lt
 8006ba8:	2201      	movlt	r2, #1
 8006baa:	f8c8 2000 	strlt.w	r2, [r8]
 8006bae:	ea33 030b 	bics.w	r3, r3, fp
 8006bb2:	d11b      	bne.n	8006bec <_dtoa_r+0xb4>
 8006bb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bb6:	f242 730f 	movw	r3, #9999	; 0x270f
 8006bba:	6013      	str	r3, [r2, #0]
 8006bbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006bc0:	4333      	orrs	r3, r6
 8006bc2:	f000 8592 	beq.w	80076ea <_dtoa_r+0xbb2>
 8006bc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bc8:	b963      	cbnz	r3, 8006be4 <_dtoa_r+0xac>
 8006bca:	4b92      	ldr	r3, [pc, #584]	; (8006e14 <_dtoa_r+0x2dc>)
 8006bcc:	e022      	b.n	8006c14 <_dtoa_r+0xdc>
 8006bce:	4b92      	ldr	r3, [pc, #584]	; (8006e18 <_dtoa_r+0x2e0>)
 8006bd0:	9301      	str	r3, [sp, #4]
 8006bd2:	3308      	adds	r3, #8
 8006bd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006bd6:	6013      	str	r3, [r2, #0]
 8006bd8:	9801      	ldr	r0, [sp, #4]
 8006bda:	b013      	add	sp, #76	; 0x4c
 8006bdc:	ecbd 8b04 	vpop	{d8-d9}
 8006be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be4:	4b8b      	ldr	r3, [pc, #556]	; (8006e14 <_dtoa_r+0x2dc>)
 8006be6:	9301      	str	r3, [sp, #4]
 8006be8:	3303      	adds	r3, #3
 8006bea:	e7f3      	b.n	8006bd4 <_dtoa_r+0x9c>
 8006bec:	2200      	movs	r2, #0
 8006bee:	2300      	movs	r3, #0
 8006bf0:	4650      	mov	r0, sl
 8006bf2:	4659      	mov	r1, fp
 8006bf4:	f7f9 ff68 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bf8:	ec4b ab19 	vmov	d9, sl, fp
 8006bfc:	4680      	mov	r8, r0
 8006bfe:	b158      	cbz	r0, 8006c18 <_dtoa_r+0xe0>
 8006c00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c02:	2301      	movs	r3, #1
 8006c04:	6013      	str	r3, [r2, #0]
 8006c06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 856b 	beq.w	80076e4 <_dtoa_r+0xbac>
 8006c0e:	4883      	ldr	r0, [pc, #524]	; (8006e1c <_dtoa_r+0x2e4>)
 8006c10:	6018      	str	r0, [r3, #0]
 8006c12:	1e43      	subs	r3, r0, #1
 8006c14:	9301      	str	r3, [sp, #4]
 8006c16:	e7df      	b.n	8006bd8 <_dtoa_r+0xa0>
 8006c18:	ec4b ab10 	vmov	d0, sl, fp
 8006c1c:	aa10      	add	r2, sp, #64	; 0x40
 8006c1e:	a911      	add	r1, sp, #68	; 0x44
 8006c20:	4620      	mov	r0, r4
 8006c22:	f001 f8b9 	bl	8007d98 <__d2b>
 8006c26:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006c2a:	ee08 0a10 	vmov	s16, r0
 8006c2e:	2d00      	cmp	r5, #0
 8006c30:	f000 8084 	beq.w	8006d3c <_dtoa_r+0x204>
 8006c34:	ee19 3a90 	vmov	r3, s19
 8006c38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c3c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006c40:	4656      	mov	r6, sl
 8006c42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006c46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006c4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006c4e:	4b74      	ldr	r3, [pc, #464]	; (8006e20 <_dtoa_r+0x2e8>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	4630      	mov	r0, r6
 8006c54:	4639      	mov	r1, r7
 8006c56:	f7f9 fb17 	bl	8000288 <__aeabi_dsub>
 8006c5a:	a365      	add	r3, pc, #404	; (adr r3, 8006df0 <_dtoa_r+0x2b8>)
 8006c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c60:	f7f9 fcca 	bl	80005f8 <__aeabi_dmul>
 8006c64:	a364      	add	r3, pc, #400	; (adr r3, 8006df8 <_dtoa_r+0x2c0>)
 8006c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6a:	f7f9 fb0f 	bl	800028c <__adddf3>
 8006c6e:	4606      	mov	r6, r0
 8006c70:	4628      	mov	r0, r5
 8006c72:	460f      	mov	r7, r1
 8006c74:	f7f9 fc56 	bl	8000524 <__aeabi_i2d>
 8006c78:	a361      	add	r3, pc, #388	; (adr r3, 8006e00 <_dtoa_r+0x2c8>)
 8006c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7e:	f7f9 fcbb 	bl	80005f8 <__aeabi_dmul>
 8006c82:	4602      	mov	r2, r0
 8006c84:	460b      	mov	r3, r1
 8006c86:	4630      	mov	r0, r6
 8006c88:	4639      	mov	r1, r7
 8006c8a:	f7f9 faff 	bl	800028c <__adddf3>
 8006c8e:	4606      	mov	r6, r0
 8006c90:	460f      	mov	r7, r1
 8006c92:	f7f9 ff61 	bl	8000b58 <__aeabi_d2iz>
 8006c96:	2200      	movs	r2, #0
 8006c98:	9000      	str	r0, [sp, #0]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	4630      	mov	r0, r6
 8006c9e:	4639      	mov	r1, r7
 8006ca0:	f7f9 ff1c 	bl	8000adc <__aeabi_dcmplt>
 8006ca4:	b150      	cbz	r0, 8006cbc <_dtoa_r+0x184>
 8006ca6:	9800      	ldr	r0, [sp, #0]
 8006ca8:	f7f9 fc3c 	bl	8000524 <__aeabi_i2d>
 8006cac:	4632      	mov	r2, r6
 8006cae:	463b      	mov	r3, r7
 8006cb0:	f7f9 ff0a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cb4:	b910      	cbnz	r0, 8006cbc <_dtoa_r+0x184>
 8006cb6:	9b00      	ldr	r3, [sp, #0]
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	9b00      	ldr	r3, [sp, #0]
 8006cbe:	2b16      	cmp	r3, #22
 8006cc0:	d85a      	bhi.n	8006d78 <_dtoa_r+0x240>
 8006cc2:	9a00      	ldr	r2, [sp, #0]
 8006cc4:	4b57      	ldr	r3, [pc, #348]	; (8006e24 <_dtoa_r+0x2ec>)
 8006cc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cce:	ec51 0b19 	vmov	r0, r1, d9
 8006cd2:	f7f9 ff03 	bl	8000adc <__aeabi_dcmplt>
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	d050      	beq.n	8006d7c <_dtoa_r+0x244>
 8006cda:	9b00      	ldr	r3, [sp, #0]
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ce4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ce6:	1b5d      	subs	r5, r3, r5
 8006ce8:	1e6b      	subs	r3, r5, #1
 8006cea:	9305      	str	r3, [sp, #20]
 8006cec:	bf45      	ittet	mi
 8006cee:	f1c5 0301 	rsbmi	r3, r5, #1
 8006cf2:	9304      	strmi	r3, [sp, #16]
 8006cf4:	2300      	movpl	r3, #0
 8006cf6:	2300      	movmi	r3, #0
 8006cf8:	bf4c      	ite	mi
 8006cfa:	9305      	strmi	r3, [sp, #20]
 8006cfc:	9304      	strpl	r3, [sp, #16]
 8006cfe:	9b00      	ldr	r3, [sp, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	db3d      	blt.n	8006d80 <_dtoa_r+0x248>
 8006d04:	9b05      	ldr	r3, [sp, #20]
 8006d06:	9a00      	ldr	r2, [sp, #0]
 8006d08:	920a      	str	r2, [sp, #40]	; 0x28
 8006d0a:	4413      	add	r3, r2
 8006d0c:	9305      	str	r3, [sp, #20]
 8006d0e:	2300      	movs	r3, #0
 8006d10:	9307      	str	r3, [sp, #28]
 8006d12:	9b06      	ldr	r3, [sp, #24]
 8006d14:	2b09      	cmp	r3, #9
 8006d16:	f200 8089 	bhi.w	8006e2c <_dtoa_r+0x2f4>
 8006d1a:	2b05      	cmp	r3, #5
 8006d1c:	bfc4      	itt	gt
 8006d1e:	3b04      	subgt	r3, #4
 8006d20:	9306      	strgt	r3, [sp, #24]
 8006d22:	9b06      	ldr	r3, [sp, #24]
 8006d24:	f1a3 0302 	sub.w	r3, r3, #2
 8006d28:	bfcc      	ite	gt
 8006d2a:	2500      	movgt	r5, #0
 8006d2c:	2501      	movle	r5, #1
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	f200 8087 	bhi.w	8006e42 <_dtoa_r+0x30a>
 8006d34:	e8df f003 	tbb	[pc, r3]
 8006d38:	59383a2d 	.word	0x59383a2d
 8006d3c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006d40:	441d      	add	r5, r3
 8006d42:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006d46:	2b20      	cmp	r3, #32
 8006d48:	bfc1      	itttt	gt
 8006d4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006d4e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006d52:	fa0b f303 	lslgt.w	r3, fp, r3
 8006d56:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006d5a:	bfda      	itte	le
 8006d5c:	f1c3 0320 	rsble	r3, r3, #32
 8006d60:	fa06 f003 	lslle.w	r0, r6, r3
 8006d64:	4318      	orrgt	r0, r3
 8006d66:	f7f9 fbcd 	bl	8000504 <__aeabi_ui2d>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	4606      	mov	r6, r0
 8006d6e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006d72:	3d01      	subs	r5, #1
 8006d74:	930e      	str	r3, [sp, #56]	; 0x38
 8006d76:	e76a      	b.n	8006c4e <_dtoa_r+0x116>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e7b2      	b.n	8006ce2 <_dtoa_r+0x1aa>
 8006d7c:	900b      	str	r0, [sp, #44]	; 0x2c
 8006d7e:	e7b1      	b.n	8006ce4 <_dtoa_r+0x1ac>
 8006d80:	9b04      	ldr	r3, [sp, #16]
 8006d82:	9a00      	ldr	r2, [sp, #0]
 8006d84:	1a9b      	subs	r3, r3, r2
 8006d86:	9304      	str	r3, [sp, #16]
 8006d88:	4253      	negs	r3, r2
 8006d8a:	9307      	str	r3, [sp, #28]
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	930a      	str	r3, [sp, #40]	; 0x28
 8006d90:	e7bf      	b.n	8006d12 <_dtoa_r+0x1da>
 8006d92:	2300      	movs	r3, #0
 8006d94:	9308      	str	r3, [sp, #32]
 8006d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	dc55      	bgt.n	8006e48 <_dtoa_r+0x310>
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006da2:	461a      	mov	r2, r3
 8006da4:	9209      	str	r2, [sp, #36]	; 0x24
 8006da6:	e00c      	b.n	8006dc2 <_dtoa_r+0x28a>
 8006da8:	2301      	movs	r3, #1
 8006daa:	e7f3      	b.n	8006d94 <_dtoa_r+0x25c>
 8006dac:	2300      	movs	r3, #0
 8006dae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006db0:	9308      	str	r3, [sp, #32]
 8006db2:	9b00      	ldr	r3, [sp, #0]
 8006db4:	4413      	add	r3, r2
 8006db6:	9302      	str	r3, [sp, #8]
 8006db8:	3301      	adds	r3, #1
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	9303      	str	r3, [sp, #12]
 8006dbe:	bfb8      	it	lt
 8006dc0:	2301      	movlt	r3, #1
 8006dc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	6042      	str	r2, [r0, #4]
 8006dc8:	2204      	movs	r2, #4
 8006dca:	f102 0614 	add.w	r6, r2, #20
 8006dce:	429e      	cmp	r6, r3
 8006dd0:	6841      	ldr	r1, [r0, #4]
 8006dd2:	d93d      	bls.n	8006e50 <_dtoa_r+0x318>
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f000 fcb7 	bl	8007748 <_Balloc>
 8006dda:	9001      	str	r0, [sp, #4]
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	d13b      	bne.n	8006e58 <_dtoa_r+0x320>
 8006de0:	4b11      	ldr	r3, [pc, #68]	; (8006e28 <_dtoa_r+0x2f0>)
 8006de2:	4602      	mov	r2, r0
 8006de4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006de8:	e6c0      	b.n	8006b6c <_dtoa_r+0x34>
 8006dea:	2301      	movs	r3, #1
 8006dec:	e7df      	b.n	8006dae <_dtoa_r+0x276>
 8006dee:	bf00      	nop
 8006df0:	636f4361 	.word	0x636f4361
 8006df4:	3fd287a7 	.word	0x3fd287a7
 8006df8:	8b60c8b3 	.word	0x8b60c8b3
 8006dfc:	3fc68a28 	.word	0x3fc68a28
 8006e00:	509f79fb 	.word	0x509f79fb
 8006e04:	3fd34413 	.word	0x3fd34413
 8006e08:	080096a5 	.word	0x080096a5
 8006e0c:	080096bc 	.word	0x080096bc
 8006e10:	7ff00000 	.word	0x7ff00000
 8006e14:	080096a1 	.word	0x080096a1
 8006e18:	08009698 	.word	0x08009698
 8006e1c:	08009675 	.word	0x08009675
 8006e20:	3ff80000 	.word	0x3ff80000
 8006e24:	080097b0 	.word	0x080097b0
 8006e28:	08009717 	.word	0x08009717
 8006e2c:	2501      	movs	r5, #1
 8006e2e:	2300      	movs	r3, #0
 8006e30:	9306      	str	r3, [sp, #24]
 8006e32:	9508      	str	r5, [sp, #32]
 8006e34:	f04f 33ff 	mov.w	r3, #4294967295
 8006e38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	2312      	movs	r3, #18
 8006e40:	e7b0      	b.n	8006da4 <_dtoa_r+0x26c>
 8006e42:	2301      	movs	r3, #1
 8006e44:	9308      	str	r3, [sp, #32]
 8006e46:	e7f5      	b.n	8006e34 <_dtoa_r+0x2fc>
 8006e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006e4e:	e7b8      	b.n	8006dc2 <_dtoa_r+0x28a>
 8006e50:	3101      	adds	r1, #1
 8006e52:	6041      	str	r1, [r0, #4]
 8006e54:	0052      	lsls	r2, r2, #1
 8006e56:	e7b8      	b.n	8006dca <_dtoa_r+0x292>
 8006e58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e5a:	9a01      	ldr	r2, [sp, #4]
 8006e5c:	601a      	str	r2, [r3, #0]
 8006e5e:	9b03      	ldr	r3, [sp, #12]
 8006e60:	2b0e      	cmp	r3, #14
 8006e62:	f200 809d 	bhi.w	8006fa0 <_dtoa_r+0x468>
 8006e66:	2d00      	cmp	r5, #0
 8006e68:	f000 809a 	beq.w	8006fa0 <_dtoa_r+0x468>
 8006e6c:	9b00      	ldr	r3, [sp, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	dd32      	ble.n	8006ed8 <_dtoa_r+0x3a0>
 8006e72:	4ab7      	ldr	r2, [pc, #732]	; (8007150 <_dtoa_r+0x618>)
 8006e74:	f003 030f 	and.w	r3, r3, #15
 8006e78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006e7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e80:	9b00      	ldr	r3, [sp, #0]
 8006e82:	05d8      	lsls	r0, r3, #23
 8006e84:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006e88:	d516      	bpl.n	8006eb8 <_dtoa_r+0x380>
 8006e8a:	4bb2      	ldr	r3, [pc, #712]	; (8007154 <_dtoa_r+0x61c>)
 8006e8c:	ec51 0b19 	vmov	r0, r1, d9
 8006e90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e94:	f7f9 fcda 	bl	800084c <__aeabi_ddiv>
 8006e98:	f007 070f 	and.w	r7, r7, #15
 8006e9c:	4682      	mov	sl, r0
 8006e9e:	468b      	mov	fp, r1
 8006ea0:	2503      	movs	r5, #3
 8006ea2:	4eac      	ldr	r6, [pc, #688]	; (8007154 <_dtoa_r+0x61c>)
 8006ea4:	b957      	cbnz	r7, 8006ebc <_dtoa_r+0x384>
 8006ea6:	4642      	mov	r2, r8
 8006ea8:	464b      	mov	r3, r9
 8006eaa:	4650      	mov	r0, sl
 8006eac:	4659      	mov	r1, fp
 8006eae:	f7f9 fccd 	bl	800084c <__aeabi_ddiv>
 8006eb2:	4682      	mov	sl, r0
 8006eb4:	468b      	mov	fp, r1
 8006eb6:	e028      	b.n	8006f0a <_dtoa_r+0x3d2>
 8006eb8:	2502      	movs	r5, #2
 8006eba:	e7f2      	b.n	8006ea2 <_dtoa_r+0x36a>
 8006ebc:	07f9      	lsls	r1, r7, #31
 8006ebe:	d508      	bpl.n	8006ed2 <_dtoa_r+0x39a>
 8006ec0:	4640      	mov	r0, r8
 8006ec2:	4649      	mov	r1, r9
 8006ec4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ec8:	f7f9 fb96 	bl	80005f8 <__aeabi_dmul>
 8006ecc:	3501      	adds	r5, #1
 8006ece:	4680      	mov	r8, r0
 8006ed0:	4689      	mov	r9, r1
 8006ed2:	107f      	asrs	r7, r7, #1
 8006ed4:	3608      	adds	r6, #8
 8006ed6:	e7e5      	b.n	8006ea4 <_dtoa_r+0x36c>
 8006ed8:	f000 809b 	beq.w	8007012 <_dtoa_r+0x4da>
 8006edc:	9b00      	ldr	r3, [sp, #0]
 8006ede:	4f9d      	ldr	r7, [pc, #628]	; (8007154 <_dtoa_r+0x61c>)
 8006ee0:	425e      	negs	r6, r3
 8006ee2:	4b9b      	ldr	r3, [pc, #620]	; (8007150 <_dtoa_r+0x618>)
 8006ee4:	f006 020f 	and.w	r2, r6, #15
 8006ee8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	ec51 0b19 	vmov	r0, r1, d9
 8006ef4:	f7f9 fb80 	bl	80005f8 <__aeabi_dmul>
 8006ef8:	1136      	asrs	r6, r6, #4
 8006efa:	4682      	mov	sl, r0
 8006efc:	468b      	mov	fp, r1
 8006efe:	2300      	movs	r3, #0
 8006f00:	2502      	movs	r5, #2
 8006f02:	2e00      	cmp	r6, #0
 8006f04:	d17a      	bne.n	8006ffc <_dtoa_r+0x4c4>
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1d3      	bne.n	8006eb2 <_dtoa_r+0x37a>
 8006f0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 8082 	beq.w	8007016 <_dtoa_r+0x4de>
 8006f12:	4b91      	ldr	r3, [pc, #580]	; (8007158 <_dtoa_r+0x620>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	4650      	mov	r0, sl
 8006f18:	4659      	mov	r1, fp
 8006f1a:	f7f9 fddf 	bl	8000adc <__aeabi_dcmplt>
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	d079      	beq.n	8007016 <_dtoa_r+0x4de>
 8006f22:	9b03      	ldr	r3, [sp, #12]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d076      	beq.n	8007016 <_dtoa_r+0x4de>
 8006f28:	9b02      	ldr	r3, [sp, #8]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	dd36      	ble.n	8006f9c <_dtoa_r+0x464>
 8006f2e:	9b00      	ldr	r3, [sp, #0]
 8006f30:	4650      	mov	r0, sl
 8006f32:	4659      	mov	r1, fp
 8006f34:	1e5f      	subs	r7, r3, #1
 8006f36:	2200      	movs	r2, #0
 8006f38:	4b88      	ldr	r3, [pc, #544]	; (800715c <_dtoa_r+0x624>)
 8006f3a:	f7f9 fb5d 	bl	80005f8 <__aeabi_dmul>
 8006f3e:	9e02      	ldr	r6, [sp, #8]
 8006f40:	4682      	mov	sl, r0
 8006f42:	468b      	mov	fp, r1
 8006f44:	3501      	adds	r5, #1
 8006f46:	4628      	mov	r0, r5
 8006f48:	f7f9 faec 	bl	8000524 <__aeabi_i2d>
 8006f4c:	4652      	mov	r2, sl
 8006f4e:	465b      	mov	r3, fp
 8006f50:	f7f9 fb52 	bl	80005f8 <__aeabi_dmul>
 8006f54:	4b82      	ldr	r3, [pc, #520]	; (8007160 <_dtoa_r+0x628>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	f7f9 f998 	bl	800028c <__adddf3>
 8006f5c:	46d0      	mov	r8, sl
 8006f5e:	46d9      	mov	r9, fp
 8006f60:	4682      	mov	sl, r0
 8006f62:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006f66:	2e00      	cmp	r6, #0
 8006f68:	d158      	bne.n	800701c <_dtoa_r+0x4e4>
 8006f6a:	4b7e      	ldr	r3, [pc, #504]	; (8007164 <_dtoa_r+0x62c>)
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	4640      	mov	r0, r8
 8006f70:	4649      	mov	r1, r9
 8006f72:	f7f9 f989 	bl	8000288 <__aeabi_dsub>
 8006f76:	4652      	mov	r2, sl
 8006f78:	465b      	mov	r3, fp
 8006f7a:	4680      	mov	r8, r0
 8006f7c:	4689      	mov	r9, r1
 8006f7e:	f7f9 fdcb 	bl	8000b18 <__aeabi_dcmpgt>
 8006f82:	2800      	cmp	r0, #0
 8006f84:	f040 8295 	bne.w	80074b2 <_dtoa_r+0x97a>
 8006f88:	4652      	mov	r2, sl
 8006f8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006f8e:	4640      	mov	r0, r8
 8006f90:	4649      	mov	r1, r9
 8006f92:	f7f9 fda3 	bl	8000adc <__aeabi_dcmplt>
 8006f96:	2800      	cmp	r0, #0
 8006f98:	f040 8289 	bne.w	80074ae <_dtoa_r+0x976>
 8006f9c:	ec5b ab19 	vmov	sl, fp, d9
 8006fa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	f2c0 8148 	blt.w	8007238 <_dtoa_r+0x700>
 8006fa8:	9a00      	ldr	r2, [sp, #0]
 8006faa:	2a0e      	cmp	r2, #14
 8006fac:	f300 8144 	bgt.w	8007238 <_dtoa_r+0x700>
 8006fb0:	4b67      	ldr	r3, [pc, #412]	; (8007150 <_dtoa_r+0x618>)
 8006fb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f280 80d5 	bge.w	800716c <_dtoa_r+0x634>
 8006fc2:	9b03      	ldr	r3, [sp, #12]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f300 80d1 	bgt.w	800716c <_dtoa_r+0x634>
 8006fca:	f040 826f 	bne.w	80074ac <_dtoa_r+0x974>
 8006fce:	4b65      	ldr	r3, [pc, #404]	; (8007164 <_dtoa_r+0x62c>)
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	4640      	mov	r0, r8
 8006fd4:	4649      	mov	r1, r9
 8006fd6:	f7f9 fb0f 	bl	80005f8 <__aeabi_dmul>
 8006fda:	4652      	mov	r2, sl
 8006fdc:	465b      	mov	r3, fp
 8006fde:	f7f9 fd91 	bl	8000b04 <__aeabi_dcmpge>
 8006fe2:	9e03      	ldr	r6, [sp, #12]
 8006fe4:	4637      	mov	r7, r6
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	f040 8245 	bne.w	8007476 <_dtoa_r+0x93e>
 8006fec:	9d01      	ldr	r5, [sp, #4]
 8006fee:	2331      	movs	r3, #49	; 0x31
 8006ff0:	f805 3b01 	strb.w	r3, [r5], #1
 8006ff4:	9b00      	ldr	r3, [sp, #0]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	9300      	str	r3, [sp, #0]
 8006ffa:	e240      	b.n	800747e <_dtoa_r+0x946>
 8006ffc:	07f2      	lsls	r2, r6, #31
 8006ffe:	d505      	bpl.n	800700c <_dtoa_r+0x4d4>
 8007000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007004:	f7f9 faf8 	bl	80005f8 <__aeabi_dmul>
 8007008:	3501      	adds	r5, #1
 800700a:	2301      	movs	r3, #1
 800700c:	1076      	asrs	r6, r6, #1
 800700e:	3708      	adds	r7, #8
 8007010:	e777      	b.n	8006f02 <_dtoa_r+0x3ca>
 8007012:	2502      	movs	r5, #2
 8007014:	e779      	b.n	8006f0a <_dtoa_r+0x3d2>
 8007016:	9f00      	ldr	r7, [sp, #0]
 8007018:	9e03      	ldr	r6, [sp, #12]
 800701a:	e794      	b.n	8006f46 <_dtoa_r+0x40e>
 800701c:	9901      	ldr	r1, [sp, #4]
 800701e:	4b4c      	ldr	r3, [pc, #304]	; (8007150 <_dtoa_r+0x618>)
 8007020:	4431      	add	r1, r6
 8007022:	910d      	str	r1, [sp, #52]	; 0x34
 8007024:	9908      	ldr	r1, [sp, #32]
 8007026:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800702a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800702e:	2900      	cmp	r1, #0
 8007030:	d043      	beq.n	80070ba <_dtoa_r+0x582>
 8007032:	494d      	ldr	r1, [pc, #308]	; (8007168 <_dtoa_r+0x630>)
 8007034:	2000      	movs	r0, #0
 8007036:	f7f9 fc09 	bl	800084c <__aeabi_ddiv>
 800703a:	4652      	mov	r2, sl
 800703c:	465b      	mov	r3, fp
 800703e:	f7f9 f923 	bl	8000288 <__aeabi_dsub>
 8007042:	9d01      	ldr	r5, [sp, #4]
 8007044:	4682      	mov	sl, r0
 8007046:	468b      	mov	fp, r1
 8007048:	4649      	mov	r1, r9
 800704a:	4640      	mov	r0, r8
 800704c:	f7f9 fd84 	bl	8000b58 <__aeabi_d2iz>
 8007050:	4606      	mov	r6, r0
 8007052:	f7f9 fa67 	bl	8000524 <__aeabi_i2d>
 8007056:	4602      	mov	r2, r0
 8007058:	460b      	mov	r3, r1
 800705a:	4640      	mov	r0, r8
 800705c:	4649      	mov	r1, r9
 800705e:	f7f9 f913 	bl	8000288 <__aeabi_dsub>
 8007062:	3630      	adds	r6, #48	; 0x30
 8007064:	f805 6b01 	strb.w	r6, [r5], #1
 8007068:	4652      	mov	r2, sl
 800706a:	465b      	mov	r3, fp
 800706c:	4680      	mov	r8, r0
 800706e:	4689      	mov	r9, r1
 8007070:	f7f9 fd34 	bl	8000adc <__aeabi_dcmplt>
 8007074:	2800      	cmp	r0, #0
 8007076:	d163      	bne.n	8007140 <_dtoa_r+0x608>
 8007078:	4642      	mov	r2, r8
 800707a:	464b      	mov	r3, r9
 800707c:	4936      	ldr	r1, [pc, #216]	; (8007158 <_dtoa_r+0x620>)
 800707e:	2000      	movs	r0, #0
 8007080:	f7f9 f902 	bl	8000288 <__aeabi_dsub>
 8007084:	4652      	mov	r2, sl
 8007086:	465b      	mov	r3, fp
 8007088:	f7f9 fd28 	bl	8000adc <__aeabi_dcmplt>
 800708c:	2800      	cmp	r0, #0
 800708e:	f040 80b5 	bne.w	80071fc <_dtoa_r+0x6c4>
 8007092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007094:	429d      	cmp	r5, r3
 8007096:	d081      	beq.n	8006f9c <_dtoa_r+0x464>
 8007098:	4b30      	ldr	r3, [pc, #192]	; (800715c <_dtoa_r+0x624>)
 800709a:	2200      	movs	r2, #0
 800709c:	4650      	mov	r0, sl
 800709e:	4659      	mov	r1, fp
 80070a0:	f7f9 faaa 	bl	80005f8 <__aeabi_dmul>
 80070a4:	4b2d      	ldr	r3, [pc, #180]	; (800715c <_dtoa_r+0x624>)
 80070a6:	4682      	mov	sl, r0
 80070a8:	468b      	mov	fp, r1
 80070aa:	4640      	mov	r0, r8
 80070ac:	4649      	mov	r1, r9
 80070ae:	2200      	movs	r2, #0
 80070b0:	f7f9 faa2 	bl	80005f8 <__aeabi_dmul>
 80070b4:	4680      	mov	r8, r0
 80070b6:	4689      	mov	r9, r1
 80070b8:	e7c6      	b.n	8007048 <_dtoa_r+0x510>
 80070ba:	4650      	mov	r0, sl
 80070bc:	4659      	mov	r1, fp
 80070be:	f7f9 fa9b 	bl	80005f8 <__aeabi_dmul>
 80070c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070c4:	9d01      	ldr	r5, [sp, #4]
 80070c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80070c8:	4682      	mov	sl, r0
 80070ca:	468b      	mov	fp, r1
 80070cc:	4649      	mov	r1, r9
 80070ce:	4640      	mov	r0, r8
 80070d0:	f7f9 fd42 	bl	8000b58 <__aeabi_d2iz>
 80070d4:	4606      	mov	r6, r0
 80070d6:	f7f9 fa25 	bl	8000524 <__aeabi_i2d>
 80070da:	3630      	adds	r6, #48	; 0x30
 80070dc:	4602      	mov	r2, r0
 80070de:	460b      	mov	r3, r1
 80070e0:	4640      	mov	r0, r8
 80070e2:	4649      	mov	r1, r9
 80070e4:	f7f9 f8d0 	bl	8000288 <__aeabi_dsub>
 80070e8:	f805 6b01 	strb.w	r6, [r5], #1
 80070ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070ee:	429d      	cmp	r5, r3
 80070f0:	4680      	mov	r8, r0
 80070f2:	4689      	mov	r9, r1
 80070f4:	f04f 0200 	mov.w	r2, #0
 80070f8:	d124      	bne.n	8007144 <_dtoa_r+0x60c>
 80070fa:	4b1b      	ldr	r3, [pc, #108]	; (8007168 <_dtoa_r+0x630>)
 80070fc:	4650      	mov	r0, sl
 80070fe:	4659      	mov	r1, fp
 8007100:	f7f9 f8c4 	bl	800028c <__adddf3>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	4640      	mov	r0, r8
 800710a:	4649      	mov	r1, r9
 800710c:	f7f9 fd04 	bl	8000b18 <__aeabi_dcmpgt>
 8007110:	2800      	cmp	r0, #0
 8007112:	d173      	bne.n	80071fc <_dtoa_r+0x6c4>
 8007114:	4652      	mov	r2, sl
 8007116:	465b      	mov	r3, fp
 8007118:	4913      	ldr	r1, [pc, #76]	; (8007168 <_dtoa_r+0x630>)
 800711a:	2000      	movs	r0, #0
 800711c:	f7f9 f8b4 	bl	8000288 <__aeabi_dsub>
 8007120:	4602      	mov	r2, r0
 8007122:	460b      	mov	r3, r1
 8007124:	4640      	mov	r0, r8
 8007126:	4649      	mov	r1, r9
 8007128:	f7f9 fcd8 	bl	8000adc <__aeabi_dcmplt>
 800712c:	2800      	cmp	r0, #0
 800712e:	f43f af35 	beq.w	8006f9c <_dtoa_r+0x464>
 8007132:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007134:	1e6b      	subs	r3, r5, #1
 8007136:	930f      	str	r3, [sp, #60]	; 0x3c
 8007138:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800713c:	2b30      	cmp	r3, #48	; 0x30
 800713e:	d0f8      	beq.n	8007132 <_dtoa_r+0x5fa>
 8007140:	9700      	str	r7, [sp, #0]
 8007142:	e049      	b.n	80071d8 <_dtoa_r+0x6a0>
 8007144:	4b05      	ldr	r3, [pc, #20]	; (800715c <_dtoa_r+0x624>)
 8007146:	f7f9 fa57 	bl	80005f8 <__aeabi_dmul>
 800714a:	4680      	mov	r8, r0
 800714c:	4689      	mov	r9, r1
 800714e:	e7bd      	b.n	80070cc <_dtoa_r+0x594>
 8007150:	080097b0 	.word	0x080097b0
 8007154:	08009788 	.word	0x08009788
 8007158:	3ff00000 	.word	0x3ff00000
 800715c:	40240000 	.word	0x40240000
 8007160:	401c0000 	.word	0x401c0000
 8007164:	40140000 	.word	0x40140000
 8007168:	3fe00000 	.word	0x3fe00000
 800716c:	9d01      	ldr	r5, [sp, #4]
 800716e:	4656      	mov	r6, sl
 8007170:	465f      	mov	r7, fp
 8007172:	4642      	mov	r2, r8
 8007174:	464b      	mov	r3, r9
 8007176:	4630      	mov	r0, r6
 8007178:	4639      	mov	r1, r7
 800717a:	f7f9 fb67 	bl	800084c <__aeabi_ddiv>
 800717e:	f7f9 fceb 	bl	8000b58 <__aeabi_d2iz>
 8007182:	4682      	mov	sl, r0
 8007184:	f7f9 f9ce 	bl	8000524 <__aeabi_i2d>
 8007188:	4642      	mov	r2, r8
 800718a:	464b      	mov	r3, r9
 800718c:	f7f9 fa34 	bl	80005f8 <__aeabi_dmul>
 8007190:	4602      	mov	r2, r0
 8007192:	460b      	mov	r3, r1
 8007194:	4630      	mov	r0, r6
 8007196:	4639      	mov	r1, r7
 8007198:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800719c:	f7f9 f874 	bl	8000288 <__aeabi_dsub>
 80071a0:	f805 6b01 	strb.w	r6, [r5], #1
 80071a4:	9e01      	ldr	r6, [sp, #4]
 80071a6:	9f03      	ldr	r7, [sp, #12]
 80071a8:	1bae      	subs	r6, r5, r6
 80071aa:	42b7      	cmp	r7, r6
 80071ac:	4602      	mov	r2, r0
 80071ae:	460b      	mov	r3, r1
 80071b0:	d135      	bne.n	800721e <_dtoa_r+0x6e6>
 80071b2:	f7f9 f86b 	bl	800028c <__adddf3>
 80071b6:	4642      	mov	r2, r8
 80071b8:	464b      	mov	r3, r9
 80071ba:	4606      	mov	r6, r0
 80071bc:	460f      	mov	r7, r1
 80071be:	f7f9 fcab 	bl	8000b18 <__aeabi_dcmpgt>
 80071c2:	b9d0      	cbnz	r0, 80071fa <_dtoa_r+0x6c2>
 80071c4:	4642      	mov	r2, r8
 80071c6:	464b      	mov	r3, r9
 80071c8:	4630      	mov	r0, r6
 80071ca:	4639      	mov	r1, r7
 80071cc:	f7f9 fc7c 	bl	8000ac8 <__aeabi_dcmpeq>
 80071d0:	b110      	cbz	r0, 80071d8 <_dtoa_r+0x6a0>
 80071d2:	f01a 0f01 	tst.w	sl, #1
 80071d6:	d110      	bne.n	80071fa <_dtoa_r+0x6c2>
 80071d8:	4620      	mov	r0, r4
 80071da:	ee18 1a10 	vmov	r1, s16
 80071de:	f000 faf3 	bl	80077c8 <_Bfree>
 80071e2:	2300      	movs	r3, #0
 80071e4:	9800      	ldr	r0, [sp, #0]
 80071e6:	702b      	strb	r3, [r5, #0]
 80071e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071ea:	3001      	adds	r0, #1
 80071ec:	6018      	str	r0, [r3, #0]
 80071ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f43f acf1 	beq.w	8006bd8 <_dtoa_r+0xa0>
 80071f6:	601d      	str	r5, [r3, #0]
 80071f8:	e4ee      	b.n	8006bd8 <_dtoa_r+0xa0>
 80071fa:	9f00      	ldr	r7, [sp, #0]
 80071fc:	462b      	mov	r3, r5
 80071fe:	461d      	mov	r5, r3
 8007200:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007204:	2a39      	cmp	r2, #57	; 0x39
 8007206:	d106      	bne.n	8007216 <_dtoa_r+0x6de>
 8007208:	9a01      	ldr	r2, [sp, #4]
 800720a:	429a      	cmp	r2, r3
 800720c:	d1f7      	bne.n	80071fe <_dtoa_r+0x6c6>
 800720e:	9901      	ldr	r1, [sp, #4]
 8007210:	2230      	movs	r2, #48	; 0x30
 8007212:	3701      	adds	r7, #1
 8007214:	700a      	strb	r2, [r1, #0]
 8007216:	781a      	ldrb	r2, [r3, #0]
 8007218:	3201      	adds	r2, #1
 800721a:	701a      	strb	r2, [r3, #0]
 800721c:	e790      	b.n	8007140 <_dtoa_r+0x608>
 800721e:	4ba6      	ldr	r3, [pc, #664]	; (80074b8 <_dtoa_r+0x980>)
 8007220:	2200      	movs	r2, #0
 8007222:	f7f9 f9e9 	bl	80005f8 <__aeabi_dmul>
 8007226:	2200      	movs	r2, #0
 8007228:	2300      	movs	r3, #0
 800722a:	4606      	mov	r6, r0
 800722c:	460f      	mov	r7, r1
 800722e:	f7f9 fc4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007232:	2800      	cmp	r0, #0
 8007234:	d09d      	beq.n	8007172 <_dtoa_r+0x63a>
 8007236:	e7cf      	b.n	80071d8 <_dtoa_r+0x6a0>
 8007238:	9a08      	ldr	r2, [sp, #32]
 800723a:	2a00      	cmp	r2, #0
 800723c:	f000 80d7 	beq.w	80073ee <_dtoa_r+0x8b6>
 8007240:	9a06      	ldr	r2, [sp, #24]
 8007242:	2a01      	cmp	r2, #1
 8007244:	f300 80ba 	bgt.w	80073bc <_dtoa_r+0x884>
 8007248:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800724a:	2a00      	cmp	r2, #0
 800724c:	f000 80b2 	beq.w	80073b4 <_dtoa_r+0x87c>
 8007250:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007254:	9e07      	ldr	r6, [sp, #28]
 8007256:	9d04      	ldr	r5, [sp, #16]
 8007258:	9a04      	ldr	r2, [sp, #16]
 800725a:	441a      	add	r2, r3
 800725c:	9204      	str	r2, [sp, #16]
 800725e:	9a05      	ldr	r2, [sp, #20]
 8007260:	2101      	movs	r1, #1
 8007262:	441a      	add	r2, r3
 8007264:	4620      	mov	r0, r4
 8007266:	9205      	str	r2, [sp, #20]
 8007268:	f000 fb66 	bl	8007938 <__i2b>
 800726c:	4607      	mov	r7, r0
 800726e:	2d00      	cmp	r5, #0
 8007270:	dd0c      	ble.n	800728c <_dtoa_r+0x754>
 8007272:	9b05      	ldr	r3, [sp, #20]
 8007274:	2b00      	cmp	r3, #0
 8007276:	dd09      	ble.n	800728c <_dtoa_r+0x754>
 8007278:	42ab      	cmp	r3, r5
 800727a:	9a04      	ldr	r2, [sp, #16]
 800727c:	bfa8      	it	ge
 800727e:	462b      	movge	r3, r5
 8007280:	1ad2      	subs	r2, r2, r3
 8007282:	9204      	str	r2, [sp, #16]
 8007284:	9a05      	ldr	r2, [sp, #20]
 8007286:	1aed      	subs	r5, r5, r3
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	9305      	str	r3, [sp, #20]
 800728c:	9b07      	ldr	r3, [sp, #28]
 800728e:	b31b      	cbz	r3, 80072d8 <_dtoa_r+0x7a0>
 8007290:	9b08      	ldr	r3, [sp, #32]
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 80af 	beq.w	80073f6 <_dtoa_r+0x8be>
 8007298:	2e00      	cmp	r6, #0
 800729a:	dd13      	ble.n	80072c4 <_dtoa_r+0x78c>
 800729c:	4639      	mov	r1, r7
 800729e:	4632      	mov	r2, r6
 80072a0:	4620      	mov	r0, r4
 80072a2:	f000 fc09 	bl	8007ab8 <__pow5mult>
 80072a6:	ee18 2a10 	vmov	r2, s16
 80072aa:	4601      	mov	r1, r0
 80072ac:	4607      	mov	r7, r0
 80072ae:	4620      	mov	r0, r4
 80072b0:	f000 fb58 	bl	8007964 <__multiply>
 80072b4:	ee18 1a10 	vmov	r1, s16
 80072b8:	4680      	mov	r8, r0
 80072ba:	4620      	mov	r0, r4
 80072bc:	f000 fa84 	bl	80077c8 <_Bfree>
 80072c0:	ee08 8a10 	vmov	s16, r8
 80072c4:	9b07      	ldr	r3, [sp, #28]
 80072c6:	1b9a      	subs	r2, r3, r6
 80072c8:	d006      	beq.n	80072d8 <_dtoa_r+0x7a0>
 80072ca:	ee18 1a10 	vmov	r1, s16
 80072ce:	4620      	mov	r0, r4
 80072d0:	f000 fbf2 	bl	8007ab8 <__pow5mult>
 80072d4:	ee08 0a10 	vmov	s16, r0
 80072d8:	2101      	movs	r1, #1
 80072da:	4620      	mov	r0, r4
 80072dc:	f000 fb2c 	bl	8007938 <__i2b>
 80072e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	4606      	mov	r6, r0
 80072e6:	f340 8088 	ble.w	80073fa <_dtoa_r+0x8c2>
 80072ea:	461a      	mov	r2, r3
 80072ec:	4601      	mov	r1, r0
 80072ee:	4620      	mov	r0, r4
 80072f0:	f000 fbe2 	bl	8007ab8 <__pow5mult>
 80072f4:	9b06      	ldr	r3, [sp, #24]
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	4606      	mov	r6, r0
 80072fa:	f340 8081 	ble.w	8007400 <_dtoa_r+0x8c8>
 80072fe:	f04f 0800 	mov.w	r8, #0
 8007302:	6933      	ldr	r3, [r6, #16]
 8007304:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007308:	6918      	ldr	r0, [r3, #16]
 800730a:	f000 fac5 	bl	8007898 <__hi0bits>
 800730e:	f1c0 0020 	rsb	r0, r0, #32
 8007312:	9b05      	ldr	r3, [sp, #20]
 8007314:	4418      	add	r0, r3
 8007316:	f010 001f 	ands.w	r0, r0, #31
 800731a:	f000 8092 	beq.w	8007442 <_dtoa_r+0x90a>
 800731e:	f1c0 0320 	rsb	r3, r0, #32
 8007322:	2b04      	cmp	r3, #4
 8007324:	f340 808a 	ble.w	800743c <_dtoa_r+0x904>
 8007328:	f1c0 001c 	rsb	r0, r0, #28
 800732c:	9b04      	ldr	r3, [sp, #16]
 800732e:	4403      	add	r3, r0
 8007330:	9304      	str	r3, [sp, #16]
 8007332:	9b05      	ldr	r3, [sp, #20]
 8007334:	4403      	add	r3, r0
 8007336:	4405      	add	r5, r0
 8007338:	9305      	str	r3, [sp, #20]
 800733a:	9b04      	ldr	r3, [sp, #16]
 800733c:	2b00      	cmp	r3, #0
 800733e:	dd07      	ble.n	8007350 <_dtoa_r+0x818>
 8007340:	ee18 1a10 	vmov	r1, s16
 8007344:	461a      	mov	r2, r3
 8007346:	4620      	mov	r0, r4
 8007348:	f000 fc10 	bl	8007b6c <__lshift>
 800734c:	ee08 0a10 	vmov	s16, r0
 8007350:	9b05      	ldr	r3, [sp, #20]
 8007352:	2b00      	cmp	r3, #0
 8007354:	dd05      	ble.n	8007362 <_dtoa_r+0x82a>
 8007356:	4631      	mov	r1, r6
 8007358:	461a      	mov	r2, r3
 800735a:	4620      	mov	r0, r4
 800735c:	f000 fc06 	bl	8007b6c <__lshift>
 8007360:	4606      	mov	r6, r0
 8007362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007364:	2b00      	cmp	r3, #0
 8007366:	d06e      	beq.n	8007446 <_dtoa_r+0x90e>
 8007368:	ee18 0a10 	vmov	r0, s16
 800736c:	4631      	mov	r1, r6
 800736e:	f000 fc6d 	bl	8007c4c <__mcmp>
 8007372:	2800      	cmp	r0, #0
 8007374:	da67      	bge.n	8007446 <_dtoa_r+0x90e>
 8007376:	9b00      	ldr	r3, [sp, #0]
 8007378:	3b01      	subs	r3, #1
 800737a:	ee18 1a10 	vmov	r1, s16
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	220a      	movs	r2, #10
 8007382:	2300      	movs	r3, #0
 8007384:	4620      	mov	r0, r4
 8007386:	f000 fa41 	bl	800780c <__multadd>
 800738a:	9b08      	ldr	r3, [sp, #32]
 800738c:	ee08 0a10 	vmov	s16, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 81b1 	beq.w	80076f8 <_dtoa_r+0xbc0>
 8007396:	2300      	movs	r3, #0
 8007398:	4639      	mov	r1, r7
 800739a:	220a      	movs	r2, #10
 800739c:	4620      	mov	r0, r4
 800739e:	f000 fa35 	bl	800780c <__multadd>
 80073a2:	9b02      	ldr	r3, [sp, #8]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	4607      	mov	r7, r0
 80073a8:	f300 808e 	bgt.w	80074c8 <_dtoa_r+0x990>
 80073ac:	9b06      	ldr	r3, [sp, #24]
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	dc51      	bgt.n	8007456 <_dtoa_r+0x91e>
 80073b2:	e089      	b.n	80074c8 <_dtoa_r+0x990>
 80073b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80073ba:	e74b      	b.n	8007254 <_dtoa_r+0x71c>
 80073bc:	9b03      	ldr	r3, [sp, #12]
 80073be:	1e5e      	subs	r6, r3, #1
 80073c0:	9b07      	ldr	r3, [sp, #28]
 80073c2:	42b3      	cmp	r3, r6
 80073c4:	bfbf      	itttt	lt
 80073c6:	9b07      	ldrlt	r3, [sp, #28]
 80073c8:	9607      	strlt	r6, [sp, #28]
 80073ca:	1af2      	sublt	r2, r6, r3
 80073cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80073ce:	bfb6      	itet	lt
 80073d0:	189b      	addlt	r3, r3, r2
 80073d2:	1b9e      	subge	r6, r3, r6
 80073d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80073d6:	9b03      	ldr	r3, [sp, #12]
 80073d8:	bfb8      	it	lt
 80073da:	2600      	movlt	r6, #0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	bfb7      	itett	lt
 80073e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80073e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80073e8:	1a9d      	sublt	r5, r3, r2
 80073ea:	2300      	movlt	r3, #0
 80073ec:	e734      	b.n	8007258 <_dtoa_r+0x720>
 80073ee:	9e07      	ldr	r6, [sp, #28]
 80073f0:	9d04      	ldr	r5, [sp, #16]
 80073f2:	9f08      	ldr	r7, [sp, #32]
 80073f4:	e73b      	b.n	800726e <_dtoa_r+0x736>
 80073f6:	9a07      	ldr	r2, [sp, #28]
 80073f8:	e767      	b.n	80072ca <_dtoa_r+0x792>
 80073fa:	9b06      	ldr	r3, [sp, #24]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	dc18      	bgt.n	8007432 <_dtoa_r+0x8fa>
 8007400:	f1ba 0f00 	cmp.w	sl, #0
 8007404:	d115      	bne.n	8007432 <_dtoa_r+0x8fa>
 8007406:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800740a:	b993      	cbnz	r3, 8007432 <_dtoa_r+0x8fa>
 800740c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007410:	0d1b      	lsrs	r3, r3, #20
 8007412:	051b      	lsls	r3, r3, #20
 8007414:	b183      	cbz	r3, 8007438 <_dtoa_r+0x900>
 8007416:	9b04      	ldr	r3, [sp, #16]
 8007418:	3301      	adds	r3, #1
 800741a:	9304      	str	r3, [sp, #16]
 800741c:	9b05      	ldr	r3, [sp, #20]
 800741e:	3301      	adds	r3, #1
 8007420:	9305      	str	r3, [sp, #20]
 8007422:	f04f 0801 	mov.w	r8, #1
 8007426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007428:	2b00      	cmp	r3, #0
 800742a:	f47f af6a 	bne.w	8007302 <_dtoa_r+0x7ca>
 800742e:	2001      	movs	r0, #1
 8007430:	e76f      	b.n	8007312 <_dtoa_r+0x7da>
 8007432:	f04f 0800 	mov.w	r8, #0
 8007436:	e7f6      	b.n	8007426 <_dtoa_r+0x8ee>
 8007438:	4698      	mov	r8, r3
 800743a:	e7f4      	b.n	8007426 <_dtoa_r+0x8ee>
 800743c:	f43f af7d 	beq.w	800733a <_dtoa_r+0x802>
 8007440:	4618      	mov	r0, r3
 8007442:	301c      	adds	r0, #28
 8007444:	e772      	b.n	800732c <_dtoa_r+0x7f4>
 8007446:	9b03      	ldr	r3, [sp, #12]
 8007448:	2b00      	cmp	r3, #0
 800744a:	dc37      	bgt.n	80074bc <_dtoa_r+0x984>
 800744c:	9b06      	ldr	r3, [sp, #24]
 800744e:	2b02      	cmp	r3, #2
 8007450:	dd34      	ble.n	80074bc <_dtoa_r+0x984>
 8007452:	9b03      	ldr	r3, [sp, #12]
 8007454:	9302      	str	r3, [sp, #8]
 8007456:	9b02      	ldr	r3, [sp, #8]
 8007458:	b96b      	cbnz	r3, 8007476 <_dtoa_r+0x93e>
 800745a:	4631      	mov	r1, r6
 800745c:	2205      	movs	r2, #5
 800745e:	4620      	mov	r0, r4
 8007460:	f000 f9d4 	bl	800780c <__multadd>
 8007464:	4601      	mov	r1, r0
 8007466:	4606      	mov	r6, r0
 8007468:	ee18 0a10 	vmov	r0, s16
 800746c:	f000 fbee 	bl	8007c4c <__mcmp>
 8007470:	2800      	cmp	r0, #0
 8007472:	f73f adbb 	bgt.w	8006fec <_dtoa_r+0x4b4>
 8007476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007478:	9d01      	ldr	r5, [sp, #4]
 800747a:	43db      	mvns	r3, r3
 800747c:	9300      	str	r3, [sp, #0]
 800747e:	f04f 0800 	mov.w	r8, #0
 8007482:	4631      	mov	r1, r6
 8007484:	4620      	mov	r0, r4
 8007486:	f000 f99f 	bl	80077c8 <_Bfree>
 800748a:	2f00      	cmp	r7, #0
 800748c:	f43f aea4 	beq.w	80071d8 <_dtoa_r+0x6a0>
 8007490:	f1b8 0f00 	cmp.w	r8, #0
 8007494:	d005      	beq.n	80074a2 <_dtoa_r+0x96a>
 8007496:	45b8      	cmp	r8, r7
 8007498:	d003      	beq.n	80074a2 <_dtoa_r+0x96a>
 800749a:	4641      	mov	r1, r8
 800749c:	4620      	mov	r0, r4
 800749e:	f000 f993 	bl	80077c8 <_Bfree>
 80074a2:	4639      	mov	r1, r7
 80074a4:	4620      	mov	r0, r4
 80074a6:	f000 f98f 	bl	80077c8 <_Bfree>
 80074aa:	e695      	b.n	80071d8 <_dtoa_r+0x6a0>
 80074ac:	2600      	movs	r6, #0
 80074ae:	4637      	mov	r7, r6
 80074b0:	e7e1      	b.n	8007476 <_dtoa_r+0x93e>
 80074b2:	9700      	str	r7, [sp, #0]
 80074b4:	4637      	mov	r7, r6
 80074b6:	e599      	b.n	8006fec <_dtoa_r+0x4b4>
 80074b8:	40240000 	.word	0x40240000
 80074bc:	9b08      	ldr	r3, [sp, #32]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f000 80ca 	beq.w	8007658 <_dtoa_r+0xb20>
 80074c4:	9b03      	ldr	r3, [sp, #12]
 80074c6:	9302      	str	r3, [sp, #8]
 80074c8:	2d00      	cmp	r5, #0
 80074ca:	dd05      	ble.n	80074d8 <_dtoa_r+0x9a0>
 80074cc:	4639      	mov	r1, r7
 80074ce:	462a      	mov	r2, r5
 80074d0:	4620      	mov	r0, r4
 80074d2:	f000 fb4b 	bl	8007b6c <__lshift>
 80074d6:	4607      	mov	r7, r0
 80074d8:	f1b8 0f00 	cmp.w	r8, #0
 80074dc:	d05b      	beq.n	8007596 <_dtoa_r+0xa5e>
 80074de:	6879      	ldr	r1, [r7, #4]
 80074e0:	4620      	mov	r0, r4
 80074e2:	f000 f931 	bl	8007748 <_Balloc>
 80074e6:	4605      	mov	r5, r0
 80074e8:	b928      	cbnz	r0, 80074f6 <_dtoa_r+0x9be>
 80074ea:	4b87      	ldr	r3, [pc, #540]	; (8007708 <_dtoa_r+0xbd0>)
 80074ec:	4602      	mov	r2, r0
 80074ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80074f2:	f7ff bb3b 	b.w	8006b6c <_dtoa_r+0x34>
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	3202      	adds	r2, #2
 80074fa:	0092      	lsls	r2, r2, #2
 80074fc:	f107 010c 	add.w	r1, r7, #12
 8007500:	300c      	adds	r0, #12
 8007502:	f000 f913 	bl	800772c <memcpy>
 8007506:	2201      	movs	r2, #1
 8007508:	4629      	mov	r1, r5
 800750a:	4620      	mov	r0, r4
 800750c:	f000 fb2e 	bl	8007b6c <__lshift>
 8007510:	9b01      	ldr	r3, [sp, #4]
 8007512:	f103 0901 	add.w	r9, r3, #1
 8007516:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800751a:	4413      	add	r3, r2
 800751c:	9305      	str	r3, [sp, #20]
 800751e:	f00a 0301 	and.w	r3, sl, #1
 8007522:	46b8      	mov	r8, r7
 8007524:	9304      	str	r3, [sp, #16]
 8007526:	4607      	mov	r7, r0
 8007528:	4631      	mov	r1, r6
 800752a:	ee18 0a10 	vmov	r0, s16
 800752e:	f7ff fa77 	bl	8006a20 <quorem>
 8007532:	4641      	mov	r1, r8
 8007534:	9002      	str	r0, [sp, #8]
 8007536:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800753a:	ee18 0a10 	vmov	r0, s16
 800753e:	f000 fb85 	bl	8007c4c <__mcmp>
 8007542:	463a      	mov	r2, r7
 8007544:	9003      	str	r0, [sp, #12]
 8007546:	4631      	mov	r1, r6
 8007548:	4620      	mov	r0, r4
 800754a:	f000 fb9b 	bl	8007c84 <__mdiff>
 800754e:	68c2      	ldr	r2, [r0, #12]
 8007550:	f109 3bff 	add.w	fp, r9, #4294967295
 8007554:	4605      	mov	r5, r0
 8007556:	bb02      	cbnz	r2, 800759a <_dtoa_r+0xa62>
 8007558:	4601      	mov	r1, r0
 800755a:	ee18 0a10 	vmov	r0, s16
 800755e:	f000 fb75 	bl	8007c4c <__mcmp>
 8007562:	4602      	mov	r2, r0
 8007564:	4629      	mov	r1, r5
 8007566:	4620      	mov	r0, r4
 8007568:	9207      	str	r2, [sp, #28]
 800756a:	f000 f92d 	bl	80077c8 <_Bfree>
 800756e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007572:	ea43 0102 	orr.w	r1, r3, r2
 8007576:	9b04      	ldr	r3, [sp, #16]
 8007578:	430b      	orrs	r3, r1
 800757a:	464d      	mov	r5, r9
 800757c:	d10f      	bne.n	800759e <_dtoa_r+0xa66>
 800757e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007582:	d02a      	beq.n	80075da <_dtoa_r+0xaa2>
 8007584:	9b03      	ldr	r3, [sp, #12]
 8007586:	2b00      	cmp	r3, #0
 8007588:	dd02      	ble.n	8007590 <_dtoa_r+0xa58>
 800758a:	9b02      	ldr	r3, [sp, #8]
 800758c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007590:	f88b a000 	strb.w	sl, [fp]
 8007594:	e775      	b.n	8007482 <_dtoa_r+0x94a>
 8007596:	4638      	mov	r0, r7
 8007598:	e7ba      	b.n	8007510 <_dtoa_r+0x9d8>
 800759a:	2201      	movs	r2, #1
 800759c:	e7e2      	b.n	8007564 <_dtoa_r+0xa2c>
 800759e:	9b03      	ldr	r3, [sp, #12]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	db04      	blt.n	80075ae <_dtoa_r+0xa76>
 80075a4:	9906      	ldr	r1, [sp, #24]
 80075a6:	430b      	orrs	r3, r1
 80075a8:	9904      	ldr	r1, [sp, #16]
 80075aa:	430b      	orrs	r3, r1
 80075ac:	d122      	bne.n	80075f4 <_dtoa_r+0xabc>
 80075ae:	2a00      	cmp	r2, #0
 80075b0:	ddee      	ble.n	8007590 <_dtoa_r+0xa58>
 80075b2:	ee18 1a10 	vmov	r1, s16
 80075b6:	2201      	movs	r2, #1
 80075b8:	4620      	mov	r0, r4
 80075ba:	f000 fad7 	bl	8007b6c <__lshift>
 80075be:	4631      	mov	r1, r6
 80075c0:	ee08 0a10 	vmov	s16, r0
 80075c4:	f000 fb42 	bl	8007c4c <__mcmp>
 80075c8:	2800      	cmp	r0, #0
 80075ca:	dc03      	bgt.n	80075d4 <_dtoa_r+0xa9c>
 80075cc:	d1e0      	bne.n	8007590 <_dtoa_r+0xa58>
 80075ce:	f01a 0f01 	tst.w	sl, #1
 80075d2:	d0dd      	beq.n	8007590 <_dtoa_r+0xa58>
 80075d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80075d8:	d1d7      	bne.n	800758a <_dtoa_r+0xa52>
 80075da:	2339      	movs	r3, #57	; 0x39
 80075dc:	f88b 3000 	strb.w	r3, [fp]
 80075e0:	462b      	mov	r3, r5
 80075e2:	461d      	mov	r5, r3
 80075e4:	3b01      	subs	r3, #1
 80075e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80075ea:	2a39      	cmp	r2, #57	; 0x39
 80075ec:	d071      	beq.n	80076d2 <_dtoa_r+0xb9a>
 80075ee:	3201      	adds	r2, #1
 80075f0:	701a      	strb	r2, [r3, #0]
 80075f2:	e746      	b.n	8007482 <_dtoa_r+0x94a>
 80075f4:	2a00      	cmp	r2, #0
 80075f6:	dd07      	ble.n	8007608 <_dtoa_r+0xad0>
 80075f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80075fc:	d0ed      	beq.n	80075da <_dtoa_r+0xaa2>
 80075fe:	f10a 0301 	add.w	r3, sl, #1
 8007602:	f88b 3000 	strb.w	r3, [fp]
 8007606:	e73c      	b.n	8007482 <_dtoa_r+0x94a>
 8007608:	9b05      	ldr	r3, [sp, #20]
 800760a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800760e:	4599      	cmp	r9, r3
 8007610:	d047      	beq.n	80076a2 <_dtoa_r+0xb6a>
 8007612:	ee18 1a10 	vmov	r1, s16
 8007616:	2300      	movs	r3, #0
 8007618:	220a      	movs	r2, #10
 800761a:	4620      	mov	r0, r4
 800761c:	f000 f8f6 	bl	800780c <__multadd>
 8007620:	45b8      	cmp	r8, r7
 8007622:	ee08 0a10 	vmov	s16, r0
 8007626:	f04f 0300 	mov.w	r3, #0
 800762a:	f04f 020a 	mov.w	r2, #10
 800762e:	4641      	mov	r1, r8
 8007630:	4620      	mov	r0, r4
 8007632:	d106      	bne.n	8007642 <_dtoa_r+0xb0a>
 8007634:	f000 f8ea 	bl	800780c <__multadd>
 8007638:	4680      	mov	r8, r0
 800763a:	4607      	mov	r7, r0
 800763c:	f109 0901 	add.w	r9, r9, #1
 8007640:	e772      	b.n	8007528 <_dtoa_r+0x9f0>
 8007642:	f000 f8e3 	bl	800780c <__multadd>
 8007646:	4639      	mov	r1, r7
 8007648:	4680      	mov	r8, r0
 800764a:	2300      	movs	r3, #0
 800764c:	220a      	movs	r2, #10
 800764e:	4620      	mov	r0, r4
 8007650:	f000 f8dc 	bl	800780c <__multadd>
 8007654:	4607      	mov	r7, r0
 8007656:	e7f1      	b.n	800763c <_dtoa_r+0xb04>
 8007658:	9b03      	ldr	r3, [sp, #12]
 800765a:	9302      	str	r3, [sp, #8]
 800765c:	9d01      	ldr	r5, [sp, #4]
 800765e:	ee18 0a10 	vmov	r0, s16
 8007662:	4631      	mov	r1, r6
 8007664:	f7ff f9dc 	bl	8006a20 <quorem>
 8007668:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800766c:	9b01      	ldr	r3, [sp, #4]
 800766e:	f805 ab01 	strb.w	sl, [r5], #1
 8007672:	1aea      	subs	r2, r5, r3
 8007674:	9b02      	ldr	r3, [sp, #8]
 8007676:	4293      	cmp	r3, r2
 8007678:	dd09      	ble.n	800768e <_dtoa_r+0xb56>
 800767a:	ee18 1a10 	vmov	r1, s16
 800767e:	2300      	movs	r3, #0
 8007680:	220a      	movs	r2, #10
 8007682:	4620      	mov	r0, r4
 8007684:	f000 f8c2 	bl	800780c <__multadd>
 8007688:	ee08 0a10 	vmov	s16, r0
 800768c:	e7e7      	b.n	800765e <_dtoa_r+0xb26>
 800768e:	9b02      	ldr	r3, [sp, #8]
 8007690:	2b00      	cmp	r3, #0
 8007692:	bfc8      	it	gt
 8007694:	461d      	movgt	r5, r3
 8007696:	9b01      	ldr	r3, [sp, #4]
 8007698:	bfd8      	it	le
 800769a:	2501      	movle	r5, #1
 800769c:	441d      	add	r5, r3
 800769e:	f04f 0800 	mov.w	r8, #0
 80076a2:	ee18 1a10 	vmov	r1, s16
 80076a6:	2201      	movs	r2, #1
 80076a8:	4620      	mov	r0, r4
 80076aa:	f000 fa5f 	bl	8007b6c <__lshift>
 80076ae:	4631      	mov	r1, r6
 80076b0:	ee08 0a10 	vmov	s16, r0
 80076b4:	f000 faca 	bl	8007c4c <__mcmp>
 80076b8:	2800      	cmp	r0, #0
 80076ba:	dc91      	bgt.n	80075e0 <_dtoa_r+0xaa8>
 80076bc:	d102      	bne.n	80076c4 <_dtoa_r+0xb8c>
 80076be:	f01a 0f01 	tst.w	sl, #1
 80076c2:	d18d      	bne.n	80075e0 <_dtoa_r+0xaa8>
 80076c4:	462b      	mov	r3, r5
 80076c6:	461d      	mov	r5, r3
 80076c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076cc:	2a30      	cmp	r2, #48	; 0x30
 80076ce:	d0fa      	beq.n	80076c6 <_dtoa_r+0xb8e>
 80076d0:	e6d7      	b.n	8007482 <_dtoa_r+0x94a>
 80076d2:	9a01      	ldr	r2, [sp, #4]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d184      	bne.n	80075e2 <_dtoa_r+0xaaa>
 80076d8:	9b00      	ldr	r3, [sp, #0]
 80076da:	3301      	adds	r3, #1
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	2331      	movs	r3, #49	; 0x31
 80076e0:	7013      	strb	r3, [r2, #0]
 80076e2:	e6ce      	b.n	8007482 <_dtoa_r+0x94a>
 80076e4:	4b09      	ldr	r3, [pc, #36]	; (800770c <_dtoa_r+0xbd4>)
 80076e6:	f7ff ba95 	b.w	8006c14 <_dtoa_r+0xdc>
 80076ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f47f aa6e 	bne.w	8006bce <_dtoa_r+0x96>
 80076f2:	4b07      	ldr	r3, [pc, #28]	; (8007710 <_dtoa_r+0xbd8>)
 80076f4:	f7ff ba8e 	b.w	8006c14 <_dtoa_r+0xdc>
 80076f8:	9b02      	ldr	r3, [sp, #8]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	dcae      	bgt.n	800765c <_dtoa_r+0xb24>
 80076fe:	9b06      	ldr	r3, [sp, #24]
 8007700:	2b02      	cmp	r3, #2
 8007702:	f73f aea8 	bgt.w	8007456 <_dtoa_r+0x91e>
 8007706:	e7a9      	b.n	800765c <_dtoa_r+0xb24>
 8007708:	08009717 	.word	0x08009717
 800770c:	08009674 	.word	0x08009674
 8007710:	08009698 	.word	0x08009698

08007714 <_localeconv_r>:
 8007714:	4800      	ldr	r0, [pc, #0]	; (8007718 <_localeconv_r+0x4>)
 8007716:	4770      	bx	lr
 8007718:	200001f8 	.word	0x200001f8

0800771c <malloc>:
 800771c:	4b02      	ldr	r3, [pc, #8]	; (8007728 <malloc+0xc>)
 800771e:	4601      	mov	r1, r0
 8007720:	6818      	ldr	r0, [r3, #0]
 8007722:	f000 bc17 	b.w	8007f54 <_malloc_r>
 8007726:	bf00      	nop
 8007728:	200000a4 	.word	0x200000a4

0800772c <memcpy>:
 800772c:	440a      	add	r2, r1
 800772e:	4291      	cmp	r1, r2
 8007730:	f100 33ff 	add.w	r3, r0, #4294967295
 8007734:	d100      	bne.n	8007738 <memcpy+0xc>
 8007736:	4770      	bx	lr
 8007738:	b510      	push	{r4, lr}
 800773a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800773e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007742:	4291      	cmp	r1, r2
 8007744:	d1f9      	bne.n	800773a <memcpy+0xe>
 8007746:	bd10      	pop	{r4, pc}

08007748 <_Balloc>:
 8007748:	b570      	push	{r4, r5, r6, lr}
 800774a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800774c:	4604      	mov	r4, r0
 800774e:	460d      	mov	r5, r1
 8007750:	b976      	cbnz	r6, 8007770 <_Balloc+0x28>
 8007752:	2010      	movs	r0, #16
 8007754:	f7ff ffe2 	bl	800771c <malloc>
 8007758:	4602      	mov	r2, r0
 800775a:	6260      	str	r0, [r4, #36]	; 0x24
 800775c:	b920      	cbnz	r0, 8007768 <_Balloc+0x20>
 800775e:	4b18      	ldr	r3, [pc, #96]	; (80077c0 <_Balloc+0x78>)
 8007760:	4818      	ldr	r0, [pc, #96]	; (80077c4 <_Balloc+0x7c>)
 8007762:	2166      	movs	r1, #102	; 0x66
 8007764:	f000 fdd6 	bl	8008314 <__assert_func>
 8007768:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800776c:	6006      	str	r6, [r0, #0]
 800776e:	60c6      	str	r6, [r0, #12]
 8007770:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007772:	68f3      	ldr	r3, [r6, #12]
 8007774:	b183      	cbz	r3, 8007798 <_Balloc+0x50>
 8007776:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800777e:	b9b8      	cbnz	r0, 80077b0 <_Balloc+0x68>
 8007780:	2101      	movs	r1, #1
 8007782:	fa01 f605 	lsl.w	r6, r1, r5
 8007786:	1d72      	adds	r2, r6, #5
 8007788:	0092      	lsls	r2, r2, #2
 800778a:	4620      	mov	r0, r4
 800778c:	f000 fb60 	bl	8007e50 <_calloc_r>
 8007790:	b160      	cbz	r0, 80077ac <_Balloc+0x64>
 8007792:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007796:	e00e      	b.n	80077b6 <_Balloc+0x6e>
 8007798:	2221      	movs	r2, #33	; 0x21
 800779a:	2104      	movs	r1, #4
 800779c:	4620      	mov	r0, r4
 800779e:	f000 fb57 	bl	8007e50 <_calloc_r>
 80077a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077a4:	60f0      	str	r0, [r6, #12]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1e4      	bne.n	8007776 <_Balloc+0x2e>
 80077ac:	2000      	movs	r0, #0
 80077ae:	bd70      	pop	{r4, r5, r6, pc}
 80077b0:	6802      	ldr	r2, [r0, #0]
 80077b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077b6:	2300      	movs	r3, #0
 80077b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077bc:	e7f7      	b.n	80077ae <_Balloc+0x66>
 80077be:	bf00      	nop
 80077c0:	080096a5 	.word	0x080096a5
 80077c4:	08009728 	.word	0x08009728

080077c8 <_Bfree>:
 80077c8:	b570      	push	{r4, r5, r6, lr}
 80077ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80077cc:	4605      	mov	r5, r0
 80077ce:	460c      	mov	r4, r1
 80077d0:	b976      	cbnz	r6, 80077f0 <_Bfree+0x28>
 80077d2:	2010      	movs	r0, #16
 80077d4:	f7ff ffa2 	bl	800771c <malloc>
 80077d8:	4602      	mov	r2, r0
 80077da:	6268      	str	r0, [r5, #36]	; 0x24
 80077dc:	b920      	cbnz	r0, 80077e8 <_Bfree+0x20>
 80077de:	4b09      	ldr	r3, [pc, #36]	; (8007804 <_Bfree+0x3c>)
 80077e0:	4809      	ldr	r0, [pc, #36]	; (8007808 <_Bfree+0x40>)
 80077e2:	218a      	movs	r1, #138	; 0x8a
 80077e4:	f000 fd96 	bl	8008314 <__assert_func>
 80077e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077ec:	6006      	str	r6, [r0, #0]
 80077ee:	60c6      	str	r6, [r0, #12]
 80077f0:	b13c      	cbz	r4, 8007802 <_Bfree+0x3a>
 80077f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80077f4:	6862      	ldr	r2, [r4, #4]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80077fc:	6021      	str	r1, [r4, #0]
 80077fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007802:	bd70      	pop	{r4, r5, r6, pc}
 8007804:	080096a5 	.word	0x080096a5
 8007808:	08009728 	.word	0x08009728

0800780c <__multadd>:
 800780c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007810:	690d      	ldr	r5, [r1, #16]
 8007812:	4607      	mov	r7, r0
 8007814:	460c      	mov	r4, r1
 8007816:	461e      	mov	r6, r3
 8007818:	f101 0c14 	add.w	ip, r1, #20
 800781c:	2000      	movs	r0, #0
 800781e:	f8dc 3000 	ldr.w	r3, [ip]
 8007822:	b299      	uxth	r1, r3
 8007824:	fb02 6101 	mla	r1, r2, r1, r6
 8007828:	0c1e      	lsrs	r6, r3, #16
 800782a:	0c0b      	lsrs	r3, r1, #16
 800782c:	fb02 3306 	mla	r3, r2, r6, r3
 8007830:	b289      	uxth	r1, r1
 8007832:	3001      	adds	r0, #1
 8007834:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007838:	4285      	cmp	r5, r0
 800783a:	f84c 1b04 	str.w	r1, [ip], #4
 800783e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007842:	dcec      	bgt.n	800781e <__multadd+0x12>
 8007844:	b30e      	cbz	r6, 800788a <__multadd+0x7e>
 8007846:	68a3      	ldr	r3, [r4, #8]
 8007848:	42ab      	cmp	r3, r5
 800784a:	dc19      	bgt.n	8007880 <__multadd+0x74>
 800784c:	6861      	ldr	r1, [r4, #4]
 800784e:	4638      	mov	r0, r7
 8007850:	3101      	adds	r1, #1
 8007852:	f7ff ff79 	bl	8007748 <_Balloc>
 8007856:	4680      	mov	r8, r0
 8007858:	b928      	cbnz	r0, 8007866 <__multadd+0x5a>
 800785a:	4602      	mov	r2, r0
 800785c:	4b0c      	ldr	r3, [pc, #48]	; (8007890 <__multadd+0x84>)
 800785e:	480d      	ldr	r0, [pc, #52]	; (8007894 <__multadd+0x88>)
 8007860:	21b5      	movs	r1, #181	; 0xb5
 8007862:	f000 fd57 	bl	8008314 <__assert_func>
 8007866:	6922      	ldr	r2, [r4, #16]
 8007868:	3202      	adds	r2, #2
 800786a:	f104 010c 	add.w	r1, r4, #12
 800786e:	0092      	lsls	r2, r2, #2
 8007870:	300c      	adds	r0, #12
 8007872:	f7ff ff5b 	bl	800772c <memcpy>
 8007876:	4621      	mov	r1, r4
 8007878:	4638      	mov	r0, r7
 800787a:	f7ff ffa5 	bl	80077c8 <_Bfree>
 800787e:	4644      	mov	r4, r8
 8007880:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007884:	3501      	adds	r5, #1
 8007886:	615e      	str	r6, [r3, #20]
 8007888:	6125      	str	r5, [r4, #16]
 800788a:	4620      	mov	r0, r4
 800788c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007890:	08009717 	.word	0x08009717
 8007894:	08009728 	.word	0x08009728

08007898 <__hi0bits>:
 8007898:	0c03      	lsrs	r3, r0, #16
 800789a:	041b      	lsls	r3, r3, #16
 800789c:	b9d3      	cbnz	r3, 80078d4 <__hi0bits+0x3c>
 800789e:	0400      	lsls	r0, r0, #16
 80078a0:	2310      	movs	r3, #16
 80078a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80078a6:	bf04      	itt	eq
 80078a8:	0200      	lsleq	r0, r0, #8
 80078aa:	3308      	addeq	r3, #8
 80078ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80078b0:	bf04      	itt	eq
 80078b2:	0100      	lsleq	r0, r0, #4
 80078b4:	3304      	addeq	r3, #4
 80078b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80078ba:	bf04      	itt	eq
 80078bc:	0080      	lsleq	r0, r0, #2
 80078be:	3302      	addeq	r3, #2
 80078c0:	2800      	cmp	r0, #0
 80078c2:	db05      	blt.n	80078d0 <__hi0bits+0x38>
 80078c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80078c8:	f103 0301 	add.w	r3, r3, #1
 80078cc:	bf08      	it	eq
 80078ce:	2320      	moveq	r3, #32
 80078d0:	4618      	mov	r0, r3
 80078d2:	4770      	bx	lr
 80078d4:	2300      	movs	r3, #0
 80078d6:	e7e4      	b.n	80078a2 <__hi0bits+0xa>

080078d8 <__lo0bits>:
 80078d8:	6803      	ldr	r3, [r0, #0]
 80078da:	f013 0207 	ands.w	r2, r3, #7
 80078de:	4601      	mov	r1, r0
 80078e0:	d00b      	beq.n	80078fa <__lo0bits+0x22>
 80078e2:	07da      	lsls	r2, r3, #31
 80078e4:	d423      	bmi.n	800792e <__lo0bits+0x56>
 80078e6:	0798      	lsls	r0, r3, #30
 80078e8:	bf49      	itett	mi
 80078ea:	085b      	lsrmi	r3, r3, #1
 80078ec:	089b      	lsrpl	r3, r3, #2
 80078ee:	2001      	movmi	r0, #1
 80078f0:	600b      	strmi	r3, [r1, #0]
 80078f2:	bf5c      	itt	pl
 80078f4:	600b      	strpl	r3, [r1, #0]
 80078f6:	2002      	movpl	r0, #2
 80078f8:	4770      	bx	lr
 80078fa:	b298      	uxth	r0, r3
 80078fc:	b9a8      	cbnz	r0, 800792a <__lo0bits+0x52>
 80078fe:	0c1b      	lsrs	r3, r3, #16
 8007900:	2010      	movs	r0, #16
 8007902:	b2da      	uxtb	r2, r3
 8007904:	b90a      	cbnz	r2, 800790a <__lo0bits+0x32>
 8007906:	3008      	adds	r0, #8
 8007908:	0a1b      	lsrs	r3, r3, #8
 800790a:	071a      	lsls	r2, r3, #28
 800790c:	bf04      	itt	eq
 800790e:	091b      	lsreq	r3, r3, #4
 8007910:	3004      	addeq	r0, #4
 8007912:	079a      	lsls	r2, r3, #30
 8007914:	bf04      	itt	eq
 8007916:	089b      	lsreq	r3, r3, #2
 8007918:	3002      	addeq	r0, #2
 800791a:	07da      	lsls	r2, r3, #31
 800791c:	d403      	bmi.n	8007926 <__lo0bits+0x4e>
 800791e:	085b      	lsrs	r3, r3, #1
 8007920:	f100 0001 	add.w	r0, r0, #1
 8007924:	d005      	beq.n	8007932 <__lo0bits+0x5a>
 8007926:	600b      	str	r3, [r1, #0]
 8007928:	4770      	bx	lr
 800792a:	4610      	mov	r0, r2
 800792c:	e7e9      	b.n	8007902 <__lo0bits+0x2a>
 800792e:	2000      	movs	r0, #0
 8007930:	4770      	bx	lr
 8007932:	2020      	movs	r0, #32
 8007934:	4770      	bx	lr
	...

08007938 <__i2b>:
 8007938:	b510      	push	{r4, lr}
 800793a:	460c      	mov	r4, r1
 800793c:	2101      	movs	r1, #1
 800793e:	f7ff ff03 	bl	8007748 <_Balloc>
 8007942:	4602      	mov	r2, r0
 8007944:	b928      	cbnz	r0, 8007952 <__i2b+0x1a>
 8007946:	4b05      	ldr	r3, [pc, #20]	; (800795c <__i2b+0x24>)
 8007948:	4805      	ldr	r0, [pc, #20]	; (8007960 <__i2b+0x28>)
 800794a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800794e:	f000 fce1 	bl	8008314 <__assert_func>
 8007952:	2301      	movs	r3, #1
 8007954:	6144      	str	r4, [r0, #20]
 8007956:	6103      	str	r3, [r0, #16]
 8007958:	bd10      	pop	{r4, pc}
 800795a:	bf00      	nop
 800795c:	08009717 	.word	0x08009717
 8007960:	08009728 	.word	0x08009728

08007964 <__multiply>:
 8007964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007968:	4691      	mov	r9, r2
 800796a:	690a      	ldr	r2, [r1, #16]
 800796c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007970:	429a      	cmp	r2, r3
 8007972:	bfb8      	it	lt
 8007974:	460b      	movlt	r3, r1
 8007976:	460c      	mov	r4, r1
 8007978:	bfbc      	itt	lt
 800797a:	464c      	movlt	r4, r9
 800797c:	4699      	movlt	r9, r3
 800797e:	6927      	ldr	r7, [r4, #16]
 8007980:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007984:	68a3      	ldr	r3, [r4, #8]
 8007986:	6861      	ldr	r1, [r4, #4]
 8007988:	eb07 060a 	add.w	r6, r7, sl
 800798c:	42b3      	cmp	r3, r6
 800798e:	b085      	sub	sp, #20
 8007990:	bfb8      	it	lt
 8007992:	3101      	addlt	r1, #1
 8007994:	f7ff fed8 	bl	8007748 <_Balloc>
 8007998:	b930      	cbnz	r0, 80079a8 <__multiply+0x44>
 800799a:	4602      	mov	r2, r0
 800799c:	4b44      	ldr	r3, [pc, #272]	; (8007ab0 <__multiply+0x14c>)
 800799e:	4845      	ldr	r0, [pc, #276]	; (8007ab4 <__multiply+0x150>)
 80079a0:	f240 115d 	movw	r1, #349	; 0x15d
 80079a4:	f000 fcb6 	bl	8008314 <__assert_func>
 80079a8:	f100 0514 	add.w	r5, r0, #20
 80079ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80079b0:	462b      	mov	r3, r5
 80079b2:	2200      	movs	r2, #0
 80079b4:	4543      	cmp	r3, r8
 80079b6:	d321      	bcc.n	80079fc <__multiply+0x98>
 80079b8:	f104 0314 	add.w	r3, r4, #20
 80079bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80079c0:	f109 0314 	add.w	r3, r9, #20
 80079c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80079c8:	9202      	str	r2, [sp, #8]
 80079ca:	1b3a      	subs	r2, r7, r4
 80079cc:	3a15      	subs	r2, #21
 80079ce:	f022 0203 	bic.w	r2, r2, #3
 80079d2:	3204      	adds	r2, #4
 80079d4:	f104 0115 	add.w	r1, r4, #21
 80079d8:	428f      	cmp	r7, r1
 80079da:	bf38      	it	cc
 80079dc:	2204      	movcc	r2, #4
 80079de:	9201      	str	r2, [sp, #4]
 80079e0:	9a02      	ldr	r2, [sp, #8]
 80079e2:	9303      	str	r3, [sp, #12]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d80c      	bhi.n	8007a02 <__multiply+0x9e>
 80079e8:	2e00      	cmp	r6, #0
 80079ea:	dd03      	ble.n	80079f4 <__multiply+0x90>
 80079ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d05a      	beq.n	8007aaa <__multiply+0x146>
 80079f4:	6106      	str	r6, [r0, #16]
 80079f6:	b005      	add	sp, #20
 80079f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079fc:	f843 2b04 	str.w	r2, [r3], #4
 8007a00:	e7d8      	b.n	80079b4 <__multiply+0x50>
 8007a02:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a06:	f1ba 0f00 	cmp.w	sl, #0
 8007a0a:	d024      	beq.n	8007a56 <__multiply+0xf2>
 8007a0c:	f104 0e14 	add.w	lr, r4, #20
 8007a10:	46a9      	mov	r9, r5
 8007a12:	f04f 0c00 	mov.w	ip, #0
 8007a16:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a1a:	f8d9 1000 	ldr.w	r1, [r9]
 8007a1e:	fa1f fb82 	uxth.w	fp, r2
 8007a22:	b289      	uxth	r1, r1
 8007a24:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a28:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007a2c:	f8d9 2000 	ldr.w	r2, [r9]
 8007a30:	4461      	add	r1, ip
 8007a32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a36:	fb0a c20b 	mla	r2, sl, fp, ip
 8007a3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007a3e:	b289      	uxth	r1, r1
 8007a40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a44:	4577      	cmp	r7, lr
 8007a46:	f849 1b04 	str.w	r1, [r9], #4
 8007a4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a4e:	d8e2      	bhi.n	8007a16 <__multiply+0xb2>
 8007a50:	9a01      	ldr	r2, [sp, #4]
 8007a52:	f845 c002 	str.w	ip, [r5, r2]
 8007a56:	9a03      	ldr	r2, [sp, #12]
 8007a58:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a5c:	3304      	adds	r3, #4
 8007a5e:	f1b9 0f00 	cmp.w	r9, #0
 8007a62:	d020      	beq.n	8007aa6 <__multiply+0x142>
 8007a64:	6829      	ldr	r1, [r5, #0]
 8007a66:	f104 0c14 	add.w	ip, r4, #20
 8007a6a:	46ae      	mov	lr, r5
 8007a6c:	f04f 0a00 	mov.w	sl, #0
 8007a70:	f8bc b000 	ldrh.w	fp, [ip]
 8007a74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007a78:	fb09 220b 	mla	r2, r9, fp, r2
 8007a7c:	4492      	add	sl, r2
 8007a7e:	b289      	uxth	r1, r1
 8007a80:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007a84:	f84e 1b04 	str.w	r1, [lr], #4
 8007a88:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007a8c:	f8be 1000 	ldrh.w	r1, [lr]
 8007a90:	0c12      	lsrs	r2, r2, #16
 8007a92:	fb09 1102 	mla	r1, r9, r2, r1
 8007a96:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007a9a:	4567      	cmp	r7, ip
 8007a9c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007aa0:	d8e6      	bhi.n	8007a70 <__multiply+0x10c>
 8007aa2:	9a01      	ldr	r2, [sp, #4]
 8007aa4:	50a9      	str	r1, [r5, r2]
 8007aa6:	3504      	adds	r5, #4
 8007aa8:	e79a      	b.n	80079e0 <__multiply+0x7c>
 8007aaa:	3e01      	subs	r6, #1
 8007aac:	e79c      	b.n	80079e8 <__multiply+0x84>
 8007aae:	bf00      	nop
 8007ab0:	08009717 	.word	0x08009717
 8007ab4:	08009728 	.word	0x08009728

08007ab8 <__pow5mult>:
 8007ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007abc:	4615      	mov	r5, r2
 8007abe:	f012 0203 	ands.w	r2, r2, #3
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	460f      	mov	r7, r1
 8007ac6:	d007      	beq.n	8007ad8 <__pow5mult+0x20>
 8007ac8:	4c25      	ldr	r4, [pc, #148]	; (8007b60 <__pow5mult+0xa8>)
 8007aca:	3a01      	subs	r2, #1
 8007acc:	2300      	movs	r3, #0
 8007ace:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ad2:	f7ff fe9b 	bl	800780c <__multadd>
 8007ad6:	4607      	mov	r7, r0
 8007ad8:	10ad      	asrs	r5, r5, #2
 8007ada:	d03d      	beq.n	8007b58 <__pow5mult+0xa0>
 8007adc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007ade:	b97c      	cbnz	r4, 8007b00 <__pow5mult+0x48>
 8007ae0:	2010      	movs	r0, #16
 8007ae2:	f7ff fe1b 	bl	800771c <malloc>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	6270      	str	r0, [r6, #36]	; 0x24
 8007aea:	b928      	cbnz	r0, 8007af8 <__pow5mult+0x40>
 8007aec:	4b1d      	ldr	r3, [pc, #116]	; (8007b64 <__pow5mult+0xac>)
 8007aee:	481e      	ldr	r0, [pc, #120]	; (8007b68 <__pow5mult+0xb0>)
 8007af0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007af4:	f000 fc0e 	bl	8008314 <__assert_func>
 8007af8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007afc:	6004      	str	r4, [r0, #0]
 8007afe:	60c4      	str	r4, [r0, #12]
 8007b00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007b04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b08:	b94c      	cbnz	r4, 8007b1e <__pow5mult+0x66>
 8007b0a:	f240 2171 	movw	r1, #625	; 0x271
 8007b0e:	4630      	mov	r0, r6
 8007b10:	f7ff ff12 	bl	8007938 <__i2b>
 8007b14:	2300      	movs	r3, #0
 8007b16:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b1a:	4604      	mov	r4, r0
 8007b1c:	6003      	str	r3, [r0, #0]
 8007b1e:	f04f 0900 	mov.w	r9, #0
 8007b22:	07eb      	lsls	r3, r5, #31
 8007b24:	d50a      	bpl.n	8007b3c <__pow5mult+0x84>
 8007b26:	4639      	mov	r1, r7
 8007b28:	4622      	mov	r2, r4
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	f7ff ff1a 	bl	8007964 <__multiply>
 8007b30:	4639      	mov	r1, r7
 8007b32:	4680      	mov	r8, r0
 8007b34:	4630      	mov	r0, r6
 8007b36:	f7ff fe47 	bl	80077c8 <_Bfree>
 8007b3a:	4647      	mov	r7, r8
 8007b3c:	106d      	asrs	r5, r5, #1
 8007b3e:	d00b      	beq.n	8007b58 <__pow5mult+0xa0>
 8007b40:	6820      	ldr	r0, [r4, #0]
 8007b42:	b938      	cbnz	r0, 8007b54 <__pow5mult+0x9c>
 8007b44:	4622      	mov	r2, r4
 8007b46:	4621      	mov	r1, r4
 8007b48:	4630      	mov	r0, r6
 8007b4a:	f7ff ff0b 	bl	8007964 <__multiply>
 8007b4e:	6020      	str	r0, [r4, #0]
 8007b50:	f8c0 9000 	str.w	r9, [r0]
 8007b54:	4604      	mov	r4, r0
 8007b56:	e7e4      	b.n	8007b22 <__pow5mult+0x6a>
 8007b58:	4638      	mov	r0, r7
 8007b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b5e:	bf00      	nop
 8007b60:	08009878 	.word	0x08009878
 8007b64:	080096a5 	.word	0x080096a5
 8007b68:	08009728 	.word	0x08009728

08007b6c <__lshift>:
 8007b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b70:	460c      	mov	r4, r1
 8007b72:	6849      	ldr	r1, [r1, #4]
 8007b74:	6923      	ldr	r3, [r4, #16]
 8007b76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b7a:	68a3      	ldr	r3, [r4, #8]
 8007b7c:	4607      	mov	r7, r0
 8007b7e:	4691      	mov	r9, r2
 8007b80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b84:	f108 0601 	add.w	r6, r8, #1
 8007b88:	42b3      	cmp	r3, r6
 8007b8a:	db0b      	blt.n	8007ba4 <__lshift+0x38>
 8007b8c:	4638      	mov	r0, r7
 8007b8e:	f7ff fddb 	bl	8007748 <_Balloc>
 8007b92:	4605      	mov	r5, r0
 8007b94:	b948      	cbnz	r0, 8007baa <__lshift+0x3e>
 8007b96:	4602      	mov	r2, r0
 8007b98:	4b2a      	ldr	r3, [pc, #168]	; (8007c44 <__lshift+0xd8>)
 8007b9a:	482b      	ldr	r0, [pc, #172]	; (8007c48 <__lshift+0xdc>)
 8007b9c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007ba0:	f000 fbb8 	bl	8008314 <__assert_func>
 8007ba4:	3101      	adds	r1, #1
 8007ba6:	005b      	lsls	r3, r3, #1
 8007ba8:	e7ee      	b.n	8007b88 <__lshift+0x1c>
 8007baa:	2300      	movs	r3, #0
 8007bac:	f100 0114 	add.w	r1, r0, #20
 8007bb0:	f100 0210 	add.w	r2, r0, #16
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	4553      	cmp	r3, sl
 8007bb8:	db37      	blt.n	8007c2a <__lshift+0xbe>
 8007bba:	6920      	ldr	r0, [r4, #16]
 8007bbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007bc0:	f104 0314 	add.w	r3, r4, #20
 8007bc4:	f019 091f 	ands.w	r9, r9, #31
 8007bc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bcc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007bd0:	d02f      	beq.n	8007c32 <__lshift+0xc6>
 8007bd2:	f1c9 0e20 	rsb	lr, r9, #32
 8007bd6:	468a      	mov	sl, r1
 8007bd8:	f04f 0c00 	mov.w	ip, #0
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	fa02 f209 	lsl.w	r2, r2, r9
 8007be2:	ea42 020c 	orr.w	r2, r2, ip
 8007be6:	f84a 2b04 	str.w	r2, [sl], #4
 8007bea:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bee:	4298      	cmp	r0, r3
 8007bf0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007bf4:	d8f2      	bhi.n	8007bdc <__lshift+0x70>
 8007bf6:	1b03      	subs	r3, r0, r4
 8007bf8:	3b15      	subs	r3, #21
 8007bfa:	f023 0303 	bic.w	r3, r3, #3
 8007bfe:	3304      	adds	r3, #4
 8007c00:	f104 0215 	add.w	r2, r4, #21
 8007c04:	4290      	cmp	r0, r2
 8007c06:	bf38      	it	cc
 8007c08:	2304      	movcc	r3, #4
 8007c0a:	f841 c003 	str.w	ip, [r1, r3]
 8007c0e:	f1bc 0f00 	cmp.w	ip, #0
 8007c12:	d001      	beq.n	8007c18 <__lshift+0xac>
 8007c14:	f108 0602 	add.w	r6, r8, #2
 8007c18:	3e01      	subs	r6, #1
 8007c1a:	4638      	mov	r0, r7
 8007c1c:	612e      	str	r6, [r5, #16]
 8007c1e:	4621      	mov	r1, r4
 8007c20:	f7ff fdd2 	bl	80077c8 <_Bfree>
 8007c24:	4628      	mov	r0, r5
 8007c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c2e:	3301      	adds	r3, #1
 8007c30:	e7c1      	b.n	8007bb6 <__lshift+0x4a>
 8007c32:	3904      	subs	r1, #4
 8007c34:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c38:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c3c:	4298      	cmp	r0, r3
 8007c3e:	d8f9      	bhi.n	8007c34 <__lshift+0xc8>
 8007c40:	e7ea      	b.n	8007c18 <__lshift+0xac>
 8007c42:	bf00      	nop
 8007c44:	08009717 	.word	0x08009717
 8007c48:	08009728 	.word	0x08009728

08007c4c <__mcmp>:
 8007c4c:	b530      	push	{r4, r5, lr}
 8007c4e:	6902      	ldr	r2, [r0, #16]
 8007c50:	690c      	ldr	r4, [r1, #16]
 8007c52:	1b12      	subs	r2, r2, r4
 8007c54:	d10e      	bne.n	8007c74 <__mcmp+0x28>
 8007c56:	f100 0314 	add.w	r3, r0, #20
 8007c5a:	3114      	adds	r1, #20
 8007c5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007c60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007c64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007c68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007c6c:	42a5      	cmp	r5, r4
 8007c6e:	d003      	beq.n	8007c78 <__mcmp+0x2c>
 8007c70:	d305      	bcc.n	8007c7e <__mcmp+0x32>
 8007c72:	2201      	movs	r2, #1
 8007c74:	4610      	mov	r0, r2
 8007c76:	bd30      	pop	{r4, r5, pc}
 8007c78:	4283      	cmp	r3, r0
 8007c7a:	d3f3      	bcc.n	8007c64 <__mcmp+0x18>
 8007c7c:	e7fa      	b.n	8007c74 <__mcmp+0x28>
 8007c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c82:	e7f7      	b.n	8007c74 <__mcmp+0x28>

08007c84 <__mdiff>:
 8007c84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c88:	460c      	mov	r4, r1
 8007c8a:	4606      	mov	r6, r0
 8007c8c:	4611      	mov	r1, r2
 8007c8e:	4620      	mov	r0, r4
 8007c90:	4690      	mov	r8, r2
 8007c92:	f7ff ffdb 	bl	8007c4c <__mcmp>
 8007c96:	1e05      	subs	r5, r0, #0
 8007c98:	d110      	bne.n	8007cbc <__mdiff+0x38>
 8007c9a:	4629      	mov	r1, r5
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	f7ff fd53 	bl	8007748 <_Balloc>
 8007ca2:	b930      	cbnz	r0, 8007cb2 <__mdiff+0x2e>
 8007ca4:	4b3a      	ldr	r3, [pc, #232]	; (8007d90 <__mdiff+0x10c>)
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	f240 2132 	movw	r1, #562	; 0x232
 8007cac:	4839      	ldr	r0, [pc, #228]	; (8007d94 <__mdiff+0x110>)
 8007cae:	f000 fb31 	bl	8008314 <__assert_func>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007cb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cbc:	bfa4      	itt	ge
 8007cbe:	4643      	movge	r3, r8
 8007cc0:	46a0      	movge	r8, r4
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007cc8:	bfa6      	itte	ge
 8007cca:	461c      	movge	r4, r3
 8007ccc:	2500      	movge	r5, #0
 8007cce:	2501      	movlt	r5, #1
 8007cd0:	f7ff fd3a 	bl	8007748 <_Balloc>
 8007cd4:	b920      	cbnz	r0, 8007ce0 <__mdiff+0x5c>
 8007cd6:	4b2e      	ldr	r3, [pc, #184]	; (8007d90 <__mdiff+0x10c>)
 8007cd8:	4602      	mov	r2, r0
 8007cda:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007cde:	e7e5      	b.n	8007cac <__mdiff+0x28>
 8007ce0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007ce4:	6926      	ldr	r6, [r4, #16]
 8007ce6:	60c5      	str	r5, [r0, #12]
 8007ce8:	f104 0914 	add.w	r9, r4, #20
 8007cec:	f108 0514 	add.w	r5, r8, #20
 8007cf0:	f100 0e14 	add.w	lr, r0, #20
 8007cf4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007cf8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007cfc:	f108 0210 	add.w	r2, r8, #16
 8007d00:	46f2      	mov	sl, lr
 8007d02:	2100      	movs	r1, #0
 8007d04:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d08:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007d0c:	fa1f f883 	uxth.w	r8, r3
 8007d10:	fa11 f18b 	uxtah	r1, r1, fp
 8007d14:	0c1b      	lsrs	r3, r3, #16
 8007d16:	eba1 0808 	sub.w	r8, r1, r8
 8007d1a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d1e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007d22:	fa1f f888 	uxth.w	r8, r8
 8007d26:	1419      	asrs	r1, r3, #16
 8007d28:	454e      	cmp	r6, r9
 8007d2a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007d2e:	f84a 3b04 	str.w	r3, [sl], #4
 8007d32:	d8e7      	bhi.n	8007d04 <__mdiff+0x80>
 8007d34:	1b33      	subs	r3, r6, r4
 8007d36:	3b15      	subs	r3, #21
 8007d38:	f023 0303 	bic.w	r3, r3, #3
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	3415      	adds	r4, #21
 8007d40:	42a6      	cmp	r6, r4
 8007d42:	bf38      	it	cc
 8007d44:	2304      	movcc	r3, #4
 8007d46:	441d      	add	r5, r3
 8007d48:	4473      	add	r3, lr
 8007d4a:	469e      	mov	lr, r3
 8007d4c:	462e      	mov	r6, r5
 8007d4e:	4566      	cmp	r6, ip
 8007d50:	d30e      	bcc.n	8007d70 <__mdiff+0xec>
 8007d52:	f10c 0203 	add.w	r2, ip, #3
 8007d56:	1b52      	subs	r2, r2, r5
 8007d58:	f022 0203 	bic.w	r2, r2, #3
 8007d5c:	3d03      	subs	r5, #3
 8007d5e:	45ac      	cmp	ip, r5
 8007d60:	bf38      	it	cc
 8007d62:	2200      	movcc	r2, #0
 8007d64:	441a      	add	r2, r3
 8007d66:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007d6a:	b17b      	cbz	r3, 8007d8c <__mdiff+0x108>
 8007d6c:	6107      	str	r7, [r0, #16]
 8007d6e:	e7a3      	b.n	8007cb8 <__mdiff+0x34>
 8007d70:	f856 8b04 	ldr.w	r8, [r6], #4
 8007d74:	fa11 f288 	uxtah	r2, r1, r8
 8007d78:	1414      	asrs	r4, r2, #16
 8007d7a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007d7e:	b292      	uxth	r2, r2
 8007d80:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007d84:	f84e 2b04 	str.w	r2, [lr], #4
 8007d88:	1421      	asrs	r1, r4, #16
 8007d8a:	e7e0      	b.n	8007d4e <__mdiff+0xca>
 8007d8c:	3f01      	subs	r7, #1
 8007d8e:	e7ea      	b.n	8007d66 <__mdiff+0xe2>
 8007d90:	08009717 	.word	0x08009717
 8007d94:	08009728 	.word	0x08009728

08007d98 <__d2b>:
 8007d98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d9c:	4689      	mov	r9, r1
 8007d9e:	2101      	movs	r1, #1
 8007da0:	ec57 6b10 	vmov	r6, r7, d0
 8007da4:	4690      	mov	r8, r2
 8007da6:	f7ff fccf 	bl	8007748 <_Balloc>
 8007daa:	4604      	mov	r4, r0
 8007dac:	b930      	cbnz	r0, 8007dbc <__d2b+0x24>
 8007dae:	4602      	mov	r2, r0
 8007db0:	4b25      	ldr	r3, [pc, #148]	; (8007e48 <__d2b+0xb0>)
 8007db2:	4826      	ldr	r0, [pc, #152]	; (8007e4c <__d2b+0xb4>)
 8007db4:	f240 310a 	movw	r1, #778	; 0x30a
 8007db8:	f000 faac 	bl	8008314 <__assert_func>
 8007dbc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007dc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007dc4:	bb35      	cbnz	r5, 8007e14 <__d2b+0x7c>
 8007dc6:	2e00      	cmp	r6, #0
 8007dc8:	9301      	str	r3, [sp, #4]
 8007dca:	d028      	beq.n	8007e1e <__d2b+0x86>
 8007dcc:	4668      	mov	r0, sp
 8007dce:	9600      	str	r6, [sp, #0]
 8007dd0:	f7ff fd82 	bl	80078d8 <__lo0bits>
 8007dd4:	9900      	ldr	r1, [sp, #0]
 8007dd6:	b300      	cbz	r0, 8007e1a <__d2b+0x82>
 8007dd8:	9a01      	ldr	r2, [sp, #4]
 8007dda:	f1c0 0320 	rsb	r3, r0, #32
 8007dde:	fa02 f303 	lsl.w	r3, r2, r3
 8007de2:	430b      	orrs	r3, r1
 8007de4:	40c2      	lsrs	r2, r0
 8007de6:	6163      	str	r3, [r4, #20]
 8007de8:	9201      	str	r2, [sp, #4]
 8007dea:	9b01      	ldr	r3, [sp, #4]
 8007dec:	61a3      	str	r3, [r4, #24]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	bf14      	ite	ne
 8007df2:	2202      	movne	r2, #2
 8007df4:	2201      	moveq	r2, #1
 8007df6:	6122      	str	r2, [r4, #16]
 8007df8:	b1d5      	cbz	r5, 8007e30 <__d2b+0x98>
 8007dfa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007dfe:	4405      	add	r5, r0
 8007e00:	f8c9 5000 	str.w	r5, [r9]
 8007e04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e08:	f8c8 0000 	str.w	r0, [r8]
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	b003      	add	sp, #12
 8007e10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e18:	e7d5      	b.n	8007dc6 <__d2b+0x2e>
 8007e1a:	6161      	str	r1, [r4, #20]
 8007e1c:	e7e5      	b.n	8007dea <__d2b+0x52>
 8007e1e:	a801      	add	r0, sp, #4
 8007e20:	f7ff fd5a 	bl	80078d8 <__lo0bits>
 8007e24:	9b01      	ldr	r3, [sp, #4]
 8007e26:	6163      	str	r3, [r4, #20]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	6122      	str	r2, [r4, #16]
 8007e2c:	3020      	adds	r0, #32
 8007e2e:	e7e3      	b.n	8007df8 <__d2b+0x60>
 8007e30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e38:	f8c9 0000 	str.w	r0, [r9]
 8007e3c:	6918      	ldr	r0, [r3, #16]
 8007e3e:	f7ff fd2b 	bl	8007898 <__hi0bits>
 8007e42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007e46:	e7df      	b.n	8007e08 <__d2b+0x70>
 8007e48:	08009717 	.word	0x08009717
 8007e4c:	08009728 	.word	0x08009728

08007e50 <_calloc_r>:
 8007e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e52:	fba1 2402 	umull	r2, r4, r1, r2
 8007e56:	b94c      	cbnz	r4, 8007e6c <_calloc_r+0x1c>
 8007e58:	4611      	mov	r1, r2
 8007e5a:	9201      	str	r2, [sp, #4]
 8007e5c:	f000 f87a 	bl	8007f54 <_malloc_r>
 8007e60:	9a01      	ldr	r2, [sp, #4]
 8007e62:	4605      	mov	r5, r0
 8007e64:	b930      	cbnz	r0, 8007e74 <_calloc_r+0x24>
 8007e66:	4628      	mov	r0, r5
 8007e68:	b003      	add	sp, #12
 8007e6a:	bd30      	pop	{r4, r5, pc}
 8007e6c:	220c      	movs	r2, #12
 8007e6e:	6002      	str	r2, [r0, #0]
 8007e70:	2500      	movs	r5, #0
 8007e72:	e7f8      	b.n	8007e66 <_calloc_r+0x16>
 8007e74:	4621      	mov	r1, r4
 8007e76:	f7fe f941 	bl	80060fc <memset>
 8007e7a:	e7f4      	b.n	8007e66 <_calloc_r+0x16>

08007e7c <_free_r>:
 8007e7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e7e:	2900      	cmp	r1, #0
 8007e80:	d044      	beq.n	8007f0c <_free_r+0x90>
 8007e82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e86:	9001      	str	r0, [sp, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f1a1 0404 	sub.w	r4, r1, #4
 8007e8e:	bfb8      	it	lt
 8007e90:	18e4      	addlt	r4, r4, r3
 8007e92:	f000 fa9b 	bl	80083cc <__malloc_lock>
 8007e96:	4a1e      	ldr	r2, [pc, #120]	; (8007f10 <_free_r+0x94>)
 8007e98:	9801      	ldr	r0, [sp, #4]
 8007e9a:	6813      	ldr	r3, [r2, #0]
 8007e9c:	b933      	cbnz	r3, 8007eac <_free_r+0x30>
 8007e9e:	6063      	str	r3, [r4, #4]
 8007ea0:	6014      	str	r4, [r2, #0]
 8007ea2:	b003      	add	sp, #12
 8007ea4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ea8:	f000 ba96 	b.w	80083d8 <__malloc_unlock>
 8007eac:	42a3      	cmp	r3, r4
 8007eae:	d908      	bls.n	8007ec2 <_free_r+0x46>
 8007eb0:	6825      	ldr	r5, [r4, #0]
 8007eb2:	1961      	adds	r1, r4, r5
 8007eb4:	428b      	cmp	r3, r1
 8007eb6:	bf01      	itttt	eq
 8007eb8:	6819      	ldreq	r1, [r3, #0]
 8007eba:	685b      	ldreq	r3, [r3, #4]
 8007ebc:	1949      	addeq	r1, r1, r5
 8007ebe:	6021      	streq	r1, [r4, #0]
 8007ec0:	e7ed      	b.n	8007e9e <_free_r+0x22>
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	b10b      	cbz	r3, 8007ecc <_free_r+0x50>
 8007ec8:	42a3      	cmp	r3, r4
 8007eca:	d9fa      	bls.n	8007ec2 <_free_r+0x46>
 8007ecc:	6811      	ldr	r1, [r2, #0]
 8007ece:	1855      	adds	r5, r2, r1
 8007ed0:	42a5      	cmp	r5, r4
 8007ed2:	d10b      	bne.n	8007eec <_free_r+0x70>
 8007ed4:	6824      	ldr	r4, [r4, #0]
 8007ed6:	4421      	add	r1, r4
 8007ed8:	1854      	adds	r4, r2, r1
 8007eda:	42a3      	cmp	r3, r4
 8007edc:	6011      	str	r1, [r2, #0]
 8007ede:	d1e0      	bne.n	8007ea2 <_free_r+0x26>
 8007ee0:	681c      	ldr	r4, [r3, #0]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	6053      	str	r3, [r2, #4]
 8007ee6:	4421      	add	r1, r4
 8007ee8:	6011      	str	r1, [r2, #0]
 8007eea:	e7da      	b.n	8007ea2 <_free_r+0x26>
 8007eec:	d902      	bls.n	8007ef4 <_free_r+0x78>
 8007eee:	230c      	movs	r3, #12
 8007ef0:	6003      	str	r3, [r0, #0]
 8007ef2:	e7d6      	b.n	8007ea2 <_free_r+0x26>
 8007ef4:	6825      	ldr	r5, [r4, #0]
 8007ef6:	1961      	adds	r1, r4, r5
 8007ef8:	428b      	cmp	r3, r1
 8007efa:	bf04      	itt	eq
 8007efc:	6819      	ldreq	r1, [r3, #0]
 8007efe:	685b      	ldreq	r3, [r3, #4]
 8007f00:	6063      	str	r3, [r4, #4]
 8007f02:	bf04      	itt	eq
 8007f04:	1949      	addeq	r1, r1, r5
 8007f06:	6021      	streq	r1, [r4, #0]
 8007f08:	6054      	str	r4, [r2, #4]
 8007f0a:	e7ca      	b.n	8007ea2 <_free_r+0x26>
 8007f0c:	b003      	add	sp, #12
 8007f0e:	bd30      	pop	{r4, r5, pc}
 8007f10:	20000460 	.word	0x20000460

08007f14 <sbrk_aligned>:
 8007f14:	b570      	push	{r4, r5, r6, lr}
 8007f16:	4e0e      	ldr	r6, [pc, #56]	; (8007f50 <sbrk_aligned+0x3c>)
 8007f18:	460c      	mov	r4, r1
 8007f1a:	6831      	ldr	r1, [r6, #0]
 8007f1c:	4605      	mov	r5, r0
 8007f1e:	b911      	cbnz	r1, 8007f26 <sbrk_aligned+0x12>
 8007f20:	f000 f9e8 	bl	80082f4 <_sbrk_r>
 8007f24:	6030      	str	r0, [r6, #0]
 8007f26:	4621      	mov	r1, r4
 8007f28:	4628      	mov	r0, r5
 8007f2a:	f000 f9e3 	bl	80082f4 <_sbrk_r>
 8007f2e:	1c43      	adds	r3, r0, #1
 8007f30:	d00a      	beq.n	8007f48 <sbrk_aligned+0x34>
 8007f32:	1cc4      	adds	r4, r0, #3
 8007f34:	f024 0403 	bic.w	r4, r4, #3
 8007f38:	42a0      	cmp	r0, r4
 8007f3a:	d007      	beq.n	8007f4c <sbrk_aligned+0x38>
 8007f3c:	1a21      	subs	r1, r4, r0
 8007f3e:	4628      	mov	r0, r5
 8007f40:	f000 f9d8 	bl	80082f4 <_sbrk_r>
 8007f44:	3001      	adds	r0, #1
 8007f46:	d101      	bne.n	8007f4c <sbrk_aligned+0x38>
 8007f48:	f04f 34ff 	mov.w	r4, #4294967295
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	bd70      	pop	{r4, r5, r6, pc}
 8007f50:	20000464 	.word	0x20000464

08007f54 <_malloc_r>:
 8007f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f58:	1ccd      	adds	r5, r1, #3
 8007f5a:	f025 0503 	bic.w	r5, r5, #3
 8007f5e:	3508      	adds	r5, #8
 8007f60:	2d0c      	cmp	r5, #12
 8007f62:	bf38      	it	cc
 8007f64:	250c      	movcc	r5, #12
 8007f66:	2d00      	cmp	r5, #0
 8007f68:	4607      	mov	r7, r0
 8007f6a:	db01      	blt.n	8007f70 <_malloc_r+0x1c>
 8007f6c:	42a9      	cmp	r1, r5
 8007f6e:	d905      	bls.n	8007f7c <_malloc_r+0x28>
 8007f70:	230c      	movs	r3, #12
 8007f72:	603b      	str	r3, [r7, #0]
 8007f74:	2600      	movs	r6, #0
 8007f76:	4630      	mov	r0, r6
 8007f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f7c:	4e2e      	ldr	r6, [pc, #184]	; (8008038 <_malloc_r+0xe4>)
 8007f7e:	f000 fa25 	bl	80083cc <__malloc_lock>
 8007f82:	6833      	ldr	r3, [r6, #0]
 8007f84:	461c      	mov	r4, r3
 8007f86:	bb34      	cbnz	r4, 8007fd6 <_malloc_r+0x82>
 8007f88:	4629      	mov	r1, r5
 8007f8a:	4638      	mov	r0, r7
 8007f8c:	f7ff ffc2 	bl	8007f14 <sbrk_aligned>
 8007f90:	1c43      	adds	r3, r0, #1
 8007f92:	4604      	mov	r4, r0
 8007f94:	d14d      	bne.n	8008032 <_malloc_r+0xde>
 8007f96:	6834      	ldr	r4, [r6, #0]
 8007f98:	4626      	mov	r6, r4
 8007f9a:	2e00      	cmp	r6, #0
 8007f9c:	d140      	bne.n	8008020 <_malloc_r+0xcc>
 8007f9e:	6823      	ldr	r3, [r4, #0]
 8007fa0:	4631      	mov	r1, r6
 8007fa2:	4638      	mov	r0, r7
 8007fa4:	eb04 0803 	add.w	r8, r4, r3
 8007fa8:	f000 f9a4 	bl	80082f4 <_sbrk_r>
 8007fac:	4580      	cmp	r8, r0
 8007fae:	d13a      	bne.n	8008026 <_malloc_r+0xd2>
 8007fb0:	6821      	ldr	r1, [r4, #0]
 8007fb2:	3503      	adds	r5, #3
 8007fb4:	1a6d      	subs	r5, r5, r1
 8007fb6:	f025 0503 	bic.w	r5, r5, #3
 8007fba:	3508      	adds	r5, #8
 8007fbc:	2d0c      	cmp	r5, #12
 8007fbe:	bf38      	it	cc
 8007fc0:	250c      	movcc	r5, #12
 8007fc2:	4629      	mov	r1, r5
 8007fc4:	4638      	mov	r0, r7
 8007fc6:	f7ff ffa5 	bl	8007f14 <sbrk_aligned>
 8007fca:	3001      	adds	r0, #1
 8007fcc:	d02b      	beq.n	8008026 <_malloc_r+0xd2>
 8007fce:	6823      	ldr	r3, [r4, #0]
 8007fd0:	442b      	add	r3, r5
 8007fd2:	6023      	str	r3, [r4, #0]
 8007fd4:	e00e      	b.n	8007ff4 <_malloc_r+0xa0>
 8007fd6:	6822      	ldr	r2, [r4, #0]
 8007fd8:	1b52      	subs	r2, r2, r5
 8007fda:	d41e      	bmi.n	800801a <_malloc_r+0xc6>
 8007fdc:	2a0b      	cmp	r2, #11
 8007fde:	d916      	bls.n	800800e <_malloc_r+0xba>
 8007fe0:	1961      	adds	r1, r4, r5
 8007fe2:	42a3      	cmp	r3, r4
 8007fe4:	6025      	str	r5, [r4, #0]
 8007fe6:	bf18      	it	ne
 8007fe8:	6059      	strne	r1, [r3, #4]
 8007fea:	6863      	ldr	r3, [r4, #4]
 8007fec:	bf08      	it	eq
 8007fee:	6031      	streq	r1, [r6, #0]
 8007ff0:	5162      	str	r2, [r4, r5]
 8007ff2:	604b      	str	r3, [r1, #4]
 8007ff4:	4638      	mov	r0, r7
 8007ff6:	f104 060b 	add.w	r6, r4, #11
 8007ffa:	f000 f9ed 	bl	80083d8 <__malloc_unlock>
 8007ffe:	f026 0607 	bic.w	r6, r6, #7
 8008002:	1d23      	adds	r3, r4, #4
 8008004:	1af2      	subs	r2, r6, r3
 8008006:	d0b6      	beq.n	8007f76 <_malloc_r+0x22>
 8008008:	1b9b      	subs	r3, r3, r6
 800800a:	50a3      	str	r3, [r4, r2]
 800800c:	e7b3      	b.n	8007f76 <_malloc_r+0x22>
 800800e:	6862      	ldr	r2, [r4, #4]
 8008010:	42a3      	cmp	r3, r4
 8008012:	bf0c      	ite	eq
 8008014:	6032      	streq	r2, [r6, #0]
 8008016:	605a      	strne	r2, [r3, #4]
 8008018:	e7ec      	b.n	8007ff4 <_malloc_r+0xa0>
 800801a:	4623      	mov	r3, r4
 800801c:	6864      	ldr	r4, [r4, #4]
 800801e:	e7b2      	b.n	8007f86 <_malloc_r+0x32>
 8008020:	4634      	mov	r4, r6
 8008022:	6876      	ldr	r6, [r6, #4]
 8008024:	e7b9      	b.n	8007f9a <_malloc_r+0x46>
 8008026:	230c      	movs	r3, #12
 8008028:	603b      	str	r3, [r7, #0]
 800802a:	4638      	mov	r0, r7
 800802c:	f000 f9d4 	bl	80083d8 <__malloc_unlock>
 8008030:	e7a1      	b.n	8007f76 <_malloc_r+0x22>
 8008032:	6025      	str	r5, [r4, #0]
 8008034:	e7de      	b.n	8007ff4 <_malloc_r+0xa0>
 8008036:	bf00      	nop
 8008038:	20000460 	.word	0x20000460

0800803c <__ssputs_r>:
 800803c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008040:	688e      	ldr	r6, [r1, #8]
 8008042:	429e      	cmp	r6, r3
 8008044:	4682      	mov	sl, r0
 8008046:	460c      	mov	r4, r1
 8008048:	4690      	mov	r8, r2
 800804a:	461f      	mov	r7, r3
 800804c:	d838      	bhi.n	80080c0 <__ssputs_r+0x84>
 800804e:	898a      	ldrh	r2, [r1, #12]
 8008050:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008054:	d032      	beq.n	80080bc <__ssputs_r+0x80>
 8008056:	6825      	ldr	r5, [r4, #0]
 8008058:	6909      	ldr	r1, [r1, #16]
 800805a:	eba5 0901 	sub.w	r9, r5, r1
 800805e:	6965      	ldr	r5, [r4, #20]
 8008060:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008064:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008068:	3301      	adds	r3, #1
 800806a:	444b      	add	r3, r9
 800806c:	106d      	asrs	r5, r5, #1
 800806e:	429d      	cmp	r5, r3
 8008070:	bf38      	it	cc
 8008072:	461d      	movcc	r5, r3
 8008074:	0553      	lsls	r3, r2, #21
 8008076:	d531      	bpl.n	80080dc <__ssputs_r+0xa0>
 8008078:	4629      	mov	r1, r5
 800807a:	f7ff ff6b 	bl	8007f54 <_malloc_r>
 800807e:	4606      	mov	r6, r0
 8008080:	b950      	cbnz	r0, 8008098 <__ssputs_r+0x5c>
 8008082:	230c      	movs	r3, #12
 8008084:	f8ca 3000 	str.w	r3, [sl]
 8008088:	89a3      	ldrh	r3, [r4, #12]
 800808a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800808e:	81a3      	strh	r3, [r4, #12]
 8008090:	f04f 30ff 	mov.w	r0, #4294967295
 8008094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008098:	6921      	ldr	r1, [r4, #16]
 800809a:	464a      	mov	r2, r9
 800809c:	f7ff fb46 	bl	800772c <memcpy>
 80080a0:	89a3      	ldrh	r3, [r4, #12]
 80080a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080aa:	81a3      	strh	r3, [r4, #12]
 80080ac:	6126      	str	r6, [r4, #16]
 80080ae:	6165      	str	r5, [r4, #20]
 80080b0:	444e      	add	r6, r9
 80080b2:	eba5 0509 	sub.w	r5, r5, r9
 80080b6:	6026      	str	r6, [r4, #0]
 80080b8:	60a5      	str	r5, [r4, #8]
 80080ba:	463e      	mov	r6, r7
 80080bc:	42be      	cmp	r6, r7
 80080be:	d900      	bls.n	80080c2 <__ssputs_r+0x86>
 80080c0:	463e      	mov	r6, r7
 80080c2:	6820      	ldr	r0, [r4, #0]
 80080c4:	4632      	mov	r2, r6
 80080c6:	4641      	mov	r1, r8
 80080c8:	f000 f966 	bl	8008398 <memmove>
 80080cc:	68a3      	ldr	r3, [r4, #8]
 80080ce:	1b9b      	subs	r3, r3, r6
 80080d0:	60a3      	str	r3, [r4, #8]
 80080d2:	6823      	ldr	r3, [r4, #0]
 80080d4:	4433      	add	r3, r6
 80080d6:	6023      	str	r3, [r4, #0]
 80080d8:	2000      	movs	r0, #0
 80080da:	e7db      	b.n	8008094 <__ssputs_r+0x58>
 80080dc:	462a      	mov	r2, r5
 80080de:	f000 f981 	bl	80083e4 <_realloc_r>
 80080e2:	4606      	mov	r6, r0
 80080e4:	2800      	cmp	r0, #0
 80080e6:	d1e1      	bne.n	80080ac <__ssputs_r+0x70>
 80080e8:	6921      	ldr	r1, [r4, #16]
 80080ea:	4650      	mov	r0, sl
 80080ec:	f7ff fec6 	bl	8007e7c <_free_r>
 80080f0:	e7c7      	b.n	8008082 <__ssputs_r+0x46>
	...

080080f4 <_svfiprintf_r>:
 80080f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f8:	4698      	mov	r8, r3
 80080fa:	898b      	ldrh	r3, [r1, #12]
 80080fc:	061b      	lsls	r3, r3, #24
 80080fe:	b09d      	sub	sp, #116	; 0x74
 8008100:	4607      	mov	r7, r0
 8008102:	460d      	mov	r5, r1
 8008104:	4614      	mov	r4, r2
 8008106:	d50e      	bpl.n	8008126 <_svfiprintf_r+0x32>
 8008108:	690b      	ldr	r3, [r1, #16]
 800810a:	b963      	cbnz	r3, 8008126 <_svfiprintf_r+0x32>
 800810c:	2140      	movs	r1, #64	; 0x40
 800810e:	f7ff ff21 	bl	8007f54 <_malloc_r>
 8008112:	6028      	str	r0, [r5, #0]
 8008114:	6128      	str	r0, [r5, #16]
 8008116:	b920      	cbnz	r0, 8008122 <_svfiprintf_r+0x2e>
 8008118:	230c      	movs	r3, #12
 800811a:	603b      	str	r3, [r7, #0]
 800811c:	f04f 30ff 	mov.w	r0, #4294967295
 8008120:	e0d1      	b.n	80082c6 <_svfiprintf_r+0x1d2>
 8008122:	2340      	movs	r3, #64	; 0x40
 8008124:	616b      	str	r3, [r5, #20]
 8008126:	2300      	movs	r3, #0
 8008128:	9309      	str	r3, [sp, #36]	; 0x24
 800812a:	2320      	movs	r3, #32
 800812c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008130:	f8cd 800c 	str.w	r8, [sp, #12]
 8008134:	2330      	movs	r3, #48	; 0x30
 8008136:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80082e0 <_svfiprintf_r+0x1ec>
 800813a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800813e:	f04f 0901 	mov.w	r9, #1
 8008142:	4623      	mov	r3, r4
 8008144:	469a      	mov	sl, r3
 8008146:	f813 2b01 	ldrb.w	r2, [r3], #1
 800814a:	b10a      	cbz	r2, 8008150 <_svfiprintf_r+0x5c>
 800814c:	2a25      	cmp	r2, #37	; 0x25
 800814e:	d1f9      	bne.n	8008144 <_svfiprintf_r+0x50>
 8008150:	ebba 0b04 	subs.w	fp, sl, r4
 8008154:	d00b      	beq.n	800816e <_svfiprintf_r+0x7a>
 8008156:	465b      	mov	r3, fp
 8008158:	4622      	mov	r2, r4
 800815a:	4629      	mov	r1, r5
 800815c:	4638      	mov	r0, r7
 800815e:	f7ff ff6d 	bl	800803c <__ssputs_r>
 8008162:	3001      	adds	r0, #1
 8008164:	f000 80aa 	beq.w	80082bc <_svfiprintf_r+0x1c8>
 8008168:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800816a:	445a      	add	r2, fp
 800816c:	9209      	str	r2, [sp, #36]	; 0x24
 800816e:	f89a 3000 	ldrb.w	r3, [sl]
 8008172:	2b00      	cmp	r3, #0
 8008174:	f000 80a2 	beq.w	80082bc <_svfiprintf_r+0x1c8>
 8008178:	2300      	movs	r3, #0
 800817a:	f04f 32ff 	mov.w	r2, #4294967295
 800817e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008182:	f10a 0a01 	add.w	sl, sl, #1
 8008186:	9304      	str	r3, [sp, #16]
 8008188:	9307      	str	r3, [sp, #28]
 800818a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800818e:	931a      	str	r3, [sp, #104]	; 0x68
 8008190:	4654      	mov	r4, sl
 8008192:	2205      	movs	r2, #5
 8008194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008198:	4851      	ldr	r0, [pc, #324]	; (80082e0 <_svfiprintf_r+0x1ec>)
 800819a:	f7f8 f821 	bl	80001e0 <memchr>
 800819e:	9a04      	ldr	r2, [sp, #16]
 80081a0:	b9d8      	cbnz	r0, 80081da <_svfiprintf_r+0xe6>
 80081a2:	06d0      	lsls	r0, r2, #27
 80081a4:	bf44      	itt	mi
 80081a6:	2320      	movmi	r3, #32
 80081a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081ac:	0711      	lsls	r1, r2, #28
 80081ae:	bf44      	itt	mi
 80081b0:	232b      	movmi	r3, #43	; 0x2b
 80081b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081b6:	f89a 3000 	ldrb.w	r3, [sl]
 80081ba:	2b2a      	cmp	r3, #42	; 0x2a
 80081bc:	d015      	beq.n	80081ea <_svfiprintf_r+0xf6>
 80081be:	9a07      	ldr	r2, [sp, #28]
 80081c0:	4654      	mov	r4, sl
 80081c2:	2000      	movs	r0, #0
 80081c4:	f04f 0c0a 	mov.w	ip, #10
 80081c8:	4621      	mov	r1, r4
 80081ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081ce:	3b30      	subs	r3, #48	; 0x30
 80081d0:	2b09      	cmp	r3, #9
 80081d2:	d94e      	bls.n	8008272 <_svfiprintf_r+0x17e>
 80081d4:	b1b0      	cbz	r0, 8008204 <_svfiprintf_r+0x110>
 80081d6:	9207      	str	r2, [sp, #28]
 80081d8:	e014      	b.n	8008204 <_svfiprintf_r+0x110>
 80081da:	eba0 0308 	sub.w	r3, r0, r8
 80081de:	fa09 f303 	lsl.w	r3, r9, r3
 80081e2:	4313      	orrs	r3, r2
 80081e4:	9304      	str	r3, [sp, #16]
 80081e6:	46a2      	mov	sl, r4
 80081e8:	e7d2      	b.n	8008190 <_svfiprintf_r+0x9c>
 80081ea:	9b03      	ldr	r3, [sp, #12]
 80081ec:	1d19      	adds	r1, r3, #4
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	9103      	str	r1, [sp, #12]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	bfbb      	ittet	lt
 80081f6:	425b      	neglt	r3, r3
 80081f8:	f042 0202 	orrlt.w	r2, r2, #2
 80081fc:	9307      	strge	r3, [sp, #28]
 80081fe:	9307      	strlt	r3, [sp, #28]
 8008200:	bfb8      	it	lt
 8008202:	9204      	strlt	r2, [sp, #16]
 8008204:	7823      	ldrb	r3, [r4, #0]
 8008206:	2b2e      	cmp	r3, #46	; 0x2e
 8008208:	d10c      	bne.n	8008224 <_svfiprintf_r+0x130>
 800820a:	7863      	ldrb	r3, [r4, #1]
 800820c:	2b2a      	cmp	r3, #42	; 0x2a
 800820e:	d135      	bne.n	800827c <_svfiprintf_r+0x188>
 8008210:	9b03      	ldr	r3, [sp, #12]
 8008212:	1d1a      	adds	r2, r3, #4
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	9203      	str	r2, [sp, #12]
 8008218:	2b00      	cmp	r3, #0
 800821a:	bfb8      	it	lt
 800821c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008220:	3402      	adds	r4, #2
 8008222:	9305      	str	r3, [sp, #20]
 8008224:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80082f0 <_svfiprintf_r+0x1fc>
 8008228:	7821      	ldrb	r1, [r4, #0]
 800822a:	2203      	movs	r2, #3
 800822c:	4650      	mov	r0, sl
 800822e:	f7f7 ffd7 	bl	80001e0 <memchr>
 8008232:	b140      	cbz	r0, 8008246 <_svfiprintf_r+0x152>
 8008234:	2340      	movs	r3, #64	; 0x40
 8008236:	eba0 000a 	sub.w	r0, r0, sl
 800823a:	fa03 f000 	lsl.w	r0, r3, r0
 800823e:	9b04      	ldr	r3, [sp, #16]
 8008240:	4303      	orrs	r3, r0
 8008242:	3401      	adds	r4, #1
 8008244:	9304      	str	r3, [sp, #16]
 8008246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800824a:	4826      	ldr	r0, [pc, #152]	; (80082e4 <_svfiprintf_r+0x1f0>)
 800824c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008250:	2206      	movs	r2, #6
 8008252:	f7f7 ffc5 	bl	80001e0 <memchr>
 8008256:	2800      	cmp	r0, #0
 8008258:	d038      	beq.n	80082cc <_svfiprintf_r+0x1d8>
 800825a:	4b23      	ldr	r3, [pc, #140]	; (80082e8 <_svfiprintf_r+0x1f4>)
 800825c:	bb1b      	cbnz	r3, 80082a6 <_svfiprintf_r+0x1b2>
 800825e:	9b03      	ldr	r3, [sp, #12]
 8008260:	3307      	adds	r3, #7
 8008262:	f023 0307 	bic.w	r3, r3, #7
 8008266:	3308      	adds	r3, #8
 8008268:	9303      	str	r3, [sp, #12]
 800826a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800826c:	4433      	add	r3, r6
 800826e:	9309      	str	r3, [sp, #36]	; 0x24
 8008270:	e767      	b.n	8008142 <_svfiprintf_r+0x4e>
 8008272:	fb0c 3202 	mla	r2, ip, r2, r3
 8008276:	460c      	mov	r4, r1
 8008278:	2001      	movs	r0, #1
 800827a:	e7a5      	b.n	80081c8 <_svfiprintf_r+0xd4>
 800827c:	2300      	movs	r3, #0
 800827e:	3401      	adds	r4, #1
 8008280:	9305      	str	r3, [sp, #20]
 8008282:	4619      	mov	r1, r3
 8008284:	f04f 0c0a 	mov.w	ip, #10
 8008288:	4620      	mov	r0, r4
 800828a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800828e:	3a30      	subs	r2, #48	; 0x30
 8008290:	2a09      	cmp	r2, #9
 8008292:	d903      	bls.n	800829c <_svfiprintf_r+0x1a8>
 8008294:	2b00      	cmp	r3, #0
 8008296:	d0c5      	beq.n	8008224 <_svfiprintf_r+0x130>
 8008298:	9105      	str	r1, [sp, #20]
 800829a:	e7c3      	b.n	8008224 <_svfiprintf_r+0x130>
 800829c:	fb0c 2101 	mla	r1, ip, r1, r2
 80082a0:	4604      	mov	r4, r0
 80082a2:	2301      	movs	r3, #1
 80082a4:	e7f0      	b.n	8008288 <_svfiprintf_r+0x194>
 80082a6:	ab03      	add	r3, sp, #12
 80082a8:	9300      	str	r3, [sp, #0]
 80082aa:	462a      	mov	r2, r5
 80082ac:	4b0f      	ldr	r3, [pc, #60]	; (80082ec <_svfiprintf_r+0x1f8>)
 80082ae:	a904      	add	r1, sp, #16
 80082b0:	4638      	mov	r0, r7
 80082b2:	f7fd ffcb 	bl	800624c <_printf_float>
 80082b6:	1c42      	adds	r2, r0, #1
 80082b8:	4606      	mov	r6, r0
 80082ba:	d1d6      	bne.n	800826a <_svfiprintf_r+0x176>
 80082bc:	89ab      	ldrh	r3, [r5, #12]
 80082be:	065b      	lsls	r3, r3, #25
 80082c0:	f53f af2c 	bmi.w	800811c <_svfiprintf_r+0x28>
 80082c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082c6:	b01d      	add	sp, #116	; 0x74
 80082c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082cc:	ab03      	add	r3, sp, #12
 80082ce:	9300      	str	r3, [sp, #0]
 80082d0:	462a      	mov	r2, r5
 80082d2:	4b06      	ldr	r3, [pc, #24]	; (80082ec <_svfiprintf_r+0x1f8>)
 80082d4:	a904      	add	r1, sp, #16
 80082d6:	4638      	mov	r0, r7
 80082d8:	f7fe fa5c 	bl	8006794 <_printf_i>
 80082dc:	e7eb      	b.n	80082b6 <_svfiprintf_r+0x1c2>
 80082de:	bf00      	nop
 80082e0:	08009884 	.word	0x08009884
 80082e4:	0800988e 	.word	0x0800988e
 80082e8:	0800624d 	.word	0x0800624d
 80082ec:	0800803d 	.word	0x0800803d
 80082f0:	0800988a 	.word	0x0800988a

080082f4 <_sbrk_r>:
 80082f4:	b538      	push	{r3, r4, r5, lr}
 80082f6:	4d06      	ldr	r5, [pc, #24]	; (8008310 <_sbrk_r+0x1c>)
 80082f8:	2300      	movs	r3, #0
 80082fa:	4604      	mov	r4, r0
 80082fc:	4608      	mov	r0, r1
 80082fe:	602b      	str	r3, [r5, #0]
 8008300:	f7fa f82c 	bl	800235c <_sbrk>
 8008304:	1c43      	adds	r3, r0, #1
 8008306:	d102      	bne.n	800830e <_sbrk_r+0x1a>
 8008308:	682b      	ldr	r3, [r5, #0]
 800830a:	b103      	cbz	r3, 800830e <_sbrk_r+0x1a>
 800830c:	6023      	str	r3, [r4, #0]
 800830e:	bd38      	pop	{r3, r4, r5, pc}
 8008310:	20000468 	.word	0x20000468

08008314 <__assert_func>:
 8008314:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008316:	4614      	mov	r4, r2
 8008318:	461a      	mov	r2, r3
 800831a:	4b09      	ldr	r3, [pc, #36]	; (8008340 <__assert_func+0x2c>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4605      	mov	r5, r0
 8008320:	68d8      	ldr	r0, [r3, #12]
 8008322:	b14c      	cbz	r4, 8008338 <__assert_func+0x24>
 8008324:	4b07      	ldr	r3, [pc, #28]	; (8008344 <__assert_func+0x30>)
 8008326:	9100      	str	r1, [sp, #0]
 8008328:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800832c:	4906      	ldr	r1, [pc, #24]	; (8008348 <__assert_func+0x34>)
 800832e:	462b      	mov	r3, r5
 8008330:	f000 f80e 	bl	8008350 <fiprintf>
 8008334:	f000 faac 	bl	8008890 <abort>
 8008338:	4b04      	ldr	r3, [pc, #16]	; (800834c <__assert_func+0x38>)
 800833a:	461c      	mov	r4, r3
 800833c:	e7f3      	b.n	8008326 <__assert_func+0x12>
 800833e:	bf00      	nop
 8008340:	200000a4 	.word	0x200000a4
 8008344:	08009895 	.word	0x08009895
 8008348:	080098a2 	.word	0x080098a2
 800834c:	080098d0 	.word	0x080098d0

08008350 <fiprintf>:
 8008350:	b40e      	push	{r1, r2, r3}
 8008352:	b503      	push	{r0, r1, lr}
 8008354:	4601      	mov	r1, r0
 8008356:	ab03      	add	r3, sp, #12
 8008358:	4805      	ldr	r0, [pc, #20]	; (8008370 <fiprintf+0x20>)
 800835a:	f853 2b04 	ldr.w	r2, [r3], #4
 800835e:	6800      	ldr	r0, [r0, #0]
 8008360:	9301      	str	r3, [sp, #4]
 8008362:	f000 f897 	bl	8008494 <_vfiprintf_r>
 8008366:	b002      	add	sp, #8
 8008368:	f85d eb04 	ldr.w	lr, [sp], #4
 800836c:	b003      	add	sp, #12
 800836e:	4770      	bx	lr
 8008370:	200000a4 	.word	0x200000a4

08008374 <__ascii_mbtowc>:
 8008374:	b082      	sub	sp, #8
 8008376:	b901      	cbnz	r1, 800837a <__ascii_mbtowc+0x6>
 8008378:	a901      	add	r1, sp, #4
 800837a:	b142      	cbz	r2, 800838e <__ascii_mbtowc+0x1a>
 800837c:	b14b      	cbz	r3, 8008392 <__ascii_mbtowc+0x1e>
 800837e:	7813      	ldrb	r3, [r2, #0]
 8008380:	600b      	str	r3, [r1, #0]
 8008382:	7812      	ldrb	r2, [r2, #0]
 8008384:	1e10      	subs	r0, r2, #0
 8008386:	bf18      	it	ne
 8008388:	2001      	movne	r0, #1
 800838a:	b002      	add	sp, #8
 800838c:	4770      	bx	lr
 800838e:	4610      	mov	r0, r2
 8008390:	e7fb      	b.n	800838a <__ascii_mbtowc+0x16>
 8008392:	f06f 0001 	mvn.w	r0, #1
 8008396:	e7f8      	b.n	800838a <__ascii_mbtowc+0x16>

08008398 <memmove>:
 8008398:	4288      	cmp	r0, r1
 800839a:	b510      	push	{r4, lr}
 800839c:	eb01 0402 	add.w	r4, r1, r2
 80083a0:	d902      	bls.n	80083a8 <memmove+0x10>
 80083a2:	4284      	cmp	r4, r0
 80083a4:	4623      	mov	r3, r4
 80083a6:	d807      	bhi.n	80083b8 <memmove+0x20>
 80083a8:	1e43      	subs	r3, r0, #1
 80083aa:	42a1      	cmp	r1, r4
 80083ac:	d008      	beq.n	80083c0 <memmove+0x28>
 80083ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083b6:	e7f8      	b.n	80083aa <memmove+0x12>
 80083b8:	4402      	add	r2, r0
 80083ba:	4601      	mov	r1, r0
 80083bc:	428a      	cmp	r2, r1
 80083be:	d100      	bne.n	80083c2 <memmove+0x2a>
 80083c0:	bd10      	pop	{r4, pc}
 80083c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083ca:	e7f7      	b.n	80083bc <memmove+0x24>

080083cc <__malloc_lock>:
 80083cc:	4801      	ldr	r0, [pc, #4]	; (80083d4 <__malloc_lock+0x8>)
 80083ce:	f000 bc1f 	b.w	8008c10 <__retarget_lock_acquire_recursive>
 80083d2:	bf00      	nop
 80083d4:	2000046c 	.word	0x2000046c

080083d8 <__malloc_unlock>:
 80083d8:	4801      	ldr	r0, [pc, #4]	; (80083e0 <__malloc_unlock+0x8>)
 80083da:	f000 bc1a 	b.w	8008c12 <__retarget_lock_release_recursive>
 80083de:	bf00      	nop
 80083e0:	2000046c 	.word	0x2000046c

080083e4 <_realloc_r>:
 80083e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083e8:	4680      	mov	r8, r0
 80083ea:	4614      	mov	r4, r2
 80083ec:	460e      	mov	r6, r1
 80083ee:	b921      	cbnz	r1, 80083fa <_realloc_r+0x16>
 80083f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083f4:	4611      	mov	r1, r2
 80083f6:	f7ff bdad 	b.w	8007f54 <_malloc_r>
 80083fa:	b92a      	cbnz	r2, 8008408 <_realloc_r+0x24>
 80083fc:	f7ff fd3e 	bl	8007e7c <_free_r>
 8008400:	4625      	mov	r5, r4
 8008402:	4628      	mov	r0, r5
 8008404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008408:	f000 fc6a 	bl	8008ce0 <_malloc_usable_size_r>
 800840c:	4284      	cmp	r4, r0
 800840e:	4607      	mov	r7, r0
 8008410:	d802      	bhi.n	8008418 <_realloc_r+0x34>
 8008412:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008416:	d812      	bhi.n	800843e <_realloc_r+0x5a>
 8008418:	4621      	mov	r1, r4
 800841a:	4640      	mov	r0, r8
 800841c:	f7ff fd9a 	bl	8007f54 <_malloc_r>
 8008420:	4605      	mov	r5, r0
 8008422:	2800      	cmp	r0, #0
 8008424:	d0ed      	beq.n	8008402 <_realloc_r+0x1e>
 8008426:	42bc      	cmp	r4, r7
 8008428:	4622      	mov	r2, r4
 800842a:	4631      	mov	r1, r6
 800842c:	bf28      	it	cs
 800842e:	463a      	movcs	r2, r7
 8008430:	f7ff f97c 	bl	800772c <memcpy>
 8008434:	4631      	mov	r1, r6
 8008436:	4640      	mov	r0, r8
 8008438:	f7ff fd20 	bl	8007e7c <_free_r>
 800843c:	e7e1      	b.n	8008402 <_realloc_r+0x1e>
 800843e:	4635      	mov	r5, r6
 8008440:	e7df      	b.n	8008402 <_realloc_r+0x1e>

08008442 <__sfputc_r>:
 8008442:	6893      	ldr	r3, [r2, #8]
 8008444:	3b01      	subs	r3, #1
 8008446:	2b00      	cmp	r3, #0
 8008448:	b410      	push	{r4}
 800844a:	6093      	str	r3, [r2, #8]
 800844c:	da08      	bge.n	8008460 <__sfputc_r+0x1e>
 800844e:	6994      	ldr	r4, [r2, #24]
 8008450:	42a3      	cmp	r3, r4
 8008452:	db01      	blt.n	8008458 <__sfputc_r+0x16>
 8008454:	290a      	cmp	r1, #10
 8008456:	d103      	bne.n	8008460 <__sfputc_r+0x1e>
 8008458:	f85d 4b04 	ldr.w	r4, [sp], #4
 800845c:	f000 b94a 	b.w	80086f4 <__swbuf_r>
 8008460:	6813      	ldr	r3, [r2, #0]
 8008462:	1c58      	adds	r0, r3, #1
 8008464:	6010      	str	r0, [r2, #0]
 8008466:	7019      	strb	r1, [r3, #0]
 8008468:	4608      	mov	r0, r1
 800846a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800846e:	4770      	bx	lr

08008470 <__sfputs_r>:
 8008470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008472:	4606      	mov	r6, r0
 8008474:	460f      	mov	r7, r1
 8008476:	4614      	mov	r4, r2
 8008478:	18d5      	adds	r5, r2, r3
 800847a:	42ac      	cmp	r4, r5
 800847c:	d101      	bne.n	8008482 <__sfputs_r+0x12>
 800847e:	2000      	movs	r0, #0
 8008480:	e007      	b.n	8008492 <__sfputs_r+0x22>
 8008482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008486:	463a      	mov	r2, r7
 8008488:	4630      	mov	r0, r6
 800848a:	f7ff ffda 	bl	8008442 <__sfputc_r>
 800848e:	1c43      	adds	r3, r0, #1
 8008490:	d1f3      	bne.n	800847a <__sfputs_r+0xa>
 8008492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008494 <_vfiprintf_r>:
 8008494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008498:	460d      	mov	r5, r1
 800849a:	b09d      	sub	sp, #116	; 0x74
 800849c:	4614      	mov	r4, r2
 800849e:	4698      	mov	r8, r3
 80084a0:	4606      	mov	r6, r0
 80084a2:	b118      	cbz	r0, 80084ac <_vfiprintf_r+0x18>
 80084a4:	6983      	ldr	r3, [r0, #24]
 80084a6:	b90b      	cbnz	r3, 80084ac <_vfiprintf_r+0x18>
 80084a8:	f000 fb14 	bl	8008ad4 <__sinit>
 80084ac:	4b89      	ldr	r3, [pc, #548]	; (80086d4 <_vfiprintf_r+0x240>)
 80084ae:	429d      	cmp	r5, r3
 80084b0:	d11b      	bne.n	80084ea <_vfiprintf_r+0x56>
 80084b2:	6875      	ldr	r5, [r6, #4]
 80084b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084b6:	07d9      	lsls	r1, r3, #31
 80084b8:	d405      	bmi.n	80084c6 <_vfiprintf_r+0x32>
 80084ba:	89ab      	ldrh	r3, [r5, #12]
 80084bc:	059a      	lsls	r2, r3, #22
 80084be:	d402      	bmi.n	80084c6 <_vfiprintf_r+0x32>
 80084c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084c2:	f000 fba5 	bl	8008c10 <__retarget_lock_acquire_recursive>
 80084c6:	89ab      	ldrh	r3, [r5, #12]
 80084c8:	071b      	lsls	r3, r3, #28
 80084ca:	d501      	bpl.n	80084d0 <_vfiprintf_r+0x3c>
 80084cc:	692b      	ldr	r3, [r5, #16]
 80084ce:	b9eb      	cbnz	r3, 800850c <_vfiprintf_r+0x78>
 80084d0:	4629      	mov	r1, r5
 80084d2:	4630      	mov	r0, r6
 80084d4:	f000 f96e 	bl	80087b4 <__swsetup_r>
 80084d8:	b1c0      	cbz	r0, 800850c <_vfiprintf_r+0x78>
 80084da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084dc:	07dc      	lsls	r4, r3, #31
 80084de:	d50e      	bpl.n	80084fe <_vfiprintf_r+0x6a>
 80084e0:	f04f 30ff 	mov.w	r0, #4294967295
 80084e4:	b01d      	add	sp, #116	; 0x74
 80084e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ea:	4b7b      	ldr	r3, [pc, #492]	; (80086d8 <_vfiprintf_r+0x244>)
 80084ec:	429d      	cmp	r5, r3
 80084ee:	d101      	bne.n	80084f4 <_vfiprintf_r+0x60>
 80084f0:	68b5      	ldr	r5, [r6, #8]
 80084f2:	e7df      	b.n	80084b4 <_vfiprintf_r+0x20>
 80084f4:	4b79      	ldr	r3, [pc, #484]	; (80086dc <_vfiprintf_r+0x248>)
 80084f6:	429d      	cmp	r5, r3
 80084f8:	bf08      	it	eq
 80084fa:	68f5      	ldreq	r5, [r6, #12]
 80084fc:	e7da      	b.n	80084b4 <_vfiprintf_r+0x20>
 80084fe:	89ab      	ldrh	r3, [r5, #12]
 8008500:	0598      	lsls	r0, r3, #22
 8008502:	d4ed      	bmi.n	80084e0 <_vfiprintf_r+0x4c>
 8008504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008506:	f000 fb84 	bl	8008c12 <__retarget_lock_release_recursive>
 800850a:	e7e9      	b.n	80084e0 <_vfiprintf_r+0x4c>
 800850c:	2300      	movs	r3, #0
 800850e:	9309      	str	r3, [sp, #36]	; 0x24
 8008510:	2320      	movs	r3, #32
 8008512:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008516:	f8cd 800c 	str.w	r8, [sp, #12]
 800851a:	2330      	movs	r3, #48	; 0x30
 800851c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80086e0 <_vfiprintf_r+0x24c>
 8008520:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008524:	f04f 0901 	mov.w	r9, #1
 8008528:	4623      	mov	r3, r4
 800852a:	469a      	mov	sl, r3
 800852c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008530:	b10a      	cbz	r2, 8008536 <_vfiprintf_r+0xa2>
 8008532:	2a25      	cmp	r2, #37	; 0x25
 8008534:	d1f9      	bne.n	800852a <_vfiprintf_r+0x96>
 8008536:	ebba 0b04 	subs.w	fp, sl, r4
 800853a:	d00b      	beq.n	8008554 <_vfiprintf_r+0xc0>
 800853c:	465b      	mov	r3, fp
 800853e:	4622      	mov	r2, r4
 8008540:	4629      	mov	r1, r5
 8008542:	4630      	mov	r0, r6
 8008544:	f7ff ff94 	bl	8008470 <__sfputs_r>
 8008548:	3001      	adds	r0, #1
 800854a:	f000 80aa 	beq.w	80086a2 <_vfiprintf_r+0x20e>
 800854e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008550:	445a      	add	r2, fp
 8008552:	9209      	str	r2, [sp, #36]	; 0x24
 8008554:	f89a 3000 	ldrb.w	r3, [sl]
 8008558:	2b00      	cmp	r3, #0
 800855a:	f000 80a2 	beq.w	80086a2 <_vfiprintf_r+0x20e>
 800855e:	2300      	movs	r3, #0
 8008560:	f04f 32ff 	mov.w	r2, #4294967295
 8008564:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008568:	f10a 0a01 	add.w	sl, sl, #1
 800856c:	9304      	str	r3, [sp, #16]
 800856e:	9307      	str	r3, [sp, #28]
 8008570:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008574:	931a      	str	r3, [sp, #104]	; 0x68
 8008576:	4654      	mov	r4, sl
 8008578:	2205      	movs	r2, #5
 800857a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800857e:	4858      	ldr	r0, [pc, #352]	; (80086e0 <_vfiprintf_r+0x24c>)
 8008580:	f7f7 fe2e 	bl	80001e0 <memchr>
 8008584:	9a04      	ldr	r2, [sp, #16]
 8008586:	b9d8      	cbnz	r0, 80085c0 <_vfiprintf_r+0x12c>
 8008588:	06d1      	lsls	r1, r2, #27
 800858a:	bf44      	itt	mi
 800858c:	2320      	movmi	r3, #32
 800858e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008592:	0713      	lsls	r3, r2, #28
 8008594:	bf44      	itt	mi
 8008596:	232b      	movmi	r3, #43	; 0x2b
 8008598:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800859c:	f89a 3000 	ldrb.w	r3, [sl]
 80085a0:	2b2a      	cmp	r3, #42	; 0x2a
 80085a2:	d015      	beq.n	80085d0 <_vfiprintf_r+0x13c>
 80085a4:	9a07      	ldr	r2, [sp, #28]
 80085a6:	4654      	mov	r4, sl
 80085a8:	2000      	movs	r0, #0
 80085aa:	f04f 0c0a 	mov.w	ip, #10
 80085ae:	4621      	mov	r1, r4
 80085b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085b4:	3b30      	subs	r3, #48	; 0x30
 80085b6:	2b09      	cmp	r3, #9
 80085b8:	d94e      	bls.n	8008658 <_vfiprintf_r+0x1c4>
 80085ba:	b1b0      	cbz	r0, 80085ea <_vfiprintf_r+0x156>
 80085bc:	9207      	str	r2, [sp, #28]
 80085be:	e014      	b.n	80085ea <_vfiprintf_r+0x156>
 80085c0:	eba0 0308 	sub.w	r3, r0, r8
 80085c4:	fa09 f303 	lsl.w	r3, r9, r3
 80085c8:	4313      	orrs	r3, r2
 80085ca:	9304      	str	r3, [sp, #16]
 80085cc:	46a2      	mov	sl, r4
 80085ce:	e7d2      	b.n	8008576 <_vfiprintf_r+0xe2>
 80085d0:	9b03      	ldr	r3, [sp, #12]
 80085d2:	1d19      	adds	r1, r3, #4
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	9103      	str	r1, [sp, #12]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	bfbb      	ittet	lt
 80085dc:	425b      	neglt	r3, r3
 80085de:	f042 0202 	orrlt.w	r2, r2, #2
 80085e2:	9307      	strge	r3, [sp, #28]
 80085e4:	9307      	strlt	r3, [sp, #28]
 80085e6:	bfb8      	it	lt
 80085e8:	9204      	strlt	r2, [sp, #16]
 80085ea:	7823      	ldrb	r3, [r4, #0]
 80085ec:	2b2e      	cmp	r3, #46	; 0x2e
 80085ee:	d10c      	bne.n	800860a <_vfiprintf_r+0x176>
 80085f0:	7863      	ldrb	r3, [r4, #1]
 80085f2:	2b2a      	cmp	r3, #42	; 0x2a
 80085f4:	d135      	bne.n	8008662 <_vfiprintf_r+0x1ce>
 80085f6:	9b03      	ldr	r3, [sp, #12]
 80085f8:	1d1a      	adds	r2, r3, #4
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	9203      	str	r2, [sp, #12]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	bfb8      	it	lt
 8008602:	f04f 33ff 	movlt.w	r3, #4294967295
 8008606:	3402      	adds	r4, #2
 8008608:	9305      	str	r3, [sp, #20]
 800860a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80086f0 <_vfiprintf_r+0x25c>
 800860e:	7821      	ldrb	r1, [r4, #0]
 8008610:	2203      	movs	r2, #3
 8008612:	4650      	mov	r0, sl
 8008614:	f7f7 fde4 	bl	80001e0 <memchr>
 8008618:	b140      	cbz	r0, 800862c <_vfiprintf_r+0x198>
 800861a:	2340      	movs	r3, #64	; 0x40
 800861c:	eba0 000a 	sub.w	r0, r0, sl
 8008620:	fa03 f000 	lsl.w	r0, r3, r0
 8008624:	9b04      	ldr	r3, [sp, #16]
 8008626:	4303      	orrs	r3, r0
 8008628:	3401      	adds	r4, #1
 800862a:	9304      	str	r3, [sp, #16]
 800862c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008630:	482c      	ldr	r0, [pc, #176]	; (80086e4 <_vfiprintf_r+0x250>)
 8008632:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008636:	2206      	movs	r2, #6
 8008638:	f7f7 fdd2 	bl	80001e0 <memchr>
 800863c:	2800      	cmp	r0, #0
 800863e:	d03f      	beq.n	80086c0 <_vfiprintf_r+0x22c>
 8008640:	4b29      	ldr	r3, [pc, #164]	; (80086e8 <_vfiprintf_r+0x254>)
 8008642:	bb1b      	cbnz	r3, 800868c <_vfiprintf_r+0x1f8>
 8008644:	9b03      	ldr	r3, [sp, #12]
 8008646:	3307      	adds	r3, #7
 8008648:	f023 0307 	bic.w	r3, r3, #7
 800864c:	3308      	adds	r3, #8
 800864e:	9303      	str	r3, [sp, #12]
 8008650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008652:	443b      	add	r3, r7
 8008654:	9309      	str	r3, [sp, #36]	; 0x24
 8008656:	e767      	b.n	8008528 <_vfiprintf_r+0x94>
 8008658:	fb0c 3202 	mla	r2, ip, r2, r3
 800865c:	460c      	mov	r4, r1
 800865e:	2001      	movs	r0, #1
 8008660:	e7a5      	b.n	80085ae <_vfiprintf_r+0x11a>
 8008662:	2300      	movs	r3, #0
 8008664:	3401      	adds	r4, #1
 8008666:	9305      	str	r3, [sp, #20]
 8008668:	4619      	mov	r1, r3
 800866a:	f04f 0c0a 	mov.w	ip, #10
 800866e:	4620      	mov	r0, r4
 8008670:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008674:	3a30      	subs	r2, #48	; 0x30
 8008676:	2a09      	cmp	r2, #9
 8008678:	d903      	bls.n	8008682 <_vfiprintf_r+0x1ee>
 800867a:	2b00      	cmp	r3, #0
 800867c:	d0c5      	beq.n	800860a <_vfiprintf_r+0x176>
 800867e:	9105      	str	r1, [sp, #20]
 8008680:	e7c3      	b.n	800860a <_vfiprintf_r+0x176>
 8008682:	fb0c 2101 	mla	r1, ip, r1, r2
 8008686:	4604      	mov	r4, r0
 8008688:	2301      	movs	r3, #1
 800868a:	e7f0      	b.n	800866e <_vfiprintf_r+0x1da>
 800868c:	ab03      	add	r3, sp, #12
 800868e:	9300      	str	r3, [sp, #0]
 8008690:	462a      	mov	r2, r5
 8008692:	4b16      	ldr	r3, [pc, #88]	; (80086ec <_vfiprintf_r+0x258>)
 8008694:	a904      	add	r1, sp, #16
 8008696:	4630      	mov	r0, r6
 8008698:	f7fd fdd8 	bl	800624c <_printf_float>
 800869c:	4607      	mov	r7, r0
 800869e:	1c78      	adds	r0, r7, #1
 80086a0:	d1d6      	bne.n	8008650 <_vfiprintf_r+0x1bc>
 80086a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086a4:	07d9      	lsls	r1, r3, #31
 80086a6:	d405      	bmi.n	80086b4 <_vfiprintf_r+0x220>
 80086a8:	89ab      	ldrh	r3, [r5, #12]
 80086aa:	059a      	lsls	r2, r3, #22
 80086ac:	d402      	bmi.n	80086b4 <_vfiprintf_r+0x220>
 80086ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086b0:	f000 faaf 	bl	8008c12 <__retarget_lock_release_recursive>
 80086b4:	89ab      	ldrh	r3, [r5, #12]
 80086b6:	065b      	lsls	r3, r3, #25
 80086b8:	f53f af12 	bmi.w	80084e0 <_vfiprintf_r+0x4c>
 80086bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086be:	e711      	b.n	80084e4 <_vfiprintf_r+0x50>
 80086c0:	ab03      	add	r3, sp, #12
 80086c2:	9300      	str	r3, [sp, #0]
 80086c4:	462a      	mov	r2, r5
 80086c6:	4b09      	ldr	r3, [pc, #36]	; (80086ec <_vfiprintf_r+0x258>)
 80086c8:	a904      	add	r1, sp, #16
 80086ca:	4630      	mov	r0, r6
 80086cc:	f7fe f862 	bl	8006794 <_printf_i>
 80086d0:	e7e4      	b.n	800869c <_vfiprintf_r+0x208>
 80086d2:	bf00      	nop
 80086d4:	080099fc 	.word	0x080099fc
 80086d8:	08009a1c 	.word	0x08009a1c
 80086dc:	080099dc 	.word	0x080099dc
 80086e0:	08009884 	.word	0x08009884
 80086e4:	0800988e 	.word	0x0800988e
 80086e8:	0800624d 	.word	0x0800624d
 80086ec:	08008471 	.word	0x08008471
 80086f0:	0800988a 	.word	0x0800988a

080086f4 <__swbuf_r>:
 80086f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086f6:	460e      	mov	r6, r1
 80086f8:	4614      	mov	r4, r2
 80086fa:	4605      	mov	r5, r0
 80086fc:	b118      	cbz	r0, 8008706 <__swbuf_r+0x12>
 80086fe:	6983      	ldr	r3, [r0, #24]
 8008700:	b90b      	cbnz	r3, 8008706 <__swbuf_r+0x12>
 8008702:	f000 f9e7 	bl	8008ad4 <__sinit>
 8008706:	4b21      	ldr	r3, [pc, #132]	; (800878c <__swbuf_r+0x98>)
 8008708:	429c      	cmp	r4, r3
 800870a:	d12b      	bne.n	8008764 <__swbuf_r+0x70>
 800870c:	686c      	ldr	r4, [r5, #4]
 800870e:	69a3      	ldr	r3, [r4, #24]
 8008710:	60a3      	str	r3, [r4, #8]
 8008712:	89a3      	ldrh	r3, [r4, #12]
 8008714:	071a      	lsls	r2, r3, #28
 8008716:	d52f      	bpl.n	8008778 <__swbuf_r+0x84>
 8008718:	6923      	ldr	r3, [r4, #16]
 800871a:	b36b      	cbz	r3, 8008778 <__swbuf_r+0x84>
 800871c:	6923      	ldr	r3, [r4, #16]
 800871e:	6820      	ldr	r0, [r4, #0]
 8008720:	1ac0      	subs	r0, r0, r3
 8008722:	6963      	ldr	r3, [r4, #20]
 8008724:	b2f6      	uxtb	r6, r6
 8008726:	4283      	cmp	r3, r0
 8008728:	4637      	mov	r7, r6
 800872a:	dc04      	bgt.n	8008736 <__swbuf_r+0x42>
 800872c:	4621      	mov	r1, r4
 800872e:	4628      	mov	r0, r5
 8008730:	f000 f93c 	bl	80089ac <_fflush_r>
 8008734:	bb30      	cbnz	r0, 8008784 <__swbuf_r+0x90>
 8008736:	68a3      	ldr	r3, [r4, #8]
 8008738:	3b01      	subs	r3, #1
 800873a:	60a3      	str	r3, [r4, #8]
 800873c:	6823      	ldr	r3, [r4, #0]
 800873e:	1c5a      	adds	r2, r3, #1
 8008740:	6022      	str	r2, [r4, #0]
 8008742:	701e      	strb	r6, [r3, #0]
 8008744:	6963      	ldr	r3, [r4, #20]
 8008746:	3001      	adds	r0, #1
 8008748:	4283      	cmp	r3, r0
 800874a:	d004      	beq.n	8008756 <__swbuf_r+0x62>
 800874c:	89a3      	ldrh	r3, [r4, #12]
 800874e:	07db      	lsls	r3, r3, #31
 8008750:	d506      	bpl.n	8008760 <__swbuf_r+0x6c>
 8008752:	2e0a      	cmp	r6, #10
 8008754:	d104      	bne.n	8008760 <__swbuf_r+0x6c>
 8008756:	4621      	mov	r1, r4
 8008758:	4628      	mov	r0, r5
 800875a:	f000 f927 	bl	80089ac <_fflush_r>
 800875e:	b988      	cbnz	r0, 8008784 <__swbuf_r+0x90>
 8008760:	4638      	mov	r0, r7
 8008762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008764:	4b0a      	ldr	r3, [pc, #40]	; (8008790 <__swbuf_r+0x9c>)
 8008766:	429c      	cmp	r4, r3
 8008768:	d101      	bne.n	800876e <__swbuf_r+0x7a>
 800876a:	68ac      	ldr	r4, [r5, #8]
 800876c:	e7cf      	b.n	800870e <__swbuf_r+0x1a>
 800876e:	4b09      	ldr	r3, [pc, #36]	; (8008794 <__swbuf_r+0xa0>)
 8008770:	429c      	cmp	r4, r3
 8008772:	bf08      	it	eq
 8008774:	68ec      	ldreq	r4, [r5, #12]
 8008776:	e7ca      	b.n	800870e <__swbuf_r+0x1a>
 8008778:	4621      	mov	r1, r4
 800877a:	4628      	mov	r0, r5
 800877c:	f000 f81a 	bl	80087b4 <__swsetup_r>
 8008780:	2800      	cmp	r0, #0
 8008782:	d0cb      	beq.n	800871c <__swbuf_r+0x28>
 8008784:	f04f 37ff 	mov.w	r7, #4294967295
 8008788:	e7ea      	b.n	8008760 <__swbuf_r+0x6c>
 800878a:	bf00      	nop
 800878c:	080099fc 	.word	0x080099fc
 8008790:	08009a1c 	.word	0x08009a1c
 8008794:	080099dc 	.word	0x080099dc

08008798 <__ascii_wctomb>:
 8008798:	b149      	cbz	r1, 80087ae <__ascii_wctomb+0x16>
 800879a:	2aff      	cmp	r2, #255	; 0xff
 800879c:	bf85      	ittet	hi
 800879e:	238a      	movhi	r3, #138	; 0x8a
 80087a0:	6003      	strhi	r3, [r0, #0]
 80087a2:	700a      	strbls	r2, [r1, #0]
 80087a4:	f04f 30ff 	movhi.w	r0, #4294967295
 80087a8:	bf98      	it	ls
 80087aa:	2001      	movls	r0, #1
 80087ac:	4770      	bx	lr
 80087ae:	4608      	mov	r0, r1
 80087b0:	4770      	bx	lr
	...

080087b4 <__swsetup_r>:
 80087b4:	4b32      	ldr	r3, [pc, #200]	; (8008880 <__swsetup_r+0xcc>)
 80087b6:	b570      	push	{r4, r5, r6, lr}
 80087b8:	681d      	ldr	r5, [r3, #0]
 80087ba:	4606      	mov	r6, r0
 80087bc:	460c      	mov	r4, r1
 80087be:	b125      	cbz	r5, 80087ca <__swsetup_r+0x16>
 80087c0:	69ab      	ldr	r3, [r5, #24]
 80087c2:	b913      	cbnz	r3, 80087ca <__swsetup_r+0x16>
 80087c4:	4628      	mov	r0, r5
 80087c6:	f000 f985 	bl	8008ad4 <__sinit>
 80087ca:	4b2e      	ldr	r3, [pc, #184]	; (8008884 <__swsetup_r+0xd0>)
 80087cc:	429c      	cmp	r4, r3
 80087ce:	d10f      	bne.n	80087f0 <__swsetup_r+0x3c>
 80087d0:	686c      	ldr	r4, [r5, #4]
 80087d2:	89a3      	ldrh	r3, [r4, #12]
 80087d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087d8:	0719      	lsls	r1, r3, #28
 80087da:	d42c      	bmi.n	8008836 <__swsetup_r+0x82>
 80087dc:	06dd      	lsls	r5, r3, #27
 80087de:	d411      	bmi.n	8008804 <__swsetup_r+0x50>
 80087e0:	2309      	movs	r3, #9
 80087e2:	6033      	str	r3, [r6, #0]
 80087e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80087e8:	81a3      	strh	r3, [r4, #12]
 80087ea:	f04f 30ff 	mov.w	r0, #4294967295
 80087ee:	e03e      	b.n	800886e <__swsetup_r+0xba>
 80087f0:	4b25      	ldr	r3, [pc, #148]	; (8008888 <__swsetup_r+0xd4>)
 80087f2:	429c      	cmp	r4, r3
 80087f4:	d101      	bne.n	80087fa <__swsetup_r+0x46>
 80087f6:	68ac      	ldr	r4, [r5, #8]
 80087f8:	e7eb      	b.n	80087d2 <__swsetup_r+0x1e>
 80087fa:	4b24      	ldr	r3, [pc, #144]	; (800888c <__swsetup_r+0xd8>)
 80087fc:	429c      	cmp	r4, r3
 80087fe:	bf08      	it	eq
 8008800:	68ec      	ldreq	r4, [r5, #12]
 8008802:	e7e6      	b.n	80087d2 <__swsetup_r+0x1e>
 8008804:	0758      	lsls	r0, r3, #29
 8008806:	d512      	bpl.n	800882e <__swsetup_r+0x7a>
 8008808:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800880a:	b141      	cbz	r1, 800881e <__swsetup_r+0x6a>
 800880c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008810:	4299      	cmp	r1, r3
 8008812:	d002      	beq.n	800881a <__swsetup_r+0x66>
 8008814:	4630      	mov	r0, r6
 8008816:	f7ff fb31 	bl	8007e7c <_free_r>
 800881a:	2300      	movs	r3, #0
 800881c:	6363      	str	r3, [r4, #52]	; 0x34
 800881e:	89a3      	ldrh	r3, [r4, #12]
 8008820:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008824:	81a3      	strh	r3, [r4, #12]
 8008826:	2300      	movs	r3, #0
 8008828:	6063      	str	r3, [r4, #4]
 800882a:	6923      	ldr	r3, [r4, #16]
 800882c:	6023      	str	r3, [r4, #0]
 800882e:	89a3      	ldrh	r3, [r4, #12]
 8008830:	f043 0308 	orr.w	r3, r3, #8
 8008834:	81a3      	strh	r3, [r4, #12]
 8008836:	6923      	ldr	r3, [r4, #16]
 8008838:	b94b      	cbnz	r3, 800884e <__swsetup_r+0x9a>
 800883a:	89a3      	ldrh	r3, [r4, #12]
 800883c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008844:	d003      	beq.n	800884e <__swsetup_r+0x9a>
 8008846:	4621      	mov	r1, r4
 8008848:	4630      	mov	r0, r6
 800884a:	f000 fa09 	bl	8008c60 <__smakebuf_r>
 800884e:	89a0      	ldrh	r0, [r4, #12]
 8008850:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008854:	f010 0301 	ands.w	r3, r0, #1
 8008858:	d00a      	beq.n	8008870 <__swsetup_r+0xbc>
 800885a:	2300      	movs	r3, #0
 800885c:	60a3      	str	r3, [r4, #8]
 800885e:	6963      	ldr	r3, [r4, #20]
 8008860:	425b      	negs	r3, r3
 8008862:	61a3      	str	r3, [r4, #24]
 8008864:	6923      	ldr	r3, [r4, #16]
 8008866:	b943      	cbnz	r3, 800887a <__swsetup_r+0xc6>
 8008868:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800886c:	d1ba      	bne.n	80087e4 <__swsetup_r+0x30>
 800886e:	bd70      	pop	{r4, r5, r6, pc}
 8008870:	0781      	lsls	r1, r0, #30
 8008872:	bf58      	it	pl
 8008874:	6963      	ldrpl	r3, [r4, #20]
 8008876:	60a3      	str	r3, [r4, #8]
 8008878:	e7f4      	b.n	8008864 <__swsetup_r+0xb0>
 800887a:	2000      	movs	r0, #0
 800887c:	e7f7      	b.n	800886e <__swsetup_r+0xba>
 800887e:	bf00      	nop
 8008880:	200000a4 	.word	0x200000a4
 8008884:	080099fc 	.word	0x080099fc
 8008888:	08009a1c 	.word	0x08009a1c
 800888c:	080099dc 	.word	0x080099dc

08008890 <abort>:
 8008890:	b508      	push	{r3, lr}
 8008892:	2006      	movs	r0, #6
 8008894:	f000 fa54 	bl	8008d40 <raise>
 8008898:	2001      	movs	r0, #1
 800889a:	f7f9 fce8 	bl	800226e <_exit>
	...

080088a0 <__sflush_r>:
 80088a0:	898a      	ldrh	r2, [r1, #12]
 80088a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088a6:	4605      	mov	r5, r0
 80088a8:	0710      	lsls	r0, r2, #28
 80088aa:	460c      	mov	r4, r1
 80088ac:	d458      	bmi.n	8008960 <__sflush_r+0xc0>
 80088ae:	684b      	ldr	r3, [r1, #4]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	dc05      	bgt.n	80088c0 <__sflush_r+0x20>
 80088b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	dc02      	bgt.n	80088c0 <__sflush_r+0x20>
 80088ba:	2000      	movs	r0, #0
 80088bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088c2:	2e00      	cmp	r6, #0
 80088c4:	d0f9      	beq.n	80088ba <__sflush_r+0x1a>
 80088c6:	2300      	movs	r3, #0
 80088c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088cc:	682f      	ldr	r7, [r5, #0]
 80088ce:	602b      	str	r3, [r5, #0]
 80088d0:	d032      	beq.n	8008938 <__sflush_r+0x98>
 80088d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088d4:	89a3      	ldrh	r3, [r4, #12]
 80088d6:	075a      	lsls	r2, r3, #29
 80088d8:	d505      	bpl.n	80088e6 <__sflush_r+0x46>
 80088da:	6863      	ldr	r3, [r4, #4]
 80088dc:	1ac0      	subs	r0, r0, r3
 80088de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088e0:	b10b      	cbz	r3, 80088e6 <__sflush_r+0x46>
 80088e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088e4:	1ac0      	subs	r0, r0, r3
 80088e6:	2300      	movs	r3, #0
 80088e8:	4602      	mov	r2, r0
 80088ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088ec:	6a21      	ldr	r1, [r4, #32]
 80088ee:	4628      	mov	r0, r5
 80088f0:	47b0      	blx	r6
 80088f2:	1c43      	adds	r3, r0, #1
 80088f4:	89a3      	ldrh	r3, [r4, #12]
 80088f6:	d106      	bne.n	8008906 <__sflush_r+0x66>
 80088f8:	6829      	ldr	r1, [r5, #0]
 80088fa:	291d      	cmp	r1, #29
 80088fc:	d82c      	bhi.n	8008958 <__sflush_r+0xb8>
 80088fe:	4a2a      	ldr	r2, [pc, #168]	; (80089a8 <__sflush_r+0x108>)
 8008900:	40ca      	lsrs	r2, r1
 8008902:	07d6      	lsls	r6, r2, #31
 8008904:	d528      	bpl.n	8008958 <__sflush_r+0xb8>
 8008906:	2200      	movs	r2, #0
 8008908:	6062      	str	r2, [r4, #4]
 800890a:	04d9      	lsls	r1, r3, #19
 800890c:	6922      	ldr	r2, [r4, #16]
 800890e:	6022      	str	r2, [r4, #0]
 8008910:	d504      	bpl.n	800891c <__sflush_r+0x7c>
 8008912:	1c42      	adds	r2, r0, #1
 8008914:	d101      	bne.n	800891a <__sflush_r+0x7a>
 8008916:	682b      	ldr	r3, [r5, #0]
 8008918:	b903      	cbnz	r3, 800891c <__sflush_r+0x7c>
 800891a:	6560      	str	r0, [r4, #84]	; 0x54
 800891c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800891e:	602f      	str	r7, [r5, #0]
 8008920:	2900      	cmp	r1, #0
 8008922:	d0ca      	beq.n	80088ba <__sflush_r+0x1a>
 8008924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008928:	4299      	cmp	r1, r3
 800892a:	d002      	beq.n	8008932 <__sflush_r+0x92>
 800892c:	4628      	mov	r0, r5
 800892e:	f7ff faa5 	bl	8007e7c <_free_r>
 8008932:	2000      	movs	r0, #0
 8008934:	6360      	str	r0, [r4, #52]	; 0x34
 8008936:	e7c1      	b.n	80088bc <__sflush_r+0x1c>
 8008938:	6a21      	ldr	r1, [r4, #32]
 800893a:	2301      	movs	r3, #1
 800893c:	4628      	mov	r0, r5
 800893e:	47b0      	blx	r6
 8008940:	1c41      	adds	r1, r0, #1
 8008942:	d1c7      	bne.n	80088d4 <__sflush_r+0x34>
 8008944:	682b      	ldr	r3, [r5, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d0c4      	beq.n	80088d4 <__sflush_r+0x34>
 800894a:	2b1d      	cmp	r3, #29
 800894c:	d001      	beq.n	8008952 <__sflush_r+0xb2>
 800894e:	2b16      	cmp	r3, #22
 8008950:	d101      	bne.n	8008956 <__sflush_r+0xb6>
 8008952:	602f      	str	r7, [r5, #0]
 8008954:	e7b1      	b.n	80088ba <__sflush_r+0x1a>
 8008956:	89a3      	ldrh	r3, [r4, #12]
 8008958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800895c:	81a3      	strh	r3, [r4, #12]
 800895e:	e7ad      	b.n	80088bc <__sflush_r+0x1c>
 8008960:	690f      	ldr	r7, [r1, #16]
 8008962:	2f00      	cmp	r7, #0
 8008964:	d0a9      	beq.n	80088ba <__sflush_r+0x1a>
 8008966:	0793      	lsls	r3, r2, #30
 8008968:	680e      	ldr	r6, [r1, #0]
 800896a:	bf08      	it	eq
 800896c:	694b      	ldreq	r3, [r1, #20]
 800896e:	600f      	str	r7, [r1, #0]
 8008970:	bf18      	it	ne
 8008972:	2300      	movne	r3, #0
 8008974:	eba6 0807 	sub.w	r8, r6, r7
 8008978:	608b      	str	r3, [r1, #8]
 800897a:	f1b8 0f00 	cmp.w	r8, #0
 800897e:	dd9c      	ble.n	80088ba <__sflush_r+0x1a>
 8008980:	6a21      	ldr	r1, [r4, #32]
 8008982:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008984:	4643      	mov	r3, r8
 8008986:	463a      	mov	r2, r7
 8008988:	4628      	mov	r0, r5
 800898a:	47b0      	blx	r6
 800898c:	2800      	cmp	r0, #0
 800898e:	dc06      	bgt.n	800899e <__sflush_r+0xfe>
 8008990:	89a3      	ldrh	r3, [r4, #12]
 8008992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008996:	81a3      	strh	r3, [r4, #12]
 8008998:	f04f 30ff 	mov.w	r0, #4294967295
 800899c:	e78e      	b.n	80088bc <__sflush_r+0x1c>
 800899e:	4407      	add	r7, r0
 80089a0:	eba8 0800 	sub.w	r8, r8, r0
 80089a4:	e7e9      	b.n	800897a <__sflush_r+0xda>
 80089a6:	bf00      	nop
 80089a8:	20400001 	.word	0x20400001

080089ac <_fflush_r>:
 80089ac:	b538      	push	{r3, r4, r5, lr}
 80089ae:	690b      	ldr	r3, [r1, #16]
 80089b0:	4605      	mov	r5, r0
 80089b2:	460c      	mov	r4, r1
 80089b4:	b913      	cbnz	r3, 80089bc <_fflush_r+0x10>
 80089b6:	2500      	movs	r5, #0
 80089b8:	4628      	mov	r0, r5
 80089ba:	bd38      	pop	{r3, r4, r5, pc}
 80089bc:	b118      	cbz	r0, 80089c6 <_fflush_r+0x1a>
 80089be:	6983      	ldr	r3, [r0, #24]
 80089c0:	b90b      	cbnz	r3, 80089c6 <_fflush_r+0x1a>
 80089c2:	f000 f887 	bl	8008ad4 <__sinit>
 80089c6:	4b14      	ldr	r3, [pc, #80]	; (8008a18 <_fflush_r+0x6c>)
 80089c8:	429c      	cmp	r4, r3
 80089ca:	d11b      	bne.n	8008a04 <_fflush_r+0x58>
 80089cc:	686c      	ldr	r4, [r5, #4]
 80089ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d0ef      	beq.n	80089b6 <_fflush_r+0xa>
 80089d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089d8:	07d0      	lsls	r0, r2, #31
 80089da:	d404      	bmi.n	80089e6 <_fflush_r+0x3a>
 80089dc:	0599      	lsls	r1, r3, #22
 80089de:	d402      	bmi.n	80089e6 <_fflush_r+0x3a>
 80089e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089e2:	f000 f915 	bl	8008c10 <__retarget_lock_acquire_recursive>
 80089e6:	4628      	mov	r0, r5
 80089e8:	4621      	mov	r1, r4
 80089ea:	f7ff ff59 	bl	80088a0 <__sflush_r>
 80089ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089f0:	07da      	lsls	r2, r3, #31
 80089f2:	4605      	mov	r5, r0
 80089f4:	d4e0      	bmi.n	80089b8 <_fflush_r+0xc>
 80089f6:	89a3      	ldrh	r3, [r4, #12]
 80089f8:	059b      	lsls	r3, r3, #22
 80089fa:	d4dd      	bmi.n	80089b8 <_fflush_r+0xc>
 80089fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089fe:	f000 f908 	bl	8008c12 <__retarget_lock_release_recursive>
 8008a02:	e7d9      	b.n	80089b8 <_fflush_r+0xc>
 8008a04:	4b05      	ldr	r3, [pc, #20]	; (8008a1c <_fflush_r+0x70>)
 8008a06:	429c      	cmp	r4, r3
 8008a08:	d101      	bne.n	8008a0e <_fflush_r+0x62>
 8008a0a:	68ac      	ldr	r4, [r5, #8]
 8008a0c:	e7df      	b.n	80089ce <_fflush_r+0x22>
 8008a0e:	4b04      	ldr	r3, [pc, #16]	; (8008a20 <_fflush_r+0x74>)
 8008a10:	429c      	cmp	r4, r3
 8008a12:	bf08      	it	eq
 8008a14:	68ec      	ldreq	r4, [r5, #12]
 8008a16:	e7da      	b.n	80089ce <_fflush_r+0x22>
 8008a18:	080099fc 	.word	0x080099fc
 8008a1c:	08009a1c 	.word	0x08009a1c
 8008a20:	080099dc 	.word	0x080099dc

08008a24 <std>:
 8008a24:	2300      	movs	r3, #0
 8008a26:	b510      	push	{r4, lr}
 8008a28:	4604      	mov	r4, r0
 8008a2a:	e9c0 3300 	strd	r3, r3, [r0]
 8008a2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a32:	6083      	str	r3, [r0, #8]
 8008a34:	8181      	strh	r1, [r0, #12]
 8008a36:	6643      	str	r3, [r0, #100]	; 0x64
 8008a38:	81c2      	strh	r2, [r0, #14]
 8008a3a:	6183      	str	r3, [r0, #24]
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	2208      	movs	r2, #8
 8008a40:	305c      	adds	r0, #92	; 0x5c
 8008a42:	f7fd fb5b 	bl	80060fc <memset>
 8008a46:	4b05      	ldr	r3, [pc, #20]	; (8008a5c <std+0x38>)
 8008a48:	6263      	str	r3, [r4, #36]	; 0x24
 8008a4a:	4b05      	ldr	r3, [pc, #20]	; (8008a60 <std+0x3c>)
 8008a4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a4e:	4b05      	ldr	r3, [pc, #20]	; (8008a64 <std+0x40>)
 8008a50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a52:	4b05      	ldr	r3, [pc, #20]	; (8008a68 <std+0x44>)
 8008a54:	6224      	str	r4, [r4, #32]
 8008a56:	6323      	str	r3, [r4, #48]	; 0x30
 8008a58:	bd10      	pop	{r4, pc}
 8008a5a:	bf00      	nop
 8008a5c:	08008d79 	.word	0x08008d79
 8008a60:	08008d9b 	.word	0x08008d9b
 8008a64:	08008dd3 	.word	0x08008dd3
 8008a68:	08008df7 	.word	0x08008df7

08008a6c <_cleanup_r>:
 8008a6c:	4901      	ldr	r1, [pc, #4]	; (8008a74 <_cleanup_r+0x8>)
 8008a6e:	f000 b8af 	b.w	8008bd0 <_fwalk_reent>
 8008a72:	bf00      	nop
 8008a74:	080089ad 	.word	0x080089ad

08008a78 <__sfmoreglue>:
 8008a78:	b570      	push	{r4, r5, r6, lr}
 8008a7a:	2268      	movs	r2, #104	; 0x68
 8008a7c:	1e4d      	subs	r5, r1, #1
 8008a7e:	4355      	muls	r5, r2
 8008a80:	460e      	mov	r6, r1
 8008a82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a86:	f7ff fa65 	bl	8007f54 <_malloc_r>
 8008a8a:	4604      	mov	r4, r0
 8008a8c:	b140      	cbz	r0, 8008aa0 <__sfmoreglue+0x28>
 8008a8e:	2100      	movs	r1, #0
 8008a90:	e9c0 1600 	strd	r1, r6, [r0]
 8008a94:	300c      	adds	r0, #12
 8008a96:	60a0      	str	r0, [r4, #8]
 8008a98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a9c:	f7fd fb2e 	bl	80060fc <memset>
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	bd70      	pop	{r4, r5, r6, pc}

08008aa4 <__sfp_lock_acquire>:
 8008aa4:	4801      	ldr	r0, [pc, #4]	; (8008aac <__sfp_lock_acquire+0x8>)
 8008aa6:	f000 b8b3 	b.w	8008c10 <__retarget_lock_acquire_recursive>
 8008aaa:	bf00      	nop
 8008aac:	2000046d 	.word	0x2000046d

08008ab0 <__sfp_lock_release>:
 8008ab0:	4801      	ldr	r0, [pc, #4]	; (8008ab8 <__sfp_lock_release+0x8>)
 8008ab2:	f000 b8ae 	b.w	8008c12 <__retarget_lock_release_recursive>
 8008ab6:	bf00      	nop
 8008ab8:	2000046d 	.word	0x2000046d

08008abc <__sinit_lock_acquire>:
 8008abc:	4801      	ldr	r0, [pc, #4]	; (8008ac4 <__sinit_lock_acquire+0x8>)
 8008abe:	f000 b8a7 	b.w	8008c10 <__retarget_lock_acquire_recursive>
 8008ac2:	bf00      	nop
 8008ac4:	2000046e 	.word	0x2000046e

08008ac8 <__sinit_lock_release>:
 8008ac8:	4801      	ldr	r0, [pc, #4]	; (8008ad0 <__sinit_lock_release+0x8>)
 8008aca:	f000 b8a2 	b.w	8008c12 <__retarget_lock_release_recursive>
 8008ace:	bf00      	nop
 8008ad0:	2000046e 	.word	0x2000046e

08008ad4 <__sinit>:
 8008ad4:	b510      	push	{r4, lr}
 8008ad6:	4604      	mov	r4, r0
 8008ad8:	f7ff fff0 	bl	8008abc <__sinit_lock_acquire>
 8008adc:	69a3      	ldr	r3, [r4, #24]
 8008ade:	b11b      	cbz	r3, 8008ae8 <__sinit+0x14>
 8008ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ae4:	f7ff bff0 	b.w	8008ac8 <__sinit_lock_release>
 8008ae8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008aec:	6523      	str	r3, [r4, #80]	; 0x50
 8008aee:	4b13      	ldr	r3, [pc, #76]	; (8008b3c <__sinit+0x68>)
 8008af0:	4a13      	ldr	r2, [pc, #76]	; (8008b40 <__sinit+0x6c>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	62a2      	str	r2, [r4, #40]	; 0x28
 8008af6:	42a3      	cmp	r3, r4
 8008af8:	bf04      	itt	eq
 8008afa:	2301      	moveq	r3, #1
 8008afc:	61a3      	streq	r3, [r4, #24]
 8008afe:	4620      	mov	r0, r4
 8008b00:	f000 f820 	bl	8008b44 <__sfp>
 8008b04:	6060      	str	r0, [r4, #4]
 8008b06:	4620      	mov	r0, r4
 8008b08:	f000 f81c 	bl	8008b44 <__sfp>
 8008b0c:	60a0      	str	r0, [r4, #8]
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f000 f818 	bl	8008b44 <__sfp>
 8008b14:	2200      	movs	r2, #0
 8008b16:	60e0      	str	r0, [r4, #12]
 8008b18:	2104      	movs	r1, #4
 8008b1a:	6860      	ldr	r0, [r4, #4]
 8008b1c:	f7ff ff82 	bl	8008a24 <std>
 8008b20:	68a0      	ldr	r0, [r4, #8]
 8008b22:	2201      	movs	r2, #1
 8008b24:	2109      	movs	r1, #9
 8008b26:	f7ff ff7d 	bl	8008a24 <std>
 8008b2a:	68e0      	ldr	r0, [r4, #12]
 8008b2c:	2202      	movs	r2, #2
 8008b2e:	2112      	movs	r1, #18
 8008b30:	f7ff ff78 	bl	8008a24 <std>
 8008b34:	2301      	movs	r3, #1
 8008b36:	61a3      	str	r3, [r4, #24]
 8008b38:	e7d2      	b.n	8008ae0 <__sinit+0xc>
 8008b3a:	bf00      	nop
 8008b3c:	08009660 	.word	0x08009660
 8008b40:	08008a6d 	.word	0x08008a6d

08008b44 <__sfp>:
 8008b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b46:	4607      	mov	r7, r0
 8008b48:	f7ff ffac 	bl	8008aa4 <__sfp_lock_acquire>
 8008b4c:	4b1e      	ldr	r3, [pc, #120]	; (8008bc8 <__sfp+0x84>)
 8008b4e:	681e      	ldr	r6, [r3, #0]
 8008b50:	69b3      	ldr	r3, [r6, #24]
 8008b52:	b913      	cbnz	r3, 8008b5a <__sfp+0x16>
 8008b54:	4630      	mov	r0, r6
 8008b56:	f7ff ffbd 	bl	8008ad4 <__sinit>
 8008b5a:	3648      	adds	r6, #72	; 0x48
 8008b5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b60:	3b01      	subs	r3, #1
 8008b62:	d503      	bpl.n	8008b6c <__sfp+0x28>
 8008b64:	6833      	ldr	r3, [r6, #0]
 8008b66:	b30b      	cbz	r3, 8008bac <__sfp+0x68>
 8008b68:	6836      	ldr	r6, [r6, #0]
 8008b6a:	e7f7      	b.n	8008b5c <__sfp+0x18>
 8008b6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b70:	b9d5      	cbnz	r5, 8008ba8 <__sfp+0x64>
 8008b72:	4b16      	ldr	r3, [pc, #88]	; (8008bcc <__sfp+0x88>)
 8008b74:	60e3      	str	r3, [r4, #12]
 8008b76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b7a:	6665      	str	r5, [r4, #100]	; 0x64
 8008b7c:	f000 f847 	bl	8008c0e <__retarget_lock_init_recursive>
 8008b80:	f7ff ff96 	bl	8008ab0 <__sfp_lock_release>
 8008b84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008b88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008b8c:	6025      	str	r5, [r4, #0]
 8008b8e:	61a5      	str	r5, [r4, #24]
 8008b90:	2208      	movs	r2, #8
 8008b92:	4629      	mov	r1, r5
 8008b94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b98:	f7fd fab0 	bl	80060fc <memset>
 8008b9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ba0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ba8:	3468      	adds	r4, #104	; 0x68
 8008baa:	e7d9      	b.n	8008b60 <__sfp+0x1c>
 8008bac:	2104      	movs	r1, #4
 8008bae:	4638      	mov	r0, r7
 8008bb0:	f7ff ff62 	bl	8008a78 <__sfmoreglue>
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	6030      	str	r0, [r6, #0]
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	d1d5      	bne.n	8008b68 <__sfp+0x24>
 8008bbc:	f7ff ff78 	bl	8008ab0 <__sfp_lock_release>
 8008bc0:	230c      	movs	r3, #12
 8008bc2:	603b      	str	r3, [r7, #0]
 8008bc4:	e7ee      	b.n	8008ba4 <__sfp+0x60>
 8008bc6:	bf00      	nop
 8008bc8:	08009660 	.word	0x08009660
 8008bcc:	ffff0001 	.word	0xffff0001

08008bd0 <_fwalk_reent>:
 8008bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bd4:	4606      	mov	r6, r0
 8008bd6:	4688      	mov	r8, r1
 8008bd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008bdc:	2700      	movs	r7, #0
 8008bde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008be2:	f1b9 0901 	subs.w	r9, r9, #1
 8008be6:	d505      	bpl.n	8008bf4 <_fwalk_reent+0x24>
 8008be8:	6824      	ldr	r4, [r4, #0]
 8008bea:	2c00      	cmp	r4, #0
 8008bec:	d1f7      	bne.n	8008bde <_fwalk_reent+0xe>
 8008bee:	4638      	mov	r0, r7
 8008bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bf4:	89ab      	ldrh	r3, [r5, #12]
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d907      	bls.n	8008c0a <_fwalk_reent+0x3a>
 8008bfa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008bfe:	3301      	adds	r3, #1
 8008c00:	d003      	beq.n	8008c0a <_fwalk_reent+0x3a>
 8008c02:	4629      	mov	r1, r5
 8008c04:	4630      	mov	r0, r6
 8008c06:	47c0      	blx	r8
 8008c08:	4307      	orrs	r7, r0
 8008c0a:	3568      	adds	r5, #104	; 0x68
 8008c0c:	e7e9      	b.n	8008be2 <_fwalk_reent+0x12>

08008c0e <__retarget_lock_init_recursive>:
 8008c0e:	4770      	bx	lr

08008c10 <__retarget_lock_acquire_recursive>:
 8008c10:	4770      	bx	lr

08008c12 <__retarget_lock_release_recursive>:
 8008c12:	4770      	bx	lr

08008c14 <__swhatbuf_r>:
 8008c14:	b570      	push	{r4, r5, r6, lr}
 8008c16:	460e      	mov	r6, r1
 8008c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c1c:	2900      	cmp	r1, #0
 8008c1e:	b096      	sub	sp, #88	; 0x58
 8008c20:	4614      	mov	r4, r2
 8008c22:	461d      	mov	r5, r3
 8008c24:	da08      	bge.n	8008c38 <__swhatbuf_r+0x24>
 8008c26:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	602a      	str	r2, [r5, #0]
 8008c2e:	061a      	lsls	r2, r3, #24
 8008c30:	d410      	bmi.n	8008c54 <__swhatbuf_r+0x40>
 8008c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c36:	e00e      	b.n	8008c56 <__swhatbuf_r+0x42>
 8008c38:	466a      	mov	r2, sp
 8008c3a:	f000 f903 	bl	8008e44 <_fstat_r>
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	dbf1      	blt.n	8008c26 <__swhatbuf_r+0x12>
 8008c42:	9a01      	ldr	r2, [sp, #4]
 8008c44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c4c:	425a      	negs	r2, r3
 8008c4e:	415a      	adcs	r2, r3
 8008c50:	602a      	str	r2, [r5, #0]
 8008c52:	e7ee      	b.n	8008c32 <__swhatbuf_r+0x1e>
 8008c54:	2340      	movs	r3, #64	; 0x40
 8008c56:	2000      	movs	r0, #0
 8008c58:	6023      	str	r3, [r4, #0]
 8008c5a:	b016      	add	sp, #88	; 0x58
 8008c5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008c60 <__smakebuf_r>:
 8008c60:	898b      	ldrh	r3, [r1, #12]
 8008c62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c64:	079d      	lsls	r5, r3, #30
 8008c66:	4606      	mov	r6, r0
 8008c68:	460c      	mov	r4, r1
 8008c6a:	d507      	bpl.n	8008c7c <__smakebuf_r+0x1c>
 8008c6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c70:	6023      	str	r3, [r4, #0]
 8008c72:	6123      	str	r3, [r4, #16]
 8008c74:	2301      	movs	r3, #1
 8008c76:	6163      	str	r3, [r4, #20]
 8008c78:	b002      	add	sp, #8
 8008c7a:	bd70      	pop	{r4, r5, r6, pc}
 8008c7c:	ab01      	add	r3, sp, #4
 8008c7e:	466a      	mov	r2, sp
 8008c80:	f7ff ffc8 	bl	8008c14 <__swhatbuf_r>
 8008c84:	9900      	ldr	r1, [sp, #0]
 8008c86:	4605      	mov	r5, r0
 8008c88:	4630      	mov	r0, r6
 8008c8a:	f7ff f963 	bl	8007f54 <_malloc_r>
 8008c8e:	b948      	cbnz	r0, 8008ca4 <__smakebuf_r+0x44>
 8008c90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c94:	059a      	lsls	r2, r3, #22
 8008c96:	d4ef      	bmi.n	8008c78 <__smakebuf_r+0x18>
 8008c98:	f023 0303 	bic.w	r3, r3, #3
 8008c9c:	f043 0302 	orr.w	r3, r3, #2
 8008ca0:	81a3      	strh	r3, [r4, #12]
 8008ca2:	e7e3      	b.n	8008c6c <__smakebuf_r+0xc>
 8008ca4:	4b0d      	ldr	r3, [pc, #52]	; (8008cdc <__smakebuf_r+0x7c>)
 8008ca6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ca8:	89a3      	ldrh	r3, [r4, #12]
 8008caa:	6020      	str	r0, [r4, #0]
 8008cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cb0:	81a3      	strh	r3, [r4, #12]
 8008cb2:	9b00      	ldr	r3, [sp, #0]
 8008cb4:	6163      	str	r3, [r4, #20]
 8008cb6:	9b01      	ldr	r3, [sp, #4]
 8008cb8:	6120      	str	r0, [r4, #16]
 8008cba:	b15b      	cbz	r3, 8008cd4 <__smakebuf_r+0x74>
 8008cbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	f000 f8d1 	bl	8008e68 <_isatty_r>
 8008cc6:	b128      	cbz	r0, 8008cd4 <__smakebuf_r+0x74>
 8008cc8:	89a3      	ldrh	r3, [r4, #12]
 8008cca:	f023 0303 	bic.w	r3, r3, #3
 8008cce:	f043 0301 	orr.w	r3, r3, #1
 8008cd2:	81a3      	strh	r3, [r4, #12]
 8008cd4:	89a0      	ldrh	r0, [r4, #12]
 8008cd6:	4305      	orrs	r5, r0
 8008cd8:	81a5      	strh	r5, [r4, #12]
 8008cda:	e7cd      	b.n	8008c78 <__smakebuf_r+0x18>
 8008cdc:	08008a6d 	.word	0x08008a6d

08008ce0 <_malloc_usable_size_r>:
 8008ce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ce4:	1f18      	subs	r0, r3, #4
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	bfbc      	itt	lt
 8008cea:	580b      	ldrlt	r3, [r1, r0]
 8008cec:	18c0      	addlt	r0, r0, r3
 8008cee:	4770      	bx	lr

08008cf0 <_raise_r>:
 8008cf0:	291f      	cmp	r1, #31
 8008cf2:	b538      	push	{r3, r4, r5, lr}
 8008cf4:	4604      	mov	r4, r0
 8008cf6:	460d      	mov	r5, r1
 8008cf8:	d904      	bls.n	8008d04 <_raise_r+0x14>
 8008cfa:	2316      	movs	r3, #22
 8008cfc:	6003      	str	r3, [r0, #0]
 8008cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8008d02:	bd38      	pop	{r3, r4, r5, pc}
 8008d04:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008d06:	b112      	cbz	r2, 8008d0e <_raise_r+0x1e>
 8008d08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d0c:	b94b      	cbnz	r3, 8008d22 <_raise_r+0x32>
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f000 f830 	bl	8008d74 <_getpid_r>
 8008d14:	462a      	mov	r2, r5
 8008d16:	4601      	mov	r1, r0
 8008d18:	4620      	mov	r0, r4
 8008d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d1e:	f000 b817 	b.w	8008d50 <_kill_r>
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d00a      	beq.n	8008d3c <_raise_r+0x4c>
 8008d26:	1c59      	adds	r1, r3, #1
 8008d28:	d103      	bne.n	8008d32 <_raise_r+0x42>
 8008d2a:	2316      	movs	r3, #22
 8008d2c:	6003      	str	r3, [r0, #0]
 8008d2e:	2001      	movs	r0, #1
 8008d30:	e7e7      	b.n	8008d02 <_raise_r+0x12>
 8008d32:	2400      	movs	r4, #0
 8008d34:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d38:	4628      	mov	r0, r5
 8008d3a:	4798      	blx	r3
 8008d3c:	2000      	movs	r0, #0
 8008d3e:	e7e0      	b.n	8008d02 <_raise_r+0x12>

08008d40 <raise>:
 8008d40:	4b02      	ldr	r3, [pc, #8]	; (8008d4c <raise+0xc>)
 8008d42:	4601      	mov	r1, r0
 8008d44:	6818      	ldr	r0, [r3, #0]
 8008d46:	f7ff bfd3 	b.w	8008cf0 <_raise_r>
 8008d4a:	bf00      	nop
 8008d4c:	200000a4 	.word	0x200000a4

08008d50 <_kill_r>:
 8008d50:	b538      	push	{r3, r4, r5, lr}
 8008d52:	4d07      	ldr	r5, [pc, #28]	; (8008d70 <_kill_r+0x20>)
 8008d54:	2300      	movs	r3, #0
 8008d56:	4604      	mov	r4, r0
 8008d58:	4608      	mov	r0, r1
 8008d5a:	4611      	mov	r1, r2
 8008d5c:	602b      	str	r3, [r5, #0]
 8008d5e:	f7f9 fa76 	bl	800224e <_kill>
 8008d62:	1c43      	adds	r3, r0, #1
 8008d64:	d102      	bne.n	8008d6c <_kill_r+0x1c>
 8008d66:	682b      	ldr	r3, [r5, #0]
 8008d68:	b103      	cbz	r3, 8008d6c <_kill_r+0x1c>
 8008d6a:	6023      	str	r3, [r4, #0]
 8008d6c:	bd38      	pop	{r3, r4, r5, pc}
 8008d6e:	bf00      	nop
 8008d70:	20000468 	.word	0x20000468

08008d74 <_getpid_r>:
 8008d74:	f7f9 ba63 	b.w	800223e <_getpid>

08008d78 <__sread>:
 8008d78:	b510      	push	{r4, lr}
 8008d7a:	460c      	mov	r4, r1
 8008d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d80:	f000 f894 	bl	8008eac <_read_r>
 8008d84:	2800      	cmp	r0, #0
 8008d86:	bfab      	itete	ge
 8008d88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d8a:	89a3      	ldrhlt	r3, [r4, #12]
 8008d8c:	181b      	addge	r3, r3, r0
 8008d8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d92:	bfac      	ite	ge
 8008d94:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d96:	81a3      	strhlt	r3, [r4, #12]
 8008d98:	bd10      	pop	{r4, pc}

08008d9a <__swrite>:
 8008d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d9e:	461f      	mov	r7, r3
 8008da0:	898b      	ldrh	r3, [r1, #12]
 8008da2:	05db      	lsls	r3, r3, #23
 8008da4:	4605      	mov	r5, r0
 8008da6:	460c      	mov	r4, r1
 8008da8:	4616      	mov	r6, r2
 8008daa:	d505      	bpl.n	8008db8 <__swrite+0x1e>
 8008dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008db0:	2302      	movs	r3, #2
 8008db2:	2200      	movs	r2, #0
 8008db4:	f000 f868 	bl	8008e88 <_lseek_r>
 8008db8:	89a3      	ldrh	r3, [r4, #12]
 8008dba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008dc2:	81a3      	strh	r3, [r4, #12]
 8008dc4:	4632      	mov	r2, r6
 8008dc6:	463b      	mov	r3, r7
 8008dc8:	4628      	mov	r0, r5
 8008dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dce:	f000 b817 	b.w	8008e00 <_write_r>

08008dd2 <__sseek>:
 8008dd2:	b510      	push	{r4, lr}
 8008dd4:	460c      	mov	r4, r1
 8008dd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dda:	f000 f855 	bl	8008e88 <_lseek_r>
 8008dde:	1c43      	adds	r3, r0, #1
 8008de0:	89a3      	ldrh	r3, [r4, #12]
 8008de2:	bf15      	itete	ne
 8008de4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008de6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008dea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008dee:	81a3      	strheq	r3, [r4, #12]
 8008df0:	bf18      	it	ne
 8008df2:	81a3      	strhne	r3, [r4, #12]
 8008df4:	bd10      	pop	{r4, pc}

08008df6 <__sclose>:
 8008df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dfa:	f000 b813 	b.w	8008e24 <_close_r>
	...

08008e00 <_write_r>:
 8008e00:	b538      	push	{r3, r4, r5, lr}
 8008e02:	4d07      	ldr	r5, [pc, #28]	; (8008e20 <_write_r+0x20>)
 8008e04:	4604      	mov	r4, r0
 8008e06:	4608      	mov	r0, r1
 8008e08:	4611      	mov	r1, r2
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	602a      	str	r2, [r5, #0]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	f7f9 fa54 	bl	80022bc <_write>
 8008e14:	1c43      	adds	r3, r0, #1
 8008e16:	d102      	bne.n	8008e1e <_write_r+0x1e>
 8008e18:	682b      	ldr	r3, [r5, #0]
 8008e1a:	b103      	cbz	r3, 8008e1e <_write_r+0x1e>
 8008e1c:	6023      	str	r3, [r4, #0]
 8008e1e:	bd38      	pop	{r3, r4, r5, pc}
 8008e20:	20000468 	.word	0x20000468

08008e24 <_close_r>:
 8008e24:	b538      	push	{r3, r4, r5, lr}
 8008e26:	4d06      	ldr	r5, [pc, #24]	; (8008e40 <_close_r+0x1c>)
 8008e28:	2300      	movs	r3, #0
 8008e2a:	4604      	mov	r4, r0
 8008e2c:	4608      	mov	r0, r1
 8008e2e:	602b      	str	r3, [r5, #0]
 8008e30:	f7f9 fa60 	bl	80022f4 <_close>
 8008e34:	1c43      	adds	r3, r0, #1
 8008e36:	d102      	bne.n	8008e3e <_close_r+0x1a>
 8008e38:	682b      	ldr	r3, [r5, #0]
 8008e3a:	b103      	cbz	r3, 8008e3e <_close_r+0x1a>
 8008e3c:	6023      	str	r3, [r4, #0]
 8008e3e:	bd38      	pop	{r3, r4, r5, pc}
 8008e40:	20000468 	.word	0x20000468

08008e44 <_fstat_r>:
 8008e44:	b538      	push	{r3, r4, r5, lr}
 8008e46:	4d07      	ldr	r5, [pc, #28]	; (8008e64 <_fstat_r+0x20>)
 8008e48:	2300      	movs	r3, #0
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	4608      	mov	r0, r1
 8008e4e:	4611      	mov	r1, r2
 8008e50:	602b      	str	r3, [r5, #0]
 8008e52:	f7f9 fa5b 	bl	800230c <_fstat>
 8008e56:	1c43      	adds	r3, r0, #1
 8008e58:	d102      	bne.n	8008e60 <_fstat_r+0x1c>
 8008e5a:	682b      	ldr	r3, [r5, #0]
 8008e5c:	b103      	cbz	r3, 8008e60 <_fstat_r+0x1c>
 8008e5e:	6023      	str	r3, [r4, #0]
 8008e60:	bd38      	pop	{r3, r4, r5, pc}
 8008e62:	bf00      	nop
 8008e64:	20000468 	.word	0x20000468

08008e68 <_isatty_r>:
 8008e68:	b538      	push	{r3, r4, r5, lr}
 8008e6a:	4d06      	ldr	r5, [pc, #24]	; (8008e84 <_isatty_r+0x1c>)
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	4604      	mov	r4, r0
 8008e70:	4608      	mov	r0, r1
 8008e72:	602b      	str	r3, [r5, #0]
 8008e74:	f7f9 fa5a 	bl	800232c <_isatty>
 8008e78:	1c43      	adds	r3, r0, #1
 8008e7a:	d102      	bne.n	8008e82 <_isatty_r+0x1a>
 8008e7c:	682b      	ldr	r3, [r5, #0]
 8008e7e:	b103      	cbz	r3, 8008e82 <_isatty_r+0x1a>
 8008e80:	6023      	str	r3, [r4, #0]
 8008e82:	bd38      	pop	{r3, r4, r5, pc}
 8008e84:	20000468 	.word	0x20000468

08008e88 <_lseek_r>:
 8008e88:	b538      	push	{r3, r4, r5, lr}
 8008e8a:	4d07      	ldr	r5, [pc, #28]	; (8008ea8 <_lseek_r+0x20>)
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	4608      	mov	r0, r1
 8008e90:	4611      	mov	r1, r2
 8008e92:	2200      	movs	r2, #0
 8008e94:	602a      	str	r2, [r5, #0]
 8008e96:	461a      	mov	r2, r3
 8008e98:	f7f9 fa53 	bl	8002342 <_lseek>
 8008e9c:	1c43      	adds	r3, r0, #1
 8008e9e:	d102      	bne.n	8008ea6 <_lseek_r+0x1e>
 8008ea0:	682b      	ldr	r3, [r5, #0]
 8008ea2:	b103      	cbz	r3, 8008ea6 <_lseek_r+0x1e>
 8008ea4:	6023      	str	r3, [r4, #0]
 8008ea6:	bd38      	pop	{r3, r4, r5, pc}
 8008ea8:	20000468 	.word	0x20000468

08008eac <_read_r>:
 8008eac:	b538      	push	{r3, r4, r5, lr}
 8008eae:	4d07      	ldr	r5, [pc, #28]	; (8008ecc <_read_r+0x20>)
 8008eb0:	4604      	mov	r4, r0
 8008eb2:	4608      	mov	r0, r1
 8008eb4:	4611      	mov	r1, r2
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	602a      	str	r2, [r5, #0]
 8008eba:	461a      	mov	r2, r3
 8008ebc:	f7f9 f9e1 	bl	8002282 <_read>
 8008ec0:	1c43      	adds	r3, r0, #1
 8008ec2:	d102      	bne.n	8008eca <_read_r+0x1e>
 8008ec4:	682b      	ldr	r3, [r5, #0]
 8008ec6:	b103      	cbz	r3, 8008eca <_read_r+0x1e>
 8008ec8:	6023      	str	r3, [r4, #0]
 8008eca:	bd38      	pop	{r3, r4, r5, pc}
 8008ecc:	20000468 	.word	0x20000468

08008ed0 <atan>:
 8008ed0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed4:	ec55 4b10 	vmov	r4, r5, d0
 8008ed8:	4bc3      	ldr	r3, [pc, #780]	; (80091e8 <atan+0x318>)
 8008eda:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008ede:	429e      	cmp	r6, r3
 8008ee0:	46ab      	mov	fp, r5
 8008ee2:	dd18      	ble.n	8008f16 <atan+0x46>
 8008ee4:	4bc1      	ldr	r3, [pc, #772]	; (80091ec <atan+0x31c>)
 8008ee6:	429e      	cmp	r6, r3
 8008ee8:	dc01      	bgt.n	8008eee <atan+0x1e>
 8008eea:	d109      	bne.n	8008f00 <atan+0x30>
 8008eec:	b144      	cbz	r4, 8008f00 <atan+0x30>
 8008eee:	4622      	mov	r2, r4
 8008ef0:	462b      	mov	r3, r5
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	4629      	mov	r1, r5
 8008ef6:	f7f7 f9c9 	bl	800028c <__adddf3>
 8008efa:	4604      	mov	r4, r0
 8008efc:	460d      	mov	r5, r1
 8008efe:	e006      	b.n	8008f0e <atan+0x3e>
 8008f00:	f1bb 0f00 	cmp.w	fp, #0
 8008f04:	f300 8131 	bgt.w	800916a <atan+0x29a>
 8008f08:	a59b      	add	r5, pc, #620	; (adr r5, 8009178 <atan+0x2a8>)
 8008f0a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008f0e:	ec45 4b10 	vmov	d0, r4, r5
 8008f12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f16:	4bb6      	ldr	r3, [pc, #728]	; (80091f0 <atan+0x320>)
 8008f18:	429e      	cmp	r6, r3
 8008f1a:	dc14      	bgt.n	8008f46 <atan+0x76>
 8008f1c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008f20:	429e      	cmp	r6, r3
 8008f22:	dc0d      	bgt.n	8008f40 <atan+0x70>
 8008f24:	a396      	add	r3, pc, #600	; (adr r3, 8009180 <atan+0x2b0>)
 8008f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2a:	ee10 0a10 	vmov	r0, s0
 8008f2e:	4629      	mov	r1, r5
 8008f30:	f7f7 f9ac 	bl	800028c <__adddf3>
 8008f34:	4baf      	ldr	r3, [pc, #700]	; (80091f4 <atan+0x324>)
 8008f36:	2200      	movs	r2, #0
 8008f38:	f7f7 fdee 	bl	8000b18 <__aeabi_dcmpgt>
 8008f3c:	2800      	cmp	r0, #0
 8008f3e:	d1e6      	bne.n	8008f0e <atan+0x3e>
 8008f40:	f04f 3aff 	mov.w	sl, #4294967295
 8008f44:	e02b      	b.n	8008f9e <atan+0xce>
 8008f46:	f000 f963 	bl	8009210 <fabs>
 8008f4a:	4bab      	ldr	r3, [pc, #684]	; (80091f8 <atan+0x328>)
 8008f4c:	429e      	cmp	r6, r3
 8008f4e:	ec55 4b10 	vmov	r4, r5, d0
 8008f52:	f300 80bf 	bgt.w	80090d4 <atan+0x204>
 8008f56:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008f5a:	429e      	cmp	r6, r3
 8008f5c:	f300 80a0 	bgt.w	80090a0 <atan+0x1d0>
 8008f60:	ee10 2a10 	vmov	r2, s0
 8008f64:	ee10 0a10 	vmov	r0, s0
 8008f68:	462b      	mov	r3, r5
 8008f6a:	4629      	mov	r1, r5
 8008f6c:	f7f7 f98e 	bl	800028c <__adddf3>
 8008f70:	4ba0      	ldr	r3, [pc, #640]	; (80091f4 <atan+0x324>)
 8008f72:	2200      	movs	r2, #0
 8008f74:	f7f7 f988 	bl	8000288 <__aeabi_dsub>
 8008f78:	2200      	movs	r2, #0
 8008f7a:	4606      	mov	r6, r0
 8008f7c:	460f      	mov	r7, r1
 8008f7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008f82:	4620      	mov	r0, r4
 8008f84:	4629      	mov	r1, r5
 8008f86:	f7f7 f981 	bl	800028c <__adddf3>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	4630      	mov	r0, r6
 8008f90:	4639      	mov	r1, r7
 8008f92:	f7f7 fc5b 	bl	800084c <__aeabi_ddiv>
 8008f96:	f04f 0a00 	mov.w	sl, #0
 8008f9a:	4604      	mov	r4, r0
 8008f9c:	460d      	mov	r5, r1
 8008f9e:	4622      	mov	r2, r4
 8008fa0:	462b      	mov	r3, r5
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	4629      	mov	r1, r5
 8008fa6:	f7f7 fb27 	bl	80005f8 <__aeabi_dmul>
 8008faa:	4602      	mov	r2, r0
 8008fac:	460b      	mov	r3, r1
 8008fae:	4680      	mov	r8, r0
 8008fb0:	4689      	mov	r9, r1
 8008fb2:	f7f7 fb21 	bl	80005f8 <__aeabi_dmul>
 8008fb6:	a374      	add	r3, pc, #464	; (adr r3, 8009188 <atan+0x2b8>)
 8008fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fbc:	4606      	mov	r6, r0
 8008fbe:	460f      	mov	r7, r1
 8008fc0:	f7f7 fb1a 	bl	80005f8 <__aeabi_dmul>
 8008fc4:	a372      	add	r3, pc, #456	; (adr r3, 8009190 <atan+0x2c0>)
 8008fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fca:	f7f7 f95f 	bl	800028c <__adddf3>
 8008fce:	4632      	mov	r2, r6
 8008fd0:	463b      	mov	r3, r7
 8008fd2:	f7f7 fb11 	bl	80005f8 <__aeabi_dmul>
 8008fd6:	a370      	add	r3, pc, #448	; (adr r3, 8009198 <atan+0x2c8>)
 8008fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fdc:	f7f7 f956 	bl	800028c <__adddf3>
 8008fe0:	4632      	mov	r2, r6
 8008fe2:	463b      	mov	r3, r7
 8008fe4:	f7f7 fb08 	bl	80005f8 <__aeabi_dmul>
 8008fe8:	a36d      	add	r3, pc, #436	; (adr r3, 80091a0 <atan+0x2d0>)
 8008fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fee:	f7f7 f94d 	bl	800028c <__adddf3>
 8008ff2:	4632      	mov	r2, r6
 8008ff4:	463b      	mov	r3, r7
 8008ff6:	f7f7 faff 	bl	80005f8 <__aeabi_dmul>
 8008ffa:	a36b      	add	r3, pc, #428	; (adr r3, 80091a8 <atan+0x2d8>)
 8008ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009000:	f7f7 f944 	bl	800028c <__adddf3>
 8009004:	4632      	mov	r2, r6
 8009006:	463b      	mov	r3, r7
 8009008:	f7f7 faf6 	bl	80005f8 <__aeabi_dmul>
 800900c:	a368      	add	r3, pc, #416	; (adr r3, 80091b0 <atan+0x2e0>)
 800900e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009012:	f7f7 f93b 	bl	800028c <__adddf3>
 8009016:	4642      	mov	r2, r8
 8009018:	464b      	mov	r3, r9
 800901a:	f7f7 faed 	bl	80005f8 <__aeabi_dmul>
 800901e:	a366      	add	r3, pc, #408	; (adr r3, 80091b8 <atan+0x2e8>)
 8009020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009024:	4680      	mov	r8, r0
 8009026:	4689      	mov	r9, r1
 8009028:	4630      	mov	r0, r6
 800902a:	4639      	mov	r1, r7
 800902c:	f7f7 fae4 	bl	80005f8 <__aeabi_dmul>
 8009030:	a363      	add	r3, pc, #396	; (adr r3, 80091c0 <atan+0x2f0>)
 8009032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009036:	f7f7 f927 	bl	8000288 <__aeabi_dsub>
 800903a:	4632      	mov	r2, r6
 800903c:	463b      	mov	r3, r7
 800903e:	f7f7 fadb 	bl	80005f8 <__aeabi_dmul>
 8009042:	a361      	add	r3, pc, #388	; (adr r3, 80091c8 <atan+0x2f8>)
 8009044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009048:	f7f7 f91e 	bl	8000288 <__aeabi_dsub>
 800904c:	4632      	mov	r2, r6
 800904e:	463b      	mov	r3, r7
 8009050:	f7f7 fad2 	bl	80005f8 <__aeabi_dmul>
 8009054:	a35e      	add	r3, pc, #376	; (adr r3, 80091d0 <atan+0x300>)
 8009056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905a:	f7f7 f915 	bl	8000288 <__aeabi_dsub>
 800905e:	4632      	mov	r2, r6
 8009060:	463b      	mov	r3, r7
 8009062:	f7f7 fac9 	bl	80005f8 <__aeabi_dmul>
 8009066:	a35c      	add	r3, pc, #368	; (adr r3, 80091d8 <atan+0x308>)
 8009068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906c:	f7f7 f90c 	bl	8000288 <__aeabi_dsub>
 8009070:	4632      	mov	r2, r6
 8009072:	463b      	mov	r3, r7
 8009074:	f7f7 fac0 	bl	80005f8 <__aeabi_dmul>
 8009078:	4602      	mov	r2, r0
 800907a:	460b      	mov	r3, r1
 800907c:	4640      	mov	r0, r8
 800907e:	4649      	mov	r1, r9
 8009080:	f7f7 f904 	bl	800028c <__adddf3>
 8009084:	4622      	mov	r2, r4
 8009086:	462b      	mov	r3, r5
 8009088:	f7f7 fab6 	bl	80005f8 <__aeabi_dmul>
 800908c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009090:	4602      	mov	r2, r0
 8009092:	460b      	mov	r3, r1
 8009094:	d14b      	bne.n	800912e <atan+0x25e>
 8009096:	4620      	mov	r0, r4
 8009098:	4629      	mov	r1, r5
 800909a:	f7f7 f8f5 	bl	8000288 <__aeabi_dsub>
 800909e:	e72c      	b.n	8008efa <atan+0x2a>
 80090a0:	ee10 0a10 	vmov	r0, s0
 80090a4:	4b53      	ldr	r3, [pc, #332]	; (80091f4 <atan+0x324>)
 80090a6:	2200      	movs	r2, #0
 80090a8:	4629      	mov	r1, r5
 80090aa:	f7f7 f8ed 	bl	8000288 <__aeabi_dsub>
 80090ae:	4b51      	ldr	r3, [pc, #324]	; (80091f4 <atan+0x324>)
 80090b0:	4606      	mov	r6, r0
 80090b2:	460f      	mov	r7, r1
 80090b4:	2200      	movs	r2, #0
 80090b6:	4620      	mov	r0, r4
 80090b8:	4629      	mov	r1, r5
 80090ba:	f7f7 f8e7 	bl	800028c <__adddf3>
 80090be:	4602      	mov	r2, r0
 80090c0:	460b      	mov	r3, r1
 80090c2:	4630      	mov	r0, r6
 80090c4:	4639      	mov	r1, r7
 80090c6:	f7f7 fbc1 	bl	800084c <__aeabi_ddiv>
 80090ca:	f04f 0a01 	mov.w	sl, #1
 80090ce:	4604      	mov	r4, r0
 80090d0:	460d      	mov	r5, r1
 80090d2:	e764      	b.n	8008f9e <atan+0xce>
 80090d4:	4b49      	ldr	r3, [pc, #292]	; (80091fc <atan+0x32c>)
 80090d6:	429e      	cmp	r6, r3
 80090d8:	da1d      	bge.n	8009116 <atan+0x246>
 80090da:	ee10 0a10 	vmov	r0, s0
 80090de:	4b48      	ldr	r3, [pc, #288]	; (8009200 <atan+0x330>)
 80090e0:	2200      	movs	r2, #0
 80090e2:	4629      	mov	r1, r5
 80090e4:	f7f7 f8d0 	bl	8000288 <__aeabi_dsub>
 80090e8:	4b45      	ldr	r3, [pc, #276]	; (8009200 <atan+0x330>)
 80090ea:	4606      	mov	r6, r0
 80090ec:	460f      	mov	r7, r1
 80090ee:	2200      	movs	r2, #0
 80090f0:	4620      	mov	r0, r4
 80090f2:	4629      	mov	r1, r5
 80090f4:	f7f7 fa80 	bl	80005f8 <__aeabi_dmul>
 80090f8:	4b3e      	ldr	r3, [pc, #248]	; (80091f4 <atan+0x324>)
 80090fa:	2200      	movs	r2, #0
 80090fc:	f7f7 f8c6 	bl	800028c <__adddf3>
 8009100:	4602      	mov	r2, r0
 8009102:	460b      	mov	r3, r1
 8009104:	4630      	mov	r0, r6
 8009106:	4639      	mov	r1, r7
 8009108:	f7f7 fba0 	bl	800084c <__aeabi_ddiv>
 800910c:	f04f 0a02 	mov.w	sl, #2
 8009110:	4604      	mov	r4, r0
 8009112:	460d      	mov	r5, r1
 8009114:	e743      	b.n	8008f9e <atan+0xce>
 8009116:	462b      	mov	r3, r5
 8009118:	ee10 2a10 	vmov	r2, s0
 800911c:	4939      	ldr	r1, [pc, #228]	; (8009204 <atan+0x334>)
 800911e:	2000      	movs	r0, #0
 8009120:	f7f7 fb94 	bl	800084c <__aeabi_ddiv>
 8009124:	f04f 0a03 	mov.w	sl, #3
 8009128:	4604      	mov	r4, r0
 800912a:	460d      	mov	r5, r1
 800912c:	e737      	b.n	8008f9e <atan+0xce>
 800912e:	4b36      	ldr	r3, [pc, #216]	; (8009208 <atan+0x338>)
 8009130:	4e36      	ldr	r6, [pc, #216]	; (800920c <atan+0x33c>)
 8009132:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009136:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800913a:	e9da 2300 	ldrd	r2, r3, [sl]
 800913e:	f7f7 f8a3 	bl	8000288 <__aeabi_dsub>
 8009142:	4622      	mov	r2, r4
 8009144:	462b      	mov	r3, r5
 8009146:	f7f7 f89f 	bl	8000288 <__aeabi_dsub>
 800914a:	4602      	mov	r2, r0
 800914c:	460b      	mov	r3, r1
 800914e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009152:	f7f7 f899 	bl	8000288 <__aeabi_dsub>
 8009156:	f1bb 0f00 	cmp.w	fp, #0
 800915a:	4604      	mov	r4, r0
 800915c:	460d      	mov	r5, r1
 800915e:	f6bf aed6 	bge.w	8008f0e <atan+0x3e>
 8009162:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009166:	461d      	mov	r5, r3
 8009168:	e6d1      	b.n	8008f0e <atan+0x3e>
 800916a:	a51d      	add	r5, pc, #116	; (adr r5, 80091e0 <atan+0x310>)
 800916c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009170:	e6cd      	b.n	8008f0e <atan+0x3e>
 8009172:	bf00      	nop
 8009174:	f3af 8000 	nop.w
 8009178:	54442d18 	.word	0x54442d18
 800917c:	bff921fb 	.word	0xbff921fb
 8009180:	8800759c 	.word	0x8800759c
 8009184:	7e37e43c 	.word	0x7e37e43c
 8009188:	e322da11 	.word	0xe322da11
 800918c:	3f90ad3a 	.word	0x3f90ad3a
 8009190:	24760deb 	.word	0x24760deb
 8009194:	3fa97b4b 	.word	0x3fa97b4b
 8009198:	a0d03d51 	.word	0xa0d03d51
 800919c:	3fb10d66 	.word	0x3fb10d66
 80091a0:	c54c206e 	.word	0xc54c206e
 80091a4:	3fb745cd 	.word	0x3fb745cd
 80091a8:	920083ff 	.word	0x920083ff
 80091ac:	3fc24924 	.word	0x3fc24924
 80091b0:	5555550d 	.word	0x5555550d
 80091b4:	3fd55555 	.word	0x3fd55555
 80091b8:	2c6a6c2f 	.word	0x2c6a6c2f
 80091bc:	bfa2b444 	.word	0xbfa2b444
 80091c0:	52defd9a 	.word	0x52defd9a
 80091c4:	3fadde2d 	.word	0x3fadde2d
 80091c8:	af749a6d 	.word	0xaf749a6d
 80091cc:	3fb3b0f2 	.word	0x3fb3b0f2
 80091d0:	fe231671 	.word	0xfe231671
 80091d4:	3fbc71c6 	.word	0x3fbc71c6
 80091d8:	9998ebc4 	.word	0x9998ebc4
 80091dc:	3fc99999 	.word	0x3fc99999
 80091e0:	54442d18 	.word	0x54442d18
 80091e4:	3ff921fb 	.word	0x3ff921fb
 80091e8:	440fffff 	.word	0x440fffff
 80091ec:	7ff00000 	.word	0x7ff00000
 80091f0:	3fdbffff 	.word	0x3fdbffff
 80091f4:	3ff00000 	.word	0x3ff00000
 80091f8:	3ff2ffff 	.word	0x3ff2ffff
 80091fc:	40038000 	.word	0x40038000
 8009200:	3ff80000 	.word	0x3ff80000
 8009204:	bff00000 	.word	0xbff00000
 8009208:	08009a60 	.word	0x08009a60
 800920c:	08009a40 	.word	0x08009a40

08009210 <fabs>:
 8009210:	ec51 0b10 	vmov	r0, r1, d0
 8009214:	ee10 2a10 	vmov	r2, s0
 8009218:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800921c:	ec43 2b10 	vmov	d0, r2, r3
 8009220:	4770      	bx	lr

08009222 <atan2>:
 8009222:	f000 b82d 	b.w	8009280 <__ieee754_atan2>

08009226 <sqrt>:
 8009226:	b538      	push	{r3, r4, r5, lr}
 8009228:	ed2d 8b02 	vpush	{d8}
 800922c:	ec55 4b10 	vmov	r4, r5, d0
 8009230:	f000 f8f0 	bl	8009414 <__ieee754_sqrt>
 8009234:	4622      	mov	r2, r4
 8009236:	462b      	mov	r3, r5
 8009238:	4620      	mov	r0, r4
 800923a:	4629      	mov	r1, r5
 800923c:	eeb0 8a40 	vmov.f32	s16, s0
 8009240:	eef0 8a60 	vmov.f32	s17, s1
 8009244:	f7f7 fc72 	bl	8000b2c <__aeabi_dcmpun>
 8009248:	b990      	cbnz	r0, 8009270 <sqrt+0x4a>
 800924a:	2200      	movs	r2, #0
 800924c:	2300      	movs	r3, #0
 800924e:	4620      	mov	r0, r4
 8009250:	4629      	mov	r1, r5
 8009252:	f7f7 fc43 	bl	8000adc <__aeabi_dcmplt>
 8009256:	b158      	cbz	r0, 8009270 <sqrt+0x4a>
 8009258:	f7fc ff26 	bl	80060a8 <__errno>
 800925c:	2321      	movs	r3, #33	; 0x21
 800925e:	6003      	str	r3, [r0, #0]
 8009260:	2200      	movs	r2, #0
 8009262:	2300      	movs	r3, #0
 8009264:	4610      	mov	r0, r2
 8009266:	4619      	mov	r1, r3
 8009268:	f7f7 faf0 	bl	800084c <__aeabi_ddiv>
 800926c:	ec41 0b18 	vmov	d8, r0, r1
 8009270:	eeb0 0a48 	vmov.f32	s0, s16
 8009274:	eef0 0a68 	vmov.f32	s1, s17
 8009278:	ecbd 8b02 	vpop	{d8}
 800927c:	bd38      	pop	{r3, r4, r5, pc}
	...

08009280 <__ieee754_atan2>:
 8009280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009284:	ec57 6b11 	vmov	r6, r7, d1
 8009288:	4273      	negs	r3, r6
 800928a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8009410 <__ieee754_atan2+0x190>
 800928e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009292:	4333      	orrs	r3, r6
 8009294:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009298:	4573      	cmp	r3, lr
 800929a:	ec51 0b10 	vmov	r0, r1, d0
 800929e:	ee11 8a10 	vmov	r8, s2
 80092a2:	d80a      	bhi.n	80092ba <__ieee754_atan2+0x3a>
 80092a4:	4244      	negs	r4, r0
 80092a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80092aa:	4304      	orrs	r4, r0
 80092ac:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80092b0:	4574      	cmp	r4, lr
 80092b2:	ee10 9a10 	vmov	r9, s0
 80092b6:	468c      	mov	ip, r1
 80092b8:	d907      	bls.n	80092ca <__ieee754_atan2+0x4a>
 80092ba:	4632      	mov	r2, r6
 80092bc:	463b      	mov	r3, r7
 80092be:	f7f6 ffe5 	bl	800028c <__adddf3>
 80092c2:	ec41 0b10 	vmov	d0, r0, r1
 80092c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092ca:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80092ce:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80092d2:	4334      	orrs	r4, r6
 80092d4:	d103      	bne.n	80092de <__ieee754_atan2+0x5e>
 80092d6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092da:	f7ff bdf9 	b.w	8008ed0 <atan>
 80092de:	17bc      	asrs	r4, r7, #30
 80092e0:	f004 0402 	and.w	r4, r4, #2
 80092e4:	ea53 0909 	orrs.w	r9, r3, r9
 80092e8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80092ec:	d107      	bne.n	80092fe <__ieee754_atan2+0x7e>
 80092ee:	2c02      	cmp	r4, #2
 80092f0:	d060      	beq.n	80093b4 <__ieee754_atan2+0x134>
 80092f2:	2c03      	cmp	r4, #3
 80092f4:	d1e5      	bne.n	80092c2 <__ieee754_atan2+0x42>
 80092f6:	a142      	add	r1, pc, #264	; (adr r1, 8009400 <__ieee754_atan2+0x180>)
 80092f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092fc:	e7e1      	b.n	80092c2 <__ieee754_atan2+0x42>
 80092fe:	ea52 0808 	orrs.w	r8, r2, r8
 8009302:	d106      	bne.n	8009312 <__ieee754_atan2+0x92>
 8009304:	f1bc 0f00 	cmp.w	ip, #0
 8009308:	da5f      	bge.n	80093ca <__ieee754_atan2+0x14a>
 800930a:	a13f      	add	r1, pc, #252	; (adr r1, 8009408 <__ieee754_atan2+0x188>)
 800930c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009310:	e7d7      	b.n	80092c2 <__ieee754_atan2+0x42>
 8009312:	4572      	cmp	r2, lr
 8009314:	d10f      	bne.n	8009336 <__ieee754_atan2+0xb6>
 8009316:	4293      	cmp	r3, r2
 8009318:	f104 34ff 	add.w	r4, r4, #4294967295
 800931c:	d107      	bne.n	800932e <__ieee754_atan2+0xae>
 800931e:	2c02      	cmp	r4, #2
 8009320:	d84c      	bhi.n	80093bc <__ieee754_atan2+0x13c>
 8009322:	4b35      	ldr	r3, [pc, #212]	; (80093f8 <__ieee754_atan2+0x178>)
 8009324:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009328:	e9d4 0100 	ldrd	r0, r1, [r4]
 800932c:	e7c9      	b.n	80092c2 <__ieee754_atan2+0x42>
 800932e:	2c02      	cmp	r4, #2
 8009330:	d848      	bhi.n	80093c4 <__ieee754_atan2+0x144>
 8009332:	4b32      	ldr	r3, [pc, #200]	; (80093fc <__ieee754_atan2+0x17c>)
 8009334:	e7f6      	b.n	8009324 <__ieee754_atan2+0xa4>
 8009336:	4573      	cmp	r3, lr
 8009338:	d0e4      	beq.n	8009304 <__ieee754_atan2+0x84>
 800933a:	1a9b      	subs	r3, r3, r2
 800933c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009340:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009344:	da1e      	bge.n	8009384 <__ieee754_atan2+0x104>
 8009346:	2f00      	cmp	r7, #0
 8009348:	da01      	bge.n	800934e <__ieee754_atan2+0xce>
 800934a:	323c      	adds	r2, #60	; 0x3c
 800934c:	db1e      	blt.n	800938c <__ieee754_atan2+0x10c>
 800934e:	4632      	mov	r2, r6
 8009350:	463b      	mov	r3, r7
 8009352:	f7f7 fa7b 	bl	800084c <__aeabi_ddiv>
 8009356:	ec41 0b10 	vmov	d0, r0, r1
 800935a:	f7ff ff59 	bl	8009210 <fabs>
 800935e:	f7ff fdb7 	bl	8008ed0 <atan>
 8009362:	ec51 0b10 	vmov	r0, r1, d0
 8009366:	2c01      	cmp	r4, #1
 8009368:	d013      	beq.n	8009392 <__ieee754_atan2+0x112>
 800936a:	2c02      	cmp	r4, #2
 800936c:	d015      	beq.n	800939a <__ieee754_atan2+0x11a>
 800936e:	2c00      	cmp	r4, #0
 8009370:	d0a7      	beq.n	80092c2 <__ieee754_atan2+0x42>
 8009372:	a319      	add	r3, pc, #100	; (adr r3, 80093d8 <__ieee754_atan2+0x158>)
 8009374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009378:	f7f6 ff86 	bl	8000288 <__aeabi_dsub>
 800937c:	a318      	add	r3, pc, #96	; (adr r3, 80093e0 <__ieee754_atan2+0x160>)
 800937e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009382:	e014      	b.n	80093ae <__ieee754_atan2+0x12e>
 8009384:	a118      	add	r1, pc, #96	; (adr r1, 80093e8 <__ieee754_atan2+0x168>)
 8009386:	e9d1 0100 	ldrd	r0, r1, [r1]
 800938a:	e7ec      	b.n	8009366 <__ieee754_atan2+0xe6>
 800938c:	2000      	movs	r0, #0
 800938e:	2100      	movs	r1, #0
 8009390:	e7e9      	b.n	8009366 <__ieee754_atan2+0xe6>
 8009392:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009396:	4619      	mov	r1, r3
 8009398:	e793      	b.n	80092c2 <__ieee754_atan2+0x42>
 800939a:	a30f      	add	r3, pc, #60	; (adr r3, 80093d8 <__ieee754_atan2+0x158>)
 800939c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a0:	f7f6 ff72 	bl	8000288 <__aeabi_dsub>
 80093a4:	4602      	mov	r2, r0
 80093a6:	460b      	mov	r3, r1
 80093a8:	a10d      	add	r1, pc, #52	; (adr r1, 80093e0 <__ieee754_atan2+0x160>)
 80093aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093ae:	f7f6 ff6b 	bl	8000288 <__aeabi_dsub>
 80093b2:	e786      	b.n	80092c2 <__ieee754_atan2+0x42>
 80093b4:	a10a      	add	r1, pc, #40	; (adr r1, 80093e0 <__ieee754_atan2+0x160>)
 80093b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093ba:	e782      	b.n	80092c2 <__ieee754_atan2+0x42>
 80093bc:	a10c      	add	r1, pc, #48	; (adr r1, 80093f0 <__ieee754_atan2+0x170>)
 80093be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093c2:	e77e      	b.n	80092c2 <__ieee754_atan2+0x42>
 80093c4:	2000      	movs	r0, #0
 80093c6:	2100      	movs	r1, #0
 80093c8:	e77b      	b.n	80092c2 <__ieee754_atan2+0x42>
 80093ca:	a107      	add	r1, pc, #28	; (adr r1, 80093e8 <__ieee754_atan2+0x168>)
 80093cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093d0:	e777      	b.n	80092c2 <__ieee754_atan2+0x42>
 80093d2:	bf00      	nop
 80093d4:	f3af 8000 	nop.w
 80093d8:	33145c07 	.word	0x33145c07
 80093dc:	3ca1a626 	.word	0x3ca1a626
 80093e0:	54442d18 	.word	0x54442d18
 80093e4:	400921fb 	.word	0x400921fb
 80093e8:	54442d18 	.word	0x54442d18
 80093ec:	3ff921fb 	.word	0x3ff921fb
 80093f0:	54442d18 	.word	0x54442d18
 80093f4:	3fe921fb 	.word	0x3fe921fb
 80093f8:	08009a80 	.word	0x08009a80
 80093fc:	08009a98 	.word	0x08009a98
 8009400:	54442d18 	.word	0x54442d18
 8009404:	c00921fb 	.word	0xc00921fb
 8009408:	54442d18 	.word	0x54442d18
 800940c:	bff921fb 	.word	0xbff921fb
 8009410:	7ff00000 	.word	0x7ff00000

08009414 <__ieee754_sqrt>:
 8009414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009418:	ec55 4b10 	vmov	r4, r5, d0
 800941c:	4e55      	ldr	r6, [pc, #340]	; (8009574 <__ieee754_sqrt+0x160>)
 800941e:	43ae      	bics	r6, r5
 8009420:	ee10 0a10 	vmov	r0, s0
 8009424:	ee10 3a10 	vmov	r3, s0
 8009428:	462a      	mov	r2, r5
 800942a:	4629      	mov	r1, r5
 800942c:	d110      	bne.n	8009450 <__ieee754_sqrt+0x3c>
 800942e:	ee10 2a10 	vmov	r2, s0
 8009432:	462b      	mov	r3, r5
 8009434:	f7f7 f8e0 	bl	80005f8 <__aeabi_dmul>
 8009438:	4602      	mov	r2, r0
 800943a:	460b      	mov	r3, r1
 800943c:	4620      	mov	r0, r4
 800943e:	4629      	mov	r1, r5
 8009440:	f7f6 ff24 	bl	800028c <__adddf3>
 8009444:	4604      	mov	r4, r0
 8009446:	460d      	mov	r5, r1
 8009448:	ec45 4b10 	vmov	d0, r4, r5
 800944c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009450:	2d00      	cmp	r5, #0
 8009452:	dc10      	bgt.n	8009476 <__ieee754_sqrt+0x62>
 8009454:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009458:	4330      	orrs	r0, r6
 800945a:	d0f5      	beq.n	8009448 <__ieee754_sqrt+0x34>
 800945c:	b15d      	cbz	r5, 8009476 <__ieee754_sqrt+0x62>
 800945e:	ee10 2a10 	vmov	r2, s0
 8009462:	462b      	mov	r3, r5
 8009464:	ee10 0a10 	vmov	r0, s0
 8009468:	f7f6 ff0e 	bl	8000288 <__aeabi_dsub>
 800946c:	4602      	mov	r2, r0
 800946e:	460b      	mov	r3, r1
 8009470:	f7f7 f9ec 	bl	800084c <__aeabi_ddiv>
 8009474:	e7e6      	b.n	8009444 <__ieee754_sqrt+0x30>
 8009476:	1512      	asrs	r2, r2, #20
 8009478:	d074      	beq.n	8009564 <__ieee754_sqrt+0x150>
 800947a:	07d4      	lsls	r4, r2, #31
 800947c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009480:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009484:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009488:	bf5e      	ittt	pl
 800948a:	0fda      	lsrpl	r2, r3, #31
 800948c:	005b      	lslpl	r3, r3, #1
 800948e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009492:	2400      	movs	r4, #0
 8009494:	0fda      	lsrs	r2, r3, #31
 8009496:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800949a:	107f      	asrs	r7, r7, #1
 800949c:	005b      	lsls	r3, r3, #1
 800949e:	2516      	movs	r5, #22
 80094a0:	4620      	mov	r0, r4
 80094a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80094a6:	1886      	adds	r6, r0, r2
 80094a8:	428e      	cmp	r6, r1
 80094aa:	bfde      	ittt	le
 80094ac:	1b89      	suble	r1, r1, r6
 80094ae:	18b0      	addle	r0, r6, r2
 80094b0:	18a4      	addle	r4, r4, r2
 80094b2:	0049      	lsls	r1, r1, #1
 80094b4:	3d01      	subs	r5, #1
 80094b6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80094ba:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80094be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80094c2:	d1f0      	bne.n	80094a6 <__ieee754_sqrt+0x92>
 80094c4:	462a      	mov	r2, r5
 80094c6:	f04f 0e20 	mov.w	lr, #32
 80094ca:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80094ce:	4281      	cmp	r1, r0
 80094d0:	eb06 0c05 	add.w	ip, r6, r5
 80094d4:	dc02      	bgt.n	80094dc <__ieee754_sqrt+0xc8>
 80094d6:	d113      	bne.n	8009500 <__ieee754_sqrt+0xec>
 80094d8:	459c      	cmp	ip, r3
 80094da:	d811      	bhi.n	8009500 <__ieee754_sqrt+0xec>
 80094dc:	f1bc 0f00 	cmp.w	ip, #0
 80094e0:	eb0c 0506 	add.w	r5, ip, r6
 80094e4:	da43      	bge.n	800956e <__ieee754_sqrt+0x15a>
 80094e6:	2d00      	cmp	r5, #0
 80094e8:	db41      	blt.n	800956e <__ieee754_sqrt+0x15a>
 80094ea:	f100 0801 	add.w	r8, r0, #1
 80094ee:	1a09      	subs	r1, r1, r0
 80094f0:	459c      	cmp	ip, r3
 80094f2:	bf88      	it	hi
 80094f4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80094f8:	eba3 030c 	sub.w	r3, r3, ip
 80094fc:	4432      	add	r2, r6
 80094fe:	4640      	mov	r0, r8
 8009500:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009504:	f1be 0e01 	subs.w	lr, lr, #1
 8009508:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800950c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009510:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009514:	d1db      	bne.n	80094ce <__ieee754_sqrt+0xba>
 8009516:	430b      	orrs	r3, r1
 8009518:	d006      	beq.n	8009528 <__ieee754_sqrt+0x114>
 800951a:	1c50      	adds	r0, r2, #1
 800951c:	bf13      	iteet	ne
 800951e:	3201      	addne	r2, #1
 8009520:	3401      	addeq	r4, #1
 8009522:	4672      	moveq	r2, lr
 8009524:	f022 0201 	bicne.w	r2, r2, #1
 8009528:	1063      	asrs	r3, r4, #1
 800952a:	0852      	lsrs	r2, r2, #1
 800952c:	07e1      	lsls	r1, r4, #31
 800952e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009532:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009536:	bf48      	it	mi
 8009538:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800953c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009540:	4614      	mov	r4, r2
 8009542:	e781      	b.n	8009448 <__ieee754_sqrt+0x34>
 8009544:	0ad9      	lsrs	r1, r3, #11
 8009546:	3815      	subs	r0, #21
 8009548:	055b      	lsls	r3, r3, #21
 800954a:	2900      	cmp	r1, #0
 800954c:	d0fa      	beq.n	8009544 <__ieee754_sqrt+0x130>
 800954e:	02cd      	lsls	r5, r1, #11
 8009550:	d50a      	bpl.n	8009568 <__ieee754_sqrt+0x154>
 8009552:	f1c2 0420 	rsb	r4, r2, #32
 8009556:	fa23 f404 	lsr.w	r4, r3, r4
 800955a:	1e55      	subs	r5, r2, #1
 800955c:	4093      	lsls	r3, r2
 800955e:	4321      	orrs	r1, r4
 8009560:	1b42      	subs	r2, r0, r5
 8009562:	e78a      	b.n	800947a <__ieee754_sqrt+0x66>
 8009564:	4610      	mov	r0, r2
 8009566:	e7f0      	b.n	800954a <__ieee754_sqrt+0x136>
 8009568:	0049      	lsls	r1, r1, #1
 800956a:	3201      	adds	r2, #1
 800956c:	e7ef      	b.n	800954e <__ieee754_sqrt+0x13a>
 800956e:	4680      	mov	r8, r0
 8009570:	e7bd      	b.n	80094ee <__ieee754_sqrt+0xda>
 8009572:	bf00      	nop
 8009574:	7ff00000 	.word	0x7ff00000

08009578 <_init>:
 8009578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957a:	bf00      	nop
 800957c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800957e:	bc08      	pop	{r3}
 8009580:	469e      	mov	lr, r3
 8009582:	4770      	bx	lr

08009584 <_fini>:
 8009584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009586:	bf00      	nop
 8009588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800958a:	bc08      	pop	{r3}
 800958c:	469e      	mov	lr, r3
 800958e:	4770      	bx	lr
